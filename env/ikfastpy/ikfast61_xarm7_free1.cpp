/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-08-10 16:32:15.213052
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKsin(j[1]);
x3=IKsin(j[3]);
x4=IKcos(j[2]);
x5=IKsin(j[0]);
x6=IKcos(j[1]);
x7=IKsin(j[2]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKcos(j[5]);
x13=IKsin(j[5]);
x14=((0.097)*x2);
x15=((0.0775)*x4);
x16=((0.3425)*x5);
x17=((1.0)*x1);
x18=((1.0)*x5);
x19=((0.3425)*x4);
x20=((1.0)*x2);
x21=((0.0525)*x4);
x22=((0.0775)*x5);
x23=((1.0)*x4);
x24=((0.293)*x2);
x25=((0.076)*x8);
x26=(x7*x9);
x27=(x1*x6);
x28=(x5*x6);
x29=(x1*x2);
x30=(x0*x7);
x31=((-1.0)*x12);
x32=(x3*x6);
x33=(x2*x3);
x34=((-1.0)*x13);
x35=(x0*x6);
x36=((-0.097)*x8);
x37=(x0*x33);
x38=(x17*x2*x4);
x39=(x20*x26);
x40=((((-1.0)*x18*x7))+((x35*x4)));
x41=(((x30*x6))+((x4*x5)));
x42=(x30+((x28*x4)));
x43=((((-1.0)*x0*x23))+((x28*x7)));
x44=((((-1.0)*x38))+x32);
x45=(x41*x8);
x46=(x3*x40);
x47=((((-1.0)*x20*x3*x4))+(((-1.0)*x17*x6)));
x48=(x41*x9);
x49=(x1*x40);
x50=(x3*x42);
x51=(x44*x8);
x52=(x43*x9);
x53=(x13*x47);
x54=(x37+x49);
x55=((((-1.0)*x0*x17*x2))+x46);
x56=((((-1.0)*x17*x2*x5))+x50);
x57=(((x33*x5))+((x1*x42)));
x58=((((-1.0)*x39))+x51);
x59=((((-1.0)*x20*x7*x8))+((x9*(((((-1.0)*x32))+x38)))));
x60=(x57*x8);
x61=(x12*x58);
x62=(x54*x8);
x63=(x48+x62);
x64=(x52+x60);
x65=(((x9*(((((-1.0)*x18*x33))+(((-1.0)*x17*x42))))))+((x43*x8)));
eerot[0]=(((x10*((((x12*x63))+((x13*x55))))))+((x11*((x45+((x9*(((((-1.0)*x37))+(((-1.0)*x49)))))))))));
IkReal x66=((1.0)*x0);
eerot[1]=(((x11*((((x31*x63))+((x34*((x46+(((-1.0)*x29*x66))))))))))+((x10*((((x9*(((((-1.0)*x20*x3*x66))+(((-1.0)*x17*x40))))))+x45)))));
eerot[2]=(((x13*(((((-1.0)*x48))+(((-1.0)*x62))))))+((x12*x55)));
IkReal x67=((1.0)*x7);
IkReal x68=(x0*x29);
eetrans[0]=(((x0*x24))+((x3*(((((-1.0)*x16*x67))+((x19*x35))))))+((x13*((((x36*x54))+(((-0.097)*x48))))))+((x13*(((((0.076)*x46))+(((-0.076)*x68))))))+((x21*x35))+((x12*(((((-0.097)*x68))+(((0.097)*x46))))))+((x1*((((x15*x35))+(((-1.0)*x22*x67))))))+(((-0.3425)*x68))+(((-0.0525)*x5*x7))+(((0.0775)*x37))+((x12*((((x25*x54))+(((0.076)*x48)))))));
eerot[3]=(((x11*x65))+((x10*((((x12*x64))+((x13*x56)))))));
eerot[4]=(((x10*x65))+((x11*((((x34*x56))+((x31*x64)))))));
eerot[5]=(((x12*x56))+((x13*(((((-1.0)*x52))+(((-1.0)*x60)))))));
eetrans[1]=(((x21*x28))+((x12*(((((0.076)*x52))+((x25*x57))))))+((x13*((((x36*x57))+(((-0.097)*x52))))))+(((-1.0)*x16*x29))+((x22*x33))+((x1*(((((0.0775)*x30))+((x15*x28))))))+((x12*(((((-1.0)*x1*x14*x5))+(((0.097)*x50))))))+((x13*(((((0.076)*x50))+(((-0.076)*x29*x5))))))+((x3*(((((0.3425)*x30))+((x16*x4*x6))))))+(((0.0525)*x30))+((x24*x5)));
eerot[6]=(((x10*((x53+x61))))+((x11*x59)));
eerot[7]=(((x10*x59))+((x11*(((((-1.0)*x53))+(((-1.0)*x61)))))));
eerot[8]=(((x13*((x39+(((-1.0)*x51))))))+((x12*x47)));
eetrans[2]=((0.267)+((x12*((((x25*x44))+(((-0.076)*x2*x26))))))+(((-1.0)*x15*x29))+((x13*((((x36*x44))+((x14*x26))))))+(((-1.0)*x2*x21))+(((-1.0)*x19*x33))+(((0.0775)*x32))+(((-0.3425)*x27))+((x13*(((((-0.076)*x27))+(((-0.076)*x33*x4))))))+(((0.293)*x6))+((x12*(((((-0.097)*x27))+(((-1.0)*x14*x3*x4)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j1,cj1,sj1,htj1,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j1=pfree[0]; cj1=cos(pfree[0]); sj1=sin(pfree[0]), htj1=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.097)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.097)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.267)+(((-0.097)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x69=((1.0)*px);
IkReal x70=((1.0)*pz);
IkReal x71=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x71))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x70)));
rxp0_2=((((-1.0)*r10*x69))+((py*r00)));
rxp1_0=((((-1.0)*r21*x71))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x70)));
rxp1_2=((((-1.0)*r11*x69))+((py*r01)));
rxp2_0=((((-1.0)*r22*x71))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x70)));
rxp2_2=((((-1.0)*r12*x69))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
CheckValue<IkReal> x346=IKPowWithIntegerCheck(sj1,-1);
if(!x346.valid){
continue;
}
IkReal x72=x346.value;
IkReal x73=((84940000.0)*pz);
IkReal x74=((6455440.0)*r20);
IkReal x75=((3400593.0)*cj1);
IkReal x76=((18848000.0)*rxp1_2);
IkReal x77=((3587475.0)*r22);
IkReal x78=((0.152)*rxp1_2);
IkReal x79=((0.02893125)*r22);
IkReal x80=((0.685)*pz);
IkReal x81=((0.05206)*r20);
IkReal x82=((0.0274241370967742)*cj1);
IkReal x83=sj1*sj1;
IkReal x84=cj1*cj1;
IkReal x85=((178144.0)*r21);
IkReal x86=((2344000.0)*rxp2_2);
IkReal x87=((11134.0)*r20);
IkReal x88=(pp*r02);
IkReal x89=((0.685)*px);
IkReal x90=((0.05206)*r00);
IkReal x91=((0.0274241370967742)*sj1);
IkReal x92=((0.02893125)*r02);
IkReal x93=((0.152)*rxp1_0);
IkReal x94=((4373040.0)*cj1);
IkReal x95=((5019923.0)*r20);
IkReal x96=((18848000.0)*pz);
IkReal x97=((0.304)*pz);
IkReal x98=((0.0705329032258065)*cj1);
IkReal x99=((0.0809665)*r20);
IkReal x100=((2344000.0)*rxp0_2);
IkReal x101=((2344000.0)*rxp1_2);
IkReal x102=((0.304)*px);
IkReal x103=((0.0809665)*r00);
IkReal x104=((0.0705329032258065)*sj1);
IkReal x105=((403465.0)*r21);
IkReal x106=((1178000.0)*rxp0_2);
IkReal x107=((0.304)*rxp0_2);
IkReal x108=((0.10412)*r21);
IkReal x109=(pp*r22);
IkReal x110=((0.10412)*r01);
IkReal x111=((0.304)*rxp0_0);
IkReal x112=(cj1*r22);
IkReal x113=((124000000.0)*pp);
IkReal x114=(r00*sj1);
IkReal x115=(cj1*rxp1_2);
IkReal x116=((2.0)*npz);
IkReal x117=((0.008)*x72);
IkReal x118=(rxp2_0*sj1);
IkReal x119=((2.344)*rxp1_1);
IkReal x120=(r10*sj1);
IkReal x121=((1.37619729164373e-8)*x72);
IkReal x122=(rxp0_1*sj1);
IkReal x123=((0.089072)*cj1);
IkReal x124=((1.0e-6)*x72);
IkReal x125=((2.75239458328746e-8)*x72);
IkReal x126=((5.0e-7)*x72);
IkReal x127=((1.172)*cj1);
IkReal x128=(px*sj1);
IkReal x129=(rxp1_0*sj1);
IkReal x130=((8.06451612903226e-9)*x72);
IkReal x131=((4.40383133325994e-7)*x72);
IkReal x132=(cj1*npx);
IkReal x133=(npx*sj1);
IkReal x134=((2.5e-7)*x72);
IkReal x135=(rxp0_0*sj1);
IkReal x136=((12768000.0)*npx);
IkReal x137=(cj1*npy);
IkReal x138=(npy*pz);
IkReal x139=((248000000.0)*pz);
IkReal x140=((8.0e-6)*x72);
IkReal x141=((0.044536)*r11);
IkReal x142=((72664000.0)*sj1);
IkReal x143=(npy*sj1);
IkReal x144=(cj1*rxp2_2);
IkReal x145=((2344000.0)*cj1);
IkReal x146=(r11*sj1);
IkReal x147=((4.0)*npx);
IkReal x148=((1.29032258064516e-6)*x72);
IkReal x149=((2.0)*pp);
IkReal x150=(r02*sj1);
IkReal x151=(cj1*npz);
IkReal x152=(cj1*r21);
IkReal x153=((159600.0)*npy);
IkReal x154=((4.0)*pp);
IkReal x155=((0.67741935483871)*pp);
IkReal x156=(r01*sj1);
IkReal x157=(npz*sj1);
IkReal x158=((8000000.0)*py);
IkReal x159=(cj1*r20);
IkReal x160=(cj1*pz);
IkReal x161=(py*sj1);
IkReal x162=((0.004)*x72);
IkReal x163=((84000000.0)*pp);
IkReal x164=(cj1*rxp0_2);
IkReal x165=((4000000.0)*pp);
IkReal x166=((1.61290322580645e-8)*x72);
IkReal x167=(r12*sj1);
IkReal x168=((0.586)*rxp2_1);
IkReal x169=(cj1*x163);
IkReal x170=((12768000.0)*x132);
IkReal x171=((124000000.0)*x109);
IkReal x172=((57540000.0)*x151);
IkReal x173=(npz*x139);
IkReal x174=(rxp2_1*x142);
IkReal x175=((5522464.0)*x146);
IkReal x176=((19.0)*x156);
IkReal x177=((250.0)*x118);
IkReal x178=((19.0)*x152);
IkReal x179=((250.0)*x144);
IkReal x180=((0.044536)*x156);
IkReal x181=((0.044536)*x152);
IkReal x182=((0.586)*x118);
IkReal x183=((0.586)*x144);
IkReal x184=(pz*x116);
IkReal x185=((0.464032258064516)*x151);
IkReal x186=(sj1*x141);
IkReal x187=(cj1*x155);
IkReal x188=((1.0)*x109);
IkReal x189=(sj1*x168);
IkReal x190=((0.102967741935484)*x132);
IkReal x191=(cj1*x76);
IkReal x192=((18848000.0)*x129);
IkReal x193=(cj1*x77);
IkReal x194=((3587475.0)*x150);
IkReal x195=(cj1*x75);
IkReal x196=((6455440.0)*x114);
IkReal x197=(cj1*x74);
IkReal x198=((84940000.0)*x128);
IkReal x199=((3400593.0)*x83);
IkReal x200=(cj1*x73);
IkReal x201=((115725.0)*x167);
IkReal x202=((608000.0)*rxp1_1*sj1);
IkReal x203=((208240.0)*x120);
IkReal x204=((2740000.0)*x161);
IkReal x205=((13015.0)*x146);
IkReal x206=((38000.0)*x122);
IkReal x207=((0.464032258064516)*x157);
IkReal x208=(cj1*x141);
IkReal x209=(cj1*x168);
IkReal x210=((0.102967741935484)*x133);
IkReal x211=(sj1*x155);
IkReal x212=(px*x116);
IkReal x213=((57540000.0)*x132);
IkReal x214=(npx*x139);
IkReal x215=((72664000.0)*x122);
IkReal x216=(r20*x113);
IkReal x217=((2.0)*x164);
IkReal x218=((2.0)*x135);
IkReal x219=(r20*x149);
IkReal x220=((1.172)*x122);
IkReal x221=(pz*x147);
IkReal x222=((0.928064516129032)*x132);
IkReal x223=((4373040.0)*x84);
IkReal x224=(cj1*x96);
IkReal x225=(cj1*x95);
IkReal x226=((4373040.0)*x83);
IkReal x227=((18848000.0)*x128);
IkReal x228=((5019923.0)*x114);
IkReal x229=((608000.0)*x161);
IkReal x230=((161933.0)*x120);
IkReal x231=((161933.0)*x146);
IkReal x232=(px*x147);
IkReal x233=((0.928064516129032)*x133);
IkReal x234=(r00*x149);
IkReal x235=(rxp0_1*x127);
IkReal x236=((798000.0)*x137);
IkReal x237=((345154.0)*x120);
IkReal x238=((19.0)*x114);
IkReal x239=((19.0)*x159);
IkReal x240=((0.205935483870968)*x137);
IkReal x241=((0.089072)*x120);
IkReal x242=((235600.0)*x164);
IkReal x243=((235600.0)*x135);
IkReal x244=((80693.0)*x152);
IkReal x245=((80693.0)*x156);
IkReal x246=(r10*x123);
IkReal x247=((0.205935483870968)*x143);
IkReal x248=((1.0)*x88);
IkReal x249=((248000000.0)*x128);
IkReal x250=((57540000.0)*x84);
IkReal x251=((57540000.0)*x83);
IkReal x252=(x139*x151);
IkReal x253=(npz*x251);
IkReal x254=(npz*x249);
IkReal x255=(npz*x250);
IkReal x256=(x163*x83);
IkReal x257=(x163*x84);
IkReal x258=(cj1*x171);
IkReal x259=(x136*x83);
IkReal x260=((124000000.0)*sj1*x88);
IkReal x261=(x136*x84);
IkReal x262=(x157*x158);
IkReal x263=(x165*x167);
IkReal x264=(x118*x145);
IkReal x265=((178144.0)*cj1*x156);
IkReal x266=(x84*x86);
IkReal x267=(x84*x85);
IkReal x268=(x113*x159);
IkReal x269=(x113*x114);
IkReal x270=(x132*x139);
IkReal x271=(npx*x249);
IkReal x272=(npx*x250);
IkReal x273=(npx*x251);
IkReal x274=(x120*x165);
IkReal x275=(x133*x158);
IkReal x276=(x146*x165);
IkReal x277=(x143*x158);
IkReal x278=(x135*x145);
IkReal x279=(x100*x84);
IkReal x280=(x153*x84);
IkReal x281=(x153*x83);
IkReal x282=(x84*x87);
IkReal x283=((11134.0)*cj1*x114);
IkReal x284=(x94+x96);
IkReal x285=(x90+x93);
IkReal x286=(x98+x97);
IkReal x287=(x100+x229);
IkReal x288=(x190+x81);
IkReal x289=(x175+x76);
IkReal x290=(x208+x90);
IkReal x291=(x202+x85);
IkReal x292=(x108+x240);
IkReal x293=(x210+x93);
IkReal x294=(x203+x85);
IkReal x295=(x170+x74);
IkReal x296=(x103+x232);
IkReal x297=(x189+x78);
IkReal x298=(x106+x237);
IkReal x299=(x105+x236);
IkReal x300=((((1.172)*x135))+((rxp0_2*x127)));
IkReal x301=(x179+x176);
IkReal x302=(x178+x177);
IkReal x303=(x179+x178);
IkReal x304=(x177+x176);
IkReal x305=(x182+x183);
IkReal x306=(x180+x181);
IkReal x307=((((0.089072)*x114))+((r20*x123)));
IkReal x308=(x186+x189);
IkReal x309=(x206+x205);
IkReal x310=(x219+x220);
IkReal x311=(x192+x191);
IkReal x312=(x243+x242);
IkReal x313=(x210+x208);
IkReal x314=(x169+x75+x73);
IkReal x315=(x187+x82+x80);
IkReal x316=(x230+x275);
IkReal x317=(x231+x277);
IkReal x318=(x204+x263);
IkReal x319=(x203+x263);
IkReal x320=(x212+x89+x92);
IkReal x321=(x171+x295);
IkReal x322=(x283+x282);
IkReal x323=(x269+x268);
IkReal x324=(x258+x260);
IkReal x325=(x278+x279);
IkReal x326=(x221+x222+x99);
IkReal x327=(x233+x234+x235);
IkReal x328=(x201+x262+x86);
IkReal x329=(x211+x212+x91+x92);
IkReal x330=(x207+x209+x88+x89);
IkReal x331=(x184+x185+x79+x78);
IkReal x332=(x184+x185+x186+x79);
IkReal x333=(x213+x214+x215+x95);
IkReal x334=(x202+x265+x267);
IkReal x335=(x173+x172+x174+x77);
IkReal x336=(x306+x305);
IkReal x337=(x328+x204);
IkReal x338=(x223+x224+x227+x226);
IkReal x339=(x197+x196+x259+x261);
IkReal x340=(x245+x244+x281+x280);
IkReal x341=(x211+x207+x209+x248+x91);
IkReal x342=(x201+x264+x266+x262);
IkReal x343=(x199+x198+x195+x256+x257+x200);
IkReal x344=(x228+x225+x272+x273+x270+x271);
IkReal x345=(x193+x194+x254+x255+x252+x253);
op[0]=(x121*(((((-1.0)*x295))+x171+x314+x289+(((-1.0)*x335)))));
op[1]=(x162*((x302+(((-1.0)*x301)))));
op[2]=(x131*((x298+x299)));
op[3]=(x117*(((((-1.0)*x238))+x239)));
op[4]=(x121*((x321+x314+(((-1.0)*x335))+(((-1.0)*x289)))));
op[5]=(x162*((x304+(((-1.0)*x303)))));
op[6]=(x306+(((-1.0)*x305)));
op[7]=((((-1.0)*x188))+(((-1.0)*x297))+x332+x288+(((-1.0)*x315)));
op[8]=x307;
op[9]=((((-1.0)*x107))+(((-1.0)*x292))+x241);
op[10]=((-1.0)*x336);
op[11]=((((-1.0)*x188))+x331+(((-1.0)*x315))+(((-1.0)*x288))+(((-1.0)*x308)));
op[12]=(x130*(((((-1.0)*x324))+x339+x345+(((-1.0)*x311))+(((-1.0)*x343)))));
op[13]=(x134*(((((-1.0)*x291))+x328+x203+(((-1.0)*x318)))));
op[14]=(x148*(((((-1.0)*x312))+(((-1.0)*x340)))));
op[15]=(x140*(((((-1.0)*x87))+(((-1.0)*x309)))));
op[16]=(x130*(((((-1.0)*x324))+x311+x345+(((-1.0)*x339))+(((-1.0)*x343)))));
op[17]=(x134*(((((-1.0)*x203))+x328+x291+(((-1.0)*x318)))));
op[18]=(x134*((x342+x294+(((-1.0)*x318))+(((-1.0)*x334))+(((-1.0)*x86)))));
op[19]=((((-1.0)*x290))+(((-1.0)*x329))+x330+x293);
op[20]=(x140*(((((-1.0)*x322))+x87+(((-1.0)*x309)))));
op[21]=(x111+x110+(((-1.0)*x246))+(((-1.0)*x247)));
op[22]=(x134*(((((-1.0)*x294))+x334+x342+(((-1.0)*x318))+(((-1.0)*x86)))));
op[23]=((((-1.0)*x293))+(((-1.0)*x329))+x330+x290);
op[24]=(x125*((x216+x284+(((-1.0)*x333)))));
op[25]=(x72*((x218+(((-1.0)*x217)))));
op[26]=((5.50478916657492e-8)*x72*((((rxp1_1*x142))+(((-1.0)*r21*x113))+(((248000000.0)*x138))+(((57540000.0)*x137))+(((5019923.0)*r21)))));
op[27]=(x72*(((((4.0)*x115))+(((-4.0)*x129)))));
op[28]=(x125*((x333+x284+(((-1.0)*x216)))));
op[29]=(x72*((x217+(((-1.0)*x218)))));
op[30]=((-1.0)*x300);
op[31]=(x326+(((-1.0)*x310))+(((-1.0)*x286)));
op[32]=((((2.344)*x129))+(((2.344)*x115)));
op[33]=(((sj1*x119))+(((-1.85612903225806)*x137))+(((-0.161933)*r21))+((r21*x154))+(((-8.0)*x138)));
op[34]=x300;
op[35]=((((-1.0)*x326))+x310+(((-1.0)*x286)));
op[36]=(x166*(((((-1.0)*x323))+x344+(((-1.0)*x338)))));
op[37]=(x126*((x100+x316+(((-1.0)*x274))+(((-1.0)*x229)))));
op[38]=((3.2258064516129e-8)*x72*(((((-1.0)*npy*x250))+(((-1.0)*npy*x251))+(((-1.0)*npy*x249))+((x113*x152))+((x113*x156))+(((-1.0)*x137*x139))+(((-5019923.0)*x152))+(((-5019923.0)*x156)))));
op[39]=(x124*(((((-1.0)*x101))+x276+(((-1.0)*x317)))));
op[40]=(x166*((x323+(((-1.0)*x338))+(((-1.0)*x344)))));
op[41]=(x126*((x274+(((-1.0)*x316))+(((-1.0)*x287)))));
op[42]=(x126*((x325+x316+(((-1.0)*x274))+(((-1.0)*x287)))));
op[43]=((((-1.0)*x104))+(((-1.0)*x296))+x102+x327);
op[44]=(x124*(((((-1.0)*x129*x145))+x101+x276+(((-1.0)*x317))+(((-1.0)*x101*x84)))));
op[45]=((((-1.0)*cj1*x119))+(((0.161933)*r01))+(((-1.85612903225806)*x143))+(((-1.0)*r01*x154))+(((8.0)*npy*px)));
op[46]=(x126*(((((-1.0)*x325))+x100+x274+(((-1.0)*x316))+(((-1.0)*x229)))));
op[47]=((((-1.0)*x104))+(((-1.0)*x327))+x102+x296);
op[48]=(x121*(((((-1.0)*x321))+x335+x314+(((-1.0)*x289)))));
op[49]=(x162*((x301+(((-1.0)*x302)))));
op[50]=(x131*(((((-1.0)*x298))+x299)));
op[51]=(x117*(((((-1.0)*x239))+x238)));
op[52]=(x121*(((((-1.0)*x171))+x335+x314+x295+x289)));
op[53]=(x162*((x303+(((-1.0)*x304)))));
op[54]=(x305+(((-1.0)*x306)));
op[55]=(x109+x297+x288+(((-1.0)*x315))+(((-1.0)*x332)));
op[56]=((-1.0)*x307);
op[57]=((((-1.0)*x292))+x107+(((-1.0)*x241)));
op[58]=x336;
op[59]=(x109+x308+(((-1.0)*x315))+(((-1.0)*x331))+(((-1.0)*x288)));
op[60]=(x130*((x339+x324+x311+(((-1.0)*x343))+(((-1.0)*x345)))));
op[61]=(x134*((x319+x291+(((-1.0)*x337)))));
op[62]=(x148*((x312+(((-1.0)*x340)))));
op[63]=(x140*(((((-1.0)*x205))+x206+x87)));
op[64]=(x130*((x324+(((-1.0)*x311))+(((-1.0)*x339))+(((-1.0)*x343))+(((-1.0)*x345)))));
op[65]=(x134*(((((-1.0)*x291))+(((-1.0)*x203))+x263+(((-1.0)*x337)))));
op[66]=(x134*(((((-1.0)*x204))+x334+x319+x86+(((-1.0)*x85))+(((-1.0)*x342)))));
op[67]=(x320+x313+(((-1.0)*x285))+(((-1.0)*x341)));
op[68]=(x140*(((((-1.0)*x205))+x322+x206+(((-1.0)*x87)))));
op[69]=((((-1.0)*x111))+x110+x246+(((-1.0)*x247)));
op[70]=(x134*(((((-1.0)*x203))+(((-1.0)*x204))+x263+x86+x85+(((-1.0)*x334))+(((-1.0)*x342)))));
op[71]=(x320+x285+(((-1.0)*x313))+(((-1.0)*x341)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j5array[16], cj5array[16], sj5array[16], j6array[16], cj6array[16], sj6array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ij5 += 3)
{
IkReal htj5 = zeror[ij5+0], htj6 = zeror[ij5+1], htj0 = zeror[ij5+2];
if(isnan(htj5)||isnan(htj6)||isnan(htj0)){
continue;
}
j5array[numsolutions]=((2.0)*(atan(htj5)));
j6array[numsolutions]=((2.0)*(atan(htj6)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x347=htj5*htj5;
CheckValue<IkReal> x348=IKPowWithIntegerCheck(((1.0)+x347),-1);
if(!x348.valid){
continue;
}
cj5array[numsolutions]=((x348.value)*(((1.0)+(((-1.0)*x347)))));
CheckValue<IkReal> x349=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x349.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x349.value));
}
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x350=htj6*htj6;
CheckValue<IkReal> x351=IKPowWithIntegerCheck(((1.0)+x350),-1);
if(!x351.valid){
continue;
}
cj6array[numsolutions]=((x351.value)*(((1.0)+(((-1.0)*x350)))));
CheckValue<IkReal> x352=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x352.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x352.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x353=htj0*htj0;
CheckValue<IkReal> x354=IKPowWithIntegerCheck(((1.0)+x353),-1);
if(!x354.valid){
continue;
}
cj0array[numsolutions]=((x354.value)*(((1.0)+(((-1.0)*x353)))));
CheckValue<IkReal> x355=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x355.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x355.value));
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j5valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj5 = 16;
_nj6 = 1;
_nj0 = 1;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( !j5valid[iij5] ) { continue; }
if( IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij5]-cj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij5]-sj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij5]-cj0array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij5]-sj0array[iij5]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j5valid[iij5]=false; _ij5[1] = iij5; _ij6[1] = 0; _ij0[1] = 0;  break; 
}
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

    j6 = j6array[ij5]; cj6 = cj6array[ij5]; sj6 = sj6array[ij5];

    j0 = j0array[ij5]; cj0 = cj0array[ij5]; sj0 = sj0array[ij5];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j4eval[1];
IkReal x356=sj0*sj0;
IkReal x357=cj0*cj0;
IkReal x358=((4.0)*sj6);
IkReal x359=(cj5*sj6);
IkReal x360=(r02*sj5);
IkReal x361=((8.0)*r21);
IkReal x362=((4.0)*cj6);
IkReal x363=(sj0*sj1);
IkReal x364=((16.0)*sj5);
IkReal x365=(cj0*sj1);
IkReal x366=((8.0)*sj5);
IkReal x367=((16.0)*r21);
IkReal x368=((16.0)*x365);
IkReal x369=((8.0)*cj5*cj6);
IkReal x370=(cj1*x356);
IkReal x371=(cj1*x357);
IkReal x372=((16.0)*cj5*cj6);
IkReal x373=(r20*x371);
IkReal x374=(((r01*x362*x365))+((x358*x373))+((r10*x358*x363))+((r00*x358*x365))+((r21*x362*x371))+((r21*x362*x370))+((r20*x358*x370))+((r11*x362*x363)));
j4eval[0]=((((0.5)*(IKabs((((r01*x359*x368))+(((-1.0)*r20*x370*x372))+(((-1.0)*x372*x373))+(((-1.0)*r10*x363*x372))+(((-1.0)*cj5*cj6*r00*x368))+((x360*x368))+((x359*x367*x371))+((x359*x367*x370))+((r22*x364*x371))+((r22*x364*x370))+(((16.0)*r11*x359*x363))+((r12*x363*x364)))))))+(((1.5)*(IKabs(x374))))+(IKabs((((r22*x366*x370))+((r22*x366*x371))+(((8.0)*r11*x359*x363))+(((8.0)*r01*x359*x365))+(((-1.0)*r00*x365*x369))+(((-1.0)*r10*x363*x369))+(((8.0)*x360*x365))+(((-1.0)*r20*x369*x370))+((x359*x361*x371))+((x359*x361*x370))+(((-1.0)*x369*x373))+((r12*x363*x366))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j2, j3, j4]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x375=sj0*sj0;
IkReal x376=cj0*cj0;
IkReal x377=((4.0)*sj6);
IkReal x378=(cj0*sj1);
IkReal x379=((16.0)*cj5);
IkReal x380=(r01*sj6);
IkReal x381=((4.0)*cj6);
IkReal x382=(sj0*sj1);
IkReal x383=((16.0)*sj5);
IkReal x384=(r11*sj6);
IkReal x385=((8.0)*cj5);
IkReal x386=((8.0)*sj5);
IkReal x387=(r21*sj6);
IkReal x388=(cj6*x385);
IkReal x389=(cj1*x375);
IkReal x390=(cj1*x376);
IkReal x391=(r20*x390);
IkReal x392=(r22*x390);
IkReal x393=(((r01*x378*x381))+((r00*x377*x378))+((r21*x381*x389))+((r20*x377*x389))+((x377*x391))+((r11*x381*x382))+((r21*x381*x390))+((r10*x377*x382)));
IkReal x394=((-1.0)*x393);
IkReal x395=(((x385*x387*x389))+((x378*x380*x385))+(((-1.0)*r00*x378*x388))+((x382*x384*x385))+((r02*x378*x386))+(((-1.0)*x388*x391))+((r12*x382*x386))+(((-1.0)*r20*x388*x389))+((x385*x387*x390))+((r22*x386*x389))+((x386*x392))+(((-1.0)*r10*x382*x388)));
op[0]=x393;
op[1]=x395;
op[2]=x393;
op[3]=(((x379*x387*x390))+((x378*x379*x380))+(((-1.0)*cj6*r10*x379*x382))+((r02*x378*x383))+((r22*x383*x389))+((r12*x382*x383))+(((-1.0)*cj6*r20*x379*x389))+(((-1.0)*cj6*r00*x378*x379))+((x379*x387*x389))+((x379*x382*x384))+((x383*x392))+(((-1.0)*cj6*x379*x391)));
op[4]=x394;
op[5]=x395;
op[6]=x394;
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j2eval[1];
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj1;
j2eval[1]=sj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj1;
j2eval[1]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x396=(r21*sj6);
IkReal x397=(cj6*r20);
IkReal x398=(cj5*r22);
IkReal x399=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((0.980645161290323)*x396))+(((12.9032258064516)*pz))+(((-0.980645161290323)*x397))+((x396*x399))+(((-4.41935483870968)*x398))+(((-1.0)*x397*x399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x397))+(((-1.0)*x398))+((sj5*x396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((0.980645161290323)*x396))+(((12.9032258064516)*pz))+(((-0.980645161290323)*x397))+((x396*x399))+(((-4.41935483870968)*x398))+(((-1.0)*x397*x399))))+IKsqr(((((-1.0)*sj5*x397))+(((-1.0)*x398))+((sj5*x396))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((0.980645161290323)*x396))+(((12.9032258064516)*pz))+(((-0.980645161290323)*x397))+((x396*x399))+(((-4.41935483870968)*x398))+(((-1.0)*x397*x399))), ((((-1.0)*sj5*x397))+(((-1.0)*x398))+((sj5*x396))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x400=IKcos(j3);
IkReal x401=IKsin(j3);
IkReal x402=(r21*sj6);
IkReal x403=(cj6*r20);
IkReal x404=(cj4*cj5);
evalcond[0]=(((sj5*x402))+(((-1.0)*cj5*r22))+(((-1.0)*sj5*x403))+(((-1.0)*x400)));
evalcond[1]=((0.293)+(((-0.3425)*x400))+(((-0.076)*x402))+(((0.076)*x403))+(((-1.0)*pz))+(((0.0775)*x401)));
evalcond[2]=((((-1.0)*x403*x404))+((cj4*r22*sj5))+((cj6*r21*sj4))+x401+((r20*sj4*sj6))+((x402*x404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=1.0;
j1=0;
IkReal x405=(cj3*sj3);
j2eval[0]=x405;
j2eval[1]=IKsign(x405);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x406=((7.69230769230769)*px);
IkReal x407=((0.584615384615385)*cj6);
IkReal x408=((7.69230769230769)*py);
IkReal x409=((0.584615384615385)*cj0*sj6);
IkReal x410=((0.584615384615385)*sj0*sj6);
if( IKabs((((r11*x409))+((cj0*x408))+((r00*sj0*x407))+(((-1.0)*r01*x410))+(((-1.0)*sj0*x406))+(((-1.0)*cj0*r10*x407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x410))+((sj0*x408))+((cj0*x406))+((r01*x409))+(((-1.0)*cj0*r00*x407))+(((-1.0)*r10*sj0*x407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x409))+((cj0*x408))+((r00*sj0*x407))+(((-1.0)*r01*x410))+(((-1.0)*sj0*x406))+(((-1.0)*cj0*r10*x407))))+IKsqr((((r11*x410))+((sj0*x408))+((cj0*x406))+((r01*x409))+(((-1.0)*cj0*r00*x407))+(((-1.0)*r10*sj0*x407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x409))+((cj0*x408))+((r00*sj0*x407))+(((-1.0)*r01*x410))+(((-1.0)*sj0*x406))+(((-1.0)*cj0*r10*x407))), (((r11*x410))+((sj0*x408))+((cj0*x406))+((r01*x409))+(((-1.0)*cj0*r00*x407))+(((-1.0)*r10*sj0*x407))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x411=IKcos(j2);
IkReal x412=IKsin(j2);
IkReal x413=((0.13)*cj0);
IkReal x414=((0.076)*sj6);
IkReal x415=(r02*sj5);
IkReal x416=(cj4*cj5);
IkReal x417=(r11*sj6);
IkReal x418=((1.0)*cj6);
IkReal x419=(sj4*sj6);
IkReal x420=(r12*sj5);
IkReal x421=(cj6*sj4);
IkReal x422=(cj5*sj4);
IkReal x423=((0.076)*cj6);
IkReal x424=(sj0*x411);
IkReal x425=(cj0*x412);
IkReal x426=(sj0*x412);
IkReal x427=(cj0*x411);
IkReal x428=((1.0)*cj4*sj6);
IkReal x429=(x425+x424);
evalcond[0]=(((x411*x413))+(((-0.13)*x426))+(((-1.0)*px))+((r00*x423))+(((-1.0)*r01*x414)));
evalcond[1]=((((0.13)*x424))+(((-1.0)*py))+((r10*x423))+((x412*x413))+(((-1.0)*r11*x414)));
evalcond[2]=(((x416*x417))+((cj4*x420))+x429+((r10*x419))+(((-1.0)*r10*x416*x418))+((r11*x421)));
evalcond[3]=((((-1.0)*x426))+(((-1.0)*r00*x416*x418))+((cj4*x415))+((r01*x421))+((r00*x419))+x427+((r01*sj6*x416)));
evalcond[4]=(((cj5*r01*x419))+(((-1.0)*r00*x428))+x429+(((-1.0)*cj4*r01*x418))+(((-1.0)*r00*x418*x422))+((sj4*x415)));
evalcond[5]=((((-1.0)*x427))+((sj4*x420))+(((-1.0)*r10*x418*x422))+(((-1.0)*cj4*r11*x418))+x426+(((-1.0)*r10*x428))+((x417*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x430=((0.192405063291139)*cj6);
IkReal x431=((2.53164556962025)*cj0);
IkReal x432=((2.53164556962025)*sj0);
IkReal x433=((0.192405063291139)*cj0*sj6);
IkReal x434=((0.192405063291139)*sj0*sj6);
if( IKabs(((((-1.0)*cj0*r10*x430))+((py*x431))+((r00*sj0*x430))+(((-1.0)*r01*x434))+((r11*x433))+(((-1.0)*px*x432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((px*x431))+((py*x432))+(((-1.0)*cj0*r00*x430))+((r01*x433))+(((-1.0)*r10*sj0*x430))+((r11*x434)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r10*x430))+((py*x431))+((r00*sj0*x430))+(((-1.0)*r01*x434))+((r11*x433))+(((-1.0)*px*x432))))+IKsqr((((px*x431))+((py*x432))+(((-1.0)*cj0*r00*x430))+((r01*x433))+(((-1.0)*r10*sj0*x430))+((r11*x434))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj0*r10*x430))+((py*x431))+((r00*sj0*x430))+(((-1.0)*r01*x434))+((r11*x433))+(((-1.0)*px*x432))), (((px*x431))+((py*x432))+(((-1.0)*cj0*r00*x430))+((r01*x433))+(((-1.0)*r10*sj0*x430))+((r11*x434))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x435=IKcos(j2);
IkReal x436=IKsin(j2);
IkReal x437=((0.076)*sj6);
IkReal x438=(sj4*sj5);
IkReal x439=(sj5*sj6);
IkReal x440=(cj5*sj4);
IkReal x441=((1.0)*cj6);
IkReal x442=((1.0)*cj5);
IkReal x443=((0.076)*cj6);
IkReal x444=(sj0*x435);
IkReal x445=(cj0*x436);
IkReal x446=(sj0*x436);
IkReal x447=(r10*x441);
IkReal x448=(cj0*x435);
IkReal x449=((1.0)*cj4*sj6);
IkReal x450=(x445+x444);
evalcond[0]=((((-1.0)*sj5*x447))+(((-1.0)*r12*x442))+x450+((r11*x439)));
evalcond[1]=((((-1.0)*px))+((r00*x443))+(((0.395)*x448))+(((-1.0)*r01*x437))+(((-0.395)*x446)));
evalcond[2]=((((-1.0)*r11*x437))+(((-1.0)*py))+(((0.395)*x444))+(((0.395)*x445))+((r10*x443)));
evalcond[3]=((((-1.0)*x446))+(((-1.0)*r00*sj5*x441))+x448+(((-1.0)*r02*x442))+((r01*x439)));
evalcond[4]=((((-1.0)*r00*x440*x441))+((r02*x438))+x450+((r01*sj6*x440))+(((-1.0)*r00*x449))+(((-1.0)*cj4*r01*x441)));
evalcond[5]=(((r12*x438))+((r11*sj6*x440))+(((-1.0)*x448))+x446+(((-1.0)*x440*x447))+(((-1.0)*cj4*r11*x441))+(((-1.0)*r10*x449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x451=((40.0)*sj0);
IkReal x452=((3.04)*cj6);
IkReal x453=((40.0)*cj0);
IkReal x454=((3.04)*cj0*sj6);
IkReal x455=((3.04)*sj0*sj6);
if( IKabs((((cj0*r10*x452))+(((-1.0)*r00*sj0*x452))+(((-1.0)*py*x453))+((px*x451))+(((-1.0)*r11*x454))+((r01*x455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj0*x452))+(((-1.0)*r01*x454))+(((-1.0)*py*x451))+((cj0*r00*x452))+(((-1.0)*r11*x455))+(((-1.0)*px*x453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*r10*x452))+(((-1.0)*r00*sj0*x452))+(((-1.0)*py*x453))+((px*x451))+(((-1.0)*r11*x454))+((r01*x455))))+IKsqr((((r10*sj0*x452))+(((-1.0)*r01*x454))+(((-1.0)*py*x451))+((cj0*r00*x452))+(((-1.0)*r11*x455))+(((-1.0)*px*x453))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj0*r10*x452))+(((-1.0)*r00*sj0*x452))+(((-1.0)*py*x453))+((px*x451))+(((-1.0)*r11*x454))+((r01*x455))), (((r10*sj0*x452))+(((-1.0)*r01*x454))+(((-1.0)*py*x451))+((cj0*r00*x452))+(((-1.0)*r11*x455))+(((-1.0)*px*x453))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x456=IKsin(j2);
IkReal x457=IKcos(j2);
IkReal x458=((0.076)*sj6);
IkReal x459=(r02*sj5);
IkReal x460=(cj4*cj5);
IkReal x461=(r11*sj6);
IkReal x462=((0.025)*sj0);
IkReal x463=((1.0)*cj6);
IkReal x464=(sj4*sj6);
IkReal x465=(r12*sj5);
IkReal x466=(cj6*sj4);
IkReal x467=(cj5*sj4);
IkReal x468=((0.076)*cj6);
IkReal x469=(sj0*x456);
IkReal x470=((1.0)*x457);
IkReal x471=(cj0*x456);
IkReal x472=((1.0)*cj4*sj6);
IkReal x473=(cj0*x470);
evalcond[0]=(((x456*x462))+(((-1.0)*r01*x458))+(((-1.0)*px))+(((-0.025)*cj0*x457))+((r00*x468)));
evalcond[1]=((((-0.025)*x471))+(((-1.0)*py))+(((-1.0)*r11*x458))+(((-1.0)*x457*x462))+((r10*x468)));
evalcond[2]=(((cj4*x459))+(((-1.0)*x473))+((r01*sj6*x460))+x469+(((-1.0)*r00*x460*x463))+((r01*x466))+((r00*x464)));
evalcond[3]=((((-1.0)*r00*x472))+(((-1.0)*r00*x463*x467))+(((-1.0)*cj4*r01*x463))+((sj4*x459))+x471+((sj0*x457))+((cj5*r01*x464)));
evalcond[4]=(((cj4*x465))+(((-1.0)*sj0*x470))+(((-1.0)*x471))+((x460*x461))+(((-1.0)*r10*x460*x463))+((r11*x466))+((r10*x464)));
evalcond[5]=(((x461*x467))+(((-1.0)*r10*x463*x467))+(((-1.0)*x473))+((sj4*x465))+x469+(((-1.0)*cj4*r11*x463))+(((-1.0)*r10*x472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x474=((3.44827586206897)*py);
IkReal x475=((3.44827586206897)*px);
IkReal x476=((0.262068965517241)*cj0*cj6);
IkReal x477=((0.262068965517241)*sj0*sj6);
IkReal x478=((0.262068965517241)*cj6*sj0);
IkReal x479=((0.262068965517241)*cj0*sj6);
if( IKabs((((r10*x476))+(((-1.0)*cj0*x474))+(((-1.0)*r00*x478))+(((-1.0)*r11*x479))+((sj0*x475))+((r01*x477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x478))+(((-1.0)*sj0*x474))+(((-1.0)*cj0*x475))+(((-1.0)*r01*x479))+(((-1.0)*r11*x477))+((r00*x476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x476))+(((-1.0)*cj0*x474))+(((-1.0)*r00*x478))+(((-1.0)*r11*x479))+((sj0*x475))+((r01*x477))))+IKsqr((((r10*x478))+(((-1.0)*sj0*x474))+(((-1.0)*cj0*x475))+(((-1.0)*r01*x479))+(((-1.0)*r11*x477))+((r00*x476))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x476))+(((-1.0)*cj0*x474))+(((-1.0)*r00*x478))+(((-1.0)*r11*x479))+((sj0*x475))+((r01*x477))), (((r10*x478))+(((-1.0)*sj0*x474))+(((-1.0)*cj0*x475))+(((-1.0)*r01*x479))+(((-1.0)*r11*x477))+((r00*x476))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x480=IKsin(j2);
IkReal x481=IKcos(j2);
IkReal x482=((0.076)*sj6);
IkReal x483=((0.29)*cj0);
IkReal x484=(sj4*sj5);
IkReal x485=(sj5*sj6);
IkReal x486=((0.29)*sj0);
IkReal x487=((1.0)*cj6);
IkReal x488=((1.0)*cj5);
IkReal x489=((0.076)*cj6);
IkReal x490=(cj5*sj4);
IkReal x491=(sj0*x480);
IkReal x492=((1.0)*x481);
IkReal x493=(sj6*x490);
IkReal x494=(cj0*x480);
IkReal x495=((1.0)*cj4*sj6);
IkReal x496=(cj0*x492);
evalcond[0]=((((-1.0)*x481*x483))+(((-1.0)*px))+((x480*x486))+((r00*x489))+(((-1.0)*r01*x482)));
evalcond[1]=((((-1.0)*x481*x486))+(((-1.0)*py))+((r10*x489))+(((-1.0)*x480*x483))+(((-1.0)*r11*x482)));
evalcond[2]=((((-1.0)*r00*sj5*x487))+(((-1.0)*x496))+x491+((r01*x485))+(((-1.0)*r02*x488)));
evalcond[3]=((((-1.0)*sj0*x492))+(((-1.0)*r10*sj5*x487))+(((-1.0)*x494))+((r11*x485))+(((-1.0)*r12*x488)));
evalcond[4]=((((-1.0)*r00*x487*x490))+(((-1.0)*r00*x495))+((r02*x484))+((sj0*x481))+(((-1.0)*cj4*r01*x487))+x494+((r01*x493)));
evalcond[5]=((((-1.0)*r10*x495))+(((-1.0)*x496))+(((-1.0)*cj4*r11*x487))+(((-1.0)*r10*x487*x490))+((r12*x484))+((r11*x493))+x491);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x497=(cj5*sj0);
IkReal x498=(cj3*r12);
IkReal x499=((1.0)*cj0);
IkReal x500=(cj4*sj3);
IkReal x501=(r02*sj5);
IkReal x502=(cj6*r00);
IkReal x503=(cj0*cj5);
IkReal x504=(cj3*sj5);
IkReal x505=(r11*sj6);
IkReal x506=(cj6*r10);
IkReal x507=(r01*sj6*x500);
IkReal x508=(r00*sj3*sj4*sj6);
IkReal x509=(cj6*r01*sj3*sj4);
CheckValue<IkReal> x510 = IKatan2WithCheck(IkReal(((((-1.0)*x497*x500*x502))+((x497*x507))+((sj0*x500*x501))+((sj0*x509))+((sj0*x508))+(((-1.0)*x499*x504*x505))+((x498*x503))+((cj0*x504*x506)))),IkReal(((((-1.0)*x499*x508))+(((-1.0)*x499*x509))+((sj0*x504*x506))+((x497*x498))+(((-1.0)*cj5*x499*x507))+((x500*x502*x503))+(((-1.0)*sj0*x504*x505))+(((-1.0)*x499*x500*x501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x510.valid){
continue;
}
CheckValue<IkReal> x511=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x511.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x510.value)+(((1.5707963267949)*(x511.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x512=IKcos(j2);
IkReal x513=IKsin(j2);
IkReal x514=(cj0*cj3);
IkReal x515=((0.3425)*sj3);
IkReal x516=((0.076)*sj6);
IkReal x517=(r02*sj5);
IkReal x518=(sj5*sj6);
IkReal x519=((0.0775)*cj3);
IkReal x520=(cj5*sj4);
IkReal x521=(cj4*cj5);
IkReal x522=(sj4*sj6);
IkReal x523=(r01*sj6);
IkReal x524=(r12*sj5);
IkReal x525=((1.0)*cj4);
IkReal x526=(cj6*r11);
IkReal x527=(cj6*r01);
IkReal x528=(r11*sj6);
IkReal x529=((0.076)*cj6);
IkReal x530=((1.0)*cj5);
IkReal x531=(cj0*x512);
IkReal x532=(sj0*x512);
IkReal x533=((1.0)*cj6*r10);
IkReal x534=(sj0*x513);
IkReal x535=((1.0)*cj6*r00);
IkReal x536=(cj0*x513);
evalcond[0]=(((r11*x518))+(((-1.0)*sj5*x533))+((sj3*x532))+((sj3*x536))+(((-1.0)*r12*x530)));
evalcond[1]=(((r01*x518))+(((-1.0)*sj3*x534))+(((-1.0)*sj5*x535))+((sj3*x531))+(((-1.0)*r02*x530)));
evalcond[2]=(((sj4*x517))+(((-1.0)*x525*x527))+(((-1.0)*x520*x535))+(((-1.0)*r00*sj6*x525))+((x520*x523))+x532+x536);
evalcond[3]=(((cj4*x524))+(((-1.0)*x521*x533))+((x513*x514))+((x521*x528))+((r10*x522))+((cj3*x532))+((sj4*x526)));
evalcond[4]=((((-1.0)*x525*x526))+(((-1.0)*r10*sj6*x525))+(((-1.0)*x520*x533))+(((-1.0)*x531))+((x520*x528))+x534+((sj4*x524)));
evalcond[5]=(((cj4*x517))+(((-1.0)*x521*x535))+(((-1.0)*cj3*x534))+((x512*x514))+((x521*x523))+((sj4*x527))+((r00*x522)));
evalcond[6]=((((-0.0525)*x534))+(((-1.0)*r01*x516))+((x515*x531))+(((-1.0)*px))+(((-1.0)*x515*x534))+(((0.0525)*x531))+(((0.0775)*x512*x514))+(((-1.0)*x519*x534))+((r00*x529)));
evalcond[7]=(((x519*x532))+((x515*x536))+((x515*x532))+(((-1.0)*r11*x516))+(((-1.0)*py))+((r10*x529))+(((0.0525)*x532))+(((0.0525)*x536))+(((0.0775)*x513*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x537=(cj0*cj5);
IkReal x538=(sj0*sj5);
IkReal x539=(cj6*r10);
IkReal x540=(r01*sj6);
IkReal x541=(cj0*sj5);
IkReal x542=(cj6*r00);
IkReal x543=(cj5*sj0);
IkReal x544=((1.0)*r11*sj5*sj6);
CheckValue<IkReal> x545=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x545.valid){
continue;
}
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal((((x539*x541))+(((-1.0)*x538*x542))+(((-1.0)*r11*sj6*x541))+((r12*x537))+((x538*x540))+(((-1.0)*r02*x543)))),IkReal((((r02*x537))+(((-1.0)*r11*sj6*x538))+((x541*x542))+((r12*x543))+(((-1.0)*x540*x541))+((x538*x539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x545.value)))+(x546.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x547=IKcos(j2);
IkReal x548=IKsin(j2);
IkReal x549=(cj0*cj3);
IkReal x550=((0.3425)*sj3);
IkReal x551=((0.076)*sj6);
IkReal x552=(r02*sj5);
IkReal x553=(sj5*sj6);
IkReal x554=((0.0775)*cj3);
IkReal x555=(cj5*sj4);
IkReal x556=(cj4*cj5);
IkReal x557=(sj4*sj6);
IkReal x558=(r01*sj6);
IkReal x559=(r12*sj5);
IkReal x560=((1.0)*cj4);
IkReal x561=(cj6*r11);
IkReal x562=(cj6*r01);
IkReal x563=(r11*sj6);
IkReal x564=((0.076)*cj6);
IkReal x565=((1.0)*cj5);
IkReal x566=(cj0*x547);
IkReal x567=(sj0*x547);
IkReal x568=((1.0)*cj6*r10);
IkReal x569=(sj0*x548);
IkReal x570=((1.0)*cj6*r00);
IkReal x571=(cj0*x548);
evalcond[0]=(((sj3*x567))+((r11*x553))+(((-1.0)*sj5*x568))+((sj3*x571))+(((-1.0)*r12*x565)));
evalcond[1]=(((sj3*x566))+(((-1.0)*sj5*x570))+(((-1.0)*sj3*x569))+((r01*x553))+(((-1.0)*r02*x565)));
evalcond[2]=(((sj4*x552))+((x555*x558))+(((-1.0)*x560*x562))+x571+x567+(((-1.0)*r00*sj6*x560))+(((-1.0)*x555*x570)));
evalcond[3]=(((cj4*x559))+((x556*x563))+((cj3*x567))+((r10*x557))+(((-1.0)*x556*x568))+((sj4*x561))+((x548*x549)));
evalcond[4]=(((sj4*x559))+(((-1.0)*x555*x568))+(((-1.0)*x560*x561))+x569+(((-1.0)*x566))+((x555*x563))+(((-1.0)*r10*sj6*x560)));
evalcond[5]=((((-1.0)*cj3*x569))+((cj4*x552))+((x547*x549))+((sj4*x562))+((r00*x557))+((x556*x558))+(((-1.0)*x556*x570)));
evalcond[6]=(((x550*x566))+(((-1.0)*r01*x551))+((r00*x564))+(((0.0775)*x547*x549))+(((-1.0)*px))+(((-1.0)*x554*x569))+(((-0.0525)*x569))+(((-1.0)*x550*x569))+(((0.0525)*x566)));
evalcond[7]=((((-1.0)*r11*x551))+((x550*x567))+((x550*x571))+(((0.0525)*x571))+(((-1.0)*py))+(((0.0775)*x548*x549))+((r10*x564))+((x554*x567))+(((0.0525)*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x572=(cj6*r20);
IkReal x573=(cj4*cj5);
IkReal x574=(r21*sj6);
if( IKabs(((((-1.0)*x572*x573))+((cj4*r22*sj5))+((x573*x574))+((cj6*r21*sj4))+((r20*sj4*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+(((-1.0)*sj5*x574))+((sj5*x572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x572*x573))+((cj4*r22*sj5))+((x573*x574))+((cj6*r21*sj4))+((r20*sj4*sj6))))+IKsqr((((cj5*r22))+(((-1.0)*sj5*x574))+((sj5*x572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x572*x573))+((cj4*r22*sj5))+((x573*x574))+((cj6*r21*sj4))+((r20*sj4*sj6))), (((cj5*r22))+(((-1.0)*sj5*x574))+((sj5*x572))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x575=IKcos(j3);
IkReal x576=IKsin(j3);
IkReal x577=(r21*sj6);
IkReal x578=(cj6*r20);
IkReal x579=(cj4*cj5);
evalcond[0]=((((-1.0)*sj5*x578))+x575+((sj5*x577))+(((-1.0)*cj5*r22)));
evalcond[1]=((-0.293)+(((0.3425)*x575))+(((-1.0)*pz))+(((-0.076)*x577))+(((-0.0775)*x576))+(((0.076)*x578)));
evalcond[2]=(((cj4*r22*sj5))+(((-1.0)*x576))+((cj6*r21*sj4))+((x577*x579))+(((-1.0)*x578*x579))+((r20*sj4*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x580=(cj3*sj3);
j2eval[0]=x580;
j2eval[1]=IKsign(x580);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x581=((7.69230769230769)*px);
IkReal x582=((0.584615384615385)*cj6);
IkReal x583=((7.69230769230769)*py);
IkReal x584=((0.584615384615385)*cj0*sj6);
IkReal x585=((0.584615384615385)*sj0*sj6);
if( IKabs((((r11*x584))+((cj0*x583))+((r00*sj0*x582))+(((-1.0)*cj0*r10*x582))+(((-1.0)*r01*x585))+(((-1.0)*sj0*x581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r00*x582))+(((-1.0)*cj0*x581))+(((-1.0)*r11*x585))+((r10*sj0*x582))+(((-1.0)*r01*x584))+(((-1.0)*sj0*x583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x584))+((cj0*x583))+((r00*sj0*x582))+(((-1.0)*cj0*r10*x582))+(((-1.0)*r01*x585))+(((-1.0)*sj0*x581))))+IKsqr((((cj0*r00*x582))+(((-1.0)*cj0*x581))+(((-1.0)*r11*x585))+((r10*sj0*x582))+(((-1.0)*r01*x584))+(((-1.0)*sj0*x583))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x584))+((cj0*x583))+((r00*sj0*x582))+(((-1.0)*cj0*r10*x582))+(((-1.0)*r01*x585))+(((-1.0)*sj0*x581))), (((cj0*r00*x582))+(((-1.0)*cj0*x581))+(((-1.0)*r11*x585))+((r10*sj0*x582))+(((-1.0)*r01*x584))+(((-1.0)*sj0*x583))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x586=IKsin(j2);
IkReal x587=IKcos(j2);
IkReal x588=((0.13)*cj0);
IkReal x589=((1.0)*sj0);
IkReal x590=((0.076)*sj6);
IkReal x591=((1.0)*cj0);
IkReal x592=(r02*sj5);
IkReal x593=(cj4*cj5);
IkReal x594=(r11*sj6);
IkReal x595=((0.13)*sj0);
IkReal x596=((1.0)*cj6);
IkReal x597=(sj4*sj6);
IkReal x598=(r12*sj5);
IkReal x599=(cj6*sj4);
IkReal x600=(cj5*sj4);
IkReal x601=((0.076)*cj6);
IkReal x602=((1.0)*cj4*sj6);
IkReal x603=(x586*x589);
IkReal x604=(x587*x591);
IkReal x605=(x603+x604);
evalcond[0]=(((r00*x601))+(((-1.0)*r01*x590))+(((-1.0)*x586*x595))+(((-1.0)*x587*x588))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x587*x595))+(((-1.0)*r11*x590))+((x586*x588))+(((-1.0)*py))+((r10*x601)));
evalcond[2]=(((cj0*x586))+(((-1.0)*x587*x589))+(((-1.0)*r10*x593*x596))+((r11*x599))+((r10*x597))+((cj4*x598))+((x593*x594)));
evalcond[3]=(((r01*x599))+((r00*x597))+(((-1.0)*x605))+(((-1.0)*r00*x593*x596))+((cj4*x592))+((r01*sj6*x593)));
evalcond[4]=((((-1.0)*cj4*r01*x596))+(((-1.0)*r00*x602))+((sj0*x587))+(((-1.0)*x586*x591))+((sj4*x592))+((cj5*r01*x597))+(((-1.0)*r00*x596*x600)));
evalcond[5]=((((-1.0)*r10*x596*x600))+(((-1.0)*r10*x602))+((x594*x600))+((sj4*x598))+(((-1.0)*x605))+(((-1.0)*cj4*r11*x596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x606=((2.53164556962025)*cj0);
IkReal x607=((0.192405063291139)*cj6);
IkReal x608=((2.53164556962025)*sj0);
IkReal x609=((0.192405063291139)*cj0*sj6);
IkReal x610=((0.192405063291139)*sj0*sj6);
if( IKabs(((((-1.0)*cj0*r10*x607))+(((-1.0)*r01*x610))+((r11*x609))+((py*x606))+((r00*sj0*x607))+(((-1.0)*px*x608)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x609))+(((-1.0)*r11*x610))+((cj0*r00*x607))+((r10*sj0*x607))+(((-1.0)*py*x608))+(((-1.0)*px*x606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r10*x607))+(((-1.0)*r01*x610))+((r11*x609))+((py*x606))+((r00*sj0*x607))+(((-1.0)*px*x608))))+IKsqr(((((-1.0)*r01*x609))+(((-1.0)*r11*x610))+((cj0*r00*x607))+((r10*sj0*x607))+(((-1.0)*py*x608))+(((-1.0)*px*x606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj0*r10*x607))+(((-1.0)*r01*x610))+((r11*x609))+((py*x606))+((r00*sj0*x607))+(((-1.0)*px*x608))), ((((-1.0)*r01*x609))+(((-1.0)*r11*x610))+((cj0*r00*x607))+((r10*sj0*x607))+(((-1.0)*py*x608))+(((-1.0)*px*x606))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x611=IKsin(j2);
IkReal x612=IKcos(j2);
IkReal x613=((1.0)*sj0);
IkReal x614=((0.076)*sj6);
IkReal x615=(sj4*sj5);
IkReal x616=(sj5*sj6);
IkReal x617=(cj5*sj4);
IkReal x618=((0.395)*sj0);
IkReal x619=((1.0)*cj6);
IkReal x620=((1.0)*cj5);
IkReal x621=((0.076)*cj6);
IkReal x622=(r10*x619);
IkReal x623=(cj0*x611);
IkReal x624=(cj0*x612);
IkReal x625=((1.0)*cj4*sj6);
IkReal x626=(x611*x613);
IkReal x627=((1.0)*x624);
IkReal x628=(x627+x626);
evalcond[0]=((((-0.395)*x624))+(((-1.0)*x611*x618))+(((-1.0)*r01*x614))+(((-1.0)*px))+((r00*x621)));
evalcond[1]=((((-1.0)*x612*x618))+(((0.395)*x623))+((r10*x621))+(((-1.0)*r11*x614))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*x612*x613))+(((-1.0)*r12*x620))+((r11*x616))+(((-1.0)*sj5*x622))+x623);
evalcond[3]=(((r01*x616))+(((-1.0)*r02*x620))+(((-1.0)*x628))+(((-1.0)*r00*sj5*x619)));
evalcond[4]=(((sj0*x612))+(((-1.0)*r00*x625))+((r01*sj6*x617))+(((-1.0)*cj4*r01*x619))+((r02*x615))+(((-1.0)*x623))+(((-1.0)*r00*x617*x619)));
evalcond[5]=((((-1.0)*x628))+(((-1.0)*x617*x622))+(((-1.0)*cj4*r11*x619))+((r12*x615))+((r11*sj6*x617))+(((-1.0)*r10*x625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x629=((40.0)*sj0);
IkReal x630=((3.04)*cj6);
IkReal x631=((40.0)*cj0);
IkReal x632=((3.04)*cj0*sj6);
IkReal x633=((3.04)*sj0*sj6);
if( IKabs((((cj0*r10*x630))+(((-1.0)*r11*x632))+((r01*x633))+(((-1.0)*r00*sj0*x630))+((px*x629))+(((-1.0)*py*x631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((py*x629))+((r01*x632))+(((-1.0)*r10*sj0*x630))+(((-1.0)*cj0*r00*x630))+((px*x631))+((r11*x633)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*r10*x630))+(((-1.0)*r11*x632))+((r01*x633))+(((-1.0)*r00*sj0*x630))+((px*x629))+(((-1.0)*py*x631))))+IKsqr((((py*x629))+((r01*x632))+(((-1.0)*r10*sj0*x630))+(((-1.0)*cj0*r00*x630))+((px*x631))+((r11*x633))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj0*r10*x630))+(((-1.0)*r11*x632))+((r01*x633))+(((-1.0)*r00*sj0*x630))+((px*x629))+(((-1.0)*py*x631))), (((py*x629))+((r01*x632))+(((-1.0)*r10*sj0*x630))+(((-1.0)*cj0*r00*x630))+((px*x631))+((r11*x633))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x634=IKcos(j2);
IkReal x635=IKsin(j2);
IkReal x636=((0.076)*sj6);
IkReal x637=(r02*sj5);
IkReal x638=(cj4*cj5);
IkReal x639=(r11*sj6);
IkReal x640=((0.025)*sj0);
IkReal x641=((1.0)*cj6);
IkReal x642=(sj4*sj6);
IkReal x643=(r12*sj5);
IkReal x644=(cj6*sj4);
IkReal x645=(cj5*sj4);
IkReal x646=((0.076)*cj6);
IkReal x647=(sj0*x634);
IkReal x648=((1.0)*x635);
IkReal x649=(cj0*x634);
IkReal x650=((1.0)*cj4*sj6);
IkReal x651=(cj0*x648);
evalcond[0]=((((0.025)*x649))+((x635*x640))+(((-1.0)*r01*x636))+(((-1.0)*px))+((r00*x646)));
evalcond[1]=((((-1.0)*r11*x636))+(((-0.025)*cj0*x635))+((x634*x640))+(((-1.0)*py))+((r10*x646)));
evalcond[2]=((((-1.0)*r00*x638*x641))+((cj4*x637))+((sj0*x635))+x649+((r01*x644))+((r00*x642))+((r01*sj6*x638)));
evalcond[3]=(((cj4*x643))+((x638*x639))+(((-1.0)*x651))+(((-1.0)*r10*x638*x641))+((r10*x642))+x647+((r11*x644)));
evalcond[4]=(((sj4*x637))+(((-1.0)*cj4*r01*x641))+(((-1.0)*r00*x650))+(((-1.0)*r00*x641*x645))+(((-1.0)*x651))+((cj5*r01*x642))+x647);
evalcond[5]=((((-1.0)*cj4*r11*x641))+(((-1.0)*x649))+((sj4*x643))+((x639*x645))+(((-1.0)*r10*x641*x645))+(((-1.0)*r10*x650))+(((-1.0)*sj0*x648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x652=((3.44827586206897)*py);
IkReal x653=((3.44827586206897)*px);
IkReal x654=((0.262068965517241)*cj0*cj6);
IkReal x655=((0.262068965517241)*sj0*sj6);
IkReal x656=((0.262068965517241)*cj6*sj0);
IkReal x657=((0.262068965517241)*cj0*sj6);
if( IKabs(((((-1.0)*r11*x657))+(((-1.0)*r00*x656))+((sj0*x653))+((r10*x654))+(((-1.0)*cj0*x652))+((r01*x655)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x654))+((sj0*x652))+((r11*x655))+(((-1.0)*r10*x656))+((cj0*x653))+((r01*x657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x657))+(((-1.0)*r00*x656))+((sj0*x653))+((r10*x654))+(((-1.0)*cj0*x652))+((r01*x655))))+IKsqr(((((-1.0)*r00*x654))+((sj0*x652))+((r11*x655))+(((-1.0)*r10*x656))+((cj0*x653))+((r01*x657))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x657))+(((-1.0)*r00*x656))+((sj0*x653))+((r10*x654))+(((-1.0)*cj0*x652))+((r01*x655))), ((((-1.0)*r00*x654))+((sj0*x652))+((r11*x655))+(((-1.0)*r10*x656))+((cj0*x653))+((r01*x657))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x658=IKcos(j2);
IkReal x659=IKsin(j2);
IkReal x660=((0.076)*sj6);
IkReal x661=((0.29)*cj0);
IkReal x662=(sj4*sj5);
IkReal x663=(sj5*sj6);
IkReal x664=((1.0)*cj4);
IkReal x665=((1.0)*cj5);
IkReal x666=(cj6*r10);
IkReal x667=(cj6*r00);
IkReal x668=(sj0*x658);
IkReal x669=(sj0*x659);
IkReal x670=((1.0)*cj6*sj5);
IkReal x671=(cj0*x658);
IkReal x672=(cj5*sj4*sj6);
IkReal x673=((1.0)*cj0*x659);
evalcond[0]=(((r01*x663))+(((-1.0)*sj5*x667))+x669+x671+(((-1.0)*r02*x665)));
evalcond[1]=((((-1.0)*r01*x660))+(((0.29)*x669))+(((0.076)*x667))+(((-1.0)*px))+((x658*x661)));
evalcond[2]=((((-1.0)*x659*x661))+(((0.29)*x668))+(((-1.0)*r11*x660))+(((0.076)*x666))+(((-1.0)*py)));
evalcond[3]=(((r11*x663))+(((-1.0)*sj5*x666))+(((-1.0)*r12*x665))+x668+(((-1.0)*x673)));
evalcond[4]=(((r01*x672))+(((-1.0)*cj6*r01*x664))+(((-1.0)*sj4*x665*x667))+((r02*x662))+x668+(((-1.0)*r00*sj6*x664))+(((-1.0)*x673)));
evalcond[5]=(((r11*x672))+(((-1.0)*sj4*x665*x666))+(((-1.0)*r10*sj6*x664))+((r12*x662))+(((-1.0)*x669))+(((-1.0)*x671))+(((-1.0)*cj6*r11*x664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x674=(sj0*sj6);
IkReal x675=(cj6*r10);
IkReal x676=((1.0)*sj0);
IkReal x677=(cj3*sj5);
IkReal x678=(cj0*sj6);
IkReal x679=(cj4*cj5*sj3);
IkReal x680=((1.0)*cj6*r00);
IkReal x681=(r00*sj3*sj4);
IkReal x682=(cj0*x677);
IkReal x683=(cj3*cj5*r12);
IkReal x684=(cj4*r02*sj3*sj5);
IkReal x685=(cj6*r01*sj3*sj4);
CheckValue<IkReal> x686=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x686.valid){
continue;
}
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal((((x674*x681))+(((-1.0)*r11*x677*x678))+(((-1.0)*cj6*r00*x676*x679))+((cj0*x683))+((sj0*x684))+((sj0*x685))+((x675*x682))+((r01*x674*x679)))),IkReal((((x678*x681))+((r01*x678*x679))+(((-1.0)*cj0*x679*x680))+((cj0*x684))+((cj0*x685))+((r11*x674*x677))+(((-1.0)*x676*x683))+(((-1.0)*x675*x676*x677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x686.value)))+(x687.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x688=IKsin(j2);
IkReal x689=IKcos(j2);
IkReal x690=((0.3425)*sj3);
IkReal x691=((0.076)*sj6);
IkReal x692=(cj6*sj4);
IkReal x693=((1.0)*r10);
IkReal x694=(cj6*sj5);
IkReal x695=(r02*sj5);
IkReal x696=(sj5*sj6);
IkReal x697=((0.0775)*cj3);
IkReal x698=(sj4*sj6);
IkReal x699=((1.0)*r00);
IkReal x700=(cj5*r01);
IkReal x701=(r12*sj5);
IkReal x702=(cj4*r11);
IkReal x703=((1.0)*cj6);
IkReal x704=((1.0)*sj3);
IkReal x705=(cj4*sj6);
IkReal x706=((1.0)*cj5);
IkReal x707=((1.0)*cj3);
IkReal x708=((0.076)*cj6);
IkReal x709=(cj3*x688);
IkReal x710=((1.0)*x688);
IkReal x711=(cj0*x689);
IkReal x712=(sj0*x689);
IkReal x713=(cj4*cj5*cj6);
IkReal x714=((0.0525)*x688);
IkReal x715=(cj0*x688);
evalcond[0]=((((-1.0)*r12*x706))+(((-1.0)*x693*x694))+((sj3*x715))+(((-1.0)*x704*x712))+((r11*x696)));
evalcond[1]=((((-1.0)*r02*x706))+(((-1.0)*sj0*x688*x704))+(((-1.0)*x704*x711))+(((-1.0)*x694*x699))+((r01*x696)));
evalcond[2]=(((sj4*x695))+(((-1.0)*cj5*x692*x699))+(((-1.0)*x699*x705))+((x698*x700))+x712+(((-1.0)*cj4*r01*x703))+(((-1.0)*cj0*x710)));
evalcond[3]=((((-1.0)*x693*x713))+(((-1.0)*x707*x712))+((cj4*x701))+((cj0*x709))+((r10*x698))+((r11*x692))+((cj5*sj6*x702)));
evalcond[4]=((((-1.0)*x693*x705))+(((-1.0)*x702*x703))+(((-1.0)*x711))+(((-1.0)*cj5*x692*x693))+((cj5*r11*x698))+(((-1.0)*sj0*x710))+((sj4*x701)));
evalcond[5]=((((-1.0)*x707*x711))+((cj4*x695))+((x700*x705))+(((-1.0)*sj0*x688*x707))+(((-1.0)*x699*x713))+((r00*x698))+((r01*x692)));
evalcond[6]=((((-1.0)*r01*x691))+((r00*x708))+(((-1.0)*x690*x711))+(((-1.0)*px))+(((-1.0)*sj0*x688*x697))+(((-1.0)*sj0*x688*x690))+(((-1.0)*x697*x711))+(((-0.0525)*x711))+(((-1.0)*sj0*x714)));
evalcond[7]=(((x690*x715))+((cj0*x714))+(((-1.0)*x690*x712))+(((-1.0)*py))+(((-1.0)*r11*x691))+((x697*x715))+(((-1.0)*x697*x712))+(((-0.0525)*x712))+((r10*x708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x716=((1.0)*sj5);
IkReal x717=(r11*sj6);
IkReal x718=(cj6*r10);
IkReal x719=(cj6*r00);
IkReal x720=(sj0*sj5);
IkReal x721=((1.0)*cj5);
IkReal x722=(r01*sj6);
IkReal x723=(cj0*sj5);
CheckValue<IkReal> x724=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x716*x717))+((x720*x722))+((cj0*cj5*r12))+((x718*x723))+(((-1.0)*r02*sj0*x721))+(((-1.0)*sj0*x716*x719)))),IkReal(((((-1.0)*cj0*x716*x719))+(((-1.0)*cj0*r02*x721))+((x722*x723))+((x717*x720))+(((-1.0)*r12*sj0*x721))+(((-1.0)*sj0*x716*x718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x725.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x724.value)))+(x725.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x726=IKsin(j2);
IkReal x727=IKcos(j2);
IkReal x728=((0.3425)*sj3);
IkReal x729=((0.076)*sj6);
IkReal x730=(cj6*sj4);
IkReal x731=((1.0)*r10);
IkReal x732=(cj6*sj5);
IkReal x733=(r02*sj5);
IkReal x734=(sj5*sj6);
IkReal x735=((0.0775)*cj3);
IkReal x736=(sj4*sj6);
IkReal x737=((1.0)*r00);
IkReal x738=(cj5*r01);
IkReal x739=(r12*sj5);
IkReal x740=(cj4*r11);
IkReal x741=((1.0)*cj6);
IkReal x742=((1.0)*sj3);
IkReal x743=(cj4*sj6);
IkReal x744=((1.0)*cj5);
IkReal x745=((1.0)*cj3);
IkReal x746=((0.076)*cj6);
IkReal x747=(cj3*x726);
IkReal x748=((1.0)*x726);
IkReal x749=(cj0*x727);
IkReal x750=(sj0*x727);
IkReal x751=(cj4*cj5*cj6);
IkReal x752=((0.0525)*x726);
IkReal x753=(cj0*x726);
evalcond[0]=((((-1.0)*x742*x750))+(((-1.0)*x731*x732))+(((-1.0)*r12*x744))+((r11*x734))+((sj3*x753)));
evalcond[1]=((((-1.0)*x732*x737))+(((-1.0)*x742*x749))+((r01*x734))+(((-1.0)*r02*x744))+(((-1.0)*sj0*x726*x742)));
evalcond[2]=((((-1.0)*cj4*r01*x741))+(((-1.0)*x737*x743))+((x736*x738))+(((-1.0)*cj0*x748))+(((-1.0)*cj5*x730*x737))+x750+((sj4*x733)));
evalcond[3]=(((r10*x736))+((cj4*x739))+(((-1.0)*x745*x750))+((cj5*sj6*x740))+(((-1.0)*x731*x751))+((r11*x730))+((cj0*x747)));
evalcond[4]=((((-1.0)*x731*x743))+(((-1.0)*cj5*x730*x731))+((cj5*r11*x736))+(((-1.0)*x740*x741))+(((-1.0)*x749))+((sj4*x739))+(((-1.0)*sj0*x748)));
evalcond[5]=(((x738*x743))+((cj4*x733))+(((-1.0)*x745*x749))+((r00*x736))+(((-1.0)*x737*x751))+((r01*x730))+(((-1.0)*sj0*x726*x745)));
evalcond[6]=((((-1.0)*sj0*x726*x728))+(((-1.0)*x728*x749))+(((-0.0525)*x749))+(((-1.0)*px))+((r00*x746))+(((-1.0)*sj0*x752))+(((-1.0)*x735*x749))+(((-1.0)*r01*x729))+(((-1.0)*sj0*x726*x735)));
evalcond[7]=(((x735*x753))+((r10*x746))+(((-1.0)*x728*x750))+(((-1.0)*py))+(((-0.0525)*x750))+((cj0*x752))+(((-1.0)*r11*x729))+((x728*x753))+(((-1.0)*x735*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x754=(r21*sj6);
IkReal x755=(cj6*r20);
IkReal x756=(cj5*r22);
IkReal x757=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((0.980645161290323)*x754))+(((12.9032258064516)*pz))+(((-4.41935483870968)*x756))+(((-1.0)*x755*x757))+(((-0.980645161290323)*x755))+((x754*x757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x754))+(((-1.0)*sj5*x755))+(((-1.0)*x756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((0.980645161290323)*x754))+(((12.9032258064516)*pz))+(((-4.41935483870968)*x756))+(((-1.0)*x755*x757))+(((-0.980645161290323)*x755))+((x754*x757))))+IKsqr((((sj5*x754))+(((-1.0)*sj5*x755))+(((-1.0)*x756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((0.980645161290323)*x754))+(((12.9032258064516)*pz))+(((-4.41935483870968)*x756))+(((-1.0)*x755*x757))+(((-0.980645161290323)*x755))+((x754*x757))), (((sj5*x754))+(((-1.0)*sj5*x755))+(((-1.0)*x756))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x758=IKcos(j3);
IkReal x759=IKsin(j3);
IkReal x760=(r21*sj6);
IkReal x761=(cj6*r20);
IkReal x762=(cj4*cj5);
evalcond[0]=((((-1.0)*sj5*x761))+(((-1.0)*x758))+(((-1.0)*cj5*r22))+((sj5*x760)));
evalcond[1]=((0.293)+(((-0.3425)*x758))+(((0.0775)*x759))+(((-0.076)*x760))+(((-1.0)*pz))+(((0.076)*x761)));
evalcond[2]=((((-1.0)*x761*x762))+((cj4*r22*sj5))+((x760*x762))+((cj6*r21*sj4))+x759+((r20*sj4*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x763=((1.0)*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x763)))))+(IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x763))+(((-1.0)*cj5*r02))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x764=((64920240.9929408)*cj6);
IkReal x765=((64920240.9929408)*sj6);
if( IKabs(((((-1.0)*r00*x764))+(((854213697.275536)*px))+((r01*x765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x764))+(((-854213697.275536)*py))+(((-1.0)*r11*x765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x764))+(((854213697.275536)*px))+((r01*x765))))+IKsqr((((r10*x764))+(((-854213697.275536)*py))+(((-1.0)*r11*x765))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x764))+(((854213697.275536)*px))+((r01*x765))), (((r10*x764))+(((-854213697.275536)*py))+(((-1.0)*r11*x765))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x766=IKcos(j2);
IkReal x767=IKsin(j2);
IkReal x768=((0.076)*sj6);
IkReal x769=(r02*sj5);
IkReal x770=(r11*sj6);
IkReal x771=(cj4*cj5);
IkReal x772=(cj5*sj4);
IkReal x773=(sj4*sj6);
IkReal x774=(r01*sj6);
IkReal x775=(r12*sj5);
IkReal x776=((1.0)*cj4);
IkReal x777=(cj6*r11);
IkReal x778=(cj6*r01);
IkReal x779=((1.0)*cj5);
IkReal x780=((0.076)*cj6);
IkReal x781=((1.0)*cj6*r10);
IkReal x782=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r01*x768))+((r00*x780))+(((-1.0)*px))+(((1.17066725011486e-9)*x767)));
evalcond[1]=(((r10*x780))+(((-1.0)*py))+(((-1.0)*r11*x768))+(((-1.17066725011486e-9)*x766)));
evalcond[2]=((((-1.0)*sj5*x781))+(((-1.0)*r12*x779))+(((0.07239889)*x766))+((sj5*x770)));
evalcond[3]=((((-1.0)*sj5*x782))+(((-0.07239889)*x767))+(((-1.0)*r02*x779))+((sj5*x774)));
evalcond[4]=((((-1.0)*r00*sj6*x776))+((x772*x774))+(((-1.0)*x772*x782))+((sj4*x769))+(((-1.0)*x776*x778))+x766);
evalcond[5]=((((-1.0)*r10*sj6*x776))+((sj4*x775))+((x770*x772))+(((-1.0)*x772*x781))+(((-1.0)*x776*x777))+x767);
evalcond[6]=(((sj4*x777))+((x770*x771))+((r10*x773))+(((-1.0)*x771*x781))+(((-0.997375754782803)*x766))+((cj4*x775)));
evalcond[7]=(((sj4*x778))+((x771*x774))+(((-1.0)*x771*x782))+((cj4*x769))+(((0.997375754782803)*x767))+((r00*x773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x783=((57213427.3137081)*sj6);
IkReal x784=((57213427.3137081)*cj6);
if( IKabs((((r00*x784))+(((-1.0)*r01*x783))+(((-752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x784))+((r11*x783))+(((752808254.127739)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x784))+(((-1.0)*r01*x783))+(((-752808254.127739)*px))))+IKsqr(((((-1.0)*r10*x784))+((r11*x783))+(((752808254.127739)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x784))+(((-1.0)*r01*x783))+(((-752808254.127739)*px))), ((((-1.0)*r10*x784))+((r11*x783))+(((752808254.127739)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x785=IKcos(j2);
IkReal x786=IKsin(j2);
IkReal x787=((0.076)*sj6);
IkReal x788=(r02*sj5);
IkReal x789=(r11*sj6);
IkReal x790=(cj4*cj5);
IkReal x791=(cj5*sj4);
IkReal x792=(sj4*sj6);
IkReal x793=(r01*sj6);
IkReal x794=(r12*sj5);
IkReal x795=((1.0)*cj4);
IkReal x796=(cj6*r11);
IkReal x797=(cj6*r01);
IkReal x798=((1.0)*cj5);
IkReal x799=((0.076)*cj6);
IkReal x800=((1.0)*cj6*r10);
IkReal x801=((1.0)*cj6*r00);
evalcond[0]=(((r00*x799))+(((-1.0)*r01*x787))+(((-1.32835950524835e-9)*x786))+(((-1.0)*px)));
evalcond[1]=(((r10*x799))+(((1.32835950524835e-9)*x785))+(((-1.0)*py))+(((-1.0)*r11*x787)));
evalcond[2]=((((-1.0)*sj5*x800))+((sj5*x789))+(((-1.0)*r12*x798))+(((-0.36403599)*x785)));
evalcond[3]=((((-1.0)*sj5*x801))+((sj5*x793))+(((0.36403599)*x786))+(((-1.0)*r02*x798)));
evalcond[4]=((((-1.0)*x795*x797))+(((-1.0)*x791*x801))+((sj4*x788))+x785+(((-1.0)*r00*sj6*x795))+((x791*x793)));
evalcond[5]=((((-1.0)*x795*x796))+(((-1.0)*r10*sj6*x795))+(((-1.0)*x791*x800))+((sj4*x794))+x786+((x789*x791)));
evalcond[6]=(((r10*x792))+(((-1.0)*x790*x800))+((cj4*x794))+((sj4*x796))+(((0.931384876172381)*x785))+((x789*x790)));
evalcond[7]=(((r00*x792))+((x790*x793))+(((-1.0)*x790*x801))+((cj4*x788))+((sj4*x797))+(((-0.931384876172381)*x786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x802=((0.584615384615385)*sj6);
IkReal x803=((0.584615384615385)*cj6);
if( IKabs(((((-1.0)*r01*x802))+((r00*x803))+(((-7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x802))+(((7.69230769230769)*py))+(((-1.0)*r10*x803)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x802))+((r00*x803))+(((-7.69230769230769)*px))))+IKsqr((((r11*x802))+(((7.69230769230769)*py))+(((-1.0)*r10*x803))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x802))+((r00*x803))+(((-7.69230769230769)*px))), (((r11*x802))+(((7.69230769230769)*py))+(((-1.0)*r10*x803))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x804=IKcos(j2);
IkReal x805=IKsin(j2);
IkReal x806=((0.076)*sj6);
IkReal x807=(r02*sj5);
IkReal x808=(cj4*cj5);
IkReal x809=(r11*sj6);
IkReal x810=((1.0)*cj6);
IkReal x811=(sj4*sj6);
IkReal x812=(r12*sj5);
IkReal x813=(cj6*sj4);
IkReal x814=(cj5*sj4);
IkReal x815=((0.076)*cj6);
IkReal x816=((1.0)*cj4*sj6);
evalcond[0]=(((r00*x815))+(((-1.0)*r01*x806))+(((-1.0)*px))+(((-0.13)*x805)));
evalcond[1]=((((-1.0)*r11*x806))+((r10*x815))+(((-1.0)*py))+(((0.13)*x804)));
evalcond[2]=(((r11*x813))+((r10*x811))+((cj4*x812))+(((-1.0)*r10*x808*x810))+x804+((x808*x809)));
evalcond[3]=(((cj5*r01*x811))+((sj4*x807))+(((-1.0)*cj4*r01*x810))+x804+(((-1.0)*r00*x816))+(((-1.0)*r00*x810*x814)));
evalcond[4]=(((sj4*x812))+((x809*x814))+(((-1.0)*r10*x816))+x805+(((-1.0)*cj4*r11*x810))+(((-1.0)*r10*x810*x814)));
evalcond[5]=((((-1.0)*x805))+((cj4*x807))+((r01*x813))+((r00*x811))+((r01*sj6*x808))+(((-1.0)*r00*x808*x810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x817=((3.04)*cj6);
IkReal x818=((3.04)*sj6);
if( IKabs(((((40.0)*px))+((r01*x818))+(((-1.0)*r00*x817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x818))+((r10*x817))+(((-40.0)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((40.0)*px))+((r01*x818))+(((-1.0)*r00*x817))))+IKsqr(((((-1.0)*r11*x818))+((r10*x817))+(((-40.0)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((40.0)*px))+((r01*x818))+(((-1.0)*r00*x817))), ((((-1.0)*r11*x818))+((r10*x817))+(((-40.0)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x819=IKsin(j2);
IkReal x820=IKcos(j2);
IkReal x821=(r11*sj6);
IkReal x822=(cj4*cj5);
IkReal x823=(r01*sj6);
IkReal x824=(r02*sj5);
IkReal x825=((1.0)*cj6);
IkReal x826=(sj4*sj6);
IkReal x827=(cj5*sj4);
IkReal x828=(r12*sj5);
IkReal x829=(cj6*sj4);
IkReal x830=((0.076)*cj6);
IkReal x831=((1.0)*cj4*sj6);
evalcond[0]=((((0.025)*x819))+((r00*x830))+(((-1.0)*px))+(((-0.076)*x823)));
evalcond[1]=((((-0.025)*x820))+((r10*x830))+(((-1.0)*py))+(((-0.076)*x821)));
evalcond[2]=(((r00*x826))+(((-1.0)*r00*x822*x825))+((r01*x829))+((cj4*x824))+((x822*x823))+x819);
evalcond[3]=((((-1.0)*r00*x825*x827))+(((-1.0)*cj4*r01*x825))+((x823*x827))+(((-1.0)*r00*x831))+x820+((sj4*x824)));
evalcond[4]=(((x821*x827))+(((-1.0)*r10*x825*x827))+(((-1.0)*r10*x831))+(((-1.0)*cj4*r11*x825))+x819+((sj4*x828)));
evalcond[5]=(((x821*x822))+((r10*x826))+((cj4*x828))+(((-1.0)*x820))+(((-1.0)*r10*x822*x825))+((r11*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x832=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x832.valid){
continue;
}
CheckValue<IkReal> x833=IKPowWithIntegerCheck(sj3,-1);
if(!x833.valid){
continue;
}
if( IKabs(((x832.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x833.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x832.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))+IKsqr(((x833.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x832.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))), ((x833.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x834=IKcos(j2);
IkReal x835=IKsin(j2);
IkReal x836=(r01*sj6);
IkReal x837=((0.0775)*cj3);
IkReal x838=(r02*sj5);
IkReal x839=(r11*sj6);
IkReal x840=(cj5*sj4);
IkReal x841=(cj4*cj5);
IkReal x842=(sj4*sj6);
IkReal x843=(r12*sj5);
IkReal x844=((1.0)*cj4);
IkReal x845=(cj6*r11);
IkReal x846=(cj6*r01);
IkReal x847=((1.0)*cj5);
IkReal x848=((0.076)*cj6);
IkReal x849=(sj3*x835);
IkReal x850=((1.0)*cj6*r10);
IkReal x851=(sj3*x834);
IkReal x852=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*sj5*x850))+((sj5*x839))+(((-1.0)*r12*x847))+x851);
evalcond[1]=((((-1.0)*r02*x847))+(((-1.0)*sj5*x852))+((sj5*x836))+(((-1.0)*x849)));
evalcond[2]=((((-1.0)*r00*sj6*x844))+((sj4*x838))+((x836*x840))+(((-1.0)*x844*x846))+(((-1.0)*x840*x852))+x834);
evalcond[3]=((((-1.0)*r10*sj6*x844))+((x839*x840))+((sj4*x843))+(((-1.0)*x844*x845))+(((-1.0)*x840*x850))+x835);
evalcond[4]=(((x839*x841))+((sj4*x845))+((cj4*x843))+(((-1.0)*x841*x850))+((r10*x842))+((cj3*x834)));
evalcond[5]=((((-0.076)*x836))+(((-1.0)*x835*x837))+(((-0.3425)*x849))+((r00*x848))+(((-1.0)*px))+(((-0.0525)*x835)));
evalcond[6]=((((-0.076)*x839))+(((0.3425)*x851))+(((-1.0)*py))+((r10*x848))+((x834*x837))+(((0.0525)*x834)));
evalcond[7]=(((sj4*x846))+((cj4*x838))+((r00*x842))+((x836*x841))+(((-1.0)*x841*x852))+(((-1.0)*cj3*x835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x853=(cj5*sj4);
IkReal x854=(cj6*r10);
IkReal x855=((1.0)*r11*sj6);
CheckValue<IkReal> x856=IKPowWithIntegerCheck(sj3,-1);
if(!x856.valid){
continue;
}
if( IKabs(((((-1.0)*x853*x855))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r11))+((cj4*r10*sj6))+((x853*x854)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x856.value)*((((cj5*r12))+((sj5*x854))+(((-1.0)*sj5*x855)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x853*x855))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r11))+((cj4*r10*sj6))+((x853*x854))))+IKsqr(((x856.value)*((((cj5*r12))+((sj5*x854))+(((-1.0)*sj5*x855))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x853*x855))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r11))+((cj4*r10*sj6))+((x853*x854))), ((x856.value)*((((cj5*r12))+((sj5*x854))+(((-1.0)*sj5*x855))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x857=IKcos(j2);
IkReal x858=IKsin(j2);
IkReal x859=(r01*sj6);
IkReal x860=((0.0775)*cj3);
IkReal x861=(r02*sj5);
IkReal x862=(r11*sj6);
IkReal x863=(cj5*sj4);
IkReal x864=(cj4*cj5);
IkReal x865=(sj4*sj6);
IkReal x866=(r12*sj5);
IkReal x867=((1.0)*cj4);
IkReal x868=(cj6*r11);
IkReal x869=(cj6*r01);
IkReal x870=((1.0)*cj5);
IkReal x871=((0.076)*cj6);
IkReal x872=(sj3*x858);
IkReal x873=((1.0)*cj6*r10);
IkReal x874=(sj3*x857);
IkReal x875=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r12*x870))+((sj5*x862))+(((-1.0)*sj5*x873))+x874);
evalcond[1]=(((sj5*x859))+(((-1.0)*x872))+(((-1.0)*sj5*x875))+(((-1.0)*r02*x870)));
evalcond[2]=(((x859*x863))+((sj4*x861))+x857+(((-1.0)*x867*x869))+(((-1.0)*r00*sj6*x867))+(((-1.0)*x863*x875)));
evalcond[3]=((((-1.0)*r10*sj6*x867))+((sj4*x866))+((x862*x863))+x858+(((-1.0)*x867*x868))+(((-1.0)*x863*x873)));
evalcond[4]=(((r10*x865))+((cj3*x857))+(((-1.0)*x864*x873))+((sj4*x868))+((x862*x864))+((cj4*x866)));
evalcond[5]=(((r00*x871))+(((-0.076)*x859))+(((-1.0)*px))+(((-0.3425)*x872))+(((-1.0)*x858*x860))+(((-0.0525)*x858)));
evalcond[6]=(((r10*x871))+(((-0.076)*x862))+(((0.0525)*x857))+(((0.3425)*x874))+(((-1.0)*py))+((x857*x860)));
evalcond[7]=(((r00*x865))+(((-1.0)*cj3*x858))+(((-1.0)*x864*x875))+((x859*x864))+((sj4*x869))+((cj4*x861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x876=((1.0)*sj5);
CheckValue<IkReal> x877=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x877.valid){
continue;
}
CheckValue<IkReal> x878 = IKatan2WithCheck(IkReal((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*x876)))),IkReal((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x878.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x877.value)))+(x878.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x879=IKcos(j2);
IkReal x880=IKsin(j2);
IkReal x881=(r01*sj6);
IkReal x882=((0.0775)*cj3);
IkReal x883=(r02*sj5);
IkReal x884=(r11*sj6);
IkReal x885=(cj5*sj4);
IkReal x886=(cj4*cj5);
IkReal x887=(sj4*sj6);
IkReal x888=(r12*sj5);
IkReal x889=((1.0)*cj4);
IkReal x890=(cj6*r11);
IkReal x891=(cj6*r01);
IkReal x892=((1.0)*cj5);
IkReal x893=((0.076)*cj6);
IkReal x894=(sj3*x880);
IkReal x895=((1.0)*cj6*r10);
IkReal x896=(sj3*x879);
IkReal x897=((1.0)*cj6*r00);
evalcond[0]=(((sj5*x884))+(((-1.0)*r12*x892))+(((-1.0)*sj5*x895))+x896);
evalcond[1]=(((sj5*x881))+(((-1.0)*x894))+(((-1.0)*sj5*x897))+(((-1.0)*r02*x892)));
evalcond[2]=(((sj4*x883))+((x881*x885))+(((-1.0)*r00*sj6*x889))+(((-1.0)*x889*x891))+(((-1.0)*x885*x897))+x879);
evalcond[3]=(((sj4*x888))+(((-1.0)*x889*x890))+(((-1.0)*r10*sj6*x889))+(((-1.0)*x885*x895))+x880+((x884*x885)));
evalcond[4]=(((sj4*x890))+((cj3*x879))+((r10*x887))+((cj4*x888))+((x884*x886))+(((-1.0)*x886*x895)));
evalcond[5]=((((-0.3425)*x894))+((r00*x893))+(((-1.0)*px))+(((-0.0525)*x880))+(((-0.076)*x881))+(((-1.0)*x880*x882)));
evalcond[6]=(((x879*x882))+(((0.3425)*x896))+((r10*x893))+(((-1.0)*py))+(((0.0525)*x879))+(((-0.076)*x884)));
evalcond[7]=(((x881*x886))+((sj4*x891))+((r00*x887))+((cj4*x883))+(((-1.0)*cj3*x880))+(((-1.0)*x886*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x898=(cj6*r20);
IkReal x899=(cj4*cj5);
IkReal x900=(r21*sj6);
if( IKabs((((cj4*r22*sj5))+((x899*x900))+((cj6*r21*sj4))+(((-1.0)*x898*x899))+((r20*sj4*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((sj5*x898))+(((-1.0)*sj5*x900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r22*sj5))+((x899*x900))+((cj6*r21*sj4))+(((-1.0)*x898*x899))+((r20*sj4*sj6))))+IKsqr((((cj5*r22))+((sj5*x898))+(((-1.0)*sj5*x900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj4*r22*sj5))+((x899*x900))+((cj6*r21*sj4))+(((-1.0)*x898*x899))+((r20*sj4*sj6))), (((cj5*r22))+((sj5*x898))+(((-1.0)*sj5*x900))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x901=IKcos(j3);
IkReal x902=IKsin(j3);
IkReal x903=(r21*sj6);
IkReal x904=(cj6*r20);
IkReal x905=(cj4*cj5);
evalcond[0]=(((sj5*x903))+(((-1.0)*sj5*x904))+(((-1.0)*cj5*r22))+x901);
evalcond[1]=((-0.293)+(((0.3425)*x901))+(((-1.0)*pz))+(((-0.076)*x903))+(((0.076)*x904))+(((-0.0775)*x902)));
evalcond[2]=(((x903*x905))+((cj4*r22*sj5))+(((-1.0)*x904*x905))+((cj6*r21*sj4))+(((-1.0)*x902))+((r20*sj4*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x906=((1.0)*cj5);
IkReal x907=(sj5*sj6);
IkReal x908=((1.0)*cj6*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((r11*x907))+(((-1.0)*r12*x906))+(((-1.0)*r10*x908)))))+(IKabs((((r01*x907))+(((-1.0)*r00*x908))+(((-1.0)*r02*x906))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x909=((64920240.9929408)*cj6);
IkReal x910=((64920240.9929408)*sj6);
if( IKabs(((((854213697.275536)*px))+(((-1.0)*r00*x909))+((r01*x910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((854213697.275536)*py))+((r11*x910))+(((-1.0)*r10*x909)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((854213697.275536)*px))+(((-1.0)*r00*x909))+((r01*x910))))+IKsqr(((((854213697.275536)*py))+((r11*x910))+(((-1.0)*r10*x909))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((854213697.275536)*px))+(((-1.0)*r00*x909))+((r01*x910))), ((((854213697.275536)*py))+((r11*x910))+(((-1.0)*r10*x909))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x911=IKcos(j2);
IkReal x912=IKsin(j2);
IkReal x913=((0.076)*sj6);
IkReal x914=(r02*sj5);
IkReal x915=(r11*sj6);
IkReal x916=(cj4*cj5);
IkReal x917=(cj5*sj4);
IkReal x918=(sj4*sj6);
IkReal x919=(r01*sj6);
IkReal x920=(r12*sj5);
IkReal x921=((1.0)*cj4);
IkReal x922=(cj6*r11);
IkReal x923=(cj6*r01);
IkReal x924=((1.0)*cj5);
IkReal x925=((0.076)*cj6);
IkReal x926=((1.0)*cj6*r10);
IkReal x927=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r01*x913))+(((1.17066725011486e-9)*x912))+(((-1.0)*px))+((r00*x925)));
evalcond[1]=(((r10*x925))+(((1.17066725011486e-9)*x911))+(((-1.0)*py))+(((-1.0)*r11*x913)));
evalcond[2]=((((-0.07239889)*x911))+((sj5*x915))+(((-1.0)*r12*x924))+(((-1.0)*sj5*x926)));
evalcond[3]=((((-0.07239889)*x912))+((sj5*x919))+(((-1.0)*sj5*x927))+(((-1.0)*r02*x924)));
evalcond[4]=(((x917*x919))+(((-1.0)*r00*sj6*x921))+(((-1.0)*x921*x923))+x911+(((-1.0)*x917*x927))+((sj4*x914)));
evalcond[5]=((((0.997375754782803)*x911))+((sj4*x922))+((r10*x918))+((x915*x916))+(((-1.0)*x916*x926))+((cj4*x920)));
evalcond[6]=((((0.997375754782803)*x912))+((sj4*x923))+((x916*x919))+((cj4*x914))+(((-1.0)*x916*x927))+((r00*x918)));
evalcond[7]=(((sj4*x920))+(((-1.0)*x912))+(((-1.0)*x921*x922))+((x915*x917))+(((-1.0)*x917*x926))+(((-1.0)*r10*sj6*x921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x928=((57213427.3137081)*sj6);
IkReal x929=((57213427.3137081)*cj6);
if( IKabs(((((-1.0)*r01*x928))+((r00*x929))+(((-752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x928))+((r10*x929))+(((-752808254.127739)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x928))+((r00*x929))+(((-752808254.127739)*px))))+IKsqr(((((-1.0)*r11*x928))+((r10*x929))+(((-752808254.127739)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x928))+((r00*x929))+(((-752808254.127739)*px))), ((((-1.0)*r11*x928))+((r10*x929))+(((-752808254.127739)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x930=IKcos(j2);
IkReal x931=IKsin(j2);
IkReal x932=((0.076)*sj6);
IkReal x933=(r02*sj5);
IkReal x934=(r11*sj6);
IkReal x935=(cj4*cj5);
IkReal x936=(cj5*sj4);
IkReal x937=(sj4*sj6);
IkReal x938=(r01*sj6);
IkReal x939=(r12*sj5);
IkReal x940=((1.0)*cj4);
IkReal x941=(cj6*r11);
IkReal x942=(cj6*r01);
IkReal x943=((1.0)*cj5);
IkReal x944=((0.076)*cj6);
IkReal x945=((1.0)*cj6*r10);
IkReal x946=((1.0)*cj6*r00);
evalcond[0]=((((-1.32835950524835e-9)*x931))+(((-1.0)*px))+((r00*x944))+(((-1.0)*r01*x932)));
evalcond[1]=((((-1.0)*r11*x932))+(((-1.32835950524835e-9)*x930))+(((-1.0)*py))+((r10*x944)));
evalcond[2]=((((-1.0)*r12*x943))+(((0.36403599)*x930))+(((-1.0)*sj5*x945))+((sj5*x934)));
evalcond[3]=((((-1.0)*r02*x943))+(((0.36403599)*x931))+(((-1.0)*sj5*x946))+((sj5*x938)));
evalcond[4]=(((x936*x938))+((sj4*x933))+(((-1.0)*r00*sj6*x940))+(((-1.0)*x936*x946))+x930+(((-1.0)*x940*x942)));
evalcond[5]=((((-0.931384876172381)*x930))+((r10*x937))+((sj4*x941))+((cj4*x939))+((x934*x935))+(((-1.0)*x935*x945)));
evalcond[6]=((((-0.931384876172381)*x931))+((x935*x938))+((sj4*x942))+((cj4*x933))+((r00*x937))+(((-1.0)*x935*x946)));
evalcond[7]=((((-1.0)*r10*sj6*x940))+((sj4*x939))+(((-1.0)*x931))+(((-1.0)*x936*x945))+((x934*x936))+(((-1.0)*x940*x941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x947=((0.584615384615385)*sj6);
IkReal x948=((0.584615384615385)*cj6);
if( IKabs(((((-1.0)*r01*x947))+((r00*x948))+(((-7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x947))+(((-7.69230769230769)*py))+((r10*x948)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x947))+((r00*x948))+(((-7.69230769230769)*px))))+IKsqr(((((-1.0)*r11*x947))+(((-7.69230769230769)*py))+((r10*x948))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x947))+((r00*x948))+(((-7.69230769230769)*px))), ((((-1.0)*r11*x947))+(((-7.69230769230769)*py))+((r10*x948))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x949=IKcos(j2);
IkReal x950=IKsin(j2);
IkReal x951=((0.076)*sj6);
IkReal x952=(r02*sj5);
IkReal x953=(cj4*cj5);
IkReal x954=(r11*sj6);
IkReal x955=(cj5*sj4);
IkReal x956=(sj4*sj6);
IkReal x957=(r01*sj6);
IkReal x958=((1.0)*cj6);
IkReal x959=(r12*sj5);
IkReal x960=(cj6*sj4);
IkReal x961=((0.076)*cj6);
IkReal x962=((1.0)*x950);
IkReal x963=(r10*x958);
IkReal x964=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r01*x951))+((r00*x961))+(((-1.0)*px))+(((-0.13)*x950)));
evalcond[1]=((((-0.13)*x949))+(((-1.0)*py))+(((-1.0)*r11*x951))+((r10*x961)));
evalcond[2]=(((x955*x957))+(((-1.0)*cj4*r01*x958))+(((-1.0)*r00*x964))+((sj4*x952))+(((-1.0)*r00*x955*x958))+x949);
evalcond[3]=((((-1.0)*x949))+(((-1.0)*x953*x963))+((r11*x960))+((x953*x954))+((cj4*x959))+((r10*x956)));
evalcond[4]=((((-1.0)*r00*x953*x958))+((r01*x960))+((r00*x956))+((x953*x957))+((cj4*x952))+(((-1.0)*x962)));
evalcond[5]=((((-1.0)*cj4*r11*x958))+(((-1.0)*r10*x964))+((sj4*x959))+(((-1.0)*x955*x963))+(((-1.0)*x962))+((x954*x955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x965=((3.04)*cj6);
IkReal x966=((3.04)*sj6);
if( IKabs(((((40.0)*px))+(((-1.0)*r00*x965))+((r01*x966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((40.0)*py))+(((-1.0)*r10*x965))+((r11*x966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((40.0)*px))+(((-1.0)*r00*x965))+((r01*x966))))+IKsqr(((((40.0)*py))+(((-1.0)*r10*x965))+((r11*x966))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((40.0)*px))+(((-1.0)*r00*x965))+((r01*x966))), ((((40.0)*py))+(((-1.0)*r10*x965))+((r11*x966))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x967=IKcos(j2);
IkReal x968=IKsin(j2);
IkReal x969=((0.076)*sj6);
IkReal x970=(r02*sj5);
IkReal x971=(cj4*cj5);
IkReal x972=(r11*sj6);
IkReal x973=((1.0)*cj6);
IkReal x974=(sj4*sj6);
IkReal x975=(r12*sj5);
IkReal x976=(cj6*sj4);
IkReal x977=(cj5*sj4);
IkReal x978=((0.076)*cj6);
IkReal x979=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r01*x969))+((r00*x978))+(((-1.0)*px))+(((0.025)*x968)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*r11*x969))+((r10*x978))+(((0.025)*x967)));
evalcond[2]=(((cj4*x975))+((x971*x972))+(((-1.0)*r10*x971*x973))+((r10*x974))+((r11*x976))+x967);
evalcond[3]=(((cj4*x970))+((r01*sj6*x971))+((r01*x976))+((r00*x974))+(((-1.0)*r00*x971*x973))+x968);
evalcond[4]=((((-1.0)*r00*x973*x977))+(((-1.0)*r00*x979))+(((-1.0)*cj4*r01*x973))+((cj5*r01*x974))+((sj4*x970))+x967);
evalcond[5]=((((-1.0)*cj4*r11*x973))+(((-1.0)*x968))+((sj4*x975))+(((-1.0)*r10*x979))+((x972*x977))+(((-1.0)*r10*x973*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x980=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x980.valid){
continue;
}
CheckValue<IkReal> x981=IKPowWithIntegerCheck(sj3,-1);
if(!x981.valid){
continue;
}
if( IKabs(((x980.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x981.value)*(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x980.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))+IKsqr(((x981.value)*(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x980.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))), ((x981.value)*(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x982=IKcos(j2);
IkReal x983=IKsin(j2);
IkReal x984=(r11*sj6);
IkReal x985=(cj4*cj5);
IkReal x986=(r01*sj6);
IkReal x987=(r02*sj5);
IkReal x988=(cj5*sj4);
IkReal x989=(sj4*sj6);
IkReal x990=((0.0775)*cj3);
IkReal x991=(r12*sj5);
IkReal x992=((1.0)*cj3);
IkReal x993=((1.0)*cj4);
IkReal x994=(cj6*r11);
IkReal x995=(cj6*r01);
IkReal x996=((1.0)*cj5);
IkReal x997=((0.076)*cj6);
IkReal x998=(sj3*x983);
IkReal x999=((1.0)*cj6*r10);
IkReal x1000=(sj3*x982);
IkReal x1001=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*x1000))+(((-1.0)*r12*x996))+(((-1.0)*sj5*x999))+((sj5*x984)));
evalcond[1]=((((-1.0)*x998))+(((-1.0)*r02*x996))+((sj5*x986))+(((-1.0)*sj5*x1001)));
evalcond[2]=(((x986*x988))+(((-1.0)*r00*sj6*x993))+((sj4*x987))+(((-1.0)*x1001*x988))+(((-1.0)*x993*x995))+x982);
evalcond[3]=((((-0.076)*x986))+((r00*x997))+(((-0.3425)*x998))+(((-1.0)*px))+(((-1.0)*x983*x990))+(((-0.0525)*x983)));
evalcond[4]=((((-0.076)*x984))+(((-1.0)*x982*x990))+(((-1.0)*py))+((r10*x997))+(((-0.0525)*x982))+(((-0.3425)*x1000)));
evalcond[5]=(((sj4*x994))+((cj4*x991))+(((-1.0)*x985*x999))+(((-1.0)*x982*x992))+((x984*x985))+((r10*x989)));
evalcond[6]=(((sj4*x995))+((cj4*x987))+((r00*x989))+(((-1.0)*x1001*x985))+(((-1.0)*x983*x992))+((x985*x986)));
evalcond[7]=(((sj4*x991))+(((-1.0)*x983))+(((-1.0)*r10*sj6*x993))+((x984*x988))+(((-1.0)*x993*x994))+(((-1.0)*x988*x999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1002=((1.0)*sj5);
IkReal x1003=(cj6*r00);
IkReal x1004=(cj5*sj4);
IkReal x1005=(r01*sj6);
CheckValue<IkReal> x1006=IKPowWithIntegerCheck(sj3,-1);
if(!x1006.valid){
continue;
}
if( IKabs(((x1006.value)*((((sj5*x1005))+(((-1.0)*x1002*x1003))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r00*sj6))+(((-1.0)*r02*sj4*x1002))+(((-1.0)*x1004*x1005))+((cj4*cj6*r01))+((x1003*x1004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1006.value)*((((sj5*x1005))+(((-1.0)*x1002*x1003))+(((-1.0)*cj5*r02))))))+IKsqr((((cj4*r00*sj6))+(((-1.0)*r02*sj4*x1002))+(((-1.0)*x1004*x1005))+((cj4*cj6*r01))+((x1003*x1004))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1006.value)*((((sj5*x1005))+(((-1.0)*x1002*x1003))+(((-1.0)*cj5*r02))))), (((cj4*r00*sj6))+(((-1.0)*r02*sj4*x1002))+(((-1.0)*x1004*x1005))+((cj4*cj6*r01))+((x1003*x1004))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1007=IKcos(j2);
IkReal x1008=IKsin(j2);
IkReal x1009=(r11*sj6);
IkReal x1010=(cj4*cj5);
IkReal x1011=(r01*sj6);
IkReal x1012=(r02*sj5);
IkReal x1013=(cj5*sj4);
IkReal x1014=(sj4*sj6);
IkReal x1015=((0.0775)*cj3);
IkReal x1016=(r12*sj5);
IkReal x1017=((1.0)*cj3);
IkReal x1018=((1.0)*cj4);
IkReal x1019=(cj6*r11);
IkReal x1020=(cj6*r01);
IkReal x1021=((1.0)*cj5);
IkReal x1022=((0.076)*cj6);
IkReal x1023=(sj3*x1008);
IkReal x1024=((1.0)*cj6*r10);
IkReal x1025=(sj3*x1007);
IkReal x1026=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r12*x1021))+(((-1.0)*x1025))+((sj5*x1009))+(((-1.0)*sj5*x1024)));
evalcond[1]=((((-1.0)*x1023))+((sj5*x1011))+(((-1.0)*r02*x1021))+(((-1.0)*sj5*x1026)));
evalcond[2]=(x1007+((sj4*x1012))+(((-1.0)*x1018*x1020))+(((-1.0)*r00*sj6*x1018))+(((-1.0)*x1013*x1026))+((x1011*x1013)));
evalcond[3]=((((-0.076)*x1011))+(((-0.3425)*x1023))+(((-0.0525)*x1008))+(((-1.0)*x1008*x1015))+(((-1.0)*px))+((r00*x1022)));
evalcond[4]=((((-0.3425)*x1025))+(((-0.0525)*x1007))+(((-1.0)*py))+(((-1.0)*x1007*x1015))+(((-0.076)*x1009))+((r10*x1022)));
evalcond[5]=(((x1009*x1010))+((sj4*x1019))+((cj4*x1016))+(((-1.0)*x1007*x1017))+((r10*x1014))+(((-1.0)*x1010*x1024)));
evalcond[6]=(((sj4*x1020))+(((-1.0)*x1008*x1017))+((cj4*x1012))+((r00*x1014))+(((-1.0)*x1010*x1026))+((x1010*x1011)));
evalcond[7]=((((-1.0)*x1018*x1019))+(((-1.0)*x1008))+((x1009*x1013))+((sj4*x1016))+(((-1.0)*x1013*x1024))+(((-1.0)*r10*sj6*x1018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1027=((1.0)*cj5);
IkReal x1028=(sj5*sj6);
IkReal x1029=((1.0)*cj6*sj5);
CheckValue<IkReal> x1030 = IKatan2WithCheck(IkReal((((r01*x1028))+(((-1.0)*r00*x1029))+(((-1.0)*r02*x1027)))),IkReal(((((-1.0)*r12*x1027))+((r11*x1028))+(((-1.0)*r10*x1029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1030.valid){
continue;
}
CheckValue<IkReal> x1031=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1031.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1030.value)+(((1.5707963267949)*(x1031.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1032=IKcos(j2);
IkReal x1033=IKsin(j2);
IkReal x1034=(r11*sj6);
IkReal x1035=(cj4*cj5);
IkReal x1036=(r01*sj6);
IkReal x1037=(r02*sj5);
IkReal x1038=(cj5*sj4);
IkReal x1039=(sj4*sj6);
IkReal x1040=((0.0775)*cj3);
IkReal x1041=(r12*sj5);
IkReal x1042=((1.0)*cj3);
IkReal x1043=((1.0)*cj4);
IkReal x1044=(cj6*r11);
IkReal x1045=(cj6*r01);
IkReal x1046=((1.0)*cj5);
IkReal x1047=((0.076)*cj6);
IkReal x1048=(sj3*x1033);
IkReal x1049=((1.0)*cj6*r10);
IkReal x1050=(sj3*x1032);
IkReal x1051=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*sj5*x1049))+(((-1.0)*r12*x1046))+((sj5*x1034))+(((-1.0)*x1050)));
evalcond[1]=((((-1.0)*r02*x1046))+(((-1.0)*sj5*x1051))+((sj5*x1036))+(((-1.0)*x1048)));
evalcond[2]=(((x1036*x1038))+((sj4*x1037))+x1032+(((-1.0)*x1038*x1051))+(((-1.0)*x1043*x1045))+(((-1.0)*r00*sj6*x1043)));
evalcond[3]=((((-1.0)*x1033*x1040))+(((-0.0525)*x1033))+(((-1.0)*px))+((r00*x1047))+(((-0.076)*x1036))+(((-0.3425)*x1048)));
evalcond[4]=((((-1.0)*x1032*x1040))+(((-0.0525)*x1032))+(((-1.0)*py))+((r10*x1047))+(((-0.3425)*x1050))+(((-0.076)*x1034)));
evalcond[5]=(((r10*x1039))+(((-1.0)*x1032*x1042))+((x1034*x1035))+(((-1.0)*x1035*x1049))+((cj4*x1041))+((sj4*x1044)));
evalcond[6]=(((r00*x1039))+(((-1.0)*x1033*x1042))+((cj4*x1037))+((x1035*x1036))+(((-1.0)*x1035*x1051))+((sj4*x1045)));
evalcond[7]=((((-1.0)*x1033))+(((-1.0)*x1038*x1049))+(((-1.0)*x1043*x1044))+(((-1.0)*r10*sj6*x1043))+((x1034*x1038))+((sj4*x1041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1052=(cj5*r12);
IkReal x1053=(r11*sj6);
IkReal x1054=(cj6*r10*sj5);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((4.41935483870968)*sj5*x1053))+(((-4.41935483870968)*x1052))+(((-4.41935483870968)*x1054))+(((0.980645161290323)*x1053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x1053))+(((-1.0)*x1054))+(((-1.0)*x1052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((4.41935483870968)*sj5*x1053))+(((-4.41935483870968)*x1052))+(((-4.41935483870968)*x1054))+(((0.980645161290323)*x1053))))+IKsqr((((sj5*x1053))+(((-1.0)*x1054))+(((-1.0)*x1052))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((4.41935483870968)*sj5*x1053))+(((-4.41935483870968)*x1052))+(((-4.41935483870968)*x1054))+(((0.980645161290323)*x1053))), (((sj5*x1053))+(((-1.0)*x1054))+(((-1.0)*x1052))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1055=IKcos(j3);
IkReal x1056=IKsin(j3);
IkReal x1057=(r11*sj6);
IkReal x1058=(cj4*cj5);
IkReal x1059=(cj6*r10);
evalcond[0]=((((-1.0)*cj5*r12))+((sj5*x1057))+(((-1.0)*sj5*x1059))+(((-1.0)*x1055)));
evalcond[1]=((0.293)+(((-1.0)*py))+(((0.0775)*x1056))+(((0.076)*x1059))+(((-0.076)*x1057))+(((-0.3425)*x1055)));
evalcond[2]=(x1056+((r10*sj4*sj6))+((x1057*x1058))+((cj6*r11*sj4))+(((-1.0)*x1058*x1059))+((cj4*r12*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1060=(sj5*sj6);
IkReal x1061=((1.0)*cj5);
IkReal x1062=((1.0)*cj6*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*r02*x1061))+(((-1.0)*r00*x1062))+((r01*x1060)))))+(IKabs(((((-1.0)*r20*x1062))+(((-1.0)*r22*x1061))+((r21*x1060))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1063=((64920240.9929408)*cj6);
IkReal x1064=((64920240.9929408)*sj6);
if( IKabs(((((854213697.275536)*px))+(((-1.0)*r00*x1063))+((r01*x1064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1063))+(((854213697.275536)*pz))+((r21*x1064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((854213697.275536)*px))+(((-1.0)*r00*x1063))+((r01*x1064))))+IKsqr(((((-1.0)*r20*x1063))+(((854213697.275536)*pz))+((r21*x1064))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((854213697.275536)*px))+(((-1.0)*r00*x1063))+((r01*x1064))), ((((-1.0)*r20*x1063))+(((854213697.275536)*pz))+((r21*x1064))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1065=IKcos(j2);
IkReal x1066=IKsin(j2);
IkReal x1067=(sj4*sj6);
IkReal x1068=(sj4*sj5);
IkReal x1069=(cj5*r21);
IkReal x1070=((1.0)*cj5);
IkReal x1071=(cj4*r20);
IkReal x1072=((0.076)*sj6);
IkReal x1073=((1.0)*sj6);
IkReal x1074=(cj6*r20);
IkReal x1075=((1.0)*sj5);
IkReal x1076=(sj5*sj6);
IkReal x1077=(cj6*r00);
IkReal x1078=(cj5*r01);
IkReal x1079=(cj6*sj4);
IkReal x1080=(cj4*sj6);
IkReal x1081=(cj4*sj5);
IkReal x1082=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*r21*x1072))+(((-1.0)*pz))+(((0.076)*x1074))+(((1.17066725011486e-9)*x1065)));
evalcond[1]=((((-1.0)*r01*x1072))+(((-1.0)*px))+(((0.076)*x1077))+(((1.17066725011486e-9)*x1066)));
evalcond[2]=((((-1.0)*x1074*x1075))+(((-1.0)*r22*x1070))+(((-0.07239889)*x1065))+((r21*x1076)));
evalcond[3]=((((-1.0)*x1075*x1077))+(((-1.0)*r02*x1070))+(((-0.07239889)*x1066))+((r01*x1076)));
evalcond[4]=(((r20*x1067))+((x1069*x1080))+((r22*x1081))+(((0.997375754782803)*x1065))+((r21*x1079))+(((-1.0)*cj6*x1070*x1071)));
evalcond[5]=(x1065+((x1067*x1078))+(((-1.0)*r01*x1082))+(((-1.0)*sj4*x1070*x1077))+((r02*x1068))+(((-1.0)*cj4*r00*x1073)));
evalcond[6]=((((-1.0)*cj4*x1070*x1077))+((x1078*x1080))+(((0.997375754782803)*x1066))+((r00*x1067))+((r01*x1079))+((r02*x1081)));
evalcond[7]=((((-1.0)*r21*x1082))+(((-1.0)*x1071*x1073))+((x1067*x1069))+(((-1.0)*sj4*x1070*x1074))+((r22*x1068))+(((-1.0)*x1066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1083=((57213427.3137081)*sj6);
IkReal x1084=((57213427.3137081)*cj6);
if( IKabs((((r00*x1084))+(((-1.0)*r01*x1083))+(((-752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1083))+((r20*x1084))+(((-752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1084))+(((-1.0)*r01*x1083))+(((-752808254.127739)*px))))+IKsqr(((((-1.0)*r21*x1083))+((r20*x1084))+(((-752808254.127739)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x1084))+(((-1.0)*r01*x1083))+(((-752808254.127739)*px))), ((((-1.0)*r21*x1083))+((r20*x1084))+(((-752808254.127739)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1085=IKcos(j2);
IkReal x1086=IKsin(j2);
IkReal x1087=(r21*sj6);
IkReal x1088=(sj4*sj5);
IkReal x1089=(cj5*sj4);
IkReal x1090=((1.0)*cj5);
IkReal x1091=(cj4*r20);
IkReal x1092=(r01*sj6);
IkReal x1093=((1.0)*sj6);
IkReal x1094=(sj4*sj6);
IkReal x1095=(cj6*r00);
IkReal x1096=(cj6*sj4);
IkReal x1097=(cj4*cj5);
IkReal x1098=(cj4*sj5);
IkReal x1099=((1.0)*cj6*r20);
IkReal x1100=((1.0)*cj4*cj6);
evalcond[0]=((((0.076)*cj6*r20))+(((-1.32835950524835e-9)*x1085))+(((-1.0)*pz))+(((-0.076)*x1087)));
evalcond[1]=((((0.076)*x1095))+(((-0.076)*x1092))+(((-1.32835950524835e-9)*x1086))+(((-1.0)*px)));
evalcond[2]=(((sj5*x1087))+(((-1.0)*sj5*x1099))+(((0.36403599)*x1085))+(((-1.0)*r22*x1090)));
evalcond[3]=((((-1.0)*r02*x1090))+(((0.36403599)*x1086))+(((-1.0)*sj5*x1095))+((sj5*x1092)));
evalcond[4]=(((x1087*x1097))+(((-0.931384876172381)*x1085))+((r21*x1096))+((r22*x1098))+(((-1.0)*cj6*x1090*x1091))+((r20*x1094)));
evalcond[5]=((((-1.0)*cj4*r00*x1093))+(((-1.0)*r01*x1100))+(((-1.0)*x1089*x1095))+x1085+((x1089*x1092))+((r02*x1088)));
evalcond[6]=(((r01*x1096))+((r00*x1094))+(((-0.931384876172381)*x1086))+((r02*x1098))+(((-1.0)*cj4*x1090*x1095))+((x1092*x1097)));
evalcond[7]=((((-1.0)*x1091*x1093))+(((-1.0)*x1089*x1099))+(((-1.0)*r21*x1100))+(((-1.0)*x1086))+((x1087*x1089))+((r22*x1088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1101=((0.584615384615385)*cj6);
IkReal x1102=((0.584615384615385)*sj6);
if( IKabs(((((-1.0)*r01*x1102))+((r00*x1101))+(((-7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1101))+(((-1.0)*r21*x1102))+(((-7.69230769230769)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1102))+((r00*x1101))+(((-7.69230769230769)*px))))+IKsqr((((r20*x1101))+(((-1.0)*r21*x1102))+(((-7.69230769230769)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1102))+((r00*x1101))+(((-7.69230769230769)*px))), (((r20*x1101))+(((-1.0)*r21*x1102))+(((-7.69230769230769)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1103=IKcos(j2);
IkReal x1104=IKsin(j2);
IkReal x1105=(sj4*sj5);
IkReal x1106=(cj5*cj6);
IkReal x1107=((0.076)*sj6);
IkReal x1108=(r20*sj4);
IkReal x1109=(r00*sj6);
IkReal x1110=((1.0)*cj4);
IkReal x1111=(cj6*sj4);
IkReal x1112=((0.076)*cj6);
IkReal x1113=(cj4*sj5);
IkReal x1114=((1.0)*x1104);
IkReal x1115=(cj5*sj4*sj6);
IkReal x1116=(r20*x1110);
IkReal x1117=(cj4*cj5*sj6);
evalcond[0]=(((r20*x1112))+(((-1.0)*r21*x1107))+(((-0.13)*x1103))+(((-1.0)*pz)));
evalcond[1]=((((-1.0)*r01*x1107))+(((-0.13)*x1104))+((r00*x1112))+(((-1.0)*px)));
evalcond[2]=((((-1.0)*x1103))+((sj6*x1108))+((r22*x1113))+(((-1.0)*x1106*x1116))+((r21*x1117))+((r21*x1111)));
evalcond[3]=(((r02*x1105))+x1103+(((-1.0)*cj6*r01*x1110))+(((-1.0)*x1109*x1110))+((r01*x1115))+(((-1.0)*r00*sj4*x1106)));
evalcond[4]=(((r01*x1111))+((r01*x1117))+((sj4*x1109))+(((-1.0)*r00*x1106*x1110))+(((-1.0)*x1114))+((r02*x1113)));
evalcond[5]=(((r22*x1105))+((r21*x1115))+(((-1.0)*cj6*r21*x1110))+(((-1.0)*sj6*x1116))+(((-1.0)*x1114))+(((-1.0)*x1106*x1108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1118=((3.04)*cj6);
IkReal x1119=((3.04)*sj6);
if( IKabs(((((40.0)*px))+(((-1.0)*r00*x1118))+((r01*x1119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((40.0)*pz))+(((-1.0)*r20*x1118))+((r21*x1119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((40.0)*px))+(((-1.0)*r00*x1118))+((r01*x1119))))+IKsqr(((((40.0)*pz))+(((-1.0)*r20*x1118))+((r21*x1119))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((40.0)*px))+(((-1.0)*r00*x1118))+((r01*x1119))), ((((40.0)*pz))+(((-1.0)*r20*x1118))+((r21*x1119))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1120=IKcos(j2);
IkReal x1121=IKsin(j2);
IkReal x1122=(sj4*sj5);
IkReal x1123=(r21*sj6);
IkReal x1124=(cj5*sj4);
IkReal x1125=(cj5*cj6);
IkReal x1126=(r01*sj6);
IkReal x1127=(cj6*r20);
IkReal x1128=(sj4*sj6);
IkReal x1129=((1.0)*cj4);
IkReal x1130=(cj6*sj4);
IkReal x1131=(cj4*cj5);
IkReal x1132=(cj4*sj5);
IkReal x1133=(cj6*r00);
IkReal x1134=(r20*x1129);
evalcond[0]=((((-0.076)*x1123))+(((0.076)*x1127))+(((0.025)*x1120))+(((-1.0)*pz)));
evalcond[1]=((((-0.076)*x1126))+(((0.025)*x1121))+(((0.076)*x1133))+(((-1.0)*px)));
evalcond[2]=(x1120+((r21*x1130))+((r22*x1132))+((x1123*x1131))+(((-1.0)*x1125*x1134))+((r20*x1128)));
evalcond[3]=(x1121+((x1126*x1131))+((r00*x1128))+((r01*x1130))+(((-1.0)*r00*x1125*x1129))+((r02*x1132)));
evalcond[4]=(x1120+(((-1.0)*r00*sj6*x1129))+(((-1.0)*x1124*x1133))+(((-1.0)*cj6*r01*x1129))+((x1124*x1126))+((r02*x1122)));
evalcond[5]=((((-1.0)*cj6*r21*x1129))+(((-1.0)*x1124*x1127))+(((-1.0)*sj6*x1134))+((r22*x1122))+(((-1.0)*x1121))+((x1123*x1124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1135=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x1135.valid){
continue;
}
CheckValue<IkReal> x1136=IKPowWithIntegerCheck(sj3,-1);
if(!x1136.valid){
continue;
}
if( IKabs(((x1135.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1136.value)*((((r21*sj5*sj6))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1135.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))+IKsqr(((x1136.value)*((((r21*sj5*sj6))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r20*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1135.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))), ((x1136.value)*((((r21*sj5*sj6))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r20*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1137=IKcos(j2);
IkReal x1138=IKsin(j2);
IkReal x1139=(sj4*sj6);
IkReal x1140=(sj4*sj5);
IkReal x1141=((1.0)*cj5);
IkReal x1142=(cj4*r20);
IkReal x1143=((0.076)*sj6);
IkReal x1144=(cj5*r01);
IkReal x1145=(cj5*r21);
IkReal x1146=((1.0)*sj6);
IkReal x1147=(cj6*r20);
IkReal x1148=((1.0)*sj5);
IkReal x1149=(sj5*sj6);
IkReal x1150=(cj6*r00);
IkReal x1151=((0.0775)*cj3);
IkReal x1152=((1.0)*cj3);
IkReal x1153=(cj6*sj4);
IkReal x1154=(cj4*sj6);
IkReal x1155=(cj4*sj5);
IkReal x1156=(sj3*x1138);
IkReal x1157=(sj3*x1137);
IkReal x1158=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*x1157))+(((-1.0)*x1147*x1148))+((r21*x1149))+(((-1.0)*r22*x1141)));
evalcond[1]=((((-1.0)*r02*x1141))+(((-1.0)*x1156))+(((-1.0)*x1148*x1150))+((r01*x1149)));
evalcond[2]=((((-1.0)*sj4*x1141*x1150))+x1137+(((-1.0)*r01*x1158))+((r02*x1140))+((x1139*x1144))+(((-1.0)*cj4*r00*x1146)));
evalcond[3]=((((0.076)*x1147))+(((-0.0525)*x1137))+(((-0.3425)*x1157))+(((-1.0)*r21*x1143))+(((-1.0)*pz))+(((-1.0)*x1137*x1151)));
evalcond[4]=((((-1.0)*r01*x1143))+(((-1.0)*x1138*x1151))+(((-0.0525)*x1138))+(((-0.3425)*x1156))+(((-1.0)*px))+(((0.076)*x1150)));
evalcond[5]=(((r22*x1155))+(((-1.0)*cj6*x1141*x1142))+((x1145*x1154))+((r21*x1153))+((r20*x1139))+(((-1.0)*x1137*x1152)));
evalcond[6]=((((-1.0)*x1138*x1152))+((r00*x1139))+((r02*x1155))+(((-1.0)*cj4*x1141*x1150))+((x1144*x1154))+((r01*x1153)));
evalcond[7]=((((-1.0)*sj4*x1141*x1147))+((r22*x1140))+(((-1.0)*r21*x1158))+((x1139*x1145))+(((-1.0)*x1138))+(((-1.0)*x1142*x1146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1159=((1.0)*sj5);
IkReal x1160=(cj6*r00);
IkReal x1161=(cj5*sj4);
IkReal x1162=(r01*sj6);
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(sj3,-1);
if(!x1163.valid){
continue;
}
if( IKabs(((x1163.value)*(((((-1.0)*x1159*x1160))+(((-1.0)*cj5*r02))+((sj5*x1162)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r00*sj6))+(((-1.0)*r02*sj4*x1159))+((cj4*cj6*r01))+(((-1.0)*x1161*x1162))+((x1160*x1161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1163.value)*(((((-1.0)*x1159*x1160))+(((-1.0)*cj5*r02))+((sj5*x1162))))))+IKsqr((((cj4*r00*sj6))+(((-1.0)*r02*sj4*x1159))+((cj4*cj6*r01))+(((-1.0)*x1161*x1162))+((x1160*x1161))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1163.value)*(((((-1.0)*x1159*x1160))+(((-1.0)*cj5*r02))+((sj5*x1162))))), (((cj4*r00*sj6))+(((-1.0)*r02*sj4*x1159))+((cj4*cj6*r01))+(((-1.0)*x1161*x1162))+((x1160*x1161))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1164=IKcos(j2);
IkReal x1165=IKsin(j2);
IkReal x1166=(sj4*sj6);
IkReal x1167=(sj4*sj5);
IkReal x1168=((1.0)*cj5);
IkReal x1169=(cj4*r20);
IkReal x1170=((0.076)*sj6);
IkReal x1171=(cj5*r01);
IkReal x1172=(cj5*r21);
IkReal x1173=((1.0)*sj6);
IkReal x1174=(cj6*r20);
IkReal x1175=((1.0)*sj5);
IkReal x1176=(sj5*sj6);
IkReal x1177=(cj6*r00);
IkReal x1178=((0.0775)*cj3);
IkReal x1179=((1.0)*cj3);
IkReal x1180=(cj6*sj4);
IkReal x1181=(cj4*sj6);
IkReal x1182=(cj4*sj5);
IkReal x1183=(sj3*x1165);
IkReal x1184=(sj3*x1164);
IkReal x1185=((1.0)*cj4*cj6);
evalcond[0]=(((r21*x1176))+(((-1.0)*r22*x1168))+(((-1.0)*x1184))+(((-1.0)*x1174*x1175)));
evalcond[1]=((((-1.0)*r02*x1168))+((r01*x1176))+(((-1.0)*x1175*x1177))+(((-1.0)*x1183)));
evalcond[2]=((((-1.0)*r01*x1185))+x1164+((r02*x1167))+((x1166*x1171))+(((-1.0)*cj4*r00*x1173))+(((-1.0)*sj4*x1168*x1177)));
evalcond[3]=((((-1.0)*r21*x1170))+(((-0.0525)*x1164))+(((-1.0)*pz))+(((0.076)*x1174))+(((-0.3425)*x1184))+(((-1.0)*x1164*x1178)));
evalcond[4]=((((-1.0)*x1165*x1178))+(((-0.0525)*x1165))+(((-1.0)*px))+(((0.076)*x1177))+(((-0.3425)*x1183))+(((-1.0)*r01*x1170)));
evalcond[5]=(((r20*x1166))+(((-1.0)*cj6*x1168*x1169))+((r22*x1182))+((x1172*x1181))+((r21*x1180))+(((-1.0)*x1164*x1179)));
evalcond[6]=((((-1.0)*x1165*x1179))+((r00*x1166))+((r01*x1180))+(((-1.0)*cj4*x1168*x1177))+((x1171*x1181))+((r02*x1182)));
evalcond[7]=(((x1166*x1172))+(((-1.0)*x1169*x1173))+((r22*x1167))+(((-1.0)*sj4*x1168*x1174))+(((-1.0)*x1165))+(((-1.0)*r21*x1185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1186=(sj5*sj6);
IkReal x1187=((1.0)*cj5);
IkReal x1188=((1.0)*cj6*sj5);
CheckValue<IkReal> x1189=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1189.valid){
continue;
}
CheckValue<IkReal> x1190 = IKatan2WithCheck(IkReal((((r01*x1186))+(((-1.0)*r00*x1188))+(((-1.0)*r02*x1187)))),IkReal(((((-1.0)*r22*x1187))+((r21*x1186))+(((-1.0)*r20*x1188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1190.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1189.value)))+(x1190.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1191=IKcos(j2);
IkReal x1192=IKsin(j2);
IkReal x1193=(sj4*sj6);
IkReal x1194=(sj4*sj5);
IkReal x1195=((1.0)*cj5);
IkReal x1196=(cj4*r20);
IkReal x1197=((0.076)*sj6);
IkReal x1198=(cj5*r01);
IkReal x1199=(cj5*r21);
IkReal x1200=((1.0)*sj6);
IkReal x1201=(cj6*r20);
IkReal x1202=((1.0)*sj5);
IkReal x1203=(sj5*sj6);
IkReal x1204=(cj6*r00);
IkReal x1205=((0.0775)*cj3);
IkReal x1206=((1.0)*cj3);
IkReal x1207=(cj6*sj4);
IkReal x1208=(cj4*sj6);
IkReal x1209=(cj4*sj5);
IkReal x1210=(sj3*x1192);
IkReal x1211=(sj3*x1191);
IkReal x1212=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*r22*x1195))+((r21*x1203))+(((-1.0)*x1201*x1202))+(((-1.0)*x1211)));
evalcond[1]=((((-1.0)*x1202*x1204))+((r01*x1203))+(((-1.0)*r02*x1195))+(((-1.0)*x1210)));
evalcond[2]=((((-1.0)*sj4*x1195*x1204))+x1191+(((-1.0)*cj4*r00*x1200))+(((-1.0)*r01*x1212))+((r02*x1194))+((x1193*x1198)));
evalcond[3]=((((-1.0)*x1191*x1205))+(((-0.0525)*x1191))+(((-1.0)*pz))+(((0.076)*x1201))+(((-1.0)*r21*x1197))+(((-0.3425)*x1211)));
evalcond[4]=((((-0.0525)*x1192))+(((-1.0)*px))+(((0.076)*x1204))+(((-1.0)*x1192*x1205))+(((-1.0)*r01*x1197))+(((-0.3425)*x1210)));
evalcond[5]=((((-1.0)*x1191*x1206))+((x1199*x1208))+((r21*x1207))+((r20*x1193))+(((-1.0)*cj6*x1195*x1196))+((r22*x1209)));
evalcond[6]=(((r00*x1193))+((r01*x1207))+((r02*x1209))+(((-1.0)*x1192*x1206))+(((-1.0)*cj4*x1195*x1204))+((x1198*x1208)));
evalcond[7]=((((-1.0)*sj4*x1195*x1201))+(((-1.0)*x1196*x1200))+((r22*x1194))+((x1193*x1199))+(((-1.0)*r21*x1212))+(((-1.0)*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1213=(cj4*cj5);
IkReal x1214=(r11*sj6);
IkReal x1215=(cj6*r10);
if( IKabs((((x1213*x1214))+((r10*sj4*sj6))+(((-1.0)*x1213*x1215))+((cj6*r11*sj4))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*sj5*x1214))+((sj5*x1215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1213*x1214))+((r10*sj4*sj6))+(((-1.0)*x1213*x1215))+((cj6*r11*sj4))+((cj4*r12*sj5))))+IKsqr((((cj5*r12))+(((-1.0)*sj5*x1214))+((sj5*x1215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x1213*x1214))+((r10*sj4*sj6))+(((-1.0)*x1213*x1215))+((cj6*r11*sj4))+((cj4*r12*sj5))), (((cj5*r12))+(((-1.0)*sj5*x1214))+((sj5*x1215))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1216=IKcos(j3);
IkReal x1217=IKsin(j3);
IkReal x1218=(r11*sj6);
IkReal x1219=(cj4*cj5);
IkReal x1220=(cj6*r10);
evalcond[0]=((((-1.0)*cj5*r12))+x1216+(((-1.0)*sj5*x1220))+((sj5*x1218)));
evalcond[1]=((-0.293)+(((0.076)*x1220))+(((0.3425)*x1216))+(((-1.0)*py))+(((-0.0775)*x1217))+(((-0.076)*x1218)));
evalcond[2]=(((x1218*x1219))+((r10*sj4*sj6))+(((-1.0)*x1219*x1220))+((cj6*r11*sj4))+((cj4*r12*sj5))+(((-1.0)*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1221=(cj6*sj5);
IkReal x1222=(sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((r01*x1222))+(((-1.0)*r00*x1221))+(((-1.0)*cj5*r02)))))+(IKabs((((cj5*r22))+((r20*x1221))+(((-1.0)*r21*x1222))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1223=((64920240.9929408)*cj6);
IkReal x1224=((64920240.9929408)*sj6);
if( IKabs(((((-1.0)*r00*x1223))+(((854213697.275536)*px))+((r01*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1223))+(((-854213697.275536)*pz))+(((-1.0)*r21*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1223))+(((854213697.275536)*px))+((r01*x1224))))+IKsqr((((r20*x1223))+(((-854213697.275536)*pz))+(((-1.0)*r21*x1224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1223))+(((854213697.275536)*px))+((r01*x1224))), (((r20*x1223))+(((-854213697.275536)*pz))+(((-1.0)*r21*x1224))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1225=IKcos(j2);
IkReal x1226=IKsin(j2);
IkReal x1227=(sj4*sj6);
IkReal x1228=(sj4*sj5);
IkReal x1229=(cj5*r21);
IkReal x1230=((1.0)*cj5);
IkReal x1231=(cj4*r20);
IkReal x1232=((0.076)*sj6);
IkReal x1233=((1.0)*sj6);
IkReal x1234=(cj6*sj4);
IkReal x1235=(sj5*sj6);
IkReal x1236=(cj5*r01);
IkReal x1237=(cj4*cj6);
IkReal x1238=(cj4*sj6);
IkReal x1239=((0.076)*cj6);
IkReal x1240=(cj4*sj5);
IkReal x1241=((1.0)*cj6*sj5);
evalcond[0]=(((r20*x1239))+(((-1.17066725011486e-9)*x1225))+(((-1.0)*r21*x1232))+(((-1.0)*pz)));
evalcond[1]=(((r00*x1239))+(((-1.0)*r01*x1232))+(((-1.0)*px))+(((1.17066725011486e-9)*x1226)));
evalcond[2]=((((0.07239889)*x1225))+(((-1.0)*r20*x1241))+((r21*x1235))+(((-1.0)*r22*x1230)));
evalcond[3]=(((r01*x1235))+(((-0.07239889)*x1226))+(((-1.0)*r00*x1241))+(((-1.0)*r02*x1230)));
evalcond[4]=(x1226+((r22*x1228))+(((-1.0)*r21*x1237))+((x1227*x1229))+(((-1.0)*r20*x1230*x1234))+(((-1.0)*x1231*x1233)));
evalcond[5]=(((r20*x1227))+(((-1.0)*cj6*x1230*x1231))+(((-0.997375754782803)*x1225))+((r22*x1240))+((x1229*x1238))+((r21*x1234)));
evalcond[6]=(x1225+(((-1.0)*r01*x1237))+((r02*x1228))+((x1227*x1236))+(((-1.0)*r00*x1230*x1234))+(((-1.0)*cj4*r00*x1233)));
evalcond[7]=(((r00*x1227))+((r01*x1234))+((r02*x1240))+(((0.997375754782803)*x1226))+((x1236*x1238))+(((-1.0)*r00*x1230*x1237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1242=((57213427.3137081)*sj6);
IkReal x1243=((57213427.3137081)*cj6);
if( IKabs((((r00*x1243))+(((-1.0)*r01*x1242))+(((-752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1243))+((r21*x1242))+(((752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1243))+(((-1.0)*r01*x1242))+(((-752808254.127739)*px))))+IKsqr(((((-1.0)*r20*x1243))+((r21*x1242))+(((752808254.127739)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x1243))+(((-1.0)*r01*x1242))+(((-752808254.127739)*px))), ((((-1.0)*r20*x1243))+((r21*x1242))+(((752808254.127739)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1244=IKcos(j2);
IkReal x1245=IKsin(j2);
IkReal x1246=(sj4*sj6);
IkReal x1247=(sj4*sj5);
IkReal x1248=(cj5*r21);
IkReal x1249=((1.0)*cj5);
IkReal x1250=(cj4*r20);
IkReal x1251=((0.076)*sj6);
IkReal x1252=(cj5*r01);
IkReal x1253=((1.0)*sj6);
IkReal x1254=(cj6*sj4);
IkReal x1255=(sj5*sj6);
IkReal x1256=(cj4*cj6);
IkReal x1257=(cj4*sj6);
IkReal x1258=((0.076)*cj6);
IkReal x1259=(cj4*sj5);
IkReal x1260=((1.0)*cj6*sj5);
evalcond[0]=((((-1.0)*r21*x1251))+(((-1.0)*pz))+(((1.32835950524835e-9)*x1244))+((r20*x1258)));
evalcond[1]=((((-1.32835950524835e-9)*x1245))+(((-1.0)*r01*x1251))+(((-1.0)*px))+((r00*x1258)));
evalcond[2]=(((r21*x1255))+(((-1.0)*r22*x1249))+(((-0.36403599)*x1244))+(((-1.0)*r20*x1260)));
evalcond[3]=((((-1.0)*r02*x1249))+(((-1.0)*r00*x1260))+(((0.36403599)*x1245))+((r01*x1255)));
evalcond[4]=(x1245+(((-1.0)*r21*x1256))+((x1246*x1248))+(((-1.0)*x1250*x1253))+((r22*x1247))+(((-1.0)*r20*x1249*x1254)));
evalcond[5]=((((-1.0)*cj6*x1249*x1250))+((r22*x1259))+(((0.931384876172381)*x1244))+((r21*x1254))+((r20*x1246))+((x1248*x1257)));
evalcond[6]=((((-1.0)*r01*x1256))+((x1246*x1252))+x1244+(((-1.0)*cj4*r00*x1253))+(((-1.0)*r00*x1249*x1254))+((r02*x1247)));
evalcond[7]=(((r02*x1259))+(((-1.0)*r00*x1249*x1256))+((r00*x1246))+((x1252*x1257))+(((-0.931384876172381)*x1245))+((r01*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1261=((0.584615384615385)*cj6);
IkReal x1262=((0.584615384615385)*sj6);
if( IKabs(((((-1.0)*r01*x1262))+(((-7.69230769230769)*px))+((r00*x1261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1262))+(((7.69230769230769)*pz))+(((-1.0)*r20*x1261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1262))+(((-7.69230769230769)*px))+((r00*x1261))))+IKsqr((((r21*x1262))+(((7.69230769230769)*pz))+(((-1.0)*r20*x1261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1262))+(((-7.69230769230769)*px))+((r00*x1261))), (((r21*x1262))+(((7.69230769230769)*pz))+(((-1.0)*r20*x1261))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1263=IKcos(j2);
IkReal x1264=IKsin(j2);
IkReal x1265=(sj4*sj5);
IkReal x1266=(r21*sj6);
IkReal x1267=(cj5*sj4);
IkReal x1268=(cj5*cj6);
IkReal x1269=(r01*sj6);
IkReal x1270=(cj6*sj4);
IkReal x1271=(sj4*sj6);
IkReal x1272=((1.0)*cj4);
IkReal x1273=(cj4*cj5);
IkReal x1274=(cj6*r20);
IkReal x1275=(cj4*sj5);
IkReal x1276=(cj6*r00);
IkReal x1277=(r20*x1272);
evalcond[0]=((((0.076)*x1274))+(((-1.0)*pz))+(((-0.076)*x1266))+(((0.13)*x1263)));
evalcond[1]=((((0.076)*x1276))+(((-1.0)*px))+(((-0.076)*x1269))+(((-0.13)*x1264)));
evalcond[2]=((((-1.0)*x1268*x1277))+x1263+((r21*x1270))+((r22*x1275))+((x1266*x1273))+((r20*x1271)));
evalcond[3]=(x1264+((r22*x1265))+(((-1.0)*sj6*x1277))+(((-1.0)*cj6*r21*x1272))+((x1266*x1267))+(((-1.0)*x1267*x1274)));
evalcond[4]=(x1263+((r02*x1265))+(((-1.0)*cj6*r01*x1272))+((x1267*x1269))+(((-1.0)*r00*sj6*x1272))+(((-1.0)*x1267*x1276)));
evalcond[5]=(((x1269*x1273))+((r02*x1275))+((r00*x1271))+((r01*x1270))+(((-1.0)*x1264))+(((-1.0)*r00*x1268*x1272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1278=((3.04)*cj6);
IkReal x1279=((3.04)*sj6);
if( IKabs(((((40.0)*px))+(((-1.0)*r00*x1278))+((r01*x1279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-40.0)*pz))+(((-1.0)*r21*x1279))+((r20*x1278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((40.0)*px))+(((-1.0)*r00*x1278))+((r01*x1279))))+IKsqr(((((-40.0)*pz))+(((-1.0)*r21*x1279))+((r20*x1278))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((40.0)*px))+(((-1.0)*r00*x1278))+((r01*x1279))), ((((-40.0)*pz))+(((-1.0)*r21*x1279))+((r20*x1278))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1280=IKsin(j2);
IkReal x1281=IKcos(j2);
IkReal x1282=(sj4*sj5);
IkReal x1283=(cj5*cj6);
IkReal x1284=((0.076)*sj6);
IkReal x1285=(r20*sj4);
IkReal x1286=(r00*sj6);
IkReal x1287=((1.0)*cj4);
IkReal x1288=(cj6*sj4);
IkReal x1289=((0.076)*cj6);
IkReal x1290=(cj4*sj5);
IkReal x1291=(cj5*sj4*sj6);
IkReal x1292=(r20*x1287);
IkReal x1293=(cj4*cj5*sj6);
evalcond[0]=((((-1.0)*pz))+(((-0.025)*x1281))+((r20*x1289))+(((-1.0)*r21*x1284)));
evalcond[1]=((((-1.0)*r01*x1284))+((r00*x1289))+(((-1.0)*px))+(((0.025)*x1280)));
evalcond[2]=(x1280+((sj4*x1286))+(((-1.0)*r00*x1283*x1287))+((r01*x1288))+((r02*x1290))+((r01*x1293)));
evalcond[3]=((((-1.0)*cj6*r21*x1287))+x1280+(((-1.0)*sj6*x1292))+((r21*x1291))+((r22*x1282))+(((-1.0)*x1283*x1285)));
evalcond[4]=((((-1.0)*x1281))+((r21*x1293))+(((-1.0)*x1283*x1292))+((r21*x1288))+((r22*x1290))+((sj6*x1285)));
evalcond[5]=(x1281+((r02*x1282))+(((-1.0)*r00*sj4*x1283))+(((-1.0)*cj6*r01*x1287))+(((-1.0)*x1286*x1287))+((r01*x1291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1294=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x1294.valid){
continue;
}
CheckValue<IkReal> x1295=IKPowWithIntegerCheck(sj3,-1);
if(!x1295.valid){
continue;
}
if( IKabs(((x1294.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1295.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1294.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))+IKsqr(((x1295.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1294.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))), ((x1295.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1296=IKsin(j2);
IkReal x1297=IKcos(j2);
IkReal x1298=(sj4*sj6);
IkReal x1299=(sj4*sj5);
IkReal x1300=((1.0)*cj5);
IkReal x1301=(cj4*r20);
IkReal x1302=((0.076)*sj6);
IkReal x1303=((0.0775)*cj3);
IkReal x1304=(cj5*r21);
IkReal x1305=((1.0)*sj6);
IkReal x1306=(cj6*sj4);
IkReal x1307=(sj5*sj6);
IkReal x1308=(cj5*r01);
IkReal x1309=(cj4*cj6);
IkReal x1310=(cj4*sj6);
IkReal x1311=((0.076)*cj6);
IkReal x1312=(cj4*sj5);
IkReal x1313=(sj3*x1296);
IkReal x1314=(sj3*x1297);
IkReal x1315=((1.0)*cj6*sj5);
evalcond[0]=(x1314+(((-1.0)*r22*x1300))+((r21*x1307))+(((-1.0)*r20*x1315)));
evalcond[1]=((((-1.0)*r00*x1315))+(((-1.0)*x1313))+(((-1.0)*r02*x1300))+((r01*x1307)));
evalcond[2]=(x1296+(((-1.0)*r20*x1300*x1306))+(((-1.0)*r21*x1309))+(((-1.0)*x1301*x1305))+((r22*x1299))+((x1298*x1304)));
evalcond[3]=(((r20*x1298))+((cj3*x1297))+((r22*x1312))+((r21*x1306))+((x1304*x1310))+(((-1.0)*cj6*x1300*x1301)));
evalcond[4]=(x1297+(((-1.0)*r01*x1309))+(((-1.0)*cj4*r00*x1305))+((r02*x1299))+((x1298*x1308))+(((-1.0)*r00*x1300*x1306)));
evalcond[5]=((((-1.0)*r21*x1302))+(((-1.0)*pz))+(((0.0525)*x1297))+(((0.3425)*x1314))+((x1297*x1303))+((r20*x1311)));
evalcond[6]=(((r00*x1311))+(((-1.0)*r01*x1302))+(((-0.3425)*x1313))+(((-1.0)*x1296*x1303))+(((-1.0)*px))+(((-0.0525)*x1296)));
evalcond[7]=((((-1.0)*cj3*x1296))+((x1308*x1310))+((r02*x1312))+((r00*x1298))+((r01*x1306))+(((-1.0)*r00*x1300*x1309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1316=((1.0)*sj4);
IkReal x1317=(r21*sj6);
IkReal x1318=(cj6*r20);
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(sj3,-1);
if(!x1319.valid){
continue;
}
if( IKabs(((((-1.0)*cj5*x1316*x1317))+((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*r22*sj5*x1316))+((cj5*sj4*x1318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1319.value)*((((cj5*r22))+((sj5*x1318))+(((-1.0)*sj5*x1317)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x1316*x1317))+((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*r22*sj5*x1316))+((cj5*sj4*x1318))))+IKsqr(((x1319.value)*((((cj5*r22))+((sj5*x1318))+(((-1.0)*sj5*x1317))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj5*x1316*x1317))+((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*r22*sj5*x1316))+((cj5*sj4*x1318))), ((x1319.value)*((((cj5*r22))+((sj5*x1318))+(((-1.0)*sj5*x1317))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1320=IKsin(j2);
IkReal x1321=IKcos(j2);
IkReal x1322=(sj4*sj6);
IkReal x1323=(sj4*sj5);
IkReal x1324=((1.0)*cj5);
IkReal x1325=(cj4*r20);
IkReal x1326=((0.076)*sj6);
IkReal x1327=((0.0775)*cj3);
IkReal x1328=(cj5*r21);
IkReal x1329=((1.0)*sj6);
IkReal x1330=(cj6*sj4);
IkReal x1331=(sj5*sj6);
IkReal x1332=(cj5*r01);
IkReal x1333=(cj4*cj6);
IkReal x1334=(cj4*sj6);
IkReal x1335=((0.076)*cj6);
IkReal x1336=(cj4*sj5);
IkReal x1337=(sj3*x1320);
IkReal x1338=(sj3*x1321);
IkReal x1339=((1.0)*cj6*sj5);
evalcond[0]=(x1338+(((-1.0)*r22*x1324))+((r21*x1331))+(((-1.0)*r20*x1339)));
evalcond[1]=((((-1.0)*x1337))+((r01*x1331))+(((-1.0)*r02*x1324))+(((-1.0)*r00*x1339)));
evalcond[2]=(x1320+(((-1.0)*r20*x1324*x1330))+(((-1.0)*r21*x1333))+((x1322*x1328))+((r22*x1323))+(((-1.0)*x1325*x1329)));
evalcond[3]=((((-1.0)*cj6*x1324*x1325))+((r21*x1330))+((cj3*x1321))+((x1328*x1334))+((r22*x1336))+((r20*x1322)));
evalcond[4]=(x1321+(((-1.0)*r00*x1324*x1330))+((r02*x1323))+(((-1.0)*cj4*r00*x1329))+(((-1.0)*r01*x1333))+((x1322*x1332)));
evalcond[5]=((((0.3425)*x1338))+((r20*x1335))+(((-1.0)*pz))+(((0.0525)*x1321))+(((-1.0)*r21*x1326))+((x1321*x1327)));
evalcond[6]=((((-1.0)*r01*x1326))+((r00*x1335))+(((-0.0525)*x1320))+(((-0.3425)*x1337))+(((-1.0)*px))+(((-1.0)*x1320*x1327)));
evalcond[7]=((((-1.0)*r00*x1324*x1333))+((r00*x1322))+((r01*x1330))+(((-1.0)*cj3*x1320))+((r02*x1336))+((x1332*x1334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1340=(cj6*sj5);
IkReal x1341=(sj5*sj6);
CheckValue<IkReal> x1342=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343 = IKatan2WithCheck(IkReal((((r01*x1341))+(((-1.0)*r00*x1340))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r22))+(((-1.0)*r21*x1341))+((r20*x1340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1343.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1342.value)))+(x1343.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1344=IKsin(j2);
IkReal x1345=IKcos(j2);
IkReal x1346=(sj4*sj6);
IkReal x1347=(sj4*sj5);
IkReal x1348=((1.0)*cj5);
IkReal x1349=(cj4*r20);
IkReal x1350=((0.076)*sj6);
IkReal x1351=((0.0775)*cj3);
IkReal x1352=(cj5*r21);
IkReal x1353=((1.0)*sj6);
IkReal x1354=(cj6*sj4);
IkReal x1355=(sj5*sj6);
IkReal x1356=(cj5*r01);
IkReal x1357=(cj4*cj6);
IkReal x1358=(cj4*sj6);
IkReal x1359=((0.076)*cj6);
IkReal x1360=(cj4*sj5);
IkReal x1361=(sj3*x1344);
IkReal x1362=(sj3*x1345);
IkReal x1363=((1.0)*cj6*sj5);
evalcond[0]=(x1362+(((-1.0)*r20*x1363))+(((-1.0)*r22*x1348))+((r21*x1355)));
evalcond[1]=((((-1.0)*x1361))+(((-1.0)*r02*x1348))+(((-1.0)*r00*x1363))+((r01*x1355)));
evalcond[2]=(x1344+(((-1.0)*r21*x1357))+((r22*x1347))+((x1346*x1352))+(((-1.0)*r20*x1348*x1354))+(((-1.0)*x1349*x1353)));
evalcond[3]=(((r22*x1360))+((r20*x1346))+((cj3*x1345))+((r21*x1354))+((x1352*x1358))+(((-1.0)*cj6*x1348*x1349)));
evalcond[4]=(x1345+(((-1.0)*r00*x1348*x1354))+((r02*x1347))+((x1346*x1356))+(((-1.0)*r01*x1357))+(((-1.0)*cj4*r00*x1353)));
evalcond[5]=(((x1345*x1351))+(((-1.0)*r21*x1350))+(((-1.0)*pz))+(((0.0525)*x1345))+((r20*x1359))+(((0.3425)*x1362)));
evalcond[6]=((((-1.0)*px))+(((-1.0)*r01*x1350))+(((-1.0)*x1344*x1351))+((r00*x1359))+(((-0.0525)*x1344))+(((-0.3425)*x1361)));
evalcond[7]=((((-1.0)*r00*x1348*x1357))+((r02*x1360))+((r00*x1346))+((r01*x1354))+((x1356*x1358))+(((-1.0)*cj3*x1344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1364=(cj4*sj6);
IkReal x1365=(cj4*cj6);
IkReal x1366=((1.0)*r20);
IkReal x1367=(sj4*sj5);
IkReal x1368=(cj5*sj4);
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(sj1,-1);
if(!x1369.valid){
continue;
}
if( IKabs(((x1369.value)*(((((-1.0)*x1364*x1366))+(((-1.0)*r21*x1365))+((r21*sj6*x1368))+((r22*x1367))+(((-1.0)*cj6*x1366*x1368)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*x1368))+(((-1.0)*r02*x1367))+((r01*x1365))+((r00*x1364))+(((-1.0)*r01*sj6*x1368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1369.value)*(((((-1.0)*x1364*x1366))+(((-1.0)*r21*x1365))+((r21*sj6*x1368))+((r22*x1367))+(((-1.0)*cj6*x1366*x1368))))))+IKsqr((((cj6*r00*x1368))+(((-1.0)*r02*x1367))+((r01*x1365))+((r00*x1364))+(((-1.0)*r01*sj6*x1368))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1369.value)*(((((-1.0)*x1364*x1366))+(((-1.0)*r21*x1365))+((r21*sj6*x1368))+((r22*x1367))+(((-1.0)*cj6*x1366*x1368))))), (((cj6*r00*x1368))+(((-1.0)*r02*x1367))+((r01*x1365))+((r00*x1364))+(((-1.0)*r01*sj6*x1368))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x1370=IKsin(j2);
IkReal x1371=(cj5*sj4);
IkReal x1372=(sj4*sj5);
IkReal x1373=((1.0)*cj6);
IkReal x1374=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r00*x1371*x1373))+(((-1.0)*cj4*r01*x1373))+(((-1.0)*r00*x1374))+((r01*sj6*x1371))+(IKcos(j2))+((r02*x1372)));
evalcond[1]=((((-1.0)*r10*x1371*x1373))+((r12*x1372))+((cj1*x1370))+((r11*sj6*x1371))+(((-1.0)*r10*x1374))+(((-1.0)*cj4*r11*x1373)));
evalcond[2]=((((-1.0)*sj1*x1370))+(((-1.0)*cj4*r21*x1373))+(((-1.0)*r20*x1374))+(((-1.0)*r20*x1371*x1373))+((r22*x1372))+((r21*sj6*x1371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j3eval[0]=sj2;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1375=(cj5*r12);
IkReal x1376=(sj1*sj5);
IkReal x1377=(r21*sj6);
IkReal x1378=((1.0)*sj1);
IkReal x1379=(cj5*r22);
IkReal x1380=((1.0)*cj1);
IkReal x1381=((1.0)*r20);
IkReal x1382=(r11*sj6);
IkReal x1383=(cj1*cj6*sj5);
if( IKabs(((((-1.0)*cj6*x1376*x1381))+((x1376*x1377))+((r10*x1383))+((cj1*x1375))+(((-1.0)*sj5*x1380*x1382))+(((-1.0)*x1378*x1379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20*sj5*x1380))+((cj1*sj5*x1377))+(((-1.0)*x1375*x1378))+((x1376*x1382))+(((-1.0)*x1379*x1380))+(((-1.0)*cj6*r10*x1376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x1376*x1381))+((x1376*x1377))+((r10*x1383))+((cj1*x1375))+(((-1.0)*sj5*x1380*x1382))+(((-1.0)*x1378*x1379))))+IKsqr(((((-1.0)*cj6*r20*sj5*x1380))+((cj1*sj5*x1377))+(((-1.0)*x1375*x1378))+((x1376*x1382))+(((-1.0)*x1379*x1380))+(((-1.0)*cj6*r10*x1376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj6*x1376*x1381))+((x1376*x1377))+((r10*x1383))+((cj1*x1375))+(((-1.0)*sj5*x1380*x1382))+(((-1.0)*x1378*x1379))), ((((-1.0)*cj6*r20*sj5*x1380))+((cj1*sj5*x1377))+(((-1.0)*x1375*x1378))+((x1376*x1382))+(((-1.0)*x1379*x1380))+(((-1.0)*cj6*r10*x1376))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1384=IKcos(j3);
IkReal x1385=IKsin(j3);
IkReal x1386=(r21*sj6);
IkReal x1387=((1.0)*cj6);
IkReal x1388=(cj4*cj5);
IkReal x1389=(sj4*sj6);
IkReal x1390=((1.0)*cj5);
IkReal x1391=(r11*sj6);
IkReal x1392=(cj4*sj5);
IkReal x1393=((0.076)*cj6);
IkReal x1394=(cj6*sj4);
IkReal x1395=(cj1*x1385);
IkReal x1396=(sj1*x1384);
IkReal x1397=(cj1*x1384);
IkReal x1398=(sj1*x1385);
IkReal x1399=((1.0)*x1396);
evalcond[0]=(x1395+(((-1.0)*r12*x1390))+(((-1.0)*r10*sj5*x1387))+((sj5*x1391))+(((-1.0)*x1399)));
evalcond[1]=((((-1.0)*r20*sj5*x1387))+(((-1.0)*r22*x1390))+(((-1.0)*x1397))+(((-1.0)*x1398))+((sj5*x1386)));
evalcond[2]=(x1398+x1397+((r10*x1389))+((x1388*x1391))+((r11*x1394))+((r12*x1392))+(((-1.0)*r10*x1387*x1388)));
evalcond[3]=(x1395+((r21*x1394))+(((-1.0)*r20*x1387*x1388))+((r20*x1389))+((x1386*x1388))+((r22*x1392))+(((-1.0)*x1399)));
evalcond[4]=((((0.0775)*x1395))+((r20*x1393))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((-0.076)*x1386))+(((-0.3425)*x1398))+(((-0.3425)*x1397))+(((-0.0775)*x1396)));
evalcond[5]=((((0.3425)*x1395))+(((0.0525)*cj1))+((r10*x1393))+(((0.0775)*x1398))+(((0.0775)*x1397))+(((-1.0)*py))+(((0.293)*sj1))+(((-0.076)*x1391))+(((-0.3425)*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1400=((1.0)*sj1);
IkReal x1401=(sj5*sj6);
IkReal x1402=(cj5*r12);
IkReal x1403=(cj5*r22);
IkReal x1404=((1.0)*cj1);
IkReal x1405=(cj6*sj5);
if( IKabs((((r20*sj1*x1405))+((cj1*r11*x1401))+((sj1*x1403))+(((-1.0)*x1402*x1404))+(((-1.0)*r10*x1404*x1405))+(((-1.0)*r21*x1400*x1401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x1401))+(((-1.0)*x1400*x1402))+(((-1.0)*r20*x1404*x1405))+((r11*sj1*x1401))+(((-1.0)*x1403*x1404))+(((-1.0)*r10*x1400*x1405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1405))+((cj1*r11*x1401))+((sj1*x1403))+(((-1.0)*x1402*x1404))+(((-1.0)*r10*x1404*x1405))+(((-1.0)*r21*x1400*x1401))))+IKsqr((((cj1*r21*x1401))+(((-1.0)*x1400*x1402))+(((-1.0)*r20*x1404*x1405))+((r11*sj1*x1401))+(((-1.0)*x1403*x1404))+(((-1.0)*r10*x1400*x1405))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r20*sj1*x1405))+((cj1*r11*x1401))+((sj1*x1403))+(((-1.0)*x1402*x1404))+(((-1.0)*r10*x1404*x1405))+(((-1.0)*r21*x1400*x1401))), (((cj1*r21*x1401))+(((-1.0)*x1400*x1402))+(((-1.0)*r20*x1404*x1405))+((r11*sj1*x1401))+(((-1.0)*x1403*x1404))+(((-1.0)*r10*x1400*x1405))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1406=IKsin(j3);
IkReal x1407=IKcos(j3);
IkReal x1408=(r21*sj6);
IkReal x1409=((1.0)*cj6);
IkReal x1410=(cj4*cj5);
IkReal x1411=((1.0)*cj5);
IkReal x1412=(r11*sj6);
IkReal x1413=(sj4*sj6);
IkReal x1414=(cj4*sj5);
IkReal x1415=((0.076)*cj6);
IkReal x1416=(cj6*sj4);
IkReal x1417=(sj1*x1406);
IkReal x1418=(sj1*x1407);
IkReal x1419=(cj1*x1407);
IkReal x1420=(cj1*x1406);
IkReal x1421=((1.0)*x1419);
evalcond[0]=((((-1.0)*r22*x1411))+((sj5*x1408))+x1417+(((-1.0)*r20*sj5*x1409))+(((-1.0)*x1421)));
evalcond[1]=(((sj5*x1412))+(((-1.0)*x1420))+(((-1.0)*r10*sj5*x1409))+(((-1.0)*r12*x1411))+(((-1.0)*x1418)));
evalcond[2]=(((r21*x1416))+(((-1.0)*r20*x1409*x1410))+((r20*x1413))+((r22*x1414))+x1420+x1418+((x1408*x1410)));
evalcond[3]=((((-1.0)*r10*x1409*x1410))+((r11*x1416))+((x1410*x1412))+x1417+((r12*x1414))+((r10*x1413))+(((-1.0)*x1421)));
evalcond[4]=((((-0.3425)*x1419))+(((0.0775)*x1420))+((r20*x1415))+(((0.3425)*x1417))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x1418))+(((0.0525)*sj1))+(((-0.076)*x1408)));
evalcond[5]=((((-0.3425)*x1418))+(((-0.0525)*cj1))+(((-0.076)*x1412))+(((-1.0)*py))+(((0.293)*sj1))+(((0.0775)*x1417))+((r10*x1415))+(((-0.3425)*x1420))+(((-0.0775)*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1422=(cj5*r12);
IkReal x1423=(r11*sj6);
IkReal x1424=(cj6*r10*sj5);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((4.41935483870968)*sj5*x1423))+(((-4.41935483870968)*x1422))+(((-4.41935483870968)*x1424))+(((0.980645161290323)*x1423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1424))+(((-1.0)*x1422))+((sj5*x1423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((4.41935483870968)*sj5*x1423))+(((-4.41935483870968)*x1422))+(((-4.41935483870968)*x1424))+(((0.980645161290323)*x1423))))+IKsqr(((((-1.0)*x1424))+(((-1.0)*x1422))+((sj5*x1423))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((4.41935483870968)*sj5*x1423))+(((-4.41935483870968)*x1422))+(((-4.41935483870968)*x1424))+(((0.980645161290323)*x1423))), ((((-1.0)*x1424))+(((-1.0)*x1422))+((sj5*x1423))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1425=IKsin(j3);
IkReal x1426=IKcos(j3);
IkReal x1427=((0.076)*sj6);
IkReal x1428=((1.0)*sj2);
IkReal x1429=(sj4*sj6);
IkReal x1430=(sj5*sj6);
IkReal x1431=((1.0)*cj5);
IkReal x1432=(cj4*sj5);
IkReal x1433=(cj6*sj4);
IkReal x1434=((0.076)*cj6);
IkReal x1435=((0.0775)*x1426);
IkReal x1436=((1.0)*cj6*sj5);
IkReal x1437=(cj2*x1425);
IkReal x1438=(cj4*cj5*sj6);
IkReal x1439=((1.0)*x1426);
IkReal x1440=(cj4*cj6*x1431);
evalcond[0]=((((-1.0)*r12*x1431))+(((-1.0)*x1439))+((r11*x1430))+(((-1.0)*r10*x1436)));
evalcond[1]=((((-1.0)*x1437))+(((-1.0)*r22*x1431))+((r21*x1430))+(((-1.0)*r20*x1436)));
evalcond[2]=((((-1.0)*x1425*x1428))+(((-1.0)*r02*x1431))+(((-1.0)*r00*x1436))+((r01*x1430)));
evalcond[3]=((0.293)+(((0.0775)*x1425))+(((-1.0)*r11*x1427))+(((-1.0)*py))+(((-0.3425)*x1426))+((r10*x1434)));
evalcond[4]=((((-0.0525)*cj2))+(((-1.0)*r21*x1427))+(((-1.0)*cj2*x1435))+(((-0.3425)*x1437))+((r20*x1434))+(((-1.0)*pz)));
evalcond[5]=(((r12*x1432))+(((-1.0)*r10*x1440))+((r10*x1429))+((r11*x1433))+((r11*x1438))+x1425);
evalcond[6]=((((-1.0)*px))+(((-0.3425)*sj2*x1425))+((r00*x1434))+(((-0.0525)*sj2))+(((-1.0)*r01*x1427))+(((-1.0)*sj2*x1435)));
evalcond[7]=((((-1.0)*r20*x1440))+(((-1.0)*cj2*x1439))+((r21*x1438))+((r21*x1433))+((r22*x1432))+((r20*x1429)));
evalcond[8]=((((-1.0)*x1426*x1428))+((r00*x1429))+((r02*x1432))+(((-1.0)*r00*x1440))+((r01*x1438))+((r01*x1433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1441=(cj5*r12);
IkReal x1442=(r11*sj6);
IkReal x1443=(cj6*r10*sj5);
if( IKabs(((-3.78064516129032)+(((4.41935483870968)*x1441))+(((4.41935483870968)*x1443))+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-0.980645161290323)*x1442))+(((-4.41935483870968)*sj5*x1442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x1442))+x1443+x1441)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((4.41935483870968)*x1441))+(((4.41935483870968)*x1443))+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-0.980645161290323)*x1442))+(((-4.41935483870968)*sj5*x1442))))+IKsqr(((((-1.0)*sj5*x1442))+x1443+x1441))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((4.41935483870968)*x1441))+(((4.41935483870968)*x1443))+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-0.980645161290323)*x1442))+(((-4.41935483870968)*sj5*x1442))), ((((-1.0)*sj5*x1442))+x1443+x1441));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1444=IKsin(j3);
IkReal x1445=IKcos(j3);
IkReal x1446=(sj4*sj6);
IkReal x1447=(cj4*sj5);
IkReal x1448=((1.0)*cj6);
IkReal x1449=(cj4*cj5);
IkReal x1450=((0.076)*sj6);
IkReal x1451=((1.0)*sj2);
IkReal x1452=(r11*sj6);
IkReal x1453=((1.0)*cj5);
IkReal x1454=(r21*sj6);
IkReal x1455=(r01*sj6);
IkReal x1456=(cj6*sj4);
IkReal x1457=((0.076)*cj6);
IkReal x1458=((0.0775)*x1445);
IkReal x1459=(cj2*x1444);
evalcond[0]=((((-1.0)*r10*sj5*x1448))+((sj5*x1452))+x1445+(((-1.0)*r12*x1453)));
evalcond[1]=((((-1.0)*r22*x1453))+((sj5*x1454))+(((-1.0)*r20*sj5*x1448))+x1459);
evalcond[2]=(((sj5*x1455))+(((-1.0)*r02*x1453))+(((-1.0)*r00*sj5*x1448))+(((-1.0)*x1444*x1451)));
evalcond[3]=((-0.293)+((r10*x1457))+(((-0.0775)*x1444))+(((-1.0)*py))+(((0.3425)*x1445))+(((-1.0)*r11*x1450)));
evalcond[4]=((((0.3425)*x1459))+(((0.0525)*cj2))+((r20*x1457))+(((-1.0)*pz))+((cj2*x1458))+(((-1.0)*r21*x1450)));
evalcond[5]=((((-1.0)*px))+(((-1.0)*r01*x1450))+(((-0.0525)*sj2))+((r00*x1457))+(((-1.0)*sj2*x1458))+(((-0.3425)*sj2*x1444)));
evalcond[6]=(((r22*x1447))+((cj2*x1445))+((r21*x1456))+(((-1.0)*r20*x1448*x1449))+((r20*x1446))+((x1449*x1454)));
evalcond[7]=(((r12*x1447))+((r10*x1446))+(((-1.0)*x1444))+((r11*x1456))+(((-1.0)*r10*x1448*x1449))+((x1449*x1452)));
evalcond[8]=((((-1.0)*x1445*x1451))+((r02*x1447))+((r01*x1456))+((r00*x1446))+((x1449*x1455))+(((-1.0)*r00*x1448*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1460=(cj6*r00);
IkReal x1461=(cj5*r02);
IkReal x1462=((4.41935483870968)*sj5);
IkReal x1463=(r01*sj6);
if( IKabs(((((-1.0)*x1461))+((sj5*x1463))+(((-1.0)*sj5*x1460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((0.980645161290323)*x1460))+(((-0.980645161290323)*x1463))+(((-12.9032258064516)*px))+(((4.41935483870968)*x1461))+(((-1.0)*x1462*x1463))+((x1460*x1462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1461))+((sj5*x1463))+(((-1.0)*sj5*x1460))))+IKsqr(((-0.67741935483871)+(((0.980645161290323)*x1460))+(((-0.980645161290323)*x1463))+(((-12.9032258064516)*px))+(((4.41935483870968)*x1461))+(((-1.0)*x1462*x1463))+((x1460*x1462))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1461))+((sj5*x1463))+(((-1.0)*sj5*x1460))), ((-0.67741935483871)+(((0.980645161290323)*x1460))+(((-0.980645161290323)*x1463))+(((-12.9032258064516)*px))+(((4.41935483870968)*x1461))+(((-1.0)*x1462*x1463))+((x1460*x1462))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1464=IKcos(j3);
IkReal x1465=IKsin(j3);
IkReal x1466=(sj4*sj6);
IkReal x1467=(cj4*sj5);
IkReal x1468=((0.076)*sj6);
IkReal x1469=(cj4*cj5);
IkReal x1470=(r11*sj6);
IkReal x1471=((1.0)*cj5);
IkReal x1472=(r21*sj6);
IkReal x1473=(r01*sj6);
IkReal x1474=(cj6*sj4);
IkReal x1475=((0.076)*cj6);
IkReal x1476=(cj1*x1465);
IkReal x1477=((1.0)*cj6*r10);
IkReal x1478=((0.3425)*x1464);
IkReal x1479=((1.0)*cj6*r20);
IkReal x1480=((1.0)*x1464);
IkReal x1481=((1.0)*cj6*r00);
IkReal x1482=(sj1*x1465);
evalcond[0]=((((-1.0)*sj5*x1481))+((sj5*x1473))+(((-1.0)*r02*x1471))+(((-1.0)*x1465)));
evalcond[1]=((((-1.0)*r22*x1471))+(((-1.0)*sj5*x1479))+(((-1.0)*cj1*x1480))+((sj5*x1472)));
evalcond[2]=((((-1.0)*sj5*x1477))+(((-1.0)*r12*x1471))+((sj5*x1470))+(((-1.0)*sj1*x1480)));
evalcond[3]=((-0.0525)+(((-0.3425)*x1465))+(((-1.0)*px))+(((-1.0)*r01*x1468))+((r00*x1475))+(((-0.0775)*x1464)));
evalcond[4]=((((-1.0)*pz))+(((-1.0)*r21*x1468))+(((0.293)*cj1))+(((-1.0)*cj1*x1478))+((r20*x1475))+(((0.0775)*x1476)));
evalcond[5]=((((-1.0)*sj1*x1478))+((r10*x1475))+(((-1.0)*py))+(((0.0775)*x1482))+(((0.293)*sj1))+(((-1.0)*r11*x1468)));
evalcond[6]=(((r20*x1466))+((r21*x1474))+(((-1.0)*x1469*x1479))+((r22*x1467))+x1476+((x1469*x1472)));
evalcond[7]=(((r11*x1474))+((r12*x1467))+(((-1.0)*x1469*x1477))+x1482+((r10*x1466))+((x1469*x1470)));
evalcond[8]=((((-1.0)*x1469*x1481))+(((-1.0)*x1480))+((r00*x1466))+((r01*x1474))+((r02*x1467))+((x1469*x1473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1483=(cj6*r00);
IkReal x1484=(cj5*r02);
IkReal x1485=(r01*sj6);
IkReal x1486=((4.41935483870968)*sj5);
if( IKabs((x1484+(((-1.0)*sj5*x1485))+((sj5*x1483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-0.980645161290323)*x1483))+(((12.9032258064516)*px))+(((-4.41935483870968)*x1484))+(((0.980645161290323)*x1485))+((x1485*x1486))+(((-1.0)*x1483*x1486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1484+(((-1.0)*sj5*x1485))+((sj5*x1483))))+IKsqr(((-0.67741935483871)+(((-0.980645161290323)*x1483))+(((12.9032258064516)*px))+(((-4.41935483870968)*x1484))+(((0.980645161290323)*x1485))+((x1485*x1486))+(((-1.0)*x1483*x1486))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1484+(((-1.0)*sj5*x1485))+((sj5*x1483))), ((-0.67741935483871)+(((-0.980645161290323)*x1483))+(((12.9032258064516)*px))+(((-4.41935483870968)*x1484))+(((0.980645161290323)*x1485))+((x1485*x1486))+(((-1.0)*x1483*x1486))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1487=IKcos(j3);
IkReal x1488=IKsin(j3);
IkReal x1489=(sj4*sj6);
IkReal x1490=((0.076)*sj6);
IkReal x1491=(cj4*cj5);
IkReal x1492=(r11*sj6);
IkReal x1493=((1.0)*cj5);
IkReal x1494=(r21*sj6);
IkReal x1495=(cj4*sj5);
IkReal x1496=(r01*sj6);
IkReal x1497=(cj6*sj4);
IkReal x1498=((0.076)*cj6);
IkReal x1499=(cj1*x1488);
IkReal x1500=((0.3425)*x1487);
IkReal x1501=((1.0)*cj6*r10);
IkReal x1502=((1.0)*cj6*r20);
IkReal x1503=((1.0)*x1487);
IkReal x1504=((1.0)*cj6*r00);
IkReal x1505=(sj1*x1488);
evalcond[0]=(((sj5*x1496))+(((-1.0)*sj5*x1504))+(((-1.0)*r02*x1493))+x1488);
evalcond[1]=(((sj5*x1494))+(((-1.0)*sj5*x1502))+(((-1.0)*cj1*x1503))+(((-1.0)*r22*x1493)));
evalcond[2]=(((sj5*x1492))+(((-1.0)*sj5*x1501))+(((-1.0)*r12*x1493))+(((-1.0)*sj1*x1503)));
evalcond[3]=((0.0525)+(((0.3425)*x1488))+((r00*x1498))+(((-1.0)*r01*x1490))+(((-1.0)*px))+(((0.0775)*x1487)));
evalcond[4]=((((-1.0)*cj1*x1500))+(((-1.0)*r21*x1490))+((r20*x1498))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x1499)));
evalcond[5]=(((r00*x1489))+((r01*x1497))+(((-1.0)*x1491*x1504))+((x1491*x1496))+x1487+((r02*x1495)));
evalcond[6]=(((r10*x1498))+(((-1.0)*r11*x1490))+(((0.0775)*x1505))+(((-1.0)*py))+(((0.293)*sj1))+(((-1.0)*sj1*x1500)));
evalcond[7]=(((r20*x1489))+(((-1.0)*x1491*x1502))+((r21*x1497))+((x1491*x1494))+x1499+((r22*x1495)));
evalcond[8]=(((r10*x1489))+(((-1.0)*x1491*x1501))+((r12*x1495))+((r11*x1497))+((x1491*x1492))+x1505);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(sj2,-1);
if(!x1512.valid){
continue;
}
IkReal x1506=x1512.value;
IkReal x1507=((1.0)*sj5);
IkReal x1508=(cj2*sj1);
IkReal x1509=(r01*sj6);
IkReal x1510=(cj6*r00);
IkReal x1511=(cj5*r02);
CheckValue<IkReal> x1513=IKPowWithIntegerCheck(cj1,-1);
if(!x1513.valid){
continue;
}
if( IKabs((x1506*((((sj5*x1509))+(((-1.0)*x1511))+(((-1.0)*x1507*x1510)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1506*(x1513.value)*((((x1508*x1511))+((r21*sj2*sj5*sj6))+(((-1.0)*cj6*r20*sj2*x1507))+((sj5*x1508*x1510))+(((-1.0)*cj5*r22*sj2))+(((-1.0)*x1507*x1508*x1509)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1506*((((sj5*x1509))+(((-1.0)*x1511))+(((-1.0)*x1507*x1510))))))+IKsqr((x1506*(x1513.value)*((((x1508*x1511))+((r21*sj2*sj5*sj6))+(((-1.0)*cj6*r20*sj2*x1507))+((sj5*x1508*x1510))+(((-1.0)*cj5*r22*sj2))+(((-1.0)*x1507*x1508*x1509))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1506*((((sj5*x1509))+(((-1.0)*x1511))+(((-1.0)*x1507*x1510))))), (x1506*(x1513.value)*((((x1508*x1511))+((r21*sj2*sj5*sj6))+(((-1.0)*cj6*r20*sj2*x1507))+((sj5*x1508*x1510))+(((-1.0)*cj5*r22*sj2))+(((-1.0)*x1507*x1508*x1509))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1514=IKsin(j3);
IkReal x1515=IKcos(j3);
IkReal x1516=(cj4*cj5);
IkReal x1517=((0.076)*sj6);
IkReal x1518=(sj4*sj6);
IkReal x1519=(cj2*sj1);
IkReal x1520=(r11*sj6);
IkReal x1521=((1.0)*cj5);
IkReal x1522=(r21*sj6);
IkReal x1523=(cj4*sj5);
IkReal x1524=(r01*sj6);
IkReal x1525=(cj1*cj2);
IkReal x1526=(cj6*sj4);
IkReal x1527=((0.3425)*cj2);
IkReal x1528=((0.076)*cj6);
IkReal x1529=((1.0)*cj6*r10);
IkReal x1530=(sj1*x1514);
IkReal x1531=(cj1*x1514);
IkReal x1532=(sj2*x1515);
IkReal x1533=((0.0775)*x1515);
IkReal x1534=((0.3425)*x1515);
IkReal x1535=((1.0)*cj6*r20);
IkReal x1536=((1.0)*x1515);
IkReal x1537=((1.0)*cj6*r00);
IkReal x1538=(sj2*x1514);
evalcond[0]=((((-1.0)*x1538))+((sj5*x1524))+(((-1.0)*r02*x1521))+(((-1.0)*sj5*x1537)));
evalcond[1]=((((-1.0)*sj5*x1529))+(((-1.0)*r12*x1521))+(((-1.0)*sj1*x1536))+((sj5*x1520))+((x1514*x1525)));
evalcond[2]=(((sj5*x1522))+(((-1.0)*r22*x1521))+(((-1.0)*x1514*x1519))+(((-1.0)*cj1*x1536))+(((-1.0)*sj5*x1535)));
evalcond[3]=((((-1.0)*r01*x1517))+((r00*x1528))+(((-1.0)*px))+(((-0.0775)*x1532))+(((-0.0525)*sj2))+(((-0.3425)*x1538)));
evalcond[4]=((((-1.0)*x1532))+((r01*x1526))+((r00*x1518))+((x1516*x1524))+((r02*x1523))+(((-1.0)*x1516*x1537)));
evalcond[5]=(((r12*x1523))+((r11*x1526))+((r10*x1518))+x1530+((x1516*x1520))+((x1515*x1525))+(((-1.0)*x1516*x1529)));
evalcond[6]=(((r20*x1518))+(((-1.0)*x1519*x1536))+x1531+((r21*x1526))+((x1516*x1522))+((r22*x1523))+(((-1.0)*x1516*x1535)));
evalcond[7]=((((-0.3425)*x1514*x1519))+(((-0.0525)*x1519))+(((0.0775)*x1531))+(((-1.0)*x1519*x1533))+((r20*x1528))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*cj1*x1534))+(((-1.0)*r21*x1517)));
evalcond[8]=(((x1525*x1533))+(((-1.0)*sj1*x1534))+((r10*x1528))+(((0.0775)*x1530))+(((-1.0)*py))+(((0.3425)*x1514*x1525))+(((0.293)*sj1))+(((0.0525)*x1525))+(((-1.0)*r11*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1544=IKPowWithIntegerCheck(sj2,-1);
if(!x1544.valid){
continue;
}
IkReal x1539=x1544.value;
IkReal x1540=((137.0)*sj5);
IkReal x1541=(r01*sj6);
IkReal x1542=(cj6*r00);
IkReal x1543=(cj5*r02);
if( IKabs((x1539*(((((-1.0)*x1543))+(((-1.0)*sj5*x1542))+((sj5*x1541)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x1539*(((((30.4)*x1542))+(((-1.0)*x1540*x1541))+(((-21.0)*sj2))+(((-30.4)*x1541))+((x1540*x1542))+(((-400.0)*px))+(((137.0)*x1543)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1539*(((((-1.0)*x1543))+(((-1.0)*sj5*x1542))+((sj5*x1541))))))+IKsqr(((0.032258064516129)*x1539*(((((30.4)*x1542))+(((-1.0)*x1540*x1541))+(((-21.0)*sj2))+(((-30.4)*x1541))+((x1540*x1542))+(((-400.0)*px))+(((137.0)*x1543))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1539*(((((-1.0)*x1543))+(((-1.0)*sj5*x1542))+((sj5*x1541))))), ((0.032258064516129)*x1539*(((((30.4)*x1542))+(((-1.0)*x1540*x1541))+(((-21.0)*sj2))+(((-30.4)*x1541))+((x1540*x1542))+(((-400.0)*px))+(((137.0)*x1543))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1545=IKsin(j3);
IkReal x1546=IKcos(j3);
IkReal x1547=(cj4*cj5);
IkReal x1548=((0.076)*sj6);
IkReal x1549=(sj4*sj6);
IkReal x1550=(cj2*sj1);
IkReal x1551=(r11*sj6);
IkReal x1552=((1.0)*cj5);
IkReal x1553=(r21*sj6);
IkReal x1554=(cj4*sj5);
IkReal x1555=(r01*sj6);
IkReal x1556=(cj1*cj2);
IkReal x1557=(cj6*sj4);
IkReal x1558=((0.3425)*cj2);
IkReal x1559=((0.076)*cj6);
IkReal x1560=((1.0)*cj6*r10);
IkReal x1561=(sj1*x1545);
IkReal x1562=(cj1*x1545);
IkReal x1563=(sj2*x1546);
IkReal x1564=((0.0775)*x1546);
IkReal x1565=((0.3425)*x1546);
IkReal x1566=((1.0)*cj6*r20);
IkReal x1567=((1.0)*x1546);
IkReal x1568=((1.0)*cj6*r00);
IkReal x1569=(sj2*x1545);
evalcond[0]=((((-1.0)*r02*x1552))+(((-1.0)*sj5*x1568))+(((-1.0)*x1569))+((sj5*x1555)));
evalcond[1]=((((-1.0)*sj1*x1567))+(((-1.0)*r12*x1552))+(((-1.0)*sj5*x1560))+((sj5*x1551))+((x1545*x1556)));
evalcond[2]=((((-1.0)*x1545*x1550))+(((-1.0)*r22*x1552))+(((-1.0)*cj1*x1567))+(((-1.0)*sj5*x1566))+((sj5*x1553)));
evalcond[3]=(((r00*x1559))+(((-0.0775)*x1563))+(((-1.0)*px))+(((-0.3425)*x1569))+(((-1.0)*r01*x1548))+(((-0.0525)*sj2)));
evalcond[4]=(((r01*x1557))+((x1547*x1555))+((r02*x1554))+(((-1.0)*x1547*x1568))+(((-1.0)*x1563))+((r00*x1549)));
evalcond[5]=(((x1547*x1551))+((r11*x1557))+((r12*x1554))+x1561+(((-1.0)*x1547*x1560))+((x1546*x1556))+((r10*x1549)));
evalcond[6]=(((x1547*x1553))+((r22*x1554))+(((-1.0)*x1550*x1567))+x1562+(((-1.0)*x1547*x1566))+((r21*x1557))+((r20*x1549)));
evalcond[7]=((((-0.3425)*x1545*x1550))+(((0.0775)*x1562))+(((-1.0)*cj1*x1565))+(((-1.0)*pz))+(((-1.0)*x1550*x1564))+(((0.293)*cj1))+(((-1.0)*r21*x1548))+(((-0.0525)*x1550))+((r20*x1559)));
evalcond[8]=((((-1.0)*sj1*x1565))+(((0.0525)*x1556))+((x1556*x1564))+(((0.0775)*x1561))+(((-1.0)*py))+(((0.293)*sj1))+(((-1.0)*r11*x1548))+(((0.3425)*x1545*x1556))+((r10*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1570=(cj5*r12);
IkReal x1571=((1.0)*sj1);
IkReal x1572=(cj5*r22);
IkReal x1573=((1.0)*cj1);
IkReal x1574=(cj6*sj5);
IkReal x1575=(sj5*sj6);
IkReal x1576=(sj1*x1575);
IkReal x1577=(cj1*x1574);
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(cj2,-1);
if(!x1578.valid){
continue;
}
if( IKabs(((x1578.value)*(((((-1.0)*x1571*x1572))+(((-1.0)*r20*x1571*x1574))+((cj1*x1570))+(((-1.0)*r11*x1573*x1575))+((r21*x1576))+((r10*x1577)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1573*x1574))+(((-1.0)*x1572*x1573))+(((-1.0)*x1570*x1571))+(((-1.0)*r10*x1571*x1574))+((r11*x1576))+((cj1*r21*x1575)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1578.value)*(((((-1.0)*x1571*x1572))+(((-1.0)*r20*x1571*x1574))+((cj1*x1570))+(((-1.0)*r11*x1573*x1575))+((r21*x1576))+((r10*x1577))))))+IKsqr(((((-1.0)*r20*x1573*x1574))+(((-1.0)*x1572*x1573))+(((-1.0)*x1570*x1571))+(((-1.0)*r10*x1571*x1574))+((r11*x1576))+((cj1*r21*x1575))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1578.value)*(((((-1.0)*x1571*x1572))+(((-1.0)*r20*x1571*x1574))+((cj1*x1570))+(((-1.0)*r11*x1573*x1575))+((r21*x1576))+((r10*x1577))))), ((((-1.0)*r20*x1573*x1574))+(((-1.0)*x1572*x1573))+(((-1.0)*x1570*x1571))+(((-1.0)*r10*x1571*x1574))+((r11*x1576))+((cj1*r21*x1575))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1579=IKsin(j3);
IkReal x1580=IKcos(j3);
IkReal x1581=(cj4*cj5);
IkReal x1582=((0.076)*sj6);
IkReal x1583=(sj4*sj6);
IkReal x1584=(cj2*sj1);
IkReal x1585=(r11*sj6);
IkReal x1586=((1.0)*cj5);
IkReal x1587=(r21*sj6);
IkReal x1588=(cj4*sj5);
IkReal x1589=(r01*sj6);
IkReal x1590=(cj1*cj2);
IkReal x1591=(cj6*sj4);
IkReal x1592=((0.3425)*cj2);
IkReal x1593=((0.076)*cj6);
IkReal x1594=((1.0)*cj6*r10);
IkReal x1595=(sj1*x1579);
IkReal x1596=(cj1*x1579);
IkReal x1597=(sj2*x1580);
IkReal x1598=((0.0775)*x1580);
IkReal x1599=((0.3425)*x1580);
IkReal x1600=((1.0)*cj6*r20);
IkReal x1601=((1.0)*x1580);
IkReal x1602=((1.0)*cj6*r00);
IkReal x1603=(sj2*x1579);
evalcond[0]=((((-1.0)*x1603))+(((-1.0)*r02*x1586))+((sj5*x1589))+(((-1.0)*sj5*x1602)));
evalcond[1]=((((-1.0)*sj5*x1594))+((x1579*x1590))+(((-1.0)*sj1*x1601))+(((-1.0)*r12*x1586))+((sj5*x1585)));
evalcond[2]=((((-1.0)*cj1*x1601))+(((-1.0)*x1579*x1584))+(((-1.0)*r22*x1586))+((sj5*x1587))+(((-1.0)*sj5*x1600)));
evalcond[3]=(((r00*x1593))+(((-0.0775)*x1597))+(((-1.0)*r01*x1582))+(((-1.0)*px))+(((-0.0525)*sj2))+(((-0.3425)*x1603)));
evalcond[4]=(((r01*x1591))+((r02*x1588))+(((-1.0)*x1581*x1602))+(((-1.0)*x1597))+((x1581*x1589))+((r00*x1583)));
evalcond[5]=(((r12*x1588))+((r11*x1591))+((x1580*x1590))+x1595+(((-1.0)*x1581*x1594))+((r10*x1583))+((x1581*x1585)));
evalcond[6]=(((r20*x1583))+x1596+((r22*x1588))+(((-1.0)*x1581*x1600))+(((-1.0)*x1584*x1601))+((r21*x1591))+((x1581*x1587)));
evalcond[7]=(((r20*x1593))+(((0.0775)*x1596))+(((-1.0)*x1584*x1598))+(((-1.0)*pz))+(((-1.0)*cj1*x1599))+(((0.293)*cj1))+(((-0.3425)*x1579*x1584))+(((-0.0525)*x1584))+(((-1.0)*r21*x1582)));
evalcond[8]=((((-1.0)*r11*x1582))+((x1590*x1598))+(((0.0775)*x1595))+(((-1.0)*py))+(((0.293)*sj1))+(((0.3425)*x1579*x1590))+(((0.0525)*x1590))+(((-1.0)*sj1*x1599))+((r10*x1593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1604=(cj4*sj6);
IkReal x1605=(cj4*cj6);
IkReal x1606=(cj5*sj4);
IkReal x1607=((1.0)*sj6);
IkReal x1608=((1.0)*sj4*sj5);
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(cj1,-1);
if(!x1609.valid){
continue;
}
if( IKabs(((x1609.value)*((((r11*x1605))+((cj6*r10*x1606))+(((-1.0)*r12*x1608))+(((-1.0)*r11*x1606*x1607))+((r10*x1604)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1604))+((r01*x1605))+((cj6*r00*x1606))+(((-1.0)*r02*x1608))+(((-1.0)*r01*x1606*x1607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1609.value)*((((r11*x1605))+((cj6*r10*x1606))+(((-1.0)*r12*x1608))+(((-1.0)*r11*x1606*x1607))+((r10*x1604))))))+IKsqr((((r00*x1604))+((r01*x1605))+((cj6*r00*x1606))+(((-1.0)*r02*x1608))+(((-1.0)*r01*x1606*x1607))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1609.value)*((((r11*x1605))+((cj6*r10*x1606))+(((-1.0)*r12*x1608))+(((-1.0)*r11*x1606*x1607))+((r10*x1604))))), (((r00*x1604))+((r01*x1605))+((cj6*r00*x1606))+(((-1.0)*r02*x1608))+(((-1.0)*r01*x1606*x1607))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x1610=IKsin(j2);
IkReal x1611=(cj5*sj4);
IkReal x1612=(sj4*sj5);
IkReal x1613=((1.0)*cj6);
IkReal x1614=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*cj4*r01*x1613))+((r01*sj6*x1611))+(((-1.0)*r00*x1611*x1613))+(((-1.0)*r00*x1614))+(IKcos(j2))+((r02*x1612)));
evalcond[1]=((((-1.0)*cj4*r11*x1613))+((r12*x1612))+(((-1.0)*r10*x1611*x1613))+(((-1.0)*r10*x1614))+((r11*sj6*x1611))+((cj1*x1610)));
evalcond[2]=((((-1.0)*r20*x1611*x1613))+(((-1.0)*r20*x1614))+(((-1.0)*sj1*x1610))+(((-1.0)*cj4*r21*x1613))+((r21*sj6*x1611))+((r22*x1612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j3eval[0]=sj2;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1615=(cj5*r12);
IkReal x1616=(sj1*sj5);
IkReal x1617=(r21*sj6);
IkReal x1618=((1.0)*sj1);
IkReal x1619=(cj5*r22);
IkReal x1620=((1.0)*cj1);
IkReal x1621=((1.0)*r20);
IkReal x1622=(r11*sj6);
IkReal x1623=(cj1*cj6*sj5);
if( IKabs(((((-1.0)*x1618*x1619))+(((-1.0)*cj6*x1616*x1621))+(((-1.0)*sj5*x1620*x1622))+((r10*x1623))+((x1616*x1617))+((cj1*x1615)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1619*x1620))+(((-1.0)*cj6*r20*sj5*x1620))+((cj1*sj5*x1617))+((x1616*x1622))+(((-1.0)*cj6*r10*x1616))+(((-1.0)*x1615*x1618)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1618*x1619))+(((-1.0)*cj6*x1616*x1621))+(((-1.0)*sj5*x1620*x1622))+((r10*x1623))+((x1616*x1617))+((cj1*x1615))))+IKsqr(((((-1.0)*x1619*x1620))+(((-1.0)*cj6*r20*sj5*x1620))+((cj1*sj5*x1617))+((x1616*x1622))+(((-1.0)*cj6*r10*x1616))+(((-1.0)*x1615*x1618))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1618*x1619))+(((-1.0)*cj6*x1616*x1621))+(((-1.0)*sj5*x1620*x1622))+((r10*x1623))+((x1616*x1617))+((cj1*x1615))), ((((-1.0)*x1619*x1620))+(((-1.0)*cj6*r20*sj5*x1620))+((cj1*sj5*x1617))+((x1616*x1622))+(((-1.0)*cj6*r10*x1616))+(((-1.0)*x1615*x1618))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1624=IKcos(j3);
IkReal x1625=IKsin(j3);
IkReal x1626=(r21*sj6);
IkReal x1627=((1.0)*cj6);
IkReal x1628=(cj4*cj5);
IkReal x1629=(sj4*sj6);
IkReal x1630=((1.0)*cj5);
IkReal x1631=(r11*sj6);
IkReal x1632=(cj4*sj5);
IkReal x1633=((0.076)*cj6);
IkReal x1634=(cj6*sj4);
IkReal x1635=(cj1*x1625);
IkReal x1636=(sj1*x1624);
IkReal x1637=(cj1*x1624);
IkReal x1638=(sj1*x1625);
IkReal x1639=((1.0)*x1636);
evalcond[0]=((((-1.0)*r10*sj5*x1627))+(((-1.0)*r12*x1630))+x1635+(((-1.0)*x1639))+((sj5*x1631)));
evalcond[1]=(((sj5*x1626))+(((-1.0)*r22*x1630))+(((-1.0)*x1637))+(((-1.0)*x1638))+(((-1.0)*r20*sj5*x1627)));
evalcond[2]=(((r11*x1634))+(((-1.0)*r10*x1627*x1628))+x1637+x1638+((r12*x1632))+((x1628*x1631))+((r10*x1629)));
evalcond[3]=(((r21*x1634))+((r20*x1629))+(((-1.0)*r20*x1627*x1628))+((x1626*x1628))+x1635+(((-1.0)*x1639))+((r22*x1632)));
evalcond[4]=((((-0.3425)*x1637))+(((-0.3425)*x1638))+(((0.0775)*x1635))+((r20*x1633))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((-0.076)*x1626))+(((-0.0775)*x1636)));
evalcond[5]=((((-0.3425)*x1636))+(((0.0775)*x1637))+(((0.0775)*x1638))+(((0.0525)*cj1))+((r10*x1633))+(((-1.0)*py))+(((0.293)*sj1))+(((-0.076)*x1631))+(((0.3425)*x1635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1640=((1.0)*sj1);
IkReal x1641=(sj5*sj6);
IkReal x1642=(cj5*r12);
IkReal x1643=(cj5*r22);
IkReal x1644=((1.0)*cj1);
IkReal x1645=(cj6*sj5);
if( IKabs((((r20*sj1*x1645))+((sj1*x1643))+(((-1.0)*x1642*x1644))+(((-1.0)*r21*x1640*x1641))+(((-1.0)*r10*x1644*x1645))+((cj1*r11*x1641)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x1641))+(((-1.0)*x1640*x1642))+(((-1.0)*r10*x1640*x1645))+(((-1.0)*x1643*x1644))+((r11*sj1*x1641))+(((-1.0)*r20*x1644*x1645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1645))+((sj1*x1643))+(((-1.0)*x1642*x1644))+(((-1.0)*r21*x1640*x1641))+(((-1.0)*r10*x1644*x1645))+((cj1*r11*x1641))))+IKsqr((((cj1*r21*x1641))+(((-1.0)*x1640*x1642))+(((-1.0)*r10*x1640*x1645))+(((-1.0)*x1643*x1644))+((r11*sj1*x1641))+(((-1.0)*r20*x1644*x1645))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r20*sj1*x1645))+((sj1*x1643))+(((-1.0)*x1642*x1644))+(((-1.0)*r21*x1640*x1641))+(((-1.0)*r10*x1644*x1645))+((cj1*r11*x1641))), (((cj1*r21*x1641))+(((-1.0)*x1640*x1642))+(((-1.0)*r10*x1640*x1645))+(((-1.0)*x1643*x1644))+((r11*sj1*x1641))+(((-1.0)*r20*x1644*x1645))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1646=IKsin(j3);
IkReal x1647=IKcos(j3);
IkReal x1648=(r21*sj6);
IkReal x1649=((1.0)*cj6);
IkReal x1650=(cj4*cj5);
IkReal x1651=((1.0)*cj5);
IkReal x1652=(r11*sj6);
IkReal x1653=(sj4*sj6);
IkReal x1654=(cj4*sj5);
IkReal x1655=((0.076)*cj6);
IkReal x1656=(cj6*sj4);
IkReal x1657=(sj1*x1646);
IkReal x1658=(sj1*x1647);
IkReal x1659=(cj1*x1647);
IkReal x1660=(cj1*x1646);
IkReal x1661=((1.0)*x1659);
evalcond[0]=((((-1.0)*r22*x1651))+x1657+((sj5*x1648))+(((-1.0)*r20*sj5*x1649))+(((-1.0)*x1661)));
evalcond[1]=(((sj5*x1652))+(((-1.0)*x1660))+(((-1.0)*r12*x1651))+(((-1.0)*x1658))+(((-1.0)*r10*sj5*x1649)));
evalcond[2]=(((r22*x1654))+((x1648*x1650))+x1660+x1658+((r20*x1653))+(((-1.0)*r20*x1649*x1650))+((r21*x1656)));
evalcond[3]=(((x1650*x1652))+((r10*x1653))+((r12*x1654))+x1657+(((-1.0)*r10*x1649*x1650))+((r11*x1656))+(((-1.0)*x1661)));
evalcond[4]=((((0.0775)*x1660))+(((-0.3425)*x1659))+((r20*x1655))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.3425)*x1657))+(((0.0525)*sj1))+(((0.0775)*x1658))+(((-0.076)*x1648)));
evalcond[5]=((((-0.076)*x1652))+(((-0.0525)*cj1))+((r10*x1655))+(((-0.3425)*x1660))+(((-0.3425)*x1658))+(((-1.0)*py))+(((0.293)*sj1))+(((-0.0775)*x1659))+(((0.0775)*x1657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1662=(cj5*r12);
IkReal x1663=(r11*sj6);
IkReal x1664=(cj6*r10*sj5);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((-4.41935483870968)*x1664))+(((-4.41935483870968)*x1662))+(((0.980645161290323)*x1663))+(((4.41935483870968)*sj5*x1663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1662))+(((-1.0)*x1664))+((sj5*x1663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((-4.41935483870968)*x1664))+(((-4.41935483870968)*x1662))+(((0.980645161290323)*x1663))+(((4.41935483870968)*sj5*x1663))))+IKsqr(((((-1.0)*x1662))+(((-1.0)*x1664))+((sj5*x1663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((-4.41935483870968)*x1664))+(((-4.41935483870968)*x1662))+(((0.980645161290323)*x1663))+(((4.41935483870968)*sj5*x1663))), ((((-1.0)*x1662))+(((-1.0)*x1664))+((sj5*x1663))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1665=IKsin(j3);
IkReal x1666=IKcos(j3);
IkReal x1667=((0.076)*sj6);
IkReal x1668=((1.0)*sj2);
IkReal x1669=(sj4*sj6);
IkReal x1670=(sj5*sj6);
IkReal x1671=((1.0)*cj5);
IkReal x1672=(cj4*sj5);
IkReal x1673=(cj6*sj4);
IkReal x1674=((0.076)*cj6);
IkReal x1675=((0.0775)*x1666);
IkReal x1676=((1.0)*cj6*sj5);
IkReal x1677=(cj2*x1665);
IkReal x1678=(cj4*cj5*sj6);
IkReal x1679=((1.0)*x1666);
IkReal x1680=(cj4*cj6*x1671);
evalcond[0]=((((-1.0)*r10*x1676))+(((-1.0)*r12*x1671))+(((-1.0)*x1679))+((r11*x1670)));
evalcond[1]=(((r21*x1670))+(((-1.0)*x1677))+(((-1.0)*r20*x1676))+(((-1.0)*r22*x1671)));
evalcond[2]=((((-1.0)*r02*x1671))+(((-1.0)*r00*x1676))+(((-1.0)*x1665*x1668))+((r01*x1670)));
evalcond[3]=((0.293)+(((0.0775)*x1665))+(((-0.3425)*x1666))+(((-1.0)*r11*x1667))+(((-1.0)*py))+((r10*x1674)));
evalcond[4]=((((-0.0525)*cj2))+(((-0.3425)*x1677))+(((-1.0)*cj2*x1675))+(((-1.0)*r21*x1667))+(((-1.0)*pz))+((r20*x1674)));
evalcond[5]=(((r10*x1669))+(((-1.0)*r10*x1680))+x1665+((r11*x1673))+((r11*x1678))+((r12*x1672)));
evalcond[6]=(((r00*x1674))+(((-0.3425)*sj2*x1665))+(((-1.0)*r01*x1667))+(((-1.0)*sj2*x1675))+(((-1.0)*px))+(((-0.0525)*sj2)));
evalcond[7]=(((r21*x1678))+((r21*x1673))+(((-1.0)*r20*x1680))+((r20*x1669))+(((-1.0)*cj2*x1679))+((r22*x1672)));
evalcond[8]=(((r02*x1672))+((r00*x1669))+(((-1.0)*x1666*x1668))+((r01*x1673))+((r01*x1678))+(((-1.0)*r00*x1680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1681=(cj5*r12);
IkReal x1682=(r11*sj6);
IkReal x1683=(cj6*r10*sj5);
if( IKabs(((-3.78064516129032)+(((4.41935483870968)*x1683))+(((4.41935483870968)*x1681))+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-0.980645161290323)*x1682))+(((-4.41935483870968)*sj5*x1682)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x1682))+x1681+x1683)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((4.41935483870968)*x1683))+(((4.41935483870968)*x1681))+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-0.980645161290323)*x1682))+(((-4.41935483870968)*sj5*x1682))))+IKsqr(((((-1.0)*sj5*x1682))+x1681+x1683))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((4.41935483870968)*x1683))+(((4.41935483870968)*x1681))+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-0.980645161290323)*x1682))+(((-4.41935483870968)*sj5*x1682))), ((((-1.0)*sj5*x1682))+x1681+x1683));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1684=IKsin(j3);
IkReal x1685=IKcos(j3);
IkReal x1686=(sj4*sj6);
IkReal x1687=(cj4*sj5);
IkReal x1688=((1.0)*cj6);
IkReal x1689=(cj4*cj5);
IkReal x1690=((0.076)*sj6);
IkReal x1691=((1.0)*sj2);
IkReal x1692=(r11*sj6);
IkReal x1693=((1.0)*cj5);
IkReal x1694=(r21*sj6);
IkReal x1695=(r01*sj6);
IkReal x1696=(cj6*sj4);
IkReal x1697=((0.076)*cj6);
IkReal x1698=((0.0775)*x1685);
IkReal x1699=(cj2*x1684);
evalcond[0]=((((-1.0)*r12*x1693))+x1685+(((-1.0)*r10*sj5*x1688))+((sj5*x1692)));
evalcond[1]=((((-1.0)*r20*sj5*x1688))+x1699+(((-1.0)*r22*x1693))+((sj5*x1694)));
evalcond[2]=((((-1.0)*x1684*x1691))+(((-1.0)*r02*x1693))+(((-1.0)*r00*sj5*x1688))+((sj5*x1695)));
evalcond[3]=((-0.293)+((r10*x1697))+(((-1.0)*r11*x1690))+(((-0.0775)*x1684))+(((-1.0)*py))+(((0.3425)*x1685)));
evalcond[4]=(((r20*x1697))+(((0.0525)*cj2))+(((-1.0)*r21*x1690))+(((0.3425)*x1699))+(((-1.0)*pz))+((cj2*x1698)));
evalcond[5]=(((r00*x1697))+(((-1.0)*sj2*x1698))+(((-0.3425)*sj2*x1684))+(((-1.0)*px))+(((-0.0525)*sj2))+(((-1.0)*r01*x1690)));
evalcond[6]=(((r21*x1696))+(((-1.0)*r20*x1688*x1689))+((r22*x1687))+((x1689*x1694))+((cj2*x1685))+((r20*x1686)));
evalcond[7]=((((-1.0)*r10*x1688*x1689))+((r10*x1686))+((r11*x1696))+((r12*x1687))+(((-1.0)*x1684))+((x1689*x1692)));
evalcond[8]=(((r01*x1696))+((r00*x1686))+(((-1.0)*r00*x1688*x1689))+((r02*x1687))+((x1689*x1695))+(((-1.0)*x1685*x1691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1700=(cj6*r00);
IkReal x1701=(cj5*r02);
IkReal x1702=((4.41935483870968)*sj5);
IkReal x1703=(r01*sj6);
if( IKabs(((((-1.0)*x1701))+((sj5*x1703))+(((-1.0)*sj5*x1700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-1.0)*x1702*x1703))+(((-12.9032258064516)*px))+((x1700*x1702))+(((4.41935483870968)*x1701))+(((-0.980645161290323)*x1703))+(((0.980645161290323)*x1700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1701))+((sj5*x1703))+(((-1.0)*sj5*x1700))))+IKsqr(((-0.67741935483871)+(((-1.0)*x1702*x1703))+(((-12.9032258064516)*px))+((x1700*x1702))+(((4.41935483870968)*x1701))+(((-0.980645161290323)*x1703))+(((0.980645161290323)*x1700))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1701))+((sj5*x1703))+(((-1.0)*sj5*x1700))), ((-0.67741935483871)+(((-1.0)*x1702*x1703))+(((-12.9032258064516)*px))+((x1700*x1702))+(((4.41935483870968)*x1701))+(((-0.980645161290323)*x1703))+(((0.980645161290323)*x1700))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1704=IKcos(j3);
IkReal x1705=IKsin(j3);
IkReal x1706=(sj4*sj6);
IkReal x1707=(cj4*sj5);
IkReal x1708=((0.076)*sj6);
IkReal x1709=(cj4*cj5);
IkReal x1710=(r11*sj6);
IkReal x1711=((1.0)*cj5);
IkReal x1712=(r21*sj6);
IkReal x1713=(r01*sj6);
IkReal x1714=(cj6*sj4);
IkReal x1715=((0.076)*cj6);
IkReal x1716=(cj1*x1705);
IkReal x1717=((1.0)*cj6*r10);
IkReal x1718=((0.3425)*x1704);
IkReal x1719=((1.0)*cj6*r20);
IkReal x1720=((1.0)*x1704);
IkReal x1721=((1.0)*cj6*r00);
IkReal x1722=(sj1*x1705);
evalcond[0]=((((-1.0)*x1705))+(((-1.0)*r02*x1711))+((sj5*x1713))+(((-1.0)*sj5*x1721)));
evalcond[1]=((((-1.0)*sj5*x1719))+(((-1.0)*r22*x1711))+((sj5*x1712))+(((-1.0)*cj1*x1720)));
evalcond[2]=((((-1.0)*sj5*x1717))+((sj5*x1710))+(((-1.0)*r12*x1711))+(((-1.0)*sj1*x1720)));
evalcond[3]=((-0.0525)+(((-0.3425)*x1705))+(((-1.0)*px))+((r00*x1715))+(((-0.0775)*x1704))+(((-1.0)*r01*x1708)));
evalcond[4]=((((0.0775)*x1716))+(((-1.0)*cj1*x1718))+(((-1.0)*r21*x1708))+((r20*x1715))+(((-1.0)*pz))+(((0.293)*cj1)));
evalcond[5]=((((-1.0)*sj1*x1718))+(((-1.0)*py))+(((0.293)*sj1))+(((0.0775)*x1722))+((r10*x1715))+(((-1.0)*r11*x1708)));
evalcond[6]=(((r22*x1707))+x1716+((x1709*x1712))+(((-1.0)*x1709*x1719))+((r20*x1706))+((r21*x1714)));
evalcond[7]=(((r12*x1707))+((r11*x1714))+x1722+((x1709*x1710))+(((-1.0)*x1709*x1717))+((r10*x1706)));
evalcond[8]=(((r02*x1707))+((x1709*x1713))+((r00*x1706))+((r01*x1714))+(((-1.0)*x1720))+(((-1.0)*x1709*x1721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1723=(cj6*r00);
IkReal x1724=(cj5*r02);
IkReal x1725=(r01*sj6);
IkReal x1726=((4.41935483870968)*sj5);
if( IKabs((((sj5*x1723))+x1724+(((-1.0)*sj5*x1725)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-0.980645161290323)*x1723))+((x1725*x1726))+(((12.9032258064516)*px))+(((0.980645161290323)*x1725))+(((-1.0)*x1723*x1726))+(((-4.41935483870968)*x1724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x1723))+x1724+(((-1.0)*sj5*x1725))))+IKsqr(((-0.67741935483871)+(((-0.980645161290323)*x1723))+((x1725*x1726))+(((12.9032258064516)*px))+(((0.980645161290323)*x1725))+(((-1.0)*x1723*x1726))+(((-4.41935483870968)*x1724))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj5*x1723))+x1724+(((-1.0)*sj5*x1725))), ((-0.67741935483871)+(((-0.980645161290323)*x1723))+((x1725*x1726))+(((12.9032258064516)*px))+(((0.980645161290323)*x1725))+(((-1.0)*x1723*x1726))+(((-4.41935483870968)*x1724))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1727=IKcos(j3);
IkReal x1728=IKsin(j3);
IkReal x1729=(sj4*sj6);
IkReal x1730=((0.076)*sj6);
IkReal x1731=(cj4*cj5);
IkReal x1732=(r11*sj6);
IkReal x1733=((1.0)*cj5);
IkReal x1734=(r21*sj6);
IkReal x1735=(cj4*sj5);
IkReal x1736=(r01*sj6);
IkReal x1737=(cj6*sj4);
IkReal x1738=((0.076)*cj6);
IkReal x1739=(cj1*x1728);
IkReal x1740=((0.3425)*x1727);
IkReal x1741=((1.0)*cj6*r10);
IkReal x1742=((1.0)*cj6*r20);
IkReal x1743=((1.0)*x1727);
IkReal x1744=((1.0)*cj6*r00);
IkReal x1745=(sj1*x1728);
evalcond[0]=(((sj5*x1736))+x1728+(((-1.0)*sj5*x1744))+(((-1.0)*r02*x1733)));
evalcond[1]=(((sj5*x1734))+(((-1.0)*cj1*x1743))+(((-1.0)*sj5*x1742))+(((-1.0)*r22*x1733)));
evalcond[2]=(((sj5*x1732))+(((-1.0)*r12*x1733))+(((-1.0)*sj1*x1743))+(((-1.0)*sj5*x1741)));
evalcond[3]=((0.0525)+((r00*x1738))+(((-1.0)*r01*x1730))+(((-1.0)*px))+(((0.0775)*x1727))+(((0.3425)*x1728)));
evalcond[4]=((((-1.0)*pz))+(((-1.0)*cj1*x1740))+(((0.293)*cj1))+(((0.0775)*x1739))+((r20*x1738))+(((-1.0)*r21*x1730)));
evalcond[5]=(((r01*x1737))+((r00*x1729))+((x1731*x1736))+x1727+((r02*x1735))+(((-1.0)*x1731*x1744)));
evalcond[6]=((((-1.0)*r11*x1730))+((r10*x1738))+(((-1.0)*py))+(((0.0775)*x1745))+(((0.293)*sj1))+(((-1.0)*sj1*x1740)));
evalcond[7]=(((x1731*x1734))+x1739+((r21*x1737))+((r22*x1735))+(((-1.0)*x1731*x1742))+((r20*x1729)));
evalcond[8]=(((x1731*x1732))+x1745+((r10*x1729))+(((-1.0)*x1731*x1741))+((r11*x1737))+((r12*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(sj2,-1);
if(!x1752.valid){
continue;
}
IkReal x1746=x1752.value;
IkReal x1747=((1.0)*sj5);
IkReal x1748=(cj2*sj1);
IkReal x1749=(r01*sj6);
IkReal x1750=(cj6*r00);
IkReal x1751=(cj5*r02);
CheckValue<IkReal> x1753=IKPowWithIntegerCheck(cj1,-1);
if(!x1753.valid){
continue;
}
if( IKabs((x1746*(((((-1.0)*x1747*x1750))+(((-1.0)*x1751))+((sj5*x1749)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1746*(x1753.value)*((((r21*sj2*sj5*sj6))+(((-1.0)*cj6*r20*sj2*x1747))+(((-1.0)*x1747*x1748*x1749))+(((-1.0)*cj5*r22*sj2))+((sj5*x1748*x1750))+((x1748*x1751)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1746*(((((-1.0)*x1747*x1750))+(((-1.0)*x1751))+((sj5*x1749))))))+IKsqr((x1746*(x1753.value)*((((r21*sj2*sj5*sj6))+(((-1.0)*cj6*r20*sj2*x1747))+(((-1.0)*x1747*x1748*x1749))+(((-1.0)*cj5*r22*sj2))+((sj5*x1748*x1750))+((x1748*x1751))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1746*(((((-1.0)*x1747*x1750))+(((-1.0)*x1751))+((sj5*x1749))))), (x1746*(x1753.value)*((((r21*sj2*sj5*sj6))+(((-1.0)*cj6*r20*sj2*x1747))+(((-1.0)*x1747*x1748*x1749))+(((-1.0)*cj5*r22*sj2))+((sj5*x1748*x1750))+((x1748*x1751))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1754=IKsin(j3);
IkReal x1755=IKcos(j3);
IkReal x1756=(cj4*cj5);
IkReal x1757=((0.076)*sj6);
IkReal x1758=(sj4*sj6);
IkReal x1759=(cj2*sj1);
IkReal x1760=(r11*sj6);
IkReal x1761=((1.0)*cj5);
IkReal x1762=(r21*sj6);
IkReal x1763=(cj4*sj5);
IkReal x1764=(r01*sj6);
IkReal x1765=(cj1*cj2);
IkReal x1766=(cj6*sj4);
IkReal x1767=((0.3425)*cj2);
IkReal x1768=((0.076)*cj6);
IkReal x1769=((1.0)*cj6*r10);
IkReal x1770=(sj1*x1754);
IkReal x1771=(cj1*x1754);
IkReal x1772=(sj2*x1755);
IkReal x1773=((0.0775)*x1755);
IkReal x1774=((0.3425)*x1755);
IkReal x1775=((1.0)*cj6*r20);
IkReal x1776=((1.0)*x1755);
IkReal x1777=((1.0)*cj6*r00);
IkReal x1778=(sj2*x1754);
evalcond[0]=((((-1.0)*x1778))+(((-1.0)*r02*x1761))+(((-1.0)*sj5*x1777))+((sj5*x1764)));
evalcond[1]=((((-1.0)*sj5*x1769))+((sj5*x1760))+(((-1.0)*sj1*x1776))+(((-1.0)*r12*x1761))+((x1754*x1765)));
evalcond[2]=((((-1.0)*cj1*x1776))+(((-1.0)*sj5*x1775))+((sj5*x1762))+(((-1.0)*r22*x1761))+(((-1.0)*x1754*x1759)));
evalcond[3]=((((-0.3425)*x1778))+((r00*x1768))+(((-1.0)*px))+(((-0.0775)*x1772))+(((-0.0525)*sj2))+(((-1.0)*r01*x1757)));
evalcond[4]=((((-1.0)*x1772))+(((-1.0)*x1756*x1777))+((r01*x1766))+((x1756*x1764))+((r02*x1763))+((r00*x1758)));
evalcond[5]=(x1770+((r11*x1766))+((x1756*x1760))+((x1755*x1765))+(((-1.0)*x1756*x1769))+((r12*x1763))+((r10*x1758)));
evalcond[6]=(((r21*x1766))+x1771+(((-1.0)*x1756*x1775))+((x1756*x1762))+(((-1.0)*x1759*x1776))+((r20*x1758))+((r22*x1763)));
evalcond[7]=((((-1.0)*cj1*x1774))+((r20*x1768))+(((0.0775)*x1771))+(((-0.0525)*x1759))+(((-1.0)*pz))+(((-1.0)*x1759*x1773))+(((0.293)*cj1))+(((-0.3425)*x1754*x1759))+(((-1.0)*r21*x1757)));
evalcond[8]=((((-1.0)*r11*x1757))+(((0.0775)*x1770))+((x1765*x1773))+(((-1.0)*sj1*x1774))+(((0.0525)*x1765))+(((-1.0)*py))+((r10*x1768))+(((0.293)*sj1))+(((0.3425)*x1754*x1765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1784=IKPowWithIntegerCheck(sj2,-1);
if(!x1784.valid){
continue;
}
IkReal x1779=x1784.value;
IkReal x1780=((137.0)*sj5);
IkReal x1781=(r01*sj6);
IkReal x1782=(cj6*r00);
IkReal x1783=(cj5*r02);
if( IKabs((x1779*(((((-1.0)*sj5*x1782))+(((-1.0)*x1783))+((sj5*x1781)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x1779*(((((-30.4)*x1781))+(((137.0)*x1783))+(((-21.0)*sj2))+(((-400.0)*px))+(((-1.0)*x1780*x1781))+((x1780*x1782))+(((30.4)*x1782)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1779*(((((-1.0)*sj5*x1782))+(((-1.0)*x1783))+((sj5*x1781))))))+IKsqr(((0.032258064516129)*x1779*(((((-30.4)*x1781))+(((137.0)*x1783))+(((-21.0)*sj2))+(((-400.0)*px))+(((-1.0)*x1780*x1781))+((x1780*x1782))+(((30.4)*x1782))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1779*(((((-1.0)*sj5*x1782))+(((-1.0)*x1783))+((sj5*x1781))))), ((0.032258064516129)*x1779*(((((-30.4)*x1781))+(((137.0)*x1783))+(((-21.0)*sj2))+(((-400.0)*px))+(((-1.0)*x1780*x1781))+((x1780*x1782))+(((30.4)*x1782))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1785=IKsin(j3);
IkReal x1786=IKcos(j3);
IkReal x1787=(cj4*cj5);
IkReal x1788=((0.076)*sj6);
IkReal x1789=(sj4*sj6);
IkReal x1790=(cj2*sj1);
IkReal x1791=(r11*sj6);
IkReal x1792=((1.0)*cj5);
IkReal x1793=(r21*sj6);
IkReal x1794=(cj4*sj5);
IkReal x1795=(r01*sj6);
IkReal x1796=(cj1*cj2);
IkReal x1797=(cj6*sj4);
IkReal x1798=((0.3425)*cj2);
IkReal x1799=((0.076)*cj6);
IkReal x1800=((1.0)*cj6*r10);
IkReal x1801=(sj1*x1785);
IkReal x1802=(cj1*x1785);
IkReal x1803=(sj2*x1786);
IkReal x1804=((0.0775)*x1786);
IkReal x1805=((0.3425)*x1786);
IkReal x1806=((1.0)*cj6*r20);
IkReal x1807=((1.0)*x1786);
IkReal x1808=((1.0)*cj6*r00);
IkReal x1809=(sj2*x1785);
evalcond[0]=((((-1.0)*sj5*x1808))+(((-1.0)*r02*x1792))+((sj5*x1795))+(((-1.0)*x1809)));
evalcond[1]=((((-1.0)*r12*x1792))+(((-1.0)*sj5*x1800))+(((-1.0)*sj1*x1807))+((x1785*x1796))+((sj5*x1791)));
evalcond[2]=((((-1.0)*r22*x1792))+(((-1.0)*sj5*x1806))+(((-1.0)*x1785*x1790))+(((-1.0)*cj1*x1807))+((sj5*x1793)));
evalcond[3]=(((r00*x1799))+(((-1.0)*r01*x1788))+(((-0.0775)*x1803))+(((-1.0)*px))+(((-0.0525)*sj2))+(((-0.3425)*x1809)));
evalcond[4]=(((x1787*x1795))+((r02*x1794))+((r01*x1797))+((r00*x1789))+(((-1.0)*x1803))+(((-1.0)*x1787*x1808)));
evalcond[5]=(((r10*x1789))+((x1787*x1791))+((r12*x1794))+x1801+((x1786*x1796))+((r11*x1797))+(((-1.0)*x1787*x1800)));
evalcond[6]=(((r20*x1789))+((r21*x1797))+((x1787*x1793))+((r22*x1794))+x1802+(((-1.0)*x1790*x1807))+(((-1.0)*x1787*x1806)));
evalcond[7]=((((-0.3425)*x1785*x1790))+(((-0.0525)*x1790))+(((0.0775)*x1802))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*cj1*x1805))+(((-1.0)*r21*x1788))+(((-1.0)*x1790*x1804))+((r20*x1799)));
evalcond[8]=(((r10*x1799))+(((-1.0)*r11*x1788))+(((0.0775)*x1801))+(((-1.0)*py))+((x1796*x1804))+(((0.0525)*x1796))+(((0.293)*sj1))+(((0.3425)*x1785*x1796))+(((-1.0)*sj1*x1805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1810=(cj5*r12);
IkReal x1811=((1.0)*sj1);
IkReal x1812=(cj5*r22);
IkReal x1813=((1.0)*cj1);
IkReal x1814=(cj6*sj5);
IkReal x1815=(sj5*sj6);
IkReal x1816=(sj1*x1815);
IkReal x1817=(cj1*x1814);
CheckValue<IkReal> x1818=IKPowWithIntegerCheck(cj2,-1);
if(!x1818.valid){
continue;
}
if( IKabs(((x1818.value)*(((((-1.0)*x1811*x1812))+(((-1.0)*r20*x1811*x1814))+(((-1.0)*r11*x1813*x1815))+((cj1*x1810))+((r10*x1817))+((r21*x1816)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1812*x1813))+(((-1.0)*r20*x1813*x1814))+(((-1.0)*x1810*x1811))+(((-1.0)*r10*x1811*x1814))+((cj1*r21*x1815))+((r11*x1816)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1818.value)*(((((-1.0)*x1811*x1812))+(((-1.0)*r20*x1811*x1814))+(((-1.0)*r11*x1813*x1815))+((cj1*x1810))+((r10*x1817))+((r21*x1816))))))+IKsqr(((((-1.0)*x1812*x1813))+(((-1.0)*r20*x1813*x1814))+(((-1.0)*x1810*x1811))+(((-1.0)*r10*x1811*x1814))+((cj1*r21*x1815))+((r11*x1816))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1818.value)*(((((-1.0)*x1811*x1812))+(((-1.0)*r20*x1811*x1814))+(((-1.0)*r11*x1813*x1815))+((cj1*x1810))+((r10*x1817))+((r21*x1816))))), ((((-1.0)*x1812*x1813))+(((-1.0)*r20*x1813*x1814))+(((-1.0)*x1810*x1811))+(((-1.0)*r10*x1811*x1814))+((cj1*r21*x1815))+((r11*x1816))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1819=IKsin(j3);
IkReal x1820=IKcos(j3);
IkReal x1821=(cj4*cj5);
IkReal x1822=((0.076)*sj6);
IkReal x1823=(sj4*sj6);
IkReal x1824=(cj2*sj1);
IkReal x1825=(r11*sj6);
IkReal x1826=((1.0)*cj5);
IkReal x1827=(r21*sj6);
IkReal x1828=(cj4*sj5);
IkReal x1829=(r01*sj6);
IkReal x1830=(cj1*cj2);
IkReal x1831=(cj6*sj4);
IkReal x1832=((0.3425)*cj2);
IkReal x1833=((0.076)*cj6);
IkReal x1834=((1.0)*cj6*r10);
IkReal x1835=(sj1*x1819);
IkReal x1836=(cj1*x1819);
IkReal x1837=(sj2*x1820);
IkReal x1838=((0.0775)*x1820);
IkReal x1839=((0.3425)*x1820);
IkReal x1840=((1.0)*cj6*r20);
IkReal x1841=((1.0)*x1820);
IkReal x1842=((1.0)*cj6*r00);
IkReal x1843=(sj2*x1819);
evalcond[0]=((((-1.0)*sj5*x1842))+(((-1.0)*r02*x1826))+(((-1.0)*x1843))+((sj5*x1829)));
evalcond[1]=((((-1.0)*sj1*x1841))+(((-1.0)*r12*x1826))+((x1819*x1830))+(((-1.0)*sj5*x1834))+((sj5*x1825)));
evalcond[2]=((((-1.0)*sj5*x1840))+(((-1.0)*x1819*x1824))+(((-1.0)*cj1*x1841))+(((-1.0)*r22*x1826))+((sj5*x1827)));
evalcond[3]=((((-0.3425)*x1843))+(((-1.0)*px))+(((-1.0)*r01*x1822))+(((-0.0525)*sj2))+(((-0.0775)*x1837))+((r00*x1833)));
evalcond[4]=(((r01*x1831))+(((-1.0)*x1821*x1842))+(((-1.0)*x1837))+((r00*x1823))+((x1821*x1829))+((r02*x1828)));
evalcond[5]=(((r10*x1823))+((x1820*x1830))+((r11*x1831))+((x1821*x1825))+x1835+(((-1.0)*x1821*x1834))+((r12*x1828)));
evalcond[6]=((((-1.0)*x1821*x1840))+(((-1.0)*x1824*x1841))+((r22*x1828))+((x1821*x1827))+((r21*x1831))+x1836+((r20*x1823)));
evalcond[7]=((((-1.0)*pz))+(((0.0775)*x1836))+(((0.293)*cj1))+(((-0.0525)*x1824))+((r20*x1833))+(((-1.0)*x1824*x1838))+(((-1.0)*r21*x1822))+(((-1.0)*cj1*x1839))+(((-0.3425)*x1819*x1824)));
evalcond[8]=(((r10*x1833))+(((0.3425)*x1819*x1830))+(((-1.0)*py))+(((0.0775)*x1835))+((x1830*x1838))+(((-1.0)*sj1*x1839))+(((0.293)*sj1))+(((-1.0)*r11*x1822))+(((0.0525)*x1830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1844=(cj4*cj5);
IkReal x1845=(r11*sj6);
IkReal x1846=(cj6*r10);
if( IKabs((((x1844*x1845))+((r10*sj4*sj6))+(((-1.0)*x1844*x1846))+((cj6*r11*sj4))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x1845))+((cj5*r12))+((sj5*x1846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1844*x1845))+((r10*sj4*sj6))+(((-1.0)*x1844*x1846))+((cj6*r11*sj4))+((cj4*r12*sj5))))+IKsqr(((((-1.0)*sj5*x1845))+((cj5*r12))+((sj5*x1846))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x1844*x1845))+((r10*sj4*sj6))+(((-1.0)*x1844*x1846))+((cj6*r11*sj4))+((cj4*r12*sj5))), ((((-1.0)*sj5*x1845))+((cj5*r12))+((sj5*x1846))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1847=IKcos(j3);
IkReal x1848=IKsin(j3);
IkReal x1849=(r11*sj6);
IkReal x1850=(cj4*cj5);
IkReal x1851=(cj6*r10);
evalcond[0]=((((-1.0)*cj5*r12))+((sj5*x1849))+x1847+(((-1.0)*sj5*x1851)));
evalcond[1]=((-0.293)+(((-0.0775)*x1848))+(((-0.076)*x1849))+(((0.076)*x1851))+(((-1.0)*py))+(((0.3425)*x1847)));
evalcond[2]=((((-1.0)*x1850*x1851))+((x1849*x1850))+((r10*sj4*sj6))+((cj6*r11*sj4))+(((-1.0)*x1848))+((cj4*r12*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1852=((1.0)*sj5);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
j2eval[2]=((IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x1852))+((cj5*r02)))))+(IKabs(((((-1.0)*cj6*r20*x1852))+((r21*sj5*sj6))+(((-1.0)*cj5*r22))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1853=((0.584615384615385)*cj6);
IkReal x1854=((0.584615384615385)*sj6);
if( IKabs((((r01*x1854))+(((-1.0)*r00*x1853))+(((7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.69230769230769)*pz))+((r20*x1853))+(((-1.0)*r21*x1854)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1854))+(((-1.0)*r00*x1853))+(((7.69230769230769)*px))))+IKsqr(((((-7.69230769230769)*pz))+((r20*x1853))+(((-1.0)*r21*x1854))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*x1854))+(((-1.0)*r00*x1853))+(((7.69230769230769)*px))), ((((-7.69230769230769)*pz))+((r20*x1853))+(((-1.0)*r21*x1854))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1855=IKsin(j2);
IkReal x1856=IKcos(j2);
IkReal x1857=(sj4*sj5);
IkReal x1858=(cj5*cj6);
IkReal x1859=((0.076)*sj6);
IkReal x1860=(r20*sj4);
IkReal x1861=(r00*sj6);
IkReal x1862=((1.0)*cj4);
IkReal x1863=(cj6*sj4);
IkReal x1864=((0.076)*cj6);
IkReal x1865=(cj4*sj5);
IkReal x1866=((1.0)*x1856);
IkReal x1867=(cj5*sj4*sj6);
IkReal x1868=(r20*x1862);
IkReal x1869=(cj4*cj5*sj6);
evalcond[0]=((((-1.0)*pz))+(((-0.13)*x1856))+((r20*x1864))+(((-1.0)*r21*x1859)));
evalcond[1]=((((-1.0)*r01*x1859))+(((-1.0)*px))+(((0.13)*x1855))+((r00*x1864)));
evalcond[2]=(((sj4*x1861))+((r02*x1865))+x1855+(((-1.0)*r00*x1858*x1862))+((r01*x1869))+((r01*x1863)));
evalcond[3]=(((r22*x1865))+((sj6*x1860))+(((-1.0)*x1858*x1868))+(((-1.0)*x1866))+((r21*x1869))+((r21*x1863)));
evalcond[4]=((((-1.0)*cj6*r21*x1862))+(((-1.0)*x1855))+((r22*x1857))+(((-1.0)*sj6*x1868))+(((-1.0)*x1858*x1860))+((r21*x1867)));
evalcond[5]=((((-1.0)*r00*sj4*x1858))+(((-1.0)*cj6*r01*x1862))+((r02*x1857))+(((-1.0)*x1861*x1862))+(((-1.0)*x1866))+((r01*x1867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1870=((3.04)*cj6);
IkReal x1871=((3.04)*sj6);
if( IKabs(((((-1.0)*r01*x1871))+((r00*x1870))+(((-40.0)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((40.0)*pz))+((r21*x1871))+(((-1.0)*r20*x1870)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1871))+((r00*x1870))+(((-40.0)*px))))+IKsqr(((((40.0)*pz))+((r21*x1871))+(((-1.0)*r20*x1870))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1871))+((r00*x1870))+(((-40.0)*px))), ((((40.0)*pz))+((r21*x1871))+(((-1.0)*r20*x1870))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1872=IKcos(j2);
IkReal x1873=IKsin(j2);
IkReal x1874=(sj4*sj5);
IkReal x1875=(r21*sj6);
IkReal x1876=(cj5*sj4);
IkReal x1877=(cj5*cj6);
IkReal x1878=(r01*sj6);
IkReal x1879=(cj6*r20);
IkReal x1880=(sj4*sj6);
IkReal x1881=((1.0)*cj4);
IkReal x1882=(cj6*sj4);
IkReal x1883=(cj4*cj5);
IkReal x1884=(cj4*sj5);
IkReal x1885=(cj6*r00);
IkReal x1886=((1.0)*x1873);
IkReal x1887=(r20*x1881);
evalcond[0]=((((0.076)*x1879))+(((-0.076)*x1875))+(((-1.0)*pz))+(((0.025)*x1872)));
evalcond[1]=((((-0.076)*x1878))+(((-0.025)*x1873))+(((-1.0)*px))+(((0.076)*x1885)));
evalcond[2]=(((r21*x1882))+((r20*x1880))+((x1875*x1883))+x1872+((r22*x1884))+(((-1.0)*x1877*x1887)));
evalcond[3]=(((x1878*x1883))+((r00*x1880))+((r01*x1882))+(((-1.0)*r00*x1877*x1881))+(((-1.0)*x1886))+((r02*x1884)));
evalcond[4]=(((r22*x1874))+(((-1.0)*sj6*x1887))+(((-1.0)*x1876*x1879))+(((-1.0)*cj6*r21*x1881))+((x1875*x1876))+(((-1.0)*x1886)));
evalcond[5]=(((x1876*x1878))+(((-1.0)*cj6*r01*x1881))+((r02*x1874))+(((-1.0)*x1876*x1885))+(((-1.0)*r00*sj6*x1881))+(((-1.0)*x1872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1888=((0.192405063291139)*sj6);
IkReal x1889=((0.192405063291139)*cj6);
if( IKabs(((((2.53164556962025)*px))+((r01*x1888))+(((-1.0)*r00*x1889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1889))+(((-2.53164556962025)*pz))+(((-1.0)*r21*x1888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.53164556962025)*px))+((r01*x1888))+(((-1.0)*r00*x1889))))+IKsqr((((r20*x1889))+(((-2.53164556962025)*pz))+(((-1.0)*r21*x1888))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((2.53164556962025)*px))+((r01*x1888))+(((-1.0)*r00*x1889))), (((r20*x1889))+(((-2.53164556962025)*pz))+(((-1.0)*r21*x1888))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1890=IKsin(j2);
IkReal x1891=IKcos(j2);
IkReal x1892=(sj4*sj5);
IkReal x1893=(r21*sj6);
IkReal x1894=(cj5*sj4);
IkReal x1895=(r01*sj6);
IkReal x1896=((1.0)*cj5);
IkReal x1897=((1.0)*r20);
IkReal x1898=(cj4*sj6);
IkReal x1899=(cj6*sj5);
IkReal x1900=((1.0)*r00);
IkReal x1901=((0.076)*cj6);
IkReal x1902=((1.0)*x1891);
IkReal x1903=((1.0)*cj4*cj6);
evalcond[0]=(((sj5*x1895))+(((-1.0)*x1899*x1900))+(((-1.0)*r02*x1896))+x1890);
evalcond[1]=((((-0.076)*x1893))+(((-0.395)*x1891))+(((-1.0)*pz))+((r20*x1901)));
evalcond[2]=((((-0.076)*x1895))+(((0.395)*x1890))+((r00*x1901))+(((-1.0)*px)));
evalcond[3]=(((sj5*x1893))+(((-1.0)*x1897*x1899))+(((-1.0)*r22*x1896))+(((-1.0)*x1902)));
evalcond[4]=((((-1.0)*x1897*x1898))+((r22*x1892))+((x1893*x1894))+(((-1.0)*r21*x1903))+(((-1.0)*x1890))+(((-1.0)*cj6*x1894*x1897)));
evalcond[5]=(((r02*x1892))+(((-1.0)*cj6*x1894*x1900))+(((-1.0)*x1898*x1900))+((x1894*x1895))+(((-1.0)*r01*x1903))+(((-1.0)*x1902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1904=((0.262068965517241)*sj6);
IkReal x1905=((0.262068965517241)*cj6);
if( IKabs(((((-3.44827586206897)*px))+((r00*x1905))+(((-1.0)*r01*x1904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1904))+(((3.44827586206897)*pz))+(((-1.0)*r20*x1905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.44827586206897)*px))+((r00*x1905))+(((-1.0)*r01*x1904))))+IKsqr((((r21*x1904))+(((3.44827586206897)*pz))+(((-1.0)*r20*x1905))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-3.44827586206897)*px))+((r00*x1905))+(((-1.0)*r01*x1904))), (((r21*x1904))+(((3.44827586206897)*pz))+(((-1.0)*r20*x1905))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1906=IKcos(j2);
IkReal x1907=IKsin(j2);
IkReal x1908=(sj4*sj5);
IkReal x1909=(r21*sj6);
IkReal x1910=(cj5*sj4);
IkReal x1911=(r01*sj6);
IkReal x1912=((1.0)*cj5);
IkReal x1913=((1.0)*r20);
IkReal x1914=(cj4*sj6);
IkReal x1915=(cj6*sj5);
IkReal x1916=((1.0)*r00);
IkReal x1917=((0.076)*cj6);
IkReal x1918=((1.0)*x1907);
IkReal x1919=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*r22*x1912))+x1906+(((-1.0)*x1913*x1915))+((sj5*x1909)));
evalcond[1]=((((-1.0)*pz))+(((0.29)*x1906))+((r20*x1917))+(((-0.076)*x1909)));
evalcond[2]=((((-0.29)*x1907))+((r00*x1917))+(((-1.0)*px))+(((-0.076)*x1911)));
evalcond[3]=(((sj5*x1911))+(((-1.0)*r02*x1912))+(((-1.0)*x1915*x1916))+(((-1.0)*x1918)));
evalcond[4]=((((-1.0)*cj6*x1910*x1913))+((r22*x1908))+((x1909*x1910))+(((-1.0)*x1913*x1914))+(((-1.0)*r21*x1919))+(((-1.0)*x1918)));
evalcond[5]=((((-1.0)*x1914*x1916))+(((-1.0)*cj6*x1910*x1916))+(((-1.0)*r01*x1919))+((x1910*x1911))+(((-1.0)*x1906))+((r02*x1908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1920=((64920240.9929408)*cj6);
IkReal x1921=((64920240.9929408)*sj6);
if( IKabs((((r00*x1920))+(((-854213697.275536)*px))+(((-1.0)*r01*x1921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((854213697.275536)*pz))+(((-1.0)*r20*x1920))+((r21*x1921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1920))+(((-854213697.275536)*px))+(((-1.0)*r01*x1921))))+IKsqr(((((854213697.275536)*pz))+(((-1.0)*r20*x1920))+((r21*x1921))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x1920))+(((-854213697.275536)*px))+(((-1.0)*r01*x1921))), ((((854213697.275536)*pz))+(((-1.0)*r20*x1920))+((r21*x1921))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1922=IKcos(j2);
IkReal x1923=IKsin(j2);
IkReal x1924=(r21*sj6);
IkReal x1925=(sj4*sj5);
IkReal x1926=(cj5*sj4);
IkReal x1927=((1.0)*cj5);
IkReal x1928=(cj4*r20);
IkReal x1929=(r01*sj6);
IkReal x1930=((1.0)*sj6);
IkReal x1931=(sj4*sj6);
IkReal x1932=(cj6*r00);
IkReal x1933=(cj6*sj4);
IkReal x1934=(cj4*cj5);
IkReal x1935=(cj4*sj5);
IkReal x1936=((1.0)*cj6*r20);
IkReal x1937=((1.0)*cj4*cj6);
evalcond[0]=((((0.076)*cj6*r20))+(((1.17066725011486e-9)*x1922))+(((-1.0)*pz))+(((-0.076)*x1924)));
evalcond[1]=((((-1.17066725011486e-9)*x1923))+(((0.076)*x1932))+(((-1.0)*px))+(((-0.076)*x1929)));
evalcond[2]=((((-0.07239889)*x1922))+(((-1.0)*sj5*x1936))+(((-1.0)*r22*x1927))+((sj5*x1924)));
evalcond[3]=((((-1.0)*sj5*x1932))+((sj5*x1929))+(((-1.0)*r02*x1927))+(((0.07239889)*x1923)));
evalcond[4]=((((0.997375754782803)*x1922))+((x1924*x1934))+(((-1.0)*cj6*x1927*x1928))+((r21*x1933))+((r22*x1935))+((r20*x1931)));
evalcond[5]=(((r02*x1935))+(((-0.997375754782803)*x1923))+((r00*x1931))+(((-1.0)*cj4*x1927*x1932))+((r01*x1933))+((x1929*x1934)));
evalcond[6]=((((-1.0)*x1928*x1930))+((r22*x1925))+(((-1.0)*x1923))+(((-1.0)*x1926*x1936))+(((-1.0)*r21*x1937))+((x1924*x1926)));
evalcond[7]=((((-1.0)*r01*x1937))+(((-1.0)*x1922))+((r02*x1925))+(((-1.0)*x1926*x1932))+(((-1.0)*cj4*r00*x1930))+((x1926*x1929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1938=((57213427.3137081)*sj6);
IkReal x1939=((57213427.3137081)*cj6);
if( IKabs((((r01*x1938))+(((752808254.127739)*px))+(((-1.0)*r00*x1939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1938))+(((-752808254.127739)*pz))+((r20*x1939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1938))+(((752808254.127739)*px))+(((-1.0)*r00*x1939))))+IKsqr(((((-1.0)*r21*x1938))+(((-752808254.127739)*pz))+((r20*x1939))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*x1938))+(((752808254.127739)*px))+(((-1.0)*r00*x1939))), ((((-1.0)*r21*x1938))+(((-752808254.127739)*pz))+((r20*x1939))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1940=IKcos(j2);
IkReal x1941=IKsin(j2);
IkReal x1942=(r21*sj6);
IkReal x1943=(sj4*sj5);
IkReal x1944=(cj5*sj4);
IkReal x1945=((1.0)*cj5);
IkReal x1946=(cj4*r20);
IkReal x1947=(r01*sj6);
IkReal x1948=((1.0)*sj6);
IkReal x1949=(sj4*sj6);
IkReal x1950=(cj6*r00);
IkReal x1951=(cj6*sj4);
IkReal x1952=(cj4*cj5);
IkReal x1953=(cj4*sj5);
IkReal x1954=((1.0)*cj6*r20);
IkReal x1955=((1.0)*cj4*cj6);
evalcond[0]=((((0.076)*cj6*r20))+(((-0.076)*x1942))+(((-1.0)*pz))+(((-1.32835950524835e-9)*x1940)));
evalcond[1]=((((-0.076)*x1947))+(((-1.0)*px))+(((1.32835950524835e-9)*x1941))+(((0.076)*x1950)));
evalcond[2]=((((-1.0)*r22*x1945))+(((-1.0)*sj5*x1954))+((sj5*x1942))+(((0.36403599)*x1940)));
evalcond[3]=((((-0.36403599)*x1941))+((sj5*x1947))+(((-1.0)*sj5*x1950))+(((-1.0)*r02*x1945)));
evalcond[4]=(((r20*x1949))+(((-1.0)*cj6*x1945*x1946))+((r21*x1951))+((r22*x1953))+(((-0.931384876172381)*x1940))+((x1942*x1952)));
evalcond[5]=((((-1.0)*cj4*x1945*x1950))+(((0.931384876172381)*x1941))+((r00*x1949))+((r01*x1951))+((x1947*x1952))+((r02*x1953)));
evalcond[6]=((((-1.0)*x1944*x1954))+((r22*x1943))+(((-1.0)*x1946*x1948))+(((-1.0)*x1941))+((x1942*x1944))+(((-1.0)*r21*x1955)));
evalcond[7]=((((-1.0)*x1944*x1950))+((x1944*x1947))+(((-1.0)*cj4*r00*x1948))+(((-1.0)*x1940))+(((-1.0)*r01*x1955))+((r02*x1943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1956=(cj4*cj5);
CheckValue<IkReal> x1957=IKPowWithIntegerCheck(sj3,-1);
if(!x1957.valid){
continue;
}
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(cj3,-1);
if(!x1958.valid){
continue;
}
if( IKabs(((x1957.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1958.value)*((((r21*sj6*x1956))+((cj4*r22*sj5))+((cj6*r21*sj4))+(((-1.0)*cj6*r20*x1956))+((r20*sj4*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1957.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))))+IKsqr(((x1958.value)*((((r21*sj6*x1956))+((cj4*r22*sj5))+((cj6*r21*sj4))+(((-1.0)*cj6*r20*x1956))+((r20*sj4*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1957.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))), ((x1958.value)*((((r21*sj6*x1956))+((cj4*r22*sj5))+((cj6*r21*sj4))+(((-1.0)*cj6*r20*x1956))+((r20*sj4*sj6))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1959=IKcos(j2);
IkReal x1960=IKsin(j2);
IkReal x1961=(sj4*sj6);
IkReal x1962=(sj4*sj5);
IkReal x1963=(cj5*r21);
IkReal x1964=((1.0)*cj5);
IkReal x1965=(cj4*r20);
IkReal x1966=(r01*sj6);
IkReal x1967=((0.3425)*sj3);
IkReal x1968=((1.0)*sj6);
IkReal x1969=(cj6*r20);
IkReal x1970=((1.0)*sj5);
IkReal x1971=(r21*sj6);
IkReal x1972=(cj6*r00);
IkReal x1973=(cj6*sj4);
IkReal x1974=(cj4*sj5);
IkReal x1975=((1.0)*x1959);
IkReal x1976=(cj3*x1960);
IkReal x1977=((1.0)*cj4*cj6);
evalcond[0]=(((sj5*x1966))+((sj3*x1960))+(((-1.0)*r02*x1964))+(((-1.0)*x1970*x1972)));
evalcond[1]=(((sj5*x1971))+(((-1.0)*sj3*x1975))+(((-1.0)*r22*x1964))+(((-1.0)*x1969*x1970)));
evalcond[2]=((((-1.0)*x1959*x1967))+(((-0.0775)*cj3*x1959))+(((-0.0525)*x1959))+(((-0.076)*x1971))+(((-1.0)*pz))+(((0.076)*x1969)));
evalcond[3]=(((r02*x1974))+(((-1.0)*cj4*x1964*x1972))+((r00*x1961))+x1976+((r01*x1973))+((cj4*cj5*x1966)));
evalcond[4]=((((0.0775)*x1976))+(((0.0525)*x1960))+(((-0.076)*x1966))+(((-1.0)*px))+((x1960*x1967))+(((0.076)*x1972)));
evalcond[5]=((((-1.0)*cj6*x1964*x1965))+((cj4*sj6*x1963))+((r20*x1961))+((r21*x1973))+((r22*x1974))+(((-1.0)*cj3*x1975)));
evalcond[6]=((((-1.0)*x1965*x1968))+(((-1.0)*x1960))+((r22*x1962))+((x1961*x1963))+(((-1.0)*sj4*x1964*x1969))+(((-1.0)*r21*x1977)));
evalcond[7]=(((r02*x1962))+(((-1.0)*cj4*r00*x1968))+(((-1.0)*x1975))+(((-1.0)*r01*x1977))+(((-1.0)*sj4*x1964*x1972))+((cj5*r01*x1961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1978=IKPowWithIntegerCheck(sj3,-1);
if(!x1978.valid){
continue;
}
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x1979.valid){
continue;
}
if( IKabs(((x1978.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1979.value)*(((((0.076)*r21*sj6))+pz+(((-0.076)*cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1978.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))))+IKsqr(((x1979.value)*(((((0.076)*r21*sj6))+pz+(((-0.076)*cj6*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1978.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))), ((x1979.value)*(((((0.076)*r21*sj6))+pz+(((-0.076)*cj6*r20))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1980=IKcos(j2);
IkReal x1981=IKsin(j2);
IkReal x1982=(sj4*sj6);
IkReal x1983=(sj4*sj5);
IkReal x1984=(cj5*r21);
IkReal x1985=((1.0)*cj5);
IkReal x1986=(cj4*r20);
IkReal x1987=(r01*sj6);
IkReal x1988=((0.3425)*sj3);
IkReal x1989=((1.0)*sj6);
IkReal x1990=(cj6*r20);
IkReal x1991=((1.0)*sj5);
IkReal x1992=(r21*sj6);
IkReal x1993=(cj6*r00);
IkReal x1994=(cj6*sj4);
IkReal x1995=(cj4*sj5);
IkReal x1996=((1.0)*x1980);
IkReal x1997=(cj3*x1981);
IkReal x1998=((1.0)*cj4*cj6);
evalcond[0]=(((sj3*x1981))+((sj5*x1987))+(((-1.0)*r02*x1985))+(((-1.0)*x1991*x1993)));
evalcond[1]=(((sj5*x1992))+(((-1.0)*x1990*x1991))+(((-1.0)*sj3*x1996))+(((-1.0)*r22*x1985)));
evalcond[2]=((((0.076)*x1990))+(((-1.0)*x1980*x1988))+(((-0.0525)*x1980))+(((-0.0775)*cj3*x1980))+(((-0.076)*x1992))+(((-1.0)*pz)));
evalcond[3]=(((r02*x1995))+x1997+((cj4*cj5*x1987))+((r00*x1982))+(((-1.0)*cj4*x1985*x1993))+((r01*x1994)));
evalcond[4]=((((0.076)*x1993))+((x1981*x1988))+(((0.0525)*x1981))+(((0.0775)*x1997))+(((-1.0)*px))+(((-0.076)*x1987)));
evalcond[5]=(((cj4*sj6*x1984))+((r21*x1994))+(((-1.0)*cj3*x1996))+(((-1.0)*cj6*x1985*x1986))+((r22*x1995))+((r20*x1982)));
evalcond[6]=((((-1.0)*r21*x1998))+(((-1.0)*x1986*x1989))+((x1982*x1984))+((r22*x1983))+(((-1.0)*x1981))+(((-1.0)*sj4*x1985*x1990)));
evalcond[7]=((((-1.0)*r01*x1998))+((cj5*r01*x1982))+(((-1.0)*x1996))+(((-1.0)*cj4*r00*x1989))+(((-1.0)*sj4*x1985*x1993))+((r02*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1999=((1.0)*sj5);
CheckValue<IkReal> x2000=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2000.valid){
continue;
}
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6*x1999))+((cj6*r00*sj5))+((cj5*r02)))),IkReal(((((-1.0)*cj6*r20*x1999))+((r21*sj5*sj6))+(((-1.0)*cj5*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2000.value)))+(x2001.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2002=IKcos(j2);
IkReal x2003=IKsin(j2);
IkReal x2004=(sj4*sj6);
IkReal x2005=(sj4*sj5);
IkReal x2006=(cj5*r21);
IkReal x2007=((1.0)*cj5);
IkReal x2008=(cj4*r20);
IkReal x2009=(r01*sj6);
IkReal x2010=((0.3425)*sj3);
IkReal x2011=((1.0)*sj6);
IkReal x2012=(cj6*r20);
IkReal x2013=((1.0)*sj5);
IkReal x2014=(r21*sj6);
IkReal x2015=(cj6*r00);
IkReal x2016=(cj6*sj4);
IkReal x2017=(cj4*sj5);
IkReal x2018=((1.0)*x2002);
IkReal x2019=(cj3*x2003);
IkReal x2020=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*x2013*x2015))+((sj3*x2003))+((sj5*x2009))+(((-1.0)*r02*x2007)));
evalcond[1]=((((-1.0)*r22*x2007))+((sj5*x2014))+(((-1.0)*x2012*x2013))+(((-1.0)*sj3*x2018)));
evalcond[2]=((((-1.0)*x2002*x2010))+(((-0.076)*x2014))+(((-0.0775)*cj3*x2002))+(((-1.0)*pz))+(((-0.0525)*x2002))+(((0.076)*x2012)));
evalcond[3]=(((r00*x2004))+x2019+((r01*x2016))+((cj4*cj5*x2009))+(((-1.0)*cj4*x2007*x2015))+((r02*x2017)));
evalcond[4]=((((0.0775)*x2019))+(((-1.0)*px))+((x2003*x2010))+(((0.076)*x2015))+(((-0.076)*x2009))+(((0.0525)*x2003)));
evalcond[5]=(((r22*x2017))+(((-1.0)*cj6*x2007*x2008))+((r20*x2004))+((r21*x2016))+(((-1.0)*cj3*x2018))+((cj4*sj6*x2006)));
evalcond[6]=((((-1.0)*sj4*x2007*x2012))+((r22*x2005))+(((-1.0)*x2008*x2011))+(((-1.0)*x2003))+(((-1.0)*r21*x2020))+((x2004*x2006)));
evalcond[7]=((((-1.0)*sj4*x2007*x2015))+(((-1.0)*x2018))+(((-1.0)*r01*x2020))+((cj5*r01*x2004))+((r02*x2005))+(((-1.0)*cj4*r00*x2011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2021=(cj5*r12);
IkReal x2022=(r11*sj6);
IkReal x2023=(cj6*r10*sj5);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((0.980645161290323)*x2022))+(((-4.41935483870968)*x2021))+(((-4.41935483870968)*x2023))+(((4.41935483870968)*sj5*x2022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x2022))+(((-1.0)*x2023))+(((-1.0)*x2021)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((0.980645161290323)*x2022))+(((-4.41935483870968)*x2021))+(((-4.41935483870968)*x2023))+(((4.41935483870968)*sj5*x2022))))+IKsqr((((sj5*x2022))+(((-1.0)*x2023))+(((-1.0)*x2021))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((0.980645161290323)*x2022))+(((-4.41935483870968)*x2021))+(((-4.41935483870968)*x2023))+(((4.41935483870968)*sj5*x2022))), (((sj5*x2022))+(((-1.0)*x2023))+(((-1.0)*x2021))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2024=IKcos(j3);
IkReal x2025=IKsin(j3);
IkReal x2026=(r11*sj6);
IkReal x2027=(cj4*cj5);
IkReal x2028=(cj6*r10);
evalcond[0]=((((-1.0)*cj5*r12))+((sj5*x2026))+(((-1.0)*x2024))+(((-1.0)*sj5*x2028)));
evalcond[1]=((0.293)+(((-0.076)*x2026))+(((-1.0)*py))+(((0.076)*x2028))+(((-0.3425)*x2024))+(((0.0775)*x2025)));
evalcond[2]=((((-1.0)*x2027*x2028))+((x2026*x2027))+x2025+((r10*sj4*sj6))+((cj6*r11*sj4))+((cj4*r12*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x2029=(cj6*sj5);
IkReal x2030=((1.0)*sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj5*r22))+((r20*x2029))+(((-1.0)*r21*x2030)))))+(IKabs((((r00*x2029))+(((-1.0)*r01*x2030))+((cj5*r02))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=((1.0)+(((6.52380952380952)*sj3))+(((1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.372597569911564)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2031=((57213427.3137081)*sj6);
IkReal x2032=((57213427.3137081)*cj6);
if( IKabs((((r01*x2031))+(((-1.0)*r00*x2032))+(((752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2031))+(((752808254.127739)*pz))+(((-1.0)*r20*x2032)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2031))+(((-1.0)*r00*x2032))+(((752808254.127739)*px))))+IKsqr((((r21*x2031))+(((752808254.127739)*pz))+(((-1.0)*r20*x2032))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*x2031))+(((-1.0)*r00*x2032))+(((752808254.127739)*px))), (((r21*x2031))+(((752808254.127739)*pz))+(((-1.0)*r20*x2032))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2033=IKcos(j2);
IkReal x2034=IKsin(j2);
IkReal x2035=(sj4*sj6);
IkReal x2036=(sj4*sj5);
IkReal x2037=(cj5*r21);
IkReal x2038=((1.0)*cj5);
IkReal x2039=(cj4*r20);
IkReal x2040=((0.076)*sj6);
IkReal x2041=(cj5*r01);
IkReal x2042=((1.0)*sj6);
IkReal x2043=(cj6*sj4);
IkReal x2044=(sj5*sj6);
IkReal x2045=(cj4*cj6);
IkReal x2046=(cj4*sj6);
IkReal x2047=((0.076)*cj6);
IkReal x2048=(cj4*sj5);
IkReal x2049=((1.0)*cj6*sj5);
evalcond[0]=(((r20*x2047))+(((-1.0)*pz))+(((-1.0)*r21*x2040))+(((1.32835950524835e-9)*x2033)));
evalcond[1]=((((-1.0)*px))+(((1.32835950524835e-9)*x2034))+(((-1.0)*r01*x2040))+((r00*x2047)));
evalcond[2]=((((-0.36403599)*x2033))+((r21*x2044))+(((-1.0)*r22*x2038))+(((-1.0)*r20*x2049)));
evalcond[3]=((((-0.36403599)*x2034))+(((-1.0)*r02*x2038))+((r01*x2044))+(((-1.0)*r00*x2049)));
evalcond[4]=(((r22*x2036))+(((-1.0)*r21*x2045))+x2034+(((-1.0)*x2039*x2042))+(((-1.0)*r20*x2038*x2043))+((x2035*x2037)));
evalcond[5]=(((r22*x2048))+((x2037*x2046))+((r21*x2043))+(((0.931384876172381)*x2033))+((r20*x2035))+(((-1.0)*cj6*x2038*x2039)));
evalcond[6]=(((x2041*x2046))+((r00*x2035))+((r02*x2048))+(((-1.0)*r00*x2038*x2045))+(((0.931384876172381)*x2034))+((r01*x2043)));
evalcond[7]=((((-1.0)*r01*x2045))+((r02*x2036))+(((-1.0)*r00*x2038*x2043))+(((-1.0)*cj4*r00*x2042))+(((-1.0)*x2033))+((x2035*x2041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2050=((64920240.9929408)*cj6);
IkReal x2051=((64920240.9929408)*sj6);
if( IKabs(((((-854213697.275536)*px))+(((-1.0)*r01*x2051))+((r00*x2050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-854213697.275536)*pz))+(((-1.0)*r21*x2051))+((r20*x2050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-854213697.275536)*px))+(((-1.0)*r01*x2051))+((r00*x2050))))+IKsqr(((((-854213697.275536)*pz))+(((-1.0)*r21*x2051))+((r20*x2050))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-854213697.275536)*px))+(((-1.0)*r01*x2051))+((r00*x2050))), ((((-854213697.275536)*pz))+(((-1.0)*r21*x2051))+((r20*x2050))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2052=IKcos(j2);
IkReal x2053=IKsin(j2);
IkReal x2054=(sj4*sj6);
IkReal x2055=(sj4*sj5);
IkReal x2056=(cj5*r21);
IkReal x2057=((1.0)*cj5);
IkReal x2058=(cj4*r20);
IkReal x2059=(r01*sj6);
IkReal x2060=((1.0)*sj6);
IkReal x2061=(cj6*sj4);
IkReal x2062=(r21*sj6);
IkReal x2063=(cj4*cj6);
IkReal x2064=((0.076)*cj6);
IkReal x2065=(cj4*sj5);
IkReal x2066=((1.0)*cj6*sj5);
evalcond[0]=(((r20*x2064))+(((-1.0)*pz))+(((-1.17066725011486e-9)*x2052))+(((-0.076)*x2062)));
evalcond[1]=((((-0.076)*x2059))+(((-1.0)*px))+((r00*x2064))+(((-1.17066725011486e-9)*x2053)));
evalcond[2]=((((-1.0)*r22*x2057))+(((-1.0)*r20*x2066))+(((0.07239889)*x2052))+((sj5*x2062)));
evalcond[3]=(((sj5*x2059))+(((-1.0)*r02*x2057))+(((-1.0)*r00*x2066))+(((0.07239889)*x2053)));
evalcond[4]=((((-1.0)*r20*x2057*x2061))+((r22*x2055))+(((-1.0)*r21*x2063))+(((-1.0)*x2058*x2060))+x2053+((x2054*x2056)));
evalcond[5]=(((r22*x2065))+((r21*x2061))+(((-1.0)*cj6*x2057*x2058))+(((-0.997375754782803)*x2052))+((r20*x2054))+((cj4*sj6*x2056)));
evalcond[6]=((((-1.0)*r00*x2057*x2063))+(((-0.997375754782803)*x2053))+((cj4*cj5*x2059))+((r02*x2065))+((r01*x2061))+((r00*x2054)));
evalcond[7]=((((-1.0)*r00*x2057*x2061))+(((-1.0)*cj4*r00*x2060))+(((-1.0)*x2052))+(((-1.0)*r01*x2063))+((cj5*r01*x2054))+((r02*x2055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2067=((0.584615384615385)*cj6);
IkReal x2068=((0.584615384615385)*sj6);
if( IKabs(((((-1.0)*r00*x2067))+((r01*x2068))+(((7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2068))+(((-1.0)*r20*x2067))+(((7.69230769230769)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2067))+((r01*x2068))+(((7.69230769230769)*px))))+IKsqr((((r21*x2068))+(((-1.0)*r20*x2067))+(((7.69230769230769)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x2067))+((r01*x2068))+(((7.69230769230769)*px))), (((r21*x2068))+(((-1.0)*r20*x2067))+(((7.69230769230769)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2069=IKcos(j2);
IkReal x2070=IKsin(j2);
IkReal x2071=(sj4*sj5);
IkReal x2072=(r21*sj6);
IkReal x2073=(cj5*sj4);
IkReal x2074=(cj5*cj6);
IkReal x2075=(r01*sj6);
IkReal x2076=(cj6*sj4);
IkReal x2077=(sj4*sj6);
IkReal x2078=((1.0)*cj4);
IkReal x2079=(cj4*cj5);
IkReal x2080=(cj6*r20);
IkReal x2081=(cj4*sj5);
IkReal x2082=(cj6*r00);
IkReal x2083=(r20*x2078);
evalcond[0]=((((0.13)*x2069))+(((-1.0)*pz))+(((-0.076)*x2072))+(((0.076)*x2080)));
evalcond[1]=((((0.13)*x2070))+(((-1.0)*px))+(((-0.076)*x2075))+(((0.076)*x2082)));
evalcond[2]=(x2069+(((-1.0)*x2074*x2083))+((r20*x2077))+((x2072*x2079))+((r22*x2081))+((r21*x2076)));
evalcond[3]=(((x2075*x2079))+((r02*x2081))+(((-1.0)*r00*x2074*x2078))+x2070+((r01*x2076))+((r00*x2077)));
evalcond[4]=(((r22*x2071))+x2070+(((-1.0)*x2073*x2080))+(((-1.0)*cj6*r21*x2078))+((x2072*x2073))+(((-1.0)*sj6*x2083)));
evalcond[5]=((((-1.0)*r00*sj6*x2078))+(((-1.0)*cj6*r01*x2078))+((r02*x2071))+(((-1.0)*x2069))+(((-1.0)*x2073*x2082))+((x2073*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2084=((3.04)*cj6);
IkReal x2085=((3.04)*sj6);
if( IKabs((((r00*x2084))+(((-1.0)*r01*x2085))+(((-40.0)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2085))+((r20*x2084))+(((-40.0)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2084))+(((-1.0)*r01*x2085))+(((-40.0)*px))))+IKsqr(((((-1.0)*r21*x2085))+((r20*x2084))+(((-40.0)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x2084))+(((-1.0)*r01*x2085))+(((-40.0)*px))), ((((-1.0)*r21*x2085))+((r20*x2084))+(((-40.0)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2086=IKsin(j2);
IkReal x2087=IKcos(j2);
IkReal x2088=(sj4*sj5);
IkReal x2089=(cj5*cj6);
IkReal x2090=((0.076)*sj6);
IkReal x2091=(r20*sj4);
IkReal x2092=(r00*sj6);
IkReal x2093=((1.0)*cj4);
IkReal x2094=(cj6*sj4);
IkReal x2095=((0.076)*cj6);
IkReal x2096=(cj4*sj5);
IkReal x2097=((1.0)*x2087);
IkReal x2098=(cj5*sj4*sj6);
IkReal x2099=(r20*x2093);
IkReal x2100=(cj4*cj5*sj6);
evalcond[0]=((((-1.0)*r21*x2090))+((r20*x2095))+(((-0.025)*x2087))+(((-1.0)*pz)));
evalcond[1]=((((-0.025)*x2086))+((r00*x2095))+(((-1.0)*px))+(((-1.0)*r01*x2090)));
evalcond[2]=((((-1.0)*cj6*r21*x2093))+x2086+(((-1.0)*x2089*x2091))+((r21*x2098))+((r22*x2088))+(((-1.0)*sj6*x2099)));
evalcond[3]=((((-1.0)*x2097))+((r21*x2100))+((r22*x2096))+(((-1.0)*x2089*x2099))+((sj6*x2091))+((r21*x2094)));
evalcond[4]=((((-1.0)*x2086))+((sj4*x2092))+((r01*x2094))+((r01*x2100))+(((-1.0)*r00*x2089*x2093))+((r02*x2096)));
evalcond[5]=((((-1.0)*x2097))+((r02*x2088))+((r01*x2098))+(((-1.0)*r00*sj4*x2089))+(((-1.0)*x2092*x2093))+(((-1.0)*cj6*r01*x2093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2101=IKPowWithIntegerCheck(((0.0525)+(((0.3425)*sj3))+(((0.0775)*cj3))),-1);
if(!x2101.valid){
continue;
}
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(sj3,-1);
if(!x2102.valid){
continue;
}
if( IKabs(((x2101.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2102.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2101.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))+IKsqr(((x2102.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2101.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))), ((x2102.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2103=IKsin(j2);
IkReal x2104=IKcos(j2);
IkReal x2105=(sj4*sj6);
IkReal x2106=(sj4*sj5);
IkReal x2107=(cj5*r21);
IkReal x2108=((1.0)*cj5);
IkReal x2109=(cj4*r20);
IkReal x2110=((0.076)*sj6);
IkReal x2111=((0.3425)*sj3);
IkReal x2112=(cj5*r01);
IkReal x2113=((1.0)*sj6);
IkReal x2114=(cj6*sj4);
IkReal x2115=(sj5*sj6);
IkReal x2116=(cj4*cj6);
IkReal x2117=(cj4*sj6);
IkReal x2118=((0.076)*cj6);
IkReal x2119=(cj4*sj5);
IkReal x2120=(cj3*x2103);
IkReal x2121=(cj3*x2104);
IkReal x2122=((1.0)*cj6*sj5);
evalcond[0]=((((-1.0)*r22*x2108))+((r21*x2115))+((sj3*x2104))+(((-1.0)*r20*x2122)));
evalcond[1]=((((-1.0)*r02*x2108))+((r01*x2115))+(((-1.0)*r00*x2122))+((sj3*x2103)));
evalcond[2]=((((-1.0)*r21*x2116))+x2103+(((-1.0)*r20*x2108*x2114))+((r22*x2106))+(((-1.0)*x2109*x2113))+((x2105*x2107)));
evalcond[3]=(((r20*x2105))+((r21*x2114))+x2121+(((-1.0)*cj6*x2108*x2109))+((x2107*x2117))+((r22*x2119)));
evalcond[4]=((((-1.0)*r21*x2110))+((r20*x2118))+(((-1.0)*pz))+((x2104*x2111))+(((0.0775)*x2121))+(((0.0525)*x2104)));
evalcond[5]=(((r01*x2114))+x2120+((r00*x2105))+(((-1.0)*r00*x2108*x2116))+((r02*x2119))+((x2112*x2117)));
evalcond[6]=((((-1.0)*r01*x2110))+((r00*x2118))+(((-1.0)*px))+((x2103*x2111))+(((0.0775)*x2120))+(((0.0525)*x2103)));
evalcond[7]=((((-1.0)*r01*x2116))+((r02*x2106))+((x2105*x2112))+(((-1.0)*r00*x2108*x2114))+(((-1.0)*x2104))+(((-1.0)*cj4*r00*x2113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2123=((1.0)*sj4);
IkReal x2124=(r21*sj6);
IkReal x2125=(cj6*r20);
CheckValue<IkReal> x2126=IKPowWithIntegerCheck(sj3,-1);
if(!x2126.valid){
continue;
}
if( IKabs((((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*cj5*x2123*x2124))+(((-1.0)*r22*sj5*x2123))+((cj5*sj4*x2125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2126.value)*((((sj5*x2125))+((cj5*r22))+(((-1.0)*sj5*x2124)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*cj5*x2123*x2124))+(((-1.0)*r22*sj5*x2123))+((cj5*sj4*x2125))))+IKsqr(((x2126.value)*((((sj5*x2125))+((cj5*r22))+(((-1.0)*sj5*x2124))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*cj5*x2123*x2124))+(((-1.0)*r22*sj5*x2123))+((cj5*sj4*x2125))), ((x2126.value)*((((sj5*x2125))+((cj5*r22))+(((-1.0)*sj5*x2124))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2127=IKsin(j2);
IkReal x2128=IKcos(j2);
IkReal x2129=(sj4*sj6);
IkReal x2130=(sj4*sj5);
IkReal x2131=(cj5*r21);
IkReal x2132=((1.0)*cj5);
IkReal x2133=(cj4*r20);
IkReal x2134=((0.076)*sj6);
IkReal x2135=((0.3425)*sj3);
IkReal x2136=(cj5*r01);
IkReal x2137=((1.0)*sj6);
IkReal x2138=(cj6*sj4);
IkReal x2139=(sj5*sj6);
IkReal x2140=(cj4*cj6);
IkReal x2141=(cj4*sj6);
IkReal x2142=((0.076)*cj6);
IkReal x2143=(cj4*sj5);
IkReal x2144=(cj3*x2127);
IkReal x2145=(cj3*x2128);
IkReal x2146=((1.0)*cj6*sj5);
evalcond[0]=((((-1.0)*r22*x2132))+((r21*x2139))+((sj3*x2128))+(((-1.0)*r20*x2146)));
evalcond[1]=((((-1.0)*r00*x2146))+((sj3*x2127))+((r01*x2139))+(((-1.0)*r02*x2132)));
evalcond[2]=(x2127+(((-1.0)*r20*x2132*x2138))+((r22*x2130))+(((-1.0)*x2133*x2137))+(((-1.0)*r21*x2140))+((x2129*x2131)));
evalcond[3]=(((r21*x2138))+(((-1.0)*cj6*x2132*x2133))+((r20*x2129))+x2145+((x2131*x2141))+((r22*x2143)));
evalcond[4]=(((r20*x2142))+(((-1.0)*pz))+(((-1.0)*r21*x2134))+(((0.0525)*x2128))+((x2128*x2135))+(((0.0775)*x2145)));
evalcond[5]=((((-1.0)*r00*x2132*x2140))+x2144+((r02*x2143))+((r01*x2138))+((x2136*x2141))+((r00*x2129)));
evalcond[6]=((((-1.0)*r01*x2134))+(((-1.0)*px))+((x2127*x2135))+(((0.0525)*x2127))+((r00*x2142))+(((0.0775)*x2144)));
evalcond[7]=(((r02*x2130))+(((-1.0)*cj4*r00*x2137))+(((-1.0)*r00*x2132*x2138))+(((-1.0)*x2128))+((x2129*x2136))+(((-1.0)*r01*x2140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2147=(cj6*sj5);
IkReal x2148=((1.0)*sj5*sj6);
CheckValue<IkReal> x2149=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2149.valid){
continue;
}
CheckValue<IkReal> x2150 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2148))+((r00*x2147))+((cj5*r02)))),IkReal((((cj5*r22))+((r20*x2147))+(((-1.0)*r21*x2148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2150.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2149.value)))+(x2150.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2151=IKsin(j2);
IkReal x2152=IKcos(j2);
IkReal x2153=(sj4*sj6);
IkReal x2154=(sj4*sj5);
IkReal x2155=(cj5*r21);
IkReal x2156=((1.0)*cj5);
IkReal x2157=(cj4*r20);
IkReal x2158=((0.076)*sj6);
IkReal x2159=((0.3425)*sj3);
IkReal x2160=(cj5*r01);
IkReal x2161=((1.0)*sj6);
IkReal x2162=(cj6*sj4);
IkReal x2163=(sj5*sj6);
IkReal x2164=(cj4*cj6);
IkReal x2165=(cj4*sj6);
IkReal x2166=((0.076)*cj6);
IkReal x2167=(cj4*sj5);
IkReal x2168=(cj3*x2151);
IkReal x2169=(cj3*x2152);
IkReal x2170=((1.0)*cj6*sj5);
evalcond[0]=((((-1.0)*r20*x2170))+((r21*x2163))+(((-1.0)*r22*x2156))+((sj3*x2152)));
evalcond[1]=(((r01*x2163))+(((-1.0)*r02*x2156))+(((-1.0)*r00*x2170))+((sj3*x2151)));
evalcond[2]=((((-1.0)*r21*x2164))+x2151+(((-1.0)*x2157*x2161))+((r22*x2154))+((x2153*x2155))+(((-1.0)*r20*x2156*x2162)));
evalcond[3]=(((r20*x2153))+x2169+((r21*x2162))+((x2155*x2165))+(((-1.0)*cj6*x2156*x2157))+((r22*x2167)));
evalcond[4]=(((x2152*x2159))+(((0.0775)*x2169))+((r20*x2166))+(((-1.0)*pz))+(((0.0525)*x2152))+(((-1.0)*r21*x2158)));
evalcond[5]=((((-1.0)*r00*x2156*x2164))+((r01*x2162))+x2168+((r02*x2167))+((r00*x2153))+((x2160*x2165)));
evalcond[6]=((((-1.0)*r01*x2158))+((r00*x2166))+(((0.0775)*x2168))+(((-1.0)*px))+((x2151*x2159))+(((0.0525)*x2151)));
evalcond[7]=((((-1.0)*r00*x2156*x2162))+((r02*x2154))+((x2153*x2160))+(((-1.0)*cj4*r00*x2161))+(((-1.0)*x2152))+(((-1.0)*r01*x2164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2171=(r21*sj6);
IkReal x2172=(cj6*r20);
IkReal x2173=(cj5*r22);
IkReal x2174=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*pz))+((x2171*x2174))+(((0.980645161290323)*x2171))+(((-1.0)*x2172*x2174))+(((-4.41935483870968)*x2173))+(((-0.980645161290323)*x2172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x2171))+(((-1.0)*sj5*x2172))+(((-1.0)*x2173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*pz))+((x2171*x2174))+(((0.980645161290323)*x2171))+(((-1.0)*x2172*x2174))+(((-4.41935483870968)*x2173))+(((-0.980645161290323)*x2172))))+IKsqr((((sj5*x2171))+(((-1.0)*sj5*x2172))+(((-1.0)*x2173))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*pz))+((x2171*x2174))+(((0.980645161290323)*x2171))+(((-1.0)*x2172*x2174))+(((-4.41935483870968)*x2173))+(((-0.980645161290323)*x2172))), (((sj5*x2171))+(((-1.0)*sj5*x2172))+(((-1.0)*x2173))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2175=IKcos(j3);
IkReal x2176=IKsin(j3);
IkReal x2177=(r21*sj6);
IkReal x2178=(cj6*r20);
IkReal x2179=(cj4*cj5);
evalcond[0]=(((sj5*x2177))+(((-1.0)*sj5*x2178))+(((-1.0)*x2175))+(((-1.0)*cj5*r22)));
evalcond[1]=((0.293)+(((0.0775)*x2176))+(((0.076)*x2178))+(((-1.0)*pz))+(((-0.076)*x2177))+(((-0.3425)*x2175)));
evalcond[2]=(x2176+((cj4*r22*sj5))+((x2177*x2179))+((cj6*r21*sj4))+(((-1.0)*x2178*x2179))+((r20*sj4*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x2180=((1.0)*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x2180))+((cj5*r02)))))+(IKabs(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*x2180))+((r11*sj5*sj6))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2181=((0.584615384615385)*sj6);
IkReal x2182=((0.584615384615385)*cj6);
if( IKabs((((r01*x2181))+(((7.69230769230769)*px))+(((-1.0)*r00*x2182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2181))+(((-7.69230769230769)*py))+((r10*x2182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2181))+(((7.69230769230769)*px))+(((-1.0)*r00*x2182))))+IKsqr(((((-1.0)*r11*x2181))+(((-7.69230769230769)*py))+((r10*x2182))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*x2181))+(((7.69230769230769)*px))+(((-1.0)*r00*x2182))), ((((-1.0)*r11*x2181))+(((-7.69230769230769)*py))+((r10*x2182))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2183=IKsin(j2);
IkReal x2184=IKcos(j2);
IkReal x2185=((0.076)*sj6);
IkReal x2186=(r02*sj5);
IkReal x2187=(cj4*cj5);
IkReal x2188=(r11*sj6);
IkReal x2189=(cj5*sj4);
IkReal x2190=(sj4*sj6);
IkReal x2191=(r01*sj6);
IkReal x2192=((1.0)*cj6);
IkReal x2193=(r12*sj5);
IkReal x2194=(cj6*sj4);
IkReal x2195=((0.076)*cj6);
IkReal x2196=((1.0)*x2184);
IkReal x2197=(r10*x2192);
IkReal x2198=((1.0)*cj4*sj6);
evalcond[0]=((((0.13)*x2183))+(((-1.0)*px))+((r00*x2195))+(((-1.0)*r01*x2185)));
evalcond[1]=((((-1.0)*py))+(((-0.13)*x2184))+(((-1.0)*r11*x2185))+((r10*x2195)));
evalcond[2]=((((-1.0)*r00*x2187*x2192))+x2183+((x2187*x2191))+((cj4*x2186))+((r00*x2190))+((r01*x2194)));
evalcond[3]=((((-1.0)*x2187*x2197))+((x2187*x2188))+((r11*x2194))+(((-1.0)*x2196))+((cj4*x2193))+((r10*x2190)));
evalcond[4]=(((x2189*x2191))+(((-1.0)*x2196))+(((-1.0)*cj4*r01*x2192))+((sj4*x2186))+(((-1.0)*r00*x2189*x2192))+(((-1.0)*r00*x2198)));
evalcond[5]=((((-1.0)*cj4*r11*x2192))+(((-1.0)*x2189*x2197))+(((-1.0)*x2183))+(((-1.0)*r10*x2198))+((sj4*x2193))+((x2188*x2189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2199=((3.04)*cj6);
IkReal x2200=((3.04)*sj6);
if( IKabs((((r00*x2199))+(((-40.0)*px))+(((-1.0)*r01*x2200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((40.0)*py))+((r11*x2200))+(((-1.0)*r10*x2199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2199))+(((-40.0)*px))+(((-1.0)*r01*x2200))))+IKsqr(((((40.0)*py))+((r11*x2200))+(((-1.0)*r10*x2199))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x2199))+(((-40.0)*px))+(((-1.0)*r01*x2200))), ((((40.0)*py))+((r11*x2200))+(((-1.0)*r10*x2199))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2201=IKcos(j2);
IkReal x2202=IKsin(j2);
IkReal x2203=((0.076)*sj6);
IkReal x2204=(r02*sj5);
IkReal x2205=(cj4*cj5);
IkReal x2206=(r11*sj6);
IkReal x2207=(cj5*sj4);
IkReal x2208=(sj4*sj6);
IkReal x2209=(r01*sj6);
IkReal x2210=((1.0)*cj6);
IkReal x2211=(r12*sj5);
IkReal x2212=(cj6*sj4);
IkReal x2213=((0.076)*cj6);
IkReal x2214=((1.0)*x2202);
IkReal x2215=(r10*x2210);
IkReal x2216=((1.0)*cj4*sj6);
evalcond[0]=((((-0.025)*x2202))+((r00*x2213))+(((-1.0)*px))+(((-1.0)*r01*x2203)));
evalcond[1]=((((0.025)*x2201))+(((-1.0)*r11*x2203))+(((-1.0)*py))+((r10*x2213)));
evalcond[2]=(((cj4*x2211))+(((-1.0)*x2205*x2215))+x2201+((r11*x2212))+((x2205*x2206))+((r10*x2208)));
evalcond[3]=(((r01*x2212))+((r00*x2208))+((cj4*x2204))+(((-1.0)*x2214))+(((-1.0)*r00*x2205*x2210))+((x2205*x2209)));
evalcond[4]=((((-1.0)*x2201))+(((-1.0)*cj4*r01*x2210))+((sj4*x2204))+((x2207*x2209))+(((-1.0)*r00*x2207*x2210))+(((-1.0)*r00*x2216)));
evalcond[5]=((((-1.0)*x2214))+(((-1.0)*cj4*r11*x2210))+(((-1.0)*x2207*x2215))+((x2206*x2207))+(((-1.0)*r10*x2216))+((sj4*x2211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2217=((0.192405063291139)*cj6);
IkReal x2218=((0.192405063291139)*sj6);
if( IKabs((((r01*x2218))+(((2.53164556962025)*px))+(((-1.0)*r00*x2217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2218))+(((-2.53164556962025)*py))+((r10*x2217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2218))+(((2.53164556962025)*px))+(((-1.0)*r00*x2217))))+IKsqr(((((-1.0)*r11*x2218))+(((-2.53164556962025)*py))+((r10*x2217))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*x2218))+(((2.53164556962025)*px))+(((-1.0)*r00*x2217))), ((((-1.0)*r11*x2218))+(((-2.53164556962025)*py))+((r10*x2217))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2219=IKsin(j2);
IkReal x2220=IKcos(j2);
IkReal x2221=(r01*sj6);
IkReal x2222=(sj4*sj5);
IkReal x2223=(r11*sj6);
IkReal x2224=(cj5*sj4);
IkReal x2225=((1.0)*cj6);
IkReal x2226=((1.0)*cj5);
IkReal x2227=((0.076)*cj6);
IkReal x2228=((1.0)*x2220);
IkReal x2229=(r10*x2225);
IkReal x2230=((1.0)*cj4*sj6);
evalcond[0]=(x2219+(((-1.0)*r02*x2226))+((sj5*x2221))+(((-1.0)*r00*sj5*x2225)));
evalcond[1]=((((-1.0)*px))+((r00*x2227))+(((-0.076)*x2221))+(((0.395)*x2219)));
evalcond[2]=(((r10*x2227))+(((-1.0)*py))+(((-0.076)*x2223))+(((-0.395)*x2220)));
evalcond[3]=((((-1.0)*r12*x2226))+((sj5*x2223))+(((-1.0)*x2228))+(((-1.0)*sj5*x2229)));
evalcond[4]=((((-1.0)*r00*x2224*x2225))+((r02*x2222))+(((-1.0)*cj4*r01*x2225))+(((-1.0)*r00*x2230))+(((-1.0)*x2228))+((x2221*x2224)));
evalcond[5]=((((-1.0)*r10*x2230))+((r12*x2222))+(((-1.0)*x2219))+(((-1.0)*x2224*x2229))+(((-1.0)*cj4*r11*x2225))+((x2223*x2224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2231=((0.262068965517241)*sj6);
IkReal x2232=((0.262068965517241)*cj6);
if( IKabs(((((-3.44827586206897)*px))+(((-1.0)*r01*x2231))+((r00*x2232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2232))+(((3.44827586206897)*py))+((r11*x2231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.44827586206897)*px))+(((-1.0)*r01*x2231))+((r00*x2232))))+IKsqr(((((-1.0)*r10*x2232))+(((3.44827586206897)*py))+((r11*x2231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-3.44827586206897)*px))+(((-1.0)*r01*x2231))+((r00*x2232))), ((((-1.0)*r10*x2232))+(((3.44827586206897)*py))+((r11*x2231))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2233=IKcos(j2);
IkReal x2234=IKsin(j2);
IkReal x2235=((0.076)*sj6);
IkReal x2236=(sj4*sj5);
IkReal x2237=(sj5*sj6);
IkReal x2238=(cj5*sj4);
IkReal x2239=((1.0)*cj5);
IkReal x2240=((1.0)*cj6);
IkReal x2241=((0.076)*cj6);
IkReal x2242=((1.0)*x2234);
IkReal x2243=(r10*x2240);
IkReal x2244=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*sj5*x2243))+x2233+(((-1.0)*r12*x2239))+((r11*x2237)));
evalcond[1]=((((-1.0)*r01*x2235))+(((-1.0)*px))+(((-0.29)*x2234))+((r00*x2241)));
evalcond[2]=(((r10*x2241))+(((-1.0)*py))+(((-1.0)*r11*x2235))+(((0.29)*x2233)));
evalcond[3]=((((-1.0)*r02*x2239))+(((-1.0)*r00*sj5*x2240))+(((-1.0)*x2242))+((r01*x2237)));
evalcond[4]=(((r01*sj6*x2238))+((r02*x2236))+(((-1.0)*r00*x2244))+(((-1.0)*r00*x2238*x2240))+(((-1.0)*x2233))+(((-1.0)*cj4*r01*x2240)));
evalcond[5]=((((-1.0)*r10*x2244))+(((-1.0)*cj4*r11*x2240))+(((-1.0)*x2242))+(((-1.0)*x2238*x2243))+((r11*sj6*x2238))+((r12*x2236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2245=((64920240.9929408)*cj6);
IkReal x2246=((64920240.9929408)*sj6);
if( IKabs(((((-854213697.275536)*px))+(((-1.0)*r01*x2246))+((r00*x2245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((854213697.275536)*py))+((r11*x2246))+(((-1.0)*r10*x2245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-854213697.275536)*px))+(((-1.0)*r01*x2246))+((r00*x2245))))+IKsqr(((((854213697.275536)*py))+((r11*x2246))+(((-1.0)*r10*x2245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-854213697.275536)*px))+(((-1.0)*r01*x2246))+((r00*x2245))), ((((854213697.275536)*py))+((r11*x2246))+(((-1.0)*r10*x2245))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2247=IKcos(j2);
IkReal x2248=IKsin(j2);
IkReal x2249=((0.076)*sj6);
IkReal x2250=(r02*sj5);
IkReal x2251=(r11*sj6);
IkReal x2252=(cj4*cj5);
IkReal x2253=(cj5*sj4);
IkReal x2254=(sj4*sj6);
IkReal x2255=(r01*sj6);
IkReal x2256=(r12*sj5);
IkReal x2257=((1.0)*cj4);
IkReal x2258=(cj6*r11);
IkReal x2259=(cj6*r01);
IkReal x2260=((1.0)*cj5);
IkReal x2261=((0.076)*cj6);
IkReal x2262=((1.0)*cj6*r10);
IkReal x2263=((1.0)*cj6*r00);
evalcond[0]=(((r00*x2261))+(((-1.0)*r01*x2249))+(((-1.17066725011486e-9)*x2248))+(((-1.0)*px)));
evalcond[1]=(((r10*x2261))+(((-1.0)*py))+(((-1.0)*r11*x2249))+(((1.17066725011486e-9)*x2247)));
evalcond[2]=(((sj5*x2251))+(((-1.0)*r12*x2260))+(((-1.0)*sj5*x2262))+(((-0.07239889)*x2247)));
evalcond[3]=(((sj5*x2255))+(((0.07239889)*x2248))+(((-1.0)*r02*x2260))+(((-1.0)*sj5*x2263)));
evalcond[4]=(((r10*x2254))+(((-1.0)*x2252*x2262))+(((0.997375754782803)*x2247))+((cj4*x2256))+((x2251*x2252))+((sj4*x2258)));
evalcond[5]=((((-1.0)*x2252*x2263))+((x2252*x2255))+((r00*x2254))+((cj4*x2250))+((sj4*x2259))+(((-0.997375754782803)*x2248)));
evalcond[6]=((((-1.0)*x2247))+((x2253*x2255))+(((-1.0)*x2257*x2259))+(((-1.0)*x2253*x2263))+(((-1.0)*r00*sj6*x2257))+((sj4*x2250)));
evalcond[7]=((((-1.0)*x2248))+(((-1.0)*r10*sj6*x2257))+(((-1.0)*x2257*x2258))+(((-1.0)*x2253*x2262))+((x2251*x2253))+((sj4*x2256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2264=((57213427.3137081)*sj6);
IkReal x2265=((57213427.3137081)*cj6);
if( IKabs((((r01*x2264))+(((-1.0)*r00*x2265))+(((752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2265))+(((-752808254.127739)*py))+(((-1.0)*r11*x2264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2264))+(((-1.0)*r00*x2265))+(((752808254.127739)*px))))+IKsqr((((r10*x2265))+(((-752808254.127739)*py))+(((-1.0)*r11*x2264))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*x2264))+(((-1.0)*r00*x2265))+(((752808254.127739)*px))), (((r10*x2265))+(((-752808254.127739)*py))+(((-1.0)*r11*x2264))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2266=IKcos(j2);
IkReal x2267=IKsin(j2);
IkReal x2268=(r01*sj6);
IkReal x2269=(r02*sj5);
IkReal x2270=(r11*sj6);
IkReal x2271=(cj4*cj5);
IkReal x2272=(cj5*sj4);
IkReal x2273=(sj4*sj6);
IkReal x2274=(r12*sj5);
IkReal x2275=((1.0)*cj4);
IkReal x2276=(cj6*r11);
IkReal x2277=(cj6*r01);
IkReal x2278=((1.0)*cj5);
IkReal x2279=((0.076)*cj6);
IkReal x2280=((1.0)*cj6*r10);
IkReal x2281=((1.0)*cj6*r00);
evalcond[0]=(((r00*x2279))+(((-0.076)*x2268))+(((-1.0)*px))+(((1.32835950524835e-9)*x2267)));
evalcond[1]=((((-0.076)*x2270))+(((-1.32835950524835e-9)*x2266))+(((-1.0)*py))+((r10*x2279)));
evalcond[2]=((((-1.0)*sj5*x2280))+(((0.36403599)*x2266))+((sj5*x2270))+(((-1.0)*r12*x2278)));
evalcond[3]=((((-1.0)*sj5*x2281))+(((-1.0)*r02*x2278))+(((-0.36403599)*x2267))+((sj5*x2268)));
evalcond[4]=(((sj4*x2276))+((x2270*x2271))+((cj4*x2274))+(((-1.0)*x2271*x2280))+((r10*x2273))+(((-0.931384876172381)*x2266)));
evalcond[5]=(((r00*x2273))+((sj4*x2277))+((cj4*x2269))+((x2268*x2271))+(((-1.0)*x2271*x2281))+(((0.931384876172381)*x2267)));
evalcond[6]=(((sj4*x2269))+(((-1.0)*x2275*x2277))+(((-1.0)*x2272*x2281))+(((-1.0)*r00*sj6*x2275))+((x2268*x2272))+(((-1.0)*x2266)));
evalcond[7]=((((-1.0)*x2275*x2276))+((sj4*x2274))+((x2270*x2272))+(((-1.0)*x2272*x2280))+(((-1.0)*r10*sj6*x2275))+(((-1.0)*x2267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2282=(cj4*cj5);
CheckValue<IkReal> x2283=IKPowWithIntegerCheck(sj3,-1);
if(!x2283.valid){
continue;
}
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(cj3,-1);
if(!x2284.valid){
continue;
}
if( IKabs(((x2283.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2284.value)*(((((-1.0)*cj6*r10*x2282))+((r10*sj4*sj6))+((r11*sj6*x2282))+((cj6*r11*sj4))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2283.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))))+IKsqr(((x2284.value)*(((((-1.0)*cj6*r10*x2282))+((r10*sj4*sj6))+((r11*sj6*x2282))+((cj6*r11*sj4))+((cj4*r12*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2283.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))), ((x2284.value)*(((((-1.0)*cj6*r10*x2282))+((r10*sj4*sj6))+((r11*sj6*x2282))+((cj6*r11*sj4))+((cj4*r12*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2285=IKsin(j2);
IkReal x2286=IKcos(j2);
IkReal x2287=(r11*sj6);
IkReal x2288=(cj4*cj5);
IkReal x2289=(r01*sj6);
IkReal x2290=((0.3425)*sj3);
IkReal x2291=(r02*sj5);
IkReal x2292=(cj5*sj4);
IkReal x2293=(sj4*sj6);
IkReal x2294=((0.0775)*cj3);
IkReal x2295=(r12*sj5);
IkReal x2296=((1.0)*cj4);
IkReal x2297=(cj6*r11);
IkReal x2298=(cj6*r01);
IkReal x2299=((1.0)*cj5);
IkReal x2300=((0.076)*cj6);
IkReal x2301=((1.0)*x2286);
IkReal x2302=((1.0)*cj6*r10);
IkReal x2303=((1.0)*cj6*r00);
evalcond[0]=(((sj3*x2285))+((sj5*x2289))+(((-1.0)*r02*x2299))+(((-1.0)*sj5*x2303)));
evalcond[1]=((((-1.0)*sj3*x2301))+((sj5*x2287))+(((-1.0)*r12*x2299))+(((-1.0)*sj5*x2302)));
evalcond[2]=(((sj4*x2298))+((cj3*x2285))+((cj4*x2291))+((r00*x2293))+(((-1.0)*x2288*x2303))+((x2288*x2289)));
evalcond[3]=((((0.0525)*x2285))+(((-1.0)*px))+(((-0.076)*x2289))+((r00*x2300))+((x2285*x2294))+((x2285*x2290)));
evalcond[4]=(((r10*x2300))+(((-0.0525)*x2286))+(((-1.0)*x2286*x2290))+(((-1.0)*x2286*x2294))+(((-1.0)*py))+(((-0.076)*x2287)));
evalcond[5]=(((sj4*x2297))+(((-1.0)*cj3*x2301))+((r10*x2293))+((x2287*x2288))+((cj4*x2295))+(((-1.0)*x2288*x2302)));
evalcond[6]=(((sj4*x2291))+(((-1.0)*x2292*x2303))+(((-1.0)*r00*sj6*x2296))+(((-1.0)*x2301))+((x2289*x2292))+(((-1.0)*x2296*x2298)));
evalcond[7]=(((sj4*x2295))+(((-1.0)*x2292*x2302))+(((-1.0)*r10*sj6*x2296))+(((-1.0)*x2285))+((x2287*x2292))+(((-1.0)*x2296*x2297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2304=IKPowWithIntegerCheck(sj3,-1);
if(!x2304.valid){
continue;
}
CheckValue<IkReal> x2305=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x2305.valid){
continue;
}
if( IKabs(((x2304.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2305.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2304.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))))+IKsqr(((x2305.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2304.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))), ((x2305.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2306=IKsin(j2);
IkReal x2307=IKcos(j2);
IkReal x2308=(r11*sj6);
IkReal x2309=(cj4*cj5);
IkReal x2310=(r01*sj6);
IkReal x2311=((0.3425)*sj3);
IkReal x2312=(r02*sj5);
IkReal x2313=(cj5*sj4);
IkReal x2314=(sj4*sj6);
IkReal x2315=((0.0775)*cj3);
IkReal x2316=(r12*sj5);
IkReal x2317=((1.0)*cj4);
IkReal x2318=(cj6*r11);
IkReal x2319=(cj6*r01);
IkReal x2320=((1.0)*cj5);
IkReal x2321=((0.076)*cj6);
IkReal x2322=((1.0)*x2307);
IkReal x2323=((1.0)*cj6*r10);
IkReal x2324=((1.0)*cj6*r00);
evalcond[0]=(((sj5*x2310))+((sj3*x2306))+(((-1.0)*r02*x2320))+(((-1.0)*sj5*x2324)));
evalcond[1]=(((sj5*x2308))+(((-1.0)*r12*x2320))+(((-1.0)*sj3*x2322))+(((-1.0)*sj5*x2323)));
evalcond[2]=((((-1.0)*x2309*x2324))+((x2309*x2310))+((cj4*x2312))+((sj4*x2319))+((r00*x2314))+((cj3*x2306)));
evalcond[3]=((((-0.076)*x2310))+((x2306*x2311))+((x2306*x2315))+(((0.0525)*x2306))+(((-1.0)*px))+((r00*x2321)));
evalcond[4]=(((r10*x2321))+(((-0.0525)*x2307))+(((-1.0)*py))+(((-0.076)*x2308))+(((-1.0)*x2307*x2315))+(((-1.0)*x2307*x2311)));
evalcond[5]=(((r10*x2314))+((x2308*x2309))+(((-1.0)*x2309*x2323))+(((-1.0)*cj3*x2322))+((cj4*x2316))+((sj4*x2318)));
evalcond[6]=((((-1.0)*r00*sj6*x2317))+((sj4*x2312))+(((-1.0)*x2313*x2324))+(((-1.0)*x2317*x2319))+((x2310*x2313))+(((-1.0)*x2322)));
evalcond[7]=((((-1.0)*x2306))+((x2308*x2313))+(((-1.0)*r10*sj6*x2317))+((sj4*x2316))+(((-1.0)*x2313*x2323))+(((-1.0)*x2317*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2325=((1.0)*sj5);
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2326.valid){
continue;
}
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x2325))+((cj5*r02)))),IkReal(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*x2325))+((r11*sj5*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2326.value)))+(x2327.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2328=IKsin(j2);
IkReal x2329=IKcos(j2);
IkReal x2330=(r11*sj6);
IkReal x2331=(cj4*cj5);
IkReal x2332=(r01*sj6);
IkReal x2333=((0.3425)*sj3);
IkReal x2334=(r02*sj5);
IkReal x2335=(cj5*sj4);
IkReal x2336=(sj4*sj6);
IkReal x2337=((0.0775)*cj3);
IkReal x2338=(r12*sj5);
IkReal x2339=((1.0)*cj4);
IkReal x2340=(cj6*r11);
IkReal x2341=(cj6*r01);
IkReal x2342=((1.0)*cj5);
IkReal x2343=((0.076)*cj6);
IkReal x2344=((1.0)*x2329);
IkReal x2345=((1.0)*cj6*r10);
IkReal x2346=((1.0)*cj6*r00);
evalcond[0]=(((sj5*x2332))+((sj3*x2328))+(((-1.0)*sj5*x2346))+(((-1.0)*r02*x2342)));
evalcond[1]=(((sj5*x2330))+(((-1.0)*sj5*x2345))+(((-1.0)*sj3*x2344))+(((-1.0)*r12*x2342)));
evalcond[2]=((((-1.0)*x2331*x2346))+((cj3*x2328))+((x2331*x2332))+((sj4*x2341))+((r00*x2336))+((cj4*x2334)));
evalcond[3]=(((r00*x2343))+(((-0.076)*x2332))+(((-1.0)*px))+(((0.0525)*x2328))+((x2328*x2337))+((x2328*x2333)));
evalcond[4]=(((r10*x2343))+(((-0.0525)*x2329))+(((-0.076)*x2330))+(((-1.0)*py))+(((-1.0)*x2329*x2337))+(((-1.0)*x2329*x2333)));
evalcond[5]=((((-1.0)*x2331*x2345))+(((-1.0)*cj3*x2344))+((sj4*x2340))+((cj4*x2338))+((x2330*x2331))+((r10*x2336)));
evalcond[6]=((((-1.0)*x2339*x2341))+(((-1.0)*r00*sj6*x2339))+((x2332*x2335))+(((-1.0)*x2335*x2346))+((sj4*x2334))+(((-1.0)*x2344)));
evalcond[7]=((((-1.0)*x2339*x2340))+(((-1.0)*x2335*x2345))+(((-1.0)*r10*sj6*x2339))+((sj4*x2338))+((x2330*x2335))+(((-1.0)*x2328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2347=(cj6*r20);
IkReal x2348=(cj4*cj5);
IkReal x2349=(r21*sj6);
if( IKabs((((cj4*r22*sj5))+((x2348*x2349))+(((-1.0)*x2347*x2348))+((cj6*r21*sj4))+((r20*sj4*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((sj5*x2347))+(((-1.0)*sj5*x2349)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r22*sj5))+((x2348*x2349))+(((-1.0)*x2347*x2348))+((cj6*r21*sj4))+((r20*sj4*sj6))))+IKsqr((((cj5*r22))+((sj5*x2347))+(((-1.0)*sj5*x2349))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj4*r22*sj5))+((x2348*x2349))+(((-1.0)*x2347*x2348))+((cj6*r21*sj4))+((r20*sj4*sj6))), (((cj5*r22))+((sj5*x2347))+(((-1.0)*sj5*x2349))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2350=IKcos(j3);
IkReal x2351=IKsin(j3);
IkReal x2352=(r21*sj6);
IkReal x2353=(cj6*r20);
IkReal x2354=(cj4*cj5);
evalcond[0]=(x2350+(((-1.0)*cj5*r22))+((sj5*x2352))+(((-1.0)*sj5*x2353)));
evalcond[1]=((-0.293)+(((0.076)*x2353))+(((-0.076)*x2352))+(((-1.0)*pz))+(((-0.0775)*x2351))+(((0.3425)*x2350)));
evalcond[2]=((((-1.0)*x2351))+((x2352*x2354))+(((-1.0)*x2353*x2354))+((cj4*r22*sj5))+((cj6*r21*sj4))+((r20*sj4*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x2355=(cj6*sj5);
IkReal x2356=((1.0)*sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj5*r12))+((r10*x2355))+(((-1.0)*r11*x2356)))))+(IKabs((((r00*x2355))+(((-1.0)*r01*x2356))+((cj5*r02))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=((1.0)+(((6.52380952380952)*sj3))+(((1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.372597569911564)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2357=((57213427.3137081)*sj6);
IkReal x2358=((57213427.3137081)*cj6);
if( IKabs((((r01*x2357))+(((-1.0)*r00*x2358))+(((752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2357))+(((-1.0)*r10*x2358))+(((752808254.127739)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2357))+(((-1.0)*r00*x2358))+(((752808254.127739)*px))))+IKsqr((((r11*x2357))+(((-1.0)*r10*x2358))+(((752808254.127739)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*x2357))+(((-1.0)*r00*x2358))+(((752808254.127739)*px))), (((r11*x2357))+(((-1.0)*r10*x2358))+(((752808254.127739)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2359=IKcos(j2);
IkReal x2360=IKsin(j2);
IkReal x2361=(r01*sj6);
IkReal x2362=(r02*sj5);
IkReal x2363=(r11*sj6);
IkReal x2364=(cj4*cj5);
IkReal x2365=(cj5*sj4);
IkReal x2366=(sj4*sj6);
IkReal x2367=(r12*sj5);
IkReal x2368=((1.0)*cj4);
IkReal x2369=(cj6*r11);
IkReal x2370=(cj6*r01);
IkReal x2371=((1.0)*cj5);
IkReal x2372=((0.076)*cj6);
IkReal x2373=((1.0)*cj6*r10);
IkReal x2374=((1.0)*cj6*r00);
evalcond[0]=((((-0.076)*x2361))+(((-1.0)*px))+(((1.32835950524835e-9)*x2360))+((r00*x2372)));
evalcond[1]=(((r10*x2372))+(((-0.076)*x2363))+(((-1.0)*py))+(((1.32835950524835e-9)*x2359)));
evalcond[2]=((((-1.0)*sj5*x2373))+((sj5*x2363))+(((-0.36403599)*x2359))+(((-1.0)*r12*x2371)));
evalcond[3]=((((-1.0)*r02*x2371))+(((-1.0)*sj5*x2374))+((sj5*x2361))+(((-0.36403599)*x2360)));
evalcond[4]=(x2360+(((-1.0)*x2368*x2369))+(((-1.0)*x2365*x2373))+(((-1.0)*r10*sj6*x2368))+((sj4*x2367))+((x2363*x2365)));
evalcond[5]=(((cj4*x2367))+((r10*x2366))+(((0.931384876172381)*x2359))+(((-1.0)*x2364*x2373))+((sj4*x2369))+((x2363*x2364)));
evalcond[6]=(((cj4*x2362))+(((0.931384876172381)*x2360))+((x2361*x2364))+(((-1.0)*x2364*x2374))+((sj4*x2370))+((r00*x2366)));
evalcond[7]=((((-1.0)*x2359))+(((-1.0)*x2368*x2370))+(((-1.0)*x2365*x2374))+((x2361*x2365))+((sj4*x2362))+(((-1.0)*r00*sj6*x2368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2375=((64920240.9929408)*cj6);
IkReal x2376=((64920240.9929408)*sj6);
if( IKabs(((((-854213697.275536)*px))+(((-1.0)*r01*x2376))+((r00*x2375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-854213697.275536)*py))+((r10*x2375))+(((-1.0)*r11*x2376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-854213697.275536)*px))+(((-1.0)*r01*x2376))+((r00*x2375))))+IKsqr(((((-854213697.275536)*py))+((r10*x2375))+(((-1.0)*r11*x2376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-854213697.275536)*px))+(((-1.0)*r01*x2376))+((r00*x2375))), ((((-854213697.275536)*py))+((r10*x2375))+(((-1.0)*r11*x2376))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2377=IKcos(j2);
IkReal x2378=IKsin(j2);
IkReal x2379=(r01*sj6);
IkReal x2380=(r02*sj5);
IkReal x2381=(r11*sj6);
IkReal x2382=(cj4*cj5);
IkReal x2383=(cj5*sj4);
IkReal x2384=(sj4*sj6);
IkReal x2385=((1.0)*cj5);
IkReal x2386=(r12*sj5);
IkReal x2387=((1.0)*cj4);
IkReal x2388=(cj6*r11);
IkReal x2389=(cj6*r01);
IkReal x2390=((0.076)*cj6);
IkReal x2391=((1.0)*cj6*r10);
IkReal x2392=((1.0)*cj6*r00);
evalcond[0]=(((r00*x2390))+(((-0.076)*x2379))+(((-1.0)*px))+(((-1.17066725011486e-9)*x2378)));
evalcond[1]=((((-1.0)*py))+(((-0.076)*x2381))+((r10*x2390))+(((-1.17066725011486e-9)*x2377)));
evalcond[2]=((((-1.0)*r12*x2385))+(((-1.0)*sj5*x2391))+((sj5*x2381))+(((0.07239889)*x2377)));
evalcond[3]=((((-1.0)*r02*x2385))+(((-1.0)*sj5*x2392))+((sj5*x2379))+(((0.07239889)*x2378)));
evalcond[4]=(((sj4*x2386))+((x2381*x2383))+x2378+(((-1.0)*x2383*x2391))+(((-1.0)*r10*sj6*x2387))+(((-1.0)*x2387*x2388)));
evalcond[5]=(((sj4*x2388))+((x2381*x2382))+(((-0.997375754782803)*x2377))+(((-1.0)*x2382*x2391))+((r10*x2384))+((cj4*x2386)));
evalcond[6]=(((sj4*x2389))+((r00*x2384))+(((-0.997375754782803)*x2378))+(((-1.0)*x2382*x2392))+((x2379*x2382))+((cj4*x2380)));
evalcond[7]=(((sj4*x2380))+(((-1.0)*x2377))+(((-1.0)*x2383*x2392))+((x2379*x2383))+(((-1.0)*x2387*x2389))+(((-1.0)*r00*sj6*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2393=((0.584615384615385)*sj6);
IkReal x2394=((0.584615384615385)*cj6);
if( IKabs(((((-1.0)*r00*x2394))+((r01*x2393))+(((7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2394))+((r11*x2393))+(((7.69230769230769)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2394))+((r01*x2393))+(((7.69230769230769)*px))))+IKsqr(((((-1.0)*r10*x2394))+((r11*x2393))+(((7.69230769230769)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x2394))+((r01*x2393))+(((7.69230769230769)*px))), ((((-1.0)*r10*x2394))+((r11*x2393))+(((7.69230769230769)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2395=IKcos(j2);
IkReal x2396=IKsin(j2);
IkReal x2397=((0.076)*sj6);
IkReal x2398=(r02*sj5);
IkReal x2399=(cj4*cj5);
IkReal x2400=(r11*sj6);
IkReal x2401=((1.0)*cj6);
IkReal x2402=(sj4*sj6);
IkReal x2403=(r12*sj5);
IkReal x2404=(cj6*sj4);
IkReal x2405=(cj5*sj4);
IkReal x2406=((0.076)*cj6);
IkReal x2407=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r01*x2397))+((r00*x2406))+(((-1.0)*px))+(((0.13)*x2396)));
evalcond[1]=(((r10*x2406))+(((-1.0)*py))+(((0.13)*x2395))+(((-1.0)*r11*x2397)));
evalcond[2]=(((r10*x2402))+x2395+((r11*x2404))+((x2399*x2400))+((cj4*x2403))+(((-1.0)*r10*x2399*x2401)));
evalcond[3]=(((r01*x2404))+((r01*sj6*x2399))+((r00*x2402))+x2396+(((-1.0)*r00*x2399*x2401))+((cj4*x2398)));
evalcond[4]=(x2396+((x2400*x2405))+(((-1.0)*r10*x2401*x2405))+(((-1.0)*cj4*r11*x2401))+(((-1.0)*r10*x2407))+((sj4*x2403)));
evalcond[5]=(((sj4*x2398))+((cj5*r01*x2402))+(((-1.0)*cj4*r01*x2401))+(((-1.0)*r00*x2407))+(((-1.0)*x2395))+(((-1.0)*r00*x2401*x2405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2408=((3.04)*cj6);
IkReal x2409=((3.04)*sj6);
if( IKabs((((r00*x2408))+(((-1.0)*r01*x2409))+(((-40.0)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2408))+(((-1.0)*r11*x2409))+(((-40.0)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2408))+(((-1.0)*r01*x2409))+(((-40.0)*px))))+IKsqr((((r10*x2408))+(((-1.0)*r11*x2409))+(((-40.0)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x2408))+(((-1.0)*r01*x2409))+(((-40.0)*px))), (((r10*x2408))+(((-1.0)*r11*x2409))+(((-40.0)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2410=IKsin(j2);
IkReal x2411=IKcos(j2);
IkReal x2412=(r01*sj6);
IkReal x2413=(r02*sj5);
IkReal x2414=(r11*sj6);
IkReal x2415=(cj4*cj5);
IkReal x2416=(cj5*sj4);
IkReal x2417=(sj4*sj6);
IkReal x2418=((1.0)*cj6);
IkReal x2419=(r12*sj5);
IkReal x2420=(cj6*sj4);
IkReal x2421=((0.076)*cj6);
IkReal x2422=((1.0)*x2411);
IkReal x2423=(r10*x2418);
IkReal x2424=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*px))+(((-0.076)*x2412))+((r00*x2421))+(((-0.025)*x2410)));
evalcond[1]=(((r10*x2421))+(((-1.0)*py))+(((-0.076)*x2414))+(((-0.025)*x2411)));
evalcond[2]=(x2410+((x2414*x2416))+(((-1.0)*r10*x2424))+((sj4*x2419))+(((-1.0)*cj4*r11*x2418))+(((-1.0)*x2416*x2423)));
evalcond[3]=(((r10*x2417))+((x2414*x2415))+((r11*x2420))+((cj4*x2419))+(((-1.0)*x2422))+(((-1.0)*x2415*x2423)));
evalcond[4]=((((-1.0)*r00*x2415*x2418))+(((-1.0)*x2410))+((r00*x2417))+((r01*x2420))+((cj4*x2413))+((x2412*x2415)));
evalcond[5]=(((sj4*x2413))+(((-1.0)*x2422))+(((-1.0)*cj4*r01*x2418))+(((-1.0)*r00*x2416*x2418))+(((-1.0)*r00*x2424))+((x2412*x2416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(((0.0525)+(((0.3425)*sj3))+(((0.0775)*cj3))),-1);
if(!x2425.valid){
continue;
}
CheckValue<IkReal> x2426=IKPowWithIntegerCheck(sj3,-1);
if(!x2426.valid){
continue;
}
if( IKabs(((x2425.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2426.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2425.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))+IKsqr(((x2426.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2425.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))), ((x2426.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2427=IKsin(j2);
IkReal x2428=IKcos(j2);
IkReal x2429=(r01*sj6);
IkReal x2430=((0.3425)*sj3);
IkReal x2431=(r02*sj5);
IkReal x2432=(r11*sj6);
IkReal x2433=(cj5*sj4);
IkReal x2434=((1.0)*cj6);
IkReal x2435=(cj4*cj5);
IkReal x2436=(sj4*sj6);
IkReal x2437=(r12*sj5);
IkReal x2438=(cj6*sj4);
IkReal x2439=((1.0)*cj5);
IkReal x2440=((0.076)*cj6);
IkReal x2441=(cj3*x2427);
IkReal x2442=(cj3*x2428);
IkReal x2443=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r10*sj5*x2434))+((sj5*x2432))+(((-1.0)*r12*x2439))+((sj3*x2428)));
evalcond[1]=(((sj5*x2429))+(((-1.0)*r00*sj5*x2434))+(((-1.0)*r02*x2439))+((sj3*x2427)));
evalcond[2]=(x2427+(((-1.0)*r10*x2443))+((x2432*x2433))+(((-1.0)*cj4*r11*x2434))+(((-1.0)*r10*x2433*x2434))+((sj4*x2437)));
evalcond[3]=(x2442+((r11*x2438))+(((-1.0)*r10*x2434*x2435))+((x2432*x2435))+((cj4*x2437))+((r10*x2436)));
evalcond[4]=(((x2429*x2435))+x2441+((r00*x2436))+((r01*x2438))+(((-1.0)*r00*x2434*x2435))+((cj4*x2431)));
evalcond[5]=((((0.0525)*x2427))+((r00*x2440))+(((-1.0)*px))+(((-0.076)*x2429))+((x2427*x2430))+(((0.0775)*x2441)));
evalcond[6]=(((x2428*x2430))+(((-0.076)*x2432))+((r10*x2440))+(((0.0525)*x2428))+(((-1.0)*py))+(((0.0775)*x2442)));
evalcond[7]=(((x2429*x2433))+(((-1.0)*cj4*r01*x2434))+(((-1.0)*r00*x2433*x2434))+(((-1.0)*x2428))+(((-1.0)*r00*x2443))+((sj4*x2431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2444=(cj5*sj4);
IkReal x2445=(cj6*r10);
IkReal x2446=((1.0)*r11*sj6);
CheckValue<IkReal> x2447=IKPowWithIntegerCheck(sj3,-1);
if(!x2447.valid){
continue;
}
if( IKabs(((((-1.0)*x2444*x2446))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r11))+((x2444*x2445))+((cj4*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2447.value)*((((cj5*r12))+((sj5*x2445))+(((-1.0)*sj5*x2446)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2444*x2446))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r11))+((x2444*x2445))+((cj4*r10*sj6))))+IKsqr(((x2447.value)*((((cj5*r12))+((sj5*x2445))+(((-1.0)*sj5*x2446))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2444*x2446))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r11))+((x2444*x2445))+((cj4*r10*sj6))), ((x2447.value)*((((cj5*r12))+((sj5*x2445))+(((-1.0)*sj5*x2446))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2448=IKsin(j2);
IkReal x2449=IKcos(j2);
IkReal x2450=(r01*sj6);
IkReal x2451=((0.3425)*sj3);
IkReal x2452=(r02*sj5);
IkReal x2453=(r11*sj6);
IkReal x2454=(cj5*sj4);
IkReal x2455=((1.0)*cj6);
IkReal x2456=(cj4*cj5);
IkReal x2457=(sj4*sj6);
IkReal x2458=(r12*sj5);
IkReal x2459=(cj6*sj4);
IkReal x2460=((1.0)*cj5);
IkReal x2461=((0.076)*cj6);
IkReal x2462=(cj3*x2448);
IkReal x2463=(cj3*x2449);
IkReal x2464=((1.0)*cj4*sj6);
evalcond[0]=(((sj3*x2449))+(((-1.0)*r12*x2460))+(((-1.0)*r10*sj5*x2455))+((sj5*x2453)));
evalcond[1]=(((sj3*x2448))+(((-1.0)*r00*sj5*x2455))+(((-1.0)*r02*x2460))+((sj5*x2450)));
evalcond[2]=(x2448+(((-1.0)*r10*x2454*x2455))+(((-1.0)*cj4*r11*x2455))+((x2453*x2454))+((sj4*x2458))+(((-1.0)*r10*x2464)));
evalcond[3]=(x2463+((x2453*x2456))+((r10*x2457))+((cj4*x2458))+(((-1.0)*r10*x2455*x2456))+((r11*x2459)));
evalcond[4]=(x2462+((x2450*x2456))+((r01*x2459))+((cj4*x2452))+((r00*x2457))+(((-1.0)*r00*x2455*x2456)));
evalcond[5]=((((0.0525)*x2448))+(((-1.0)*px))+(((0.0775)*x2462))+((x2448*x2451))+(((-0.076)*x2450))+((r00*x2461)));
evalcond[6]=((((0.0525)*x2449))+((x2449*x2451))+(((-1.0)*py))+(((0.0775)*x2463))+(((-0.076)*x2453))+((r10*x2461)));
evalcond[7]=((((-1.0)*r00*x2464))+(((-1.0)*cj4*r01*x2455))+(((-1.0)*r00*x2454*x2455))+((x2450*x2454))+(((-1.0)*x2449))+((sj4*x2452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2465=(cj6*sj5);
IkReal x2466=((1.0)*sj5*sj6);
CheckValue<IkReal> x2467=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2467.valid){
continue;
}
CheckValue<IkReal> x2468 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2466))+((cj5*r02))+((r00*x2465)))),IkReal((((cj5*r12))+(((-1.0)*r11*x2466))+((r10*x2465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2468.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2467.value)))+(x2468.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2469=IKsin(j2);
IkReal x2470=IKcos(j2);
IkReal x2471=(r01*sj6);
IkReal x2472=((0.3425)*sj3);
IkReal x2473=(r02*sj5);
IkReal x2474=(r11*sj6);
IkReal x2475=(cj5*sj4);
IkReal x2476=((1.0)*cj6);
IkReal x2477=(cj4*cj5);
IkReal x2478=(sj4*sj6);
IkReal x2479=(r12*sj5);
IkReal x2480=(cj6*sj4);
IkReal x2481=((1.0)*cj5);
IkReal x2482=((0.076)*cj6);
IkReal x2483=(cj3*x2469);
IkReal x2484=(cj3*x2470);
IkReal x2485=((1.0)*cj4*sj6);
evalcond[0]=(((sj3*x2470))+(((-1.0)*r10*sj5*x2476))+((sj5*x2474))+(((-1.0)*r12*x2481)));
evalcond[1]=(((sj3*x2469))+(((-1.0)*r02*x2481))+((sj5*x2471))+(((-1.0)*r00*sj5*x2476)));
evalcond[2]=(x2469+((sj4*x2479))+(((-1.0)*r10*x2485))+(((-1.0)*cj4*r11*x2476))+(((-1.0)*r10*x2475*x2476))+((x2474*x2475)));
evalcond[3]=(x2484+((r10*x2478))+((cj4*x2479))+((r11*x2480))+(((-1.0)*r10*x2476*x2477))+((x2474*x2477)));
evalcond[4]=(((x2471*x2477))+((r01*x2480))+x2483+((r00*x2478))+((cj4*x2473))+(((-1.0)*r00*x2476*x2477)));
evalcond[5]=((((0.0775)*x2483))+(((-0.076)*x2471))+(((-1.0)*px))+(((0.0525)*x2469))+((x2469*x2472))+((r00*x2482)));
evalcond[6]=((((0.0775)*x2484))+(((-0.076)*x2474))+(((-1.0)*py))+(((0.0525)*x2470))+((r10*x2482))+((x2470*x2472)));
evalcond[7]=(((x2471*x2475))+((sj4*x2473))+(((-1.0)*x2470))+(((-1.0)*r00*x2485))+(((-1.0)*r00*x2475*x2476))+(((-1.0)*cj4*r01*x2476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2486=((1.0)*cj4);
IkReal x2487=(sj4*sj5);
IkReal x2488=(cj5*sj4*sj6);
IkReal x2489=((1.0)*cj5*cj6*sj4);
CheckValue<IkReal> x2490=IKPowWithIntegerCheck(cj1,-1);
if(!x2490.valid){
continue;
}
if( IKabs(((x2490.value)*(((((-1.0)*r10*x2489))+((r11*x2488))+(((-1.0)*r10*sj6*x2486))+((r12*x2487))+(((-1.0)*cj6*r11*x2486)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x2488))+(((-1.0)*cj6*r01*x2486))+((r02*x2487))+(((-1.0)*r00*sj6*x2486))+(((-1.0)*r00*x2489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2490.value)*(((((-1.0)*r10*x2489))+((r11*x2488))+(((-1.0)*r10*sj6*x2486))+((r12*x2487))+(((-1.0)*cj6*r11*x2486))))))+IKsqr((((r01*x2488))+(((-1.0)*cj6*r01*x2486))+((r02*x2487))+(((-1.0)*r00*sj6*x2486))+(((-1.0)*r00*x2489))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2490.value)*(((((-1.0)*r10*x2489))+((r11*x2488))+(((-1.0)*r10*sj6*x2486))+((r12*x2487))+(((-1.0)*cj6*r11*x2486))))), (((r01*x2488))+(((-1.0)*cj6*r01*x2486))+((r02*x2487))+(((-1.0)*r00*sj6*x2486))+(((-1.0)*r00*x2489))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x2491=IKsin(j2);
IkReal x2492=(sj4*sj5);
IkReal x2493=(cj5*sj4);
IkReal x2494=((1.0)*cj6);
IkReal x2495=((1.0)*cj4*sj6);
IkReal x2496=((1.0)*x2491);
evalcond[0]=((((-1.0)*r00*x2493*x2494))+((r01*sj6*x2493))+((r02*x2492))+(((-1.0)*r00*x2495))+(((-1.0)*cj4*r01*x2494))+(((-1.0)*(IKcos(j2)))));
evalcond[1]=(((r22*x2492))+(((-1.0)*sj1*x2496))+(((-1.0)*r20*x2495))+(((-1.0)*cj4*r21*x2494))+(((-1.0)*r20*x2493*x2494))+((r21*sj6*x2493)));
evalcond[2]=((((-1.0)*cj4*r11*x2494))+(((-1.0)*r10*x2495))+(((-1.0)*r10*x2493*x2494))+(((-1.0)*cj1*x2496))+((r12*x2492))+((r11*sj6*x2493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2497=((1.0)*r01);
IkReal x2498=(cj4*cj5);
IkReal x2499=(cj6*r00);
j3eval[0]=sj2;
j3eval[1]=IKsign(sj2);
j3eval[2]=((IKabs((((sj5*x2499))+(((-1.0)*sj5*sj6*x2497))+((cj5*r02)))))+(IKabs(((((-1.0)*cj4*r02*sj5))+(((-1.0)*sj6*x2497*x2498))+(((-1.0)*cj6*sj4*x2497))+(((-1.0)*r00*sj4*sj6))+((x2498*x2499))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2500=(sj1*sj5);
IkReal x2501=(r21*sj6);
IkReal x2502=(cj6*r10);
IkReal x2503=(cj5*r12);
IkReal x2504=(cj1*sj5);
IkReal x2505=(r11*sj6);
IkReal x2506=((1.0)*cj5*r22);
IkReal x2507=((1.0)*cj6*r20);
if( IKabs((((x2504*x2505))+((x2500*x2501))+(((-1.0)*cj1*x2503))+(((-1.0)*x2500*x2507))+(((-1.0)*x2502*x2504))+(((-1.0)*sj1*x2506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2500*x2502))+(((-1.0)*x2500*x2505))+((x2501*x2504))+(((-1.0)*x2504*x2507))+((sj1*x2503))+(((-1.0)*cj1*x2506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2504*x2505))+((x2500*x2501))+(((-1.0)*cj1*x2503))+(((-1.0)*x2500*x2507))+(((-1.0)*x2502*x2504))+(((-1.0)*sj1*x2506))))+IKsqr((((x2500*x2502))+(((-1.0)*x2500*x2505))+((x2501*x2504))+(((-1.0)*x2504*x2507))+((sj1*x2503))+(((-1.0)*cj1*x2506))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x2504*x2505))+((x2500*x2501))+(((-1.0)*cj1*x2503))+(((-1.0)*x2500*x2507))+(((-1.0)*x2502*x2504))+(((-1.0)*sj1*x2506))), (((x2500*x2502))+(((-1.0)*x2500*x2505))+((x2501*x2504))+(((-1.0)*x2504*x2507))+((sj1*x2503))+(((-1.0)*cj1*x2506))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2508=IKcos(j3);
IkReal x2509=IKsin(j3);
IkReal x2510=(r21*sj6);
IkReal x2511=((1.0)*cj6);
IkReal x2512=(cj4*cj5);
IkReal x2513=((1.0)*cj5);
IkReal x2514=(r11*sj6);
IkReal x2515=(sj4*sj6);
IkReal x2516=(cj4*sj5);
IkReal x2517=((0.076)*cj6);
IkReal x2518=(cj6*sj4);
IkReal x2519=(sj1*x2508);
IkReal x2520=(cj1*x2508);
IkReal x2521=(cj1*x2509);
IkReal x2522=(sj1*x2509);
IkReal x2523=((1.0)*x2520);
IkReal x2524=((1.0)*x2522);
IkReal x2525=(x2524+x2523);
evalcond[0]=(x2519+(((-1.0)*r10*sj5*x2511))+(((-1.0)*x2521))+(((-1.0)*r12*x2513))+((sj5*x2514)));
evalcond[1]=(((sj5*x2510))+(((-1.0)*r22*x2513))+(((-1.0)*x2525))+(((-1.0)*r20*sj5*x2511)));
evalcond[2]=(x2521+((x2510*x2512))+((r22*x2516))+((r21*x2518))+(((-1.0)*x2519))+(((-1.0)*r20*x2511*x2512))+((r20*x2515)));
evalcond[3]=(((x2512*x2514))+((r11*x2518))+((r10*x2515))+(((-1.0)*r10*x2511*x2512))+(((-1.0)*x2525))+((r12*x2516)));
evalcond[4]=((((-0.0775)*x2519))+(((-0.3425)*x2520))+(((-0.3425)*x2522))+(((0.0775)*x2521))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.076)*x2510))+(((-0.0525)*sj1))+((r20*x2517)));
evalcond[5]=((((-0.3425)*x2521))+(((-0.0525)*cj1))+((r10*x2517))+(((0.3425)*x2519))+(((-1.0)*py))+(((-0.076)*x2514))+(((-0.0775)*x2522))+(((-0.0775)*x2520))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2526=(cj1*cj5);
IkReal x2527=(sj1*sj5);
IkReal x2528=((1.0)*sj6);
IkReal x2529=(cj6*r10);
IkReal x2530=(cj1*sj5);
IkReal x2531=(cj5*sj1);
IkReal x2532=(cj6*r20);
if( IKabs(((((-1.0)*r21*x2527*x2528))+(((-1.0)*r11*x2528*x2530))+((r12*x2526))+((x2527*x2532))+((r22*x2531))+((x2529*x2530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2527*x2529))+((r21*sj6*x2530))+(((-1.0)*r22*x2526))+(((-1.0)*r11*x2527*x2528))+((r12*x2531))+(((-1.0)*x2530*x2532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2527*x2528))+(((-1.0)*r11*x2528*x2530))+((r12*x2526))+((x2527*x2532))+((r22*x2531))+((x2529*x2530))))+IKsqr((((x2527*x2529))+((r21*sj6*x2530))+(((-1.0)*r22*x2526))+(((-1.0)*r11*x2527*x2528))+((r12*x2531))+(((-1.0)*x2530*x2532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r21*x2527*x2528))+(((-1.0)*r11*x2528*x2530))+((r12*x2526))+((x2527*x2532))+((r22*x2531))+((x2529*x2530))), (((x2527*x2529))+((r21*sj6*x2530))+(((-1.0)*r22*x2526))+(((-1.0)*r11*x2527*x2528))+((r12*x2531))+(((-1.0)*x2530*x2532))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2533=IKsin(j3);
IkReal x2534=IKcos(j3);
IkReal x2535=(r21*sj6);
IkReal x2536=((1.0)*cj6);
IkReal x2537=(cj4*cj5);
IkReal x2538=((1.0)*cj5);
IkReal x2539=(r11*sj6);
IkReal x2540=(sj4*sj6);
IkReal x2541=(cj4*sj5);
IkReal x2542=((0.076)*cj6);
IkReal x2543=(cj6*sj4);
IkReal x2544=(sj1*x2534);
IkReal x2545=(cj1*x2533);
IkReal x2546=(cj1*x2534);
IkReal x2547=(sj1*x2533);
IkReal x2548=(x2545+x2544);
evalcond[0]=(x2548+(((-1.0)*r10*sj5*x2536))+(((-1.0)*r12*x2538))+((sj5*x2539)));
evalcond[1]=(x2547+(((-1.0)*x2546))+(((-1.0)*r22*x2538))+((sj5*x2535))+(((-1.0)*r20*sj5*x2536)));
evalcond[2]=(x2548+((r21*x2543))+((r20*x2540))+(((-1.0)*r20*x2536*x2537))+((r22*x2541))+((x2535*x2537)));
evalcond[3]=(x2546+((r11*x2543))+((r12*x2541))+(((-1.0)*x2547))+(((-1.0)*r10*x2536*x2537))+((x2537*x2539))+((r10*x2540)));
evalcond[4]=((((0.0775)*x2545))+(((0.0775)*x2544))+(((-1.0)*pz))+(((0.293)*cj1))+((r20*x2542))+(((0.0525)*sj1))+(((0.3425)*x2547))+(((-0.3425)*x2546))+(((-0.076)*x2535)));
evalcond[5]=((((0.0525)*cj1))+(((0.0775)*x2546))+(((-1.0)*py))+(((-0.0775)*x2547))+(((0.3425)*x2544))+(((0.3425)*x2545))+(((-0.293)*sj1))+(((-0.076)*x2539))+((r10*x2542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2549=(r21*sj6);
IkReal x2550=(cj6*r20);
IkReal x2551=(cj5*r22);
IkReal x2552=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-4.41935483870968)*x2551))+(((12.9032258064516)*pz))+(((0.980645161290323)*x2549))+((x2549*x2552))+(((-1.0)*x2550*x2552))+(((-0.980645161290323)*x2550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2551))+(((-1.0)*sj5*x2550))+((sj5*x2549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-4.41935483870968)*x2551))+(((12.9032258064516)*pz))+(((0.980645161290323)*x2549))+((x2549*x2552))+(((-1.0)*x2550*x2552))+(((-0.980645161290323)*x2550))))+IKsqr(((((-1.0)*x2551))+(((-1.0)*sj5*x2550))+((sj5*x2549))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-4.41935483870968)*x2551))+(((12.9032258064516)*pz))+(((0.980645161290323)*x2549))+((x2549*x2552))+(((-1.0)*x2550*x2552))+(((-0.980645161290323)*x2550))), ((((-1.0)*x2551))+(((-1.0)*sj5*x2550))+((sj5*x2549))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2553=IKsin(j3);
IkReal x2554=IKcos(j3);
IkReal x2555=(sj4*sj6);
IkReal x2556=((1.0)*cj6);
IkReal x2557=(cj4*cj5);
IkReal x2558=((0.076)*sj6);
IkReal x2559=(r11*sj6);
IkReal x2560=((1.0)*cj5);
IkReal x2561=(cj6*sj4);
IkReal x2562=(r21*sj6);
IkReal x2563=(cj4*sj5);
IkReal x2564=(r01*sj6);
IkReal x2565=((0.076)*cj6);
IkReal x2566=((0.0775)*x2554);
IkReal x2567=(cj2*x2553);
IkReal x2568=(sj2*x2553);
IkReal x2569=((1.0)*x2554);
evalcond[0]=((((-1.0)*r22*x2560))+((sj5*x2562))+(((-1.0)*r20*sj5*x2556))+(((-1.0)*x2569)));
evalcond[1]=(x2568+((sj5*x2564))+(((-1.0)*r02*x2560))+(((-1.0)*r00*sj5*x2556)));
evalcond[2]=((((-1.0)*x2567))+((sj5*x2559))+(((-1.0)*r10*sj5*x2556))+(((-1.0)*r12*x2560)));
evalcond[3]=((0.293)+(((-0.3425)*x2554))+(((0.0775)*x2553))+((r20*x2565))+(((-1.0)*r21*x2558))+(((-1.0)*pz)));
evalcond[4]=((((-1.0)*r20*x2556*x2557))+((r22*x2563))+x2553+((x2557*x2562))+((r20*x2555))+((r21*x2561)));
evalcond[5]=(((r00*x2565))+((sj2*x2566))+(((-1.0)*px))+(((-1.0)*r01*x2558))+(((0.0525)*sj2))+(((0.3425)*x2568)));
evalcond[6]=((((-0.0525)*cj2))+(((-1.0)*r11*x2558))+((r10*x2565))+(((-1.0)*py))+(((-1.0)*cj2*x2566))+(((-0.3425)*x2567)));
evalcond[7]=(((r01*x2561))+(((-1.0)*r00*x2556*x2557))+((x2557*x2564))+((sj2*x2554))+((r00*x2555))+((r02*x2563)));
evalcond[8]=((((-1.0)*cj2*x2569))+(((-1.0)*r10*x2556*x2557))+((r12*x2563))+((x2557*x2559))+((r11*x2561))+((r10*x2555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2570=(cj6*r20);
IkReal x2571=(cj5*r22);
IkReal x2572=(r21*sj6);
IkReal x2573=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((0.980645161290323)*x2570))+(((4.41935483870968)*x2571))+(((-1.0)*x2572*x2573))+(((-0.980645161290323)*x2572))+((x2570*x2573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2571+((sj5*x2570))+(((-1.0)*sj5*x2572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((0.980645161290323)*x2570))+(((4.41935483870968)*x2571))+(((-1.0)*x2572*x2573))+(((-0.980645161290323)*x2572))+((x2570*x2573))))+IKsqr((x2571+((sj5*x2570))+(((-1.0)*sj5*x2572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((0.980645161290323)*x2570))+(((4.41935483870968)*x2571))+(((-1.0)*x2572*x2573))+(((-0.980645161290323)*x2572))+((x2570*x2573))), (x2571+((sj5*x2570))+(((-1.0)*sj5*x2572))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2574=IKsin(j3);
IkReal x2575=IKcos(j3);
IkReal x2576=(sj4*sj6);
IkReal x2577=(cj4*sj5);
IkReal x2578=((1.0)*cj6);
IkReal x2579=(cj4*cj5);
IkReal x2580=((0.076)*sj6);
IkReal x2581=(r11*sj6);
IkReal x2582=((1.0)*cj5);
IkReal x2583=(r21*sj6);
IkReal x2584=(r01*sj6);
IkReal x2585=(cj6*sj4);
IkReal x2586=((0.076)*cj6);
IkReal x2587=((0.0775)*x2575);
IkReal x2588=(cj2*x2574);
IkReal x2589=(sj2*x2574);
evalcond[0]=(((sj5*x2583))+x2575+(((-1.0)*r20*sj5*x2578))+(((-1.0)*r22*x2582)));
evalcond[1]=(((sj5*x2581))+x2588+(((-1.0)*r10*sj5*x2578))+(((-1.0)*r12*x2582)));
evalcond[2]=(((sj5*x2584))+x2589+(((-1.0)*r02*x2582))+(((-1.0)*r00*sj5*x2578)));
evalcond[3]=((-0.293)+(((-1.0)*r21*x2580))+((r20*x2586))+(((-1.0)*pz))+(((0.3425)*x2575))+(((-0.0775)*x2574)));
evalcond[4]=((((-1.0)*r01*x2580))+((sj2*x2587))+((r00*x2586))+(((-1.0)*px))+(((0.0525)*sj2))+(((0.3425)*x2589)));
evalcond[5]=((((0.0525)*cj2))+((cj2*x2587))+(((-1.0)*py))+((r10*x2586))+(((-1.0)*r11*x2580))+(((0.3425)*x2588)));
evalcond[6]=((((-1.0)*x2574))+((r20*x2576))+((x2579*x2583))+(((-1.0)*r20*x2578*x2579))+((r21*x2585))+((r22*x2577)));
evalcond[7]=(((cj2*x2575))+((r10*x2576))+((r12*x2577))+((r11*x2585))+((x2579*x2581))+(((-1.0)*r10*x2578*x2579)));
evalcond[8]=(((r01*x2585))+((sj2*x2575))+((x2579*x2584))+(((-1.0)*r00*x2578*x2579))+((r00*x2576))+((r02*x2577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2595=IKPowWithIntegerCheck(sj2,-1);
if(!x2595.valid){
continue;
}
IkReal x2590=x2595.value;
IkReal x2591=(cj5*r02);
IkReal x2592=(cj6*sj5);
IkReal x2593=(cj1*cj2);
IkReal x2594=((1.0)*sj5*sj6);
CheckValue<IkReal> x2596=IKPowWithIntegerCheck(sj1,-1);
if(!x2596.valid){
continue;
}
if( IKabs((x2590*((((r00*x2592))+x2591+(((-1.0)*r01*x2594)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2590*(x2596.value)*((((cj5*r12*sj2))+(((-1.0)*r01*x2593*x2594))+((r00*x2592*x2593))+((x2591*x2593))+(((-1.0)*r11*sj2*x2594))+((r10*sj2*x2592)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2590*((((r00*x2592))+x2591+(((-1.0)*r01*x2594))))))+IKsqr((x2590*(x2596.value)*((((cj5*r12*sj2))+(((-1.0)*r01*x2593*x2594))+((r00*x2592*x2593))+((x2591*x2593))+(((-1.0)*r11*sj2*x2594))+((r10*sj2*x2592))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x2590*((((r00*x2592))+x2591+(((-1.0)*r01*x2594))))), (x2590*(x2596.value)*((((cj5*r12*sj2))+(((-1.0)*r01*x2593*x2594))+((r00*x2592*x2593))+((x2591*x2593))+(((-1.0)*r11*sj2*x2594))+((r10*sj2*x2592))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2597=IKsin(j3);
IkReal x2598=IKcos(j3);
IkReal x2599=(sj4*sj6);
IkReal x2600=((0.076)*sj6);
IkReal x2601=((0.3425)*cj2);
IkReal x2602=(cj4*cj5);
IkReal x2603=((1.0)*cj2);
IkReal x2604=(r11*sj6);
IkReal x2605=((1.0)*cj5);
IkReal x2606=(cj2*sj1);
IkReal x2607=(r21*sj6);
IkReal x2608=(cj4*sj5);
IkReal x2609=(r01*sj6);
IkReal x2610=(cj6*sj4);
IkReal x2611=((0.076)*cj6);
IkReal x2612=(cj1*x2597);
IkReal x2613=(cj1*x2598);
IkReal x2614=((1.0)*cj6*r10);
IkReal x2615=(sj2*x2598);
IkReal x2616=((1.0)*cj6*r20);
IkReal x2617=(sj1*x2598);
IkReal x2618=((1.0)*cj6*r00);
IkReal x2619=(sj1*x2597);
IkReal x2620=(sj2*x2597);
evalcond[0]=((((-1.0)*sj5*x2618))+(((-1.0)*r02*x2605))+((sj5*x2609))+x2620);
evalcond[1]=((((-1.0)*sj5*x2614))+(((-1.0)*r12*x2605))+(((-1.0)*x2603*x2612))+((sj5*x2604))+x2617);
evalcond[2]=((((-1.0)*sj5*x2616))+(((-1.0)*x2613))+(((-1.0)*x2603*x2619))+(((-1.0)*r22*x2605))+((sj5*x2607)));
evalcond[3]=(((r00*x2611))+(((-1.0)*px))+(((0.0775)*x2615))+(((0.3425)*x2620))+(((0.0525)*sj2))+(((-1.0)*r01*x2600)));
evalcond[4]=(((r00*x2599))+((r01*x2610))+((x2602*x2609))+(((-1.0)*x2602*x2618))+((r02*x2608))+x2615);
evalcond[5]=(((x2602*x2607))+((r20*x2599))+(((-1.0)*x2602*x2616))+(((-1.0)*x2603*x2617))+((r22*x2608))+((r21*x2610))+x2612);
evalcond[6]=((((-1.0)*x2619))+((x2602*x2604))+((r10*x2599))+(((-1.0)*x2602*x2614))+(((-1.0)*x2603*x2613))+((r12*x2608))+((r11*x2610)));
evalcond[7]=(((r20*x2611))+(((-0.0525)*x2606))+(((-0.0775)*x2598*x2606))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.3425)*x2613))+(((0.0775)*x2612))+(((-1.0)*r21*x2600))+(((-1.0)*x2601*x2619)));
evalcond[8]=((((-0.0775)*cj2*x2613))+(((-0.0525)*cj1*cj2))+(((-1.0)*r11*x2600))+(((-1.0)*py))+((r10*x2611))+(((0.3425)*x2617))+(((-0.0775)*x2619))+(((-0.293)*sj1))+(((-1.0)*x2601*x2612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(sj2,-1);
if(!x2626.valid){
continue;
}
IkReal x2621=x2626.value;
IkReal x2622=(r01*sj6);
IkReal x2623=((137.0)*sj5);
IkReal x2624=(cj6*r00);
IkReal x2625=(cj5*r02);
if( IKabs((x2621*((((sj5*x2624))+(((-1.0)*sj5*x2622))+x2625)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x2621*(((((-1.0)*x2623*x2624))+(((30.4)*x2622))+(((400.0)*px))+(((-21.0)*sj2))+(((-30.4)*x2624))+((x2622*x2623))+(((-137.0)*x2625)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2621*((((sj5*x2624))+(((-1.0)*sj5*x2622))+x2625))))+IKsqr(((0.032258064516129)*x2621*(((((-1.0)*x2623*x2624))+(((30.4)*x2622))+(((400.0)*px))+(((-21.0)*sj2))+(((-30.4)*x2624))+((x2622*x2623))+(((-137.0)*x2625))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x2621*((((sj5*x2624))+(((-1.0)*sj5*x2622))+x2625))), ((0.032258064516129)*x2621*(((((-1.0)*x2623*x2624))+(((30.4)*x2622))+(((400.0)*px))+(((-21.0)*sj2))+(((-30.4)*x2624))+((x2622*x2623))+(((-137.0)*x2625))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2627=IKsin(j3);
IkReal x2628=IKcos(j3);
IkReal x2629=(sj4*sj6);
IkReal x2630=((0.076)*sj6);
IkReal x2631=((0.3425)*cj2);
IkReal x2632=(cj4*cj5);
IkReal x2633=((1.0)*cj2);
IkReal x2634=(r11*sj6);
IkReal x2635=((1.0)*cj5);
IkReal x2636=(cj2*sj1);
IkReal x2637=(r21*sj6);
IkReal x2638=(cj4*sj5);
IkReal x2639=(r01*sj6);
IkReal x2640=(cj6*sj4);
IkReal x2641=((0.076)*cj6);
IkReal x2642=(cj1*x2627);
IkReal x2643=(cj1*x2628);
IkReal x2644=((1.0)*cj6*r10);
IkReal x2645=(sj2*x2628);
IkReal x2646=((1.0)*cj6*r20);
IkReal x2647=(sj1*x2628);
IkReal x2648=((1.0)*cj6*r00);
IkReal x2649=(sj1*x2627);
IkReal x2650=(sj2*x2627);
evalcond[0]=((((-1.0)*r02*x2635))+((sj5*x2639))+(((-1.0)*sj5*x2648))+x2650);
evalcond[1]=(((sj5*x2634))+(((-1.0)*sj5*x2644))+(((-1.0)*r12*x2635))+(((-1.0)*x2633*x2642))+x2647);
evalcond[2]=(((sj5*x2637))+(((-1.0)*sj5*x2646))+(((-1.0)*x2633*x2649))+(((-1.0)*x2643))+(((-1.0)*r22*x2635)));
evalcond[3]=((((0.0775)*x2645))+(((-1.0)*r01*x2630))+(((-1.0)*px))+((r00*x2641))+(((0.0525)*sj2))+(((0.3425)*x2650)));
evalcond[4]=((((-1.0)*x2632*x2648))+((r00*x2629))+((x2632*x2639))+((r01*x2640))+x2645+((r02*x2638)));
evalcond[5]=((((-1.0)*x2632*x2646))+((r20*x2629))+((r21*x2640))+((r22*x2638))+((x2632*x2637))+(((-1.0)*x2633*x2647))+x2642);
evalcond[6]=((((-1.0)*x2632*x2644))+((r11*x2640))+((r12*x2638))+((x2632*x2634))+((r10*x2629))+(((-1.0)*x2633*x2643))+(((-1.0)*x2649)));
evalcond[7]=((((-0.0775)*x2628*x2636))+(((0.0775)*x2642))+(((-1.0)*r21*x2630))+(((-0.3425)*x2643))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*x2636))+(((-1.0)*x2631*x2649))+((r20*x2641)));
evalcond[8]=((((0.3425)*x2647))+(((-0.0525)*cj1*cj2))+((r10*x2641))+(((-0.0775)*cj2*x2643))+(((-0.0775)*x2649))+(((-1.0)*py))+(((-1.0)*r11*x2630))+(((-1.0)*x2631*x2642))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2651=((1.0)*sj5);
IkReal x2652=(r01*sj6);
IkReal x2653=(cj6*r00);
IkReal x2654=((1.0)*sj4);
IkReal x2655=(cj4*cj5);
CheckValue<IkReal> x2656 = IKatan2WithCheck(IkReal(((((-1.0)*x2651*x2652))+((sj5*x2653))+((cj5*r02)))),IkReal(((((-1.0)*x2652*x2655))+((x2653*x2655))+(((-1.0)*r00*sj6*x2654))+(((-1.0)*cj4*r02*x2651))+(((-1.0)*cj6*r01*x2654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2656.valid){
continue;
}
CheckValue<IkReal> x2657=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x2657.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2656.value)+(((1.5707963267949)*(x2657.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2658=IKsin(j3);
IkReal x2659=IKcos(j3);
IkReal x2660=(sj4*sj6);
IkReal x2661=((0.076)*sj6);
IkReal x2662=((0.3425)*cj2);
IkReal x2663=(cj4*cj5);
IkReal x2664=((1.0)*cj2);
IkReal x2665=(r11*sj6);
IkReal x2666=((1.0)*cj5);
IkReal x2667=(cj2*sj1);
IkReal x2668=(r21*sj6);
IkReal x2669=(cj4*sj5);
IkReal x2670=(r01*sj6);
IkReal x2671=(cj6*sj4);
IkReal x2672=((0.076)*cj6);
IkReal x2673=(cj1*x2658);
IkReal x2674=(cj1*x2659);
IkReal x2675=((1.0)*cj6*r10);
IkReal x2676=(sj2*x2659);
IkReal x2677=((1.0)*cj6*r20);
IkReal x2678=(sj1*x2659);
IkReal x2679=((1.0)*cj6*r00);
IkReal x2680=(sj1*x2658);
IkReal x2681=(sj2*x2658);
evalcond[0]=((((-1.0)*r02*x2666))+((sj5*x2670))+(((-1.0)*sj5*x2679))+x2681);
evalcond[1]=((((-1.0)*r12*x2666))+(((-1.0)*x2664*x2673))+((sj5*x2665))+(((-1.0)*sj5*x2675))+x2678);
evalcond[2]=((((-1.0)*x2674))+(((-1.0)*r22*x2666))+(((-1.0)*x2664*x2680))+((sj5*x2668))+(((-1.0)*sj5*x2677)));
evalcond[3]=((((0.3425)*x2681))+(((-1.0)*r01*x2661))+(((0.0775)*x2676))+(((-1.0)*px))+((r00*x2672))+(((0.0525)*sj2)));
evalcond[4]=(((x2663*x2670))+((r02*x2669))+(((-1.0)*x2663*x2679))+((r00*x2660))+((r01*x2671))+x2676);
evalcond[5]=(((x2663*x2668))+((r21*x2671))+((r22*x2669))+(((-1.0)*x2664*x2678))+(((-1.0)*x2663*x2677))+((r20*x2660))+x2673);
evalcond[6]=(((r12*x2669))+((x2663*x2665))+((r10*x2660))+(((-1.0)*x2664*x2674))+(((-1.0)*x2663*x2675))+(((-1.0)*x2680))+((r11*x2671)));
evalcond[7]=((((-1.0)*x2662*x2680))+(((-0.3425)*x2674))+(((-0.0525)*x2667))+(((0.0775)*x2673))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0775)*x2659*x2667))+(((-1.0)*r21*x2661))+((r20*x2672)));
evalcond[8]=((((-1.0)*r11*x2661))+(((0.3425)*x2678))+(((-0.0525)*cj1*cj2))+(((-0.0775)*cj2*x2674))+(((-1.0)*x2662*x2673))+((r10*x2672))+(((-1.0)*py))+(((-0.0775)*x2680))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2682=(sj4*sj5);
IkReal x2683=(cj5*sj4);
IkReal x2684=((1.0)*cj6);
IkReal x2685=((1.0)*cj4*sj6);
CheckValue<IkReal> x2686=IKPowWithIntegerCheck(sj1,-1);
if(!x2686.valid){
continue;
}
if( IKabs(((x2686.value)*(((((-1.0)*r20*x2683*x2684))+(((-1.0)*cj4*r21*x2684))+((r22*x2682))+(((-1.0)*r20*x2685))+((r21*sj6*x2683)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x2682))+(((-1.0)*r00*x2685))+(((-1.0)*r00*x2683*x2684))+(((-1.0)*cj4*r01*x2684))+((r01*sj6*x2683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2686.value)*(((((-1.0)*r20*x2683*x2684))+(((-1.0)*cj4*r21*x2684))+((r22*x2682))+(((-1.0)*r20*x2685))+((r21*sj6*x2683))))))+IKsqr((((r02*x2682))+(((-1.0)*r00*x2685))+(((-1.0)*r00*x2683*x2684))+(((-1.0)*cj4*r01*x2684))+((r01*sj6*x2683))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2686.value)*(((((-1.0)*r20*x2683*x2684))+(((-1.0)*cj4*r21*x2684))+((r22*x2682))+(((-1.0)*r20*x2685))+((r21*sj6*x2683))))), (((r02*x2682))+(((-1.0)*r00*x2685))+(((-1.0)*r00*x2683*x2684))+(((-1.0)*cj4*r01*x2684))+((r01*sj6*x2683))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x2687=IKsin(j2);
IkReal x2688=(sj4*sj5);
IkReal x2689=(cj5*sj4);
IkReal x2690=((1.0)*cj6);
IkReal x2691=((1.0)*cj4*sj6);
IkReal x2692=((1.0)*x2687);
evalcond[0]=(((r02*x2688))+(((-1.0)*r00*x2689*x2690))+(((-1.0)*cj4*r01*x2690))+(((-1.0)*r00*x2691))+(((-1.0)*(IKcos(j2))))+((r01*sj6*x2689)));
evalcond[1]=((((-1.0)*sj1*x2692))+(((-1.0)*cj4*r21*x2690))+(((-1.0)*r20*x2689*x2690))+((r22*x2688))+(((-1.0)*r20*x2691))+((r21*sj6*x2689)));
evalcond[2]=((((-1.0)*cj4*r11*x2690))+(((-1.0)*r10*x2691))+(((-1.0)*cj1*x2692))+((r12*x2688))+(((-1.0)*r10*x2689*x2690))+((r11*sj6*x2689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2693=((1.0)*r01);
IkReal x2694=(cj4*cj5);
IkReal x2695=(cj6*r00);
j3eval[0]=sj2;
j3eval[1]=IKsign(sj2);
j3eval[2]=((IKabs(((((-1.0)*cj4*r02*sj5))+(((-1.0)*cj6*sj4*x2693))+(((-1.0)*sj6*x2693*x2694))+((x2694*x2695))+(((-1.0)*r00*sj4*sj6)))))+(IKabs(((((-1.0)*sj5*sj6*x2693))+((sj5*x2695))+((cj5*r02))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2696=(sj1*sj5);
IkReal x2697=(r21*sj6);
IkReal x2698=(cj6*r10);
IkReal x2699=(cj5*r12);
IkReal x2700=(cj1*sj5);
IkReal x2701=(r11*sj6);
IkReal x2702=((1.0)*cj5*r22);
IkReal x2703=((1.0)*cj6*r20);
if( IKabs(((((-1.0)*x2696*x2703))+((x2700*x2701))+(((-1.0)*cj1*x2699))+(((-1.0)*x2698*x2700))+((x2696*x2697))+(((-1.0)*sj1*x2702)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2697*x2700))+((sj1*x2699))+(((-1.0)*cj1*x2702))+((x2696*x2698))+(((-1.0)*x2700*x2703))+(((-1.0)*x2696*x2701)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2696*x2703))+((x2700*x2701))+(((-1.0)*cj1*x2699))+(((-1.0)*x2698*x2700))+((x2696*x2697))+(((-1.0)*sj1*x2702))))+IKsqr((((x2697*x2700))+((sj1*x2699))+(((-1.0)*cj1*x2702))+((x2696*x2698))+(((-1.0)*x2700*x2703))+(((-1.0)*x2696*x2701))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x2696*x2703))+((x2700*x2701))+(((-1.0)*cj1*x2699))+(((-1.0)*x2698*x2700))+((x2696*x2697))+(((-1.0)*sj1*x2702))), (((x2697*x2700))+((sj1*x2699))+(((-1.0)*cj1*x2702))+((x2696*x2698))+(((-1.0)*x2700*x2703))+(((-1.0)*x2696*x2701))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2704=IKcos(j3);
IkReal x2705=IKsin(j3);
IkReal x2706=(r21*sj6);
IkReal x2707=((1.0)*cj6);
IkReal x2708=(cj4*cj5);
IkReal x2709=((1.0)*cj5);
IkReal x2710=(r11*sj6);
IkReal x2711=(sj4*sj6);
IkReal x2712=(cj4*sj5);
IkReal x2713=((0.076)*cj6);
IkReal x2714=(cj6*sj4);
IkReal x2715=(sj1*x2704);
IkReal x2716=(cj1*x2704);
IkReal x2717=(cj1*x2705);
IkReal x2718=(sj1*x2705);
IkReal x2719=((1.0)*x2716);
IkReal x2720=((1.0)*x2718);
IkReal x2721=(x2719+x2720);
evalcond[0]=(x2715+(((-1.0)*x2717))+(((-1.0)*r12*x2709))+(((-1.0)*r10*sj5*x2707))+((sj5*x2710)));
evalcond[1]=((((-1.0)*r22*x2709))+(((-1.0)*r20*sj5*x2707))+(((-1.0)*x2721))+((sj5*x2706)));
evalcond[2]=(x2717+(((-1.0)*x2715))+((r22*x2712))+(((-1.0)*r20*x2707*x2708))+((x2706*x2708))+((r21*x2714))+((r20*x2711)));
evalcond[3]=(((r12*x2712))+((x2708*x2710))+(((-1.0)*r10*x2707*x2708))+((r10*x2711))+(((-1.0)*x2721))+((r11*x2714)));
evalcond[4]=((((-0.3425)*x2718))+(((-0.3425)*x2716))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((-0.076)*x2706))+(((-0.0775)*x2715))+(((0.0775)*x2717))+((r20*x2713)));
evalcond[5]=((((-0.3425)*x2717))+(((-0.0525)*cj1))+(((-1.0)*py))+((r10*x2713))+(((-0.076)*x2710))+(((-0.0775)*x2718))+(((-0.0775)*x2716))+(((-0.293)*sj1))+(((0.3425)*x2715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2722=(cj1*cj5);
IkReal x2723=(sj1*sj5);
IkReal x2724=((1.0)*sj6);
IkReal x2725=(cj6*r10);
IkReal x2726=(cj1*sj5);
IkReal x2727=(cj5*sj1);
IkReal x2728=(cj6*r20);
if( IKabs((((r22*x2727))+((x2725*x2726))+(((-1.0)*r11*x2724*x2726))+((x2723*x2728))+((r12*x2722))+(((-1.0)*r21*x2723*x2724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj6*x2726))+(((-1.0)*x2726*x2728))+(((-1.0)*r22*x2722))+((x2723*x2725))+(((-1.0)*r11*x2723*x2724))+((r12*x2727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2727))+((x2725*x2726))+(((-1.0)*r11*x2724*x2726))+((x2723*x2728))+((r12*x2722))+(((-1.0)*r21*x2723*x2724))))+IKsqr((((r21*sj6*x2726))+(((-1.0)*x2726*x2728))+(((-1.0)*r22*x2722))+((x2723*x2725))+(((-1.0)*r11*x2723*x2724))+((r12*x2727))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r22*x2727))+((x2725*x2726))+(((-1.0)*r11*x2724*x2726))+((x2723*x2728))+((r12*x2722))+(((-1.0)*r21*x2723*x2724))), (((r21*sj6*x2726))+(((-1.0)*x2726*x2728))+(((-1.0)*r22*x2722))+((x2723*x2725))+(((-1.0)*r11*x2723*x2724))+((r12*x2727))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2729=IKsin(j3);
IkReal x2730=IKcos(j3);
IkReal x2731=(r21*sj6);
IkReal x2732=((1.0)*cj6);
IkReal x2733=(cj4*cj5);
IkReal x2734=((1.0)*cj5);
IkReal x2735=(r11*sj6);
IkReal x2736=(sj4*sj6);
IkReal x2737=(cj4*sj5);
IkReal x2738=((0.076)*cj6);
IkReal x2739=(cj6*sj4);
IkReal x2740=(sj1*x2730);
IkReal x2741=(cj1*x2729);
IkReal x2742=(cj1*x2730);
IkReal x2743=(sj1*x2729);
IkReal x2744=(x2741+x2740);
evalcond[0]=(x2744+(((-1.0)*r12*x2734))+(((-1.0)*r10*sj5*x2732))+((sj5*x2735)));
evalcond[1]=(x2743+(((-1.0)*r20*sj5*x2732))+(((-1.0)*r22*x2734))+(((-1.0)*x2742))+((sj5*x2731)));
evalcond[2]=(x2744+((r21*x2739))+((x2731*x2733))+((r22*x2737))+(((-1.0)*r20*x2732*x2733))+((r20*x2736)));
evalcond[3]=(x2742+(((-1.0)*r10*x2732*x2733))+((r12*x2737))+((r10*x2736))+(((-1.0)*x2743))+((r11*x2739))+((x2733*x2735)));
evalcond[4]=((((0.3425)*x2743))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x2740))+(((0.0775)*x2741))+((r20*x2738))+(((0.0525)*sj1))+(((-0.3425)*x2742))+(((-0.076)*x2731)));
evalcond[5]=((((0.0525)*cj1))+(((0.3425)*x2740))+(((0.3425)*x2741))+(((-1.0)*py))+(((0.0775)*x2742))+(((-0.0775)*x2743))+((r10*x2738))+(((-0.293)*sj1))+(((-0.076)*x2735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2745=(r21*sj6);
IkReal x2746=(cj6*r20);
IkReal x2747=(cj5*r22);
IkReal x2748=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*pz))+(((-0.980645161290323)*x2746))+(((-4.41935483870968)*x2747))+((x2745*x2748))+(((-1.0)*x2746*x2748))+(((0.980645161290323)*x2745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x2745))+(((-1.0)*sj5*x2746))+(((-1.0)*x2747)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*pz))+(((-0.980645161290323)*x2746))+(((-4.41935483870968)*x2747))+((x2745*x2748))+(((-1.0)*x2746*x2748))+(((0.980645161290323)*x2745))))+IKsqr((((sj5*x2745))+(((-1.0)*sj5*x2746))+(((-1.0)*x2747))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*pz))+(((-0.980645161290323)*x2746))+(((-4.41935483870968)*x2747))+((x2745*x2748))+(((-1.0)*x2746*x2748))+(((0.980645161290323)*x2745))), (((sj5*x2745))+(((-1.0)*sj5*x2746))+(((-1.0)*x2747))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2749=IKsin(j3);
IkReal x2750=IKcos(j3);
IkReal x2751=(sj4*sj6);
IkReal x2752=((1.0)*cj6);
IkReal x2753=(cj4*cj5);
IkReal x2754=((0.076)*sj6);
IkReal x2755=(r11*sj6);
IkReal x2756=((1.0)*cj5);
IkReal x2757=(cj6*sj4);
IkReal x2758=(r21*sj6);
IkReal x2759=(cj4*sj5);
IkReal x2760=(r01*sj6);
IkReal x2761=((0.076)*cj6);
IkReal x2762=((0.0775)*x2750);
IkReal x2763=(cj2*x2749);
IkReal x2764=(sj2*x2749);
IkReal x2765=((1.0)*x2750);
evalcond[0]=((((-1.0)*r22*x2756))+((sj5*x2758))+(((-1.0)*x2765))+(((-1.0)*r20*sj5*x2752)));
evalcond[1]=((((-1.0)*r00*sj5*x2752))+x2764+((sj5*x2760))+(((-1.0)*r02*x2756)));
evalcond[2]=((((-1.0)*x2763))+((sj5*x2755))+(((-1.0)*r12*x2756))+(((-1.0)*r10*sj5*x2752)));
evalcond[3]=((0.293)+((r20*x2761))+(((-1.0)*pz))+(((0.0775)*x2749))+(((-0.3425)*x2750))+(((-1.0)*r21*x2754)));
evalcond[4]=(x2749+((x2753*x2758))+((r22*x2759))+(((-1.0)*r20*x2752*x2753))+((r21*x2757))+((r20*x2751)));
evalcond[5]=((((-1.0)*r01*x2754))+((r00*x2761))+(((0.3425)*x2764))+(((-1.0)*px))+((sj2*x2762))+(((0.0525)*sj2)));
evalcond[6]=((((-0.0525)*cj2))+(((-1.0)*cj2*x2762))+(((-1.0)*py))+((r10*x2761))+(((-1.0)*r11*x2754))+(((-0.3425)*x2763)));
evalcond[7]=(((sj2*x2750))+((r00*x2751))+((r01*x2757))+(((-1.0)*r00*x2752*x2753))+((x2753*x2760))+((r02*x2759)));
evalcond[8]=(((r11*x2757))+((x2753*x2755))+(((-1.0)*r10*x2752*x2753))+((r12*x2759))+((r10*x2751))+(((-1.0)*cj2*x2765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2766=(cj6*r20);
IkReal x2767=(cj5*r22);
IkReal x2768=(r21*sj6);
IkReal x2769=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-1.0)*x2768*x2769))+(((-12.9032258064516)*pz))+(((4.41935483870968)*x2767))+(((0.980645161290323)*x2766))+(((-0.980645161290323)*x2768))+((x2766*x2769)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2767+(((-1.0)*sj5*x2768))+((sj5*x2766)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-1.0)*x2768*x2769))+(((-12.9032258064516)*pz))+(((4.41935483870968)*x2767))+(((0.980645161290323)*x2766))+(((-0.980645161290323)*x2768))+((x2766*x2769))))+IKsqr((x2767+(((-1.0)*sj5*x2768))+((sj5*x2766))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-1.0)*x2768*x2769))+(((-12.9032258064516)*pz))+(((4.41935483870968)*x2767))+(((0.980645161290323)*x2766))+(((-0.980645161290323)*x2768))+((x2766*x2769))), (x2767+(((-1.0)*sj5*x2768))+((sj5*x2766))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2770=IKsin(j3);
IkReal x2771=IKcos(j3);
IkReal x2772=(sj4*sj6);
IkReal x2773=(cj4*sj5);
IkReal x2774=((1.0)*cj6);
IkReal x2775=(cj4*cj5);
IkReal x2776=((0.076)*sj6);
IkReal x2777=(r11*sj6);
IkReal x2778=((1.0)*cj5);
IkReal x2779=(r21*sj6);
IkReal x2780=(r01*sj6);
IkReal x2781=(cj6*sj4);
IkReal x2782=((0.076)*cj6);
IkReal x2783=((0.0775)*x2771);
IkReal x2784=(cj2*x2770);
IkReal x2785=(sj2*x2770);
evalcond[0]=(x2771+(((-1.0)*r20*sj5*x2774))+((sj5*x2779))+(((-1.0)*r22*x2778)));
evalcond[1]=(x2784+(((-1.0)*r10*sj5*x2774))+(((-1.0)*r12*x2778))+((sj5*x2777)));
evalcond[2]=(x2785+(((-1.0)*r00*sj5*x2774))+((sj5*x2780))+(((-1.0)*r02*x2778)));
evalcond[3]=((-0.293)+(((-0.0775)*x2770))+(((0.3425)*x2771))+(((-1.0)*pz))+(((-1.0)*r21*x2776))+((r20*x2782)));
evalcond[4]=((((-1.0)*r01*x2776))+((sj2*x2783))+(((-1.0)*px))+(((0.3425)*x2785))+((r00*x2782))+(((0.0525)*sj2)));
evalcond[5]=((((0.0525)*cj2))+((cj2*x2783))+(((-1.0)*r11*x2776))+(((-1.0)*py))+(((0.3425)*x2784))+((r10*x2782)));
evalcond[6]=(((r21*x2781))+(((-1.0)*x2770))+((r22*x2773))+(((-1.0)*r20*x2774*x2775))+((x2775*x2779))+((r20*x2772)));
evalcond[7]=((((-1.0)*r10*x2774*x2775))+((x2775*x2777))+((r10*x2772))+((r11*x2781))+((cj2*x2771))+((r12*x2773)));
evalcond[8]=((((-1.0)*r00*x2774*x2775))+((r00*x2772))+((r01*x2781))+((x2775*x2780))+((r02*x2773))+((sj2*x2771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2791=IKPowWithIntegerCheck(sj2,-1);
if(!x2791.valid){
continue;
}
IkReal x2786=x2791.value;
IkReal x2787=(cj5*r02);
IkReal x2788=(cj6*sj5);
IkReal x2789=(cj1*cj2);
IkReal x2790=((1.0)*sj5*sj6);
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(sj1,-1);
if(!x2792.valid){
continue;
}
if( IKabs((x2786*((x2787+((r00*x2788))+(((-1.0)*r01*x2790)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2786*(x2792.value)*((((cj5*r12*sj2))+(((-1.0)*r01*x2789*x2790))+(((-1.0)*r11*sj2*x2790))+((r00*x2788*x2789))+((x2787*x2789))+((r10*sj2*x2788)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2786*((x2787+((r00*x2788))+(((-1.0)*r01*x2790))))))+IKsqr((x2786*(x2792.value)*((((cj5*r12*sj2))+(((-1.0)*r01*x2789*x2790))+(((-1.0)*r11*sj2*x2790))+((r00*x2788*x2789))+((x2787*x2789))+((r10*sj2*x2788))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x2786*((x2787+((r00*x2788))+(((-1.0)*r01*x2790))))), (x2786*(x2792.value)*((((cj5*r12*sj2))+(((-1.0)*r01*x2789*x2790))+(((-1.0)*r11*sj2*x2790))+((r00*x2788*x2789))+((x2787*x2789))+((r10*sj2*x2788))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2793=IKsin(j3);
IkReal x2794=IKcos(j3);
IkReal x2795=(sj4*sj6);
IkReal x2796=((0.076)*sj6);
IkReal x2797=((0.3425)*cj2);
IkReal x2798=(cj4*cj5);
IkReal x2799=((1.0)*cj2);
IkReal x2800=(r11*sj6);
IkReal x2801=((1.0)*cj5);
IkReal x2802=(cj2*sj1);
IkReal x2803=(r21*sj6);
IkReal x2804=(cj4*sj5);
IkReal x2805=(r01*sj6);
IkReal x2806=(cj6*sj4);
IkReal x2807=((0.076)*cj6);
IkReal x2808=(cj1*x2793);
IkReal x2809=(cj1*x2794);
IkReal x2810=((1.0)*cj6*r10);
IkReal x2811=(sj2*x2794);
IkReal x2812=((1.0)*cj6*r20);
IkReal x2813=(sj1*x2794);
IkReal x2814=((1.0)*cj6*r00);
IkReal x2815=(sj1*x2793);
IkReal x2816=(sj2*x2793);
evalcond[0]=((((-1.0)*sj5*x2814))+((sj5*x2805))+(((-1.0)*r02*x2801))+x2816);
evalcond[1]=((((-1.0)*sj5*x2810))+(((-1.0)*r12*x2801))+(((-1.0)*x2799*x2808))+((sj5*x2800))+x2813);
evalcond[2]=((((-1.0)*x2809))+(((-1.0)*x2799*x2815))+(((-1.0)*sj5*x2812))+(((-1.0)*r22*x2801))+((sj5*x2803)));
evalcond[3]=((((0.0775)*x2811))+(((-1.0)*px))+(((0.0525)*sj2))+(((-1.0)*r01*x2796))+((r00*x2807))+(((0.3425)*x2816)));
evalcond[4]=(((r02*x2804))+(((-1.0)*x2798*x2814))+((x2798*x2805))+((r00*x2795))+x2811+((r01*x2806)));
evalcond[5]=((((-1.0)*x2799*x2813))+(((-1.0)*x2798*x2812))+((x2798*x2803))+((r21*x2806))+x2808+((r22*x2804))+((r20*x2795)));
evalcond[6]=(((r12*x2804))+(((-1.0)*x2815))+(((-1.0)*x2798*x2810))+((x2798*x2800))+(((-1.0)*x2799*x2809))+((r10*x2795))+((r11*x2806)));
evalcond[7]=((((-1.0)*x2797*x2815))+(((-0.0525)*x2802))+(((-1.0)*r21*x2796))+((r20*x2807))+(((-0.3425)*x2809))+(((-0.0775)*x2794*x2802))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x2808)));
evalcond[8]=(((r10*x2807))+(((-0.0775)*x2815))+(((-0.0525)*cj1*cj2))+(((-1.0)*py))+(((-1.0)*x2797*x2808))+(((-0.0775)*cj2*x2809))+(((0.3425)*x2813))+(((-0.293)*sj1))+(((-1.0)*r11*x2796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2822=IKPowWithIntegerCheck(sj2,-1);
if(!x2822.valid){
continue;
}
IkReal x2817=x2822.value;
IkReal x2818=(r01*sj6);
IkReal x2819=((137.0)*sj5);
IkReal x2820=(cj6*r00);
IkReal x2821=(cj5*r02);
if( IKabs((x2817*((((sj5*x2820))+(((-1.0)*sj5*x2818))+x2821)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x2817*(((((-137.0)*x2821))+(((400.0)*px))+((x2818*x2819))+(((-21.0)*sj2))+(((-1.0)*x2819*x2820))+(((-30.4)*x2820))+(((30.4)*x2818)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2817*((((sj5*x2820))+(((-1.0)*sj5*x2818))+x2821))))+IKsqr(((0.032258064516129)*x2817*(((((-137.0)*x2821))+(((400.0)*px))+((x2818*x2819))+(((-21.0)*sj2))+(((-1.0)*x2819*x2820))+(((-30.4)*x2820))+(((30.4)*x2818))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x2817*((((sj5*x2820))+(((-1.0)*sj5*x2818))+x2821))), ((0.032258064516129)*x2817*(((((-137.0)*x2821))+(((400.0)*px))+((x2818*x2819))+(((-21.0)*sj2))+(((-1.0)*x2819*x2820))+(((-30.4)*x2820))+(((30.4)*x2818))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2823=IKsin(j3);
IkReal x2824=IKcos(j3);
IkReal x2825=(sj4*sj6);
IkReal x2826=((0.076)*sj6);
IkReal x2827=((0.3425)*cj2);
IkReal x2828=(cj4*cj5);
IkReal x2829=((1.0)*cj2);
IkReal x2830=(r11*sj6);
IkReal x2831=((1.0)*cj5);
IkReal x2832=(cj2*sj1);
IkReal x2833=(r21*sj6);
IkReal x2834=(cj4*sj5);
IkReal x2835=(r01*sj6);
IkReal x2836=(cj6*sj4);
IkReal x2837=((0.076)*cj6);
IkReal x2838=(cj1*x2823);
IkReal x2839=(cj1*x2824);
IkReal x2840=((1.0)*cj6*r10);
IkReal x2841=(sj2*x2824);
IkReal x2842=((1.0)*cj6*r20);
IkReal x2843=(sj1*x2824);
IkReal x2844=((1.0)*cj6*r00);
IkReal x2845=(sj1*x2823);
IkReal x2846=(sj2*x2823);
evalcond[0]=((((-1.0)*sj5*x2844))+((sj5*x2835))+x2846+(((-1.0)*r02*x2831)));
evalcond[1]=((((-1.0)*sj5*x2840))+(((-1.0)*r12*x2831))+((sj5*x2830))+x2843+(((-1.0)*x2829*x2838)));
evalcond[2]=((((-1.0)*x2839))+(((-1.0)*sj5*x2842))+(((-1.0)*r22*x2831))+((sj5*x2833))+(((-1.0)*x2829*x2845)));
evalcond[3]=((((-1.0)*r01*x2826))+(((-1.0)*px))+(((0.3425)*x2846))+(((0.0775)*x2841))+(((0.0525)*sj2))+((r00*x2837)));
evalcond[4]=(((r02*x2834))+((x2828*x2835))+((r00*x2825))+(((-1.0)*x2828*x2844))+x2841+((r01*x2836)));
evalcond[5]=(((r20*x2825))+((x2828*x2833))+(((-1.0)*x2828*x2842))+((r22*x2834))+(((-1.0)*x2829*x2843))+x2838+((r21*x2836)));
evalcond[6]=(((r12*x2834))+((x2828*x2830))+((r10*x2825))+(((-1.0)*x2845))+(((-1.0)*x2828*x2840))+((r11*x2836))+(((-1.0)*x2829*x2839)));
evalcond[7]=((((-0.0525)*x2832))+(((-1.0)*r21*x2826))+(((-0.3425)*x2839))+((r20*x2837))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0775)*x2824*x2832))+(((-1.0)*x2827*x2845))+(((0.0775)*x2838)));
evalcond[8]=(((r10*x2837))+(((-1.0)*r11*x2826))+(((-0.0525)*cj1*cj2))+(((-1.0)*py))+(((0.3425)*x2843))+(((-1.0)*x2827*x2838))+(((-0.0775)*cj2*x2839))+(((-0.0775)*x2845))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2847=((1.0)*sj5);
IkReal x2848=(r01*sj6);
IkReal x2849=(cj6*r00);
IkReal x2850=((1.0)*sj4);
IkReal x2851=(cj4*cj5);
CheckValue<IkReal> x2852 = IKatan2WithCheck(IkReal((((sj5*x2849))+(((-1.0)*x2847*x2848))+((cj5*r02)))),IkReal((((x2849*x2851))+(((-1.0)*cj6*r01*x2850))+(((-1.0)*cj4*r02*x2847))+(((-1.0)*r00*sj6*x2850))+(((-1.0)*x2848*x2851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2852.valid){
continue;
}
CheckValue<IkReal> x2853=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x2853.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2852.value)+(((1.5707963267949)*(x2853.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2854=IKsin(j3);
IkReal x2855=IKcos(j3);
IkReal x2856=(sj4*sj6);
IkReal x2857=((0.076)*sj6);
IkReal x2858=((0.3425)*cj2);
IkReal x2859=(cj4*cj5);
IkReal x2860=((1.0)*cj2);
IkReal x2861=(r11*sj6);
IkReal x2862=((1.0)*cj5);
IkReal x2863=(cj2*sj1);
IkReal x2864=(r21*sj6);
IkReal x2865=(cj4*sj5);
IkReal x2866=(r01*sj6);
IkReal x2867=(cj6*sj4);
IkReal x2868=((0.076)*cj6);
IkReal x2869=(cj1*x2854);
IkReal x2870=(cj1*x2855);
IkReal x2871=((1.0)*cj6*r10);
IkReal x2872=(sj2*x2855);
IkReal x2873=((1.0)*cj6*r20);
IkReal x2874=(sj1*x2855);
IkReal x2875=((1.0)*cj6*r00);
IkReal x2876=(sj1*x2854);
IkReal x2877=(sj2*x2854);
evalcond[0]=((((-1.0)*r02*x2862))+(((-1.0)*sj5*x2875))+x2877+((sj5*x2866)));
evalcond[1]=((((-1.0)*r12*x2862))+(((-1.0)*sj5*x2871))+(((-1.0)*x2860*x2869))+x2874+((sj5*x2861)));
evalcond[2]=((((-1.0)*x2870))+(((-1.0)*r22*x2862))+(((-1.0)*x2860*x2876))+(((-1.0)*sj5*x2873))+((sj5*x2864)));
evalcond[3]=(((r00*x2868))+(((0.3425)*x2877))+(((0.0775)*x2872))+(((-1.0)*r01*x2857))+(((-1.0)*px))+(((0.0525)*sj2)));
evalcond[4]=((((-1.0)*x2859*x2875))+((r02*x2865))+((x2859*x2866))+((r00*x2856))+x2872+((r01*x2867)));
evalcond[5]=((((-1.0)*x2859*x2873))+((r20*x2856))+((r22*x2865))+((r21*x2867))+(((-1.0)*x2860*x2874))+((x2859*x2864))+x2869);
evalcond[6]=((((-1.0)*x2859*x2871))+(((-1.0)*x2876))+(((-1.0)*x2860*x2870))+((r12*x2865))+((x2859*x2861))+((r11*x2867))+((r10*x2856)));
evalcond[7]=((((0.0775)*x2869))+(((-0.0525)*x2863))+(((-1.0)*r21*x2857))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*x2858*x2876))+(((-0.3425)*x2870))+(((-0.0775)*x2855*x2863))+((r20*x2868)));
evalcond[8]=((((0.3425)*x2874))+(((-0.0525)*cj1*cj2))+(((-1.0)*r11*x2857))+((r10*x2868))+(((-1.0)*x2858*x2869))+(((-0.0775)*x2876))+(((-1.0)*py))+(((-0.0775)*cj2*x2870))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj0=0;
cj0=1.0;
j0=0;
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=0;
cj0=1.0;
j0=0;
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2878=(r21*sj6);
IkReal x2879=(cj6*r20);
IkReal x2880=(cj5*r22);
IkReal x2881=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-0.980645161290323)*x2879))+(((12.9032258064516)*pz))+(((0.980645161290323)*x2878))+(((-1.0)*x2879*x2881))+((x2878*x2881))+(((-4.41935483870968)*x2880)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x2878))+(((-1.0)*x2880))+(((-1.0)*sj5*x2879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-0.980645161290323)*x2879))+(((12.9032258064516)*pz))+(((0.980645161290323)*x2878))+(((-1.0)*x2879*x2881))+((x2878*x2881))+(((-4.41935483870968)*x2880))))+IKsqr((((sj5*x2878))+(((-1.0)*x2880))+(((-1.0)*sj5*x2879))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-0.980645161290323)*x2879))+(((12.9032258064516)*pz))+(((0.980645161290323)*x2878))+(((-1.0)*x2879*x2881))+((x2878*x2881))+(((-4.41935483870968)*x2880))), (((sj5*x2878))+(((-1.0)*x2880))+(((-1.0)*sj5*x2879))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2882=IKcos(j3);
IkReal x2883=IKsin(j3);
IkReal x2884=(r21*sj6);
IkReal x2885=(cj6*r20);
IkReal x2886=(cj4*cj5);
evalcond[0]=((((-1.0)*sj5*x2885))+((sj5*x2884))+(((-1.0)*x2882))+(((-1.0)*cj5*r22)));
evalcond[1]=((0.293)+(((0.0775)*x2883))+(((-0.076)*x2884))+(((-1.0)*pz))+(((0.076)*x2885))+(((-0.3425)*x2882)));
evalcond[2]=(((x2884*x2886))+((cj4*r22*sj5))+((cj6*r21*sj4))+(((-1.0)*x2885*x2886))+x2883+((r20*sj4*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x2887=(cj6*sj5);
IkReal x2888=((1.0)*sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((r00*x2887))+(((-1.0)*r01*x2888))+((cj5*r02)))))+(IKabs(((((-1.0)*r11*x2888))+((cj5*r12))+((r10*x2887))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=1.0;
j0=0;
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=((1.0)+(((6.52380952380952)*sj3))+(((1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=1.0;
j0=0;
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2889=((0.584615384615385)*sj6);
IkReal x2890=((0.584615384615385)*cj6);
if( IKabs((((r11*x2889))+(((7.69230769230769)*py))+(((-1.0)*r10*x2890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x2889))+(((-1.0)*r00*x2890))+(((7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2889))+(((7.69230769230769)*py))+(((-1.0)*r10*x2890))))+IKsqr((((r01*x2889))+(((-1.0)*r00*x2890))+(((7.69230769230769)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x2889))+(((7.69230769230769)*py))+(((-1.0)*r10*x2890))), (((r01*x2889))+(((-1.0)*r00*x2890))+(((7.69230769230769)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2891=IKsin(j2);
IkReal x2892=IKcos(j2);
IkReal x2893=((0.076)*sj6);
IkReal x2894=(r02*sj5);
IkReal x2895=(cj4*cj5);
IkReal x2896=(r11*sj6);
IkReal x2897=((1.0)*cj6);
IkReal x2898=(sj4*sj6);
IkReal x2899=(r12*sj5);
IkReal x2900=(cj6*sj4);
IkReal x2901=(cj5*sj4);
IkReal x2902=((0.076)*cj6);
IkReal x2903=((1.0)*cj4*sj6);
evalcond[0]=(((r00*x2902))+(((-1.0)*r01*x2893))+(((-1.0)*px))+(((0.13)*x2892)));
evalcond[1]=(((r10*x2902))+(((-1.0)*py))+(((0.13)*x2891))+(((-1.0)*r11*x2893)));
evalcond[2]=((((-1.0)*r10*x2895*x2897))+((x2895*x2896))+((r10*x2898))+((cj4*x2899))+x2891+((r11*x2900)));
evalcond[3]=((((-1.0)*r00*x2895*x2897))+((r01*x2900))+((r01*sj6*x2895))+((r00*x2898))+((cj4*x2894))+x2892);
evalcond[4]=((((-1.0)*r00*x2903))+(((-1.0)*cj4*r01*x2897))+((sj4*x2894))+(((-1.0)*r00*x2897*x2901))+x2891+((cj5*r01*x2898)));
evalcond[5]=((((-1.0)*r10*x2897*x2901))+(((-1.0)*r10*x2903))+(((-1.0)*cj4*r11*x2897))+(((-1.0)*x2892))+((sj4*x2899))+((x2896*x2901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2904=((3.04)*cj6);
IkReal x2905=((3.04)*sj6);
if( IKabs((((r10*x2904))+(((-1.0)*r11*x2905))+(((-40.0)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x2904))+(((-1.0)*r01*x2905))+(((-40.0)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x2904))+(((-1.0)*r11*x2905))+(((-40.0)*py))))+IKsqr((((r00*x2904))+(((-1.0)*r01*x2905))+(((-40.0)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x2904))+(((-1.0)*r11*x2905))+(((-40.0)*py))), (((r00*x2904))+(((-1.0)*r01*x2905))+(((-40.0)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2906=IKsin(j2);
IkReal x2907=IKcos(j2);
IkReal x2908=((0.076)*sj6);
IkReal x2909=(r02*sj5);
IkReal x2910=(cj4*cj5);
IkReal x2911=(r11*sj6);
IkReal x2912=(cj5*sj4);
IkReal x2913=(sj4*sj6);
IkReal x2914=(r01*sj6);
IkReal x2915=((1.0)*cj6);
IkReal x2916=(r12*sj5);
IkReal x2917=(cj6*sj4);
IkReal x2918=((0.076)*cj6);
IkReal x2919=((1.0)*x2907);
IkReal x2920=(r10*x2915);
IkReal x2921=((1.0)*cj4*sj6);
evalcond[0]=(((r00*x2918))+(((-1.0)*px))+(((-1.0)*r01*x2908))+(((-0.025)*x2907)));
evalcond[1]=((((-1.0)*py))+(((-0.025)*x2906))+(((-1.0)*r11*x2908))+((r10*x2918)));
evalcond[2]=((((-1.0)*cj4*r01*x2915))+(((-1.0)*r00*x2912*x2915))+(((-1.0)*r00*x2921))+((x2912*x2914))+x2906+((sj4*x2909)));
evalcond[3]=(((r11*x2917))+((cj4*x2916))+(((-1.0)*x2906))+((x2910*x2911))+(((-1.0)*x2910*x2920))+((r10*x2913)));
evalcond[4]=(((r01*x2917))+((r00*x2913))+(((-1.0)*r00*x2910*x2915))+((cj4*x2909))+((x2910*x2914))+(((-1.0)*x2919)));
evalcond[5]=((((-1.0)*r10*x2921))+((sj4*x2916))+((x2911*x2912))+(((-1.0)*cj4*r11*x2915))+(((-1.0)*x2912*x2920))+(((-1.0)*x2919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.53164556962025)*px))+(((-0.192405063291139)*cj6*r00))+(((0.192405063291139)*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))+IKsqr(((((2.53164556962025)*px))+(((-0.192405063291139)*cj6*r00))+(((0.192405063291139)*r01*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))), ((((2.53164556962025)*px))+(((-0.192405063291139)*cj6*r00))+(((0.192405063291139)*r01*sj6))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2922=IKcos(j2);
IkReal x2923=IKsin(j2);
IkReal x2924=(r01*sj6);
IkReal x2925=(sj4*sj5);
IkReal x2926=(r11*sj6);
IkReal x2927=(cj5*sj4);
IkReal x2928=((1.0)*cj6);
IkReal x2929=((1.0)*cj5);
IkReal x2930=((0.076)*cj6);
IkReal x2931=(sj5*x2928);
IkReal x2932=((1.0)*cj4*sj6);
evalcond[0]=(((sj5*x2926))+(((-1.0)*r12*x2929))+x2923+(((-1.0)*r10*x2931)));
evalcond[1]=((((-1.0)*r02*x2929))+((sj5*x2924))+(((-1.0)*r00*x2931))+x2922);
evalcond[2]=(((r00*x2930))+(((-1.0)*px))+(((0.395)*x2922))+(((-0.076)*x2924)));
evalcond[3]=(((r10*x2930))+(((-1.0)*py))+(((0.395)*x2923))+(((-0.076)*x2926)));
evalcond[4]=(((x2924*x2927))+(((-1.0)*cj4*r01*x2928))+(((-1.0)*r00*x2927*x2928))+(((-1.0)*r00*x2932))+x2923+((r02*x2925)));
evalcond[5]=(((x2926*x2927))+(((-1.0)*cj4*r11*x2928))+(((-1.0)*r10*x2927*x2928))+((r12*x2925))+(((-1.0)*x2922))+(((-1.0)*r10*x2932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2933=((0.262068965517241)*sj6);
IkReal x2934=((0.262068965517241)*cj6);
if( IKabs((((r10*x2934))+(((-3.44827586206897)*py))+(((-1.0)*r11*x2933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.44827586206897)*px))+((r00*x2934))+(((-1.0)*r01*x2933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x2934))+(((-3.44827586206897)*py))+(((-1.0)*r11*x2933))))+IKsqr(((((-3.44827586206897)*px))+((r00*x2934))+(((-1.0)*r01*x2933))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x2934))+(((-3.44827586206897)*py))+(((-1.0)*r11*x2933))), ((((-3.44827586206897)*px))+((r00*x2934))+(((-1.0)*r01*x2933))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2935=IKsin(j2);
IkReal x2936=IKcos(j2);
IkReal x2937=((0.076)*sj6);
IkReal x2938=(sj4*sj5);
IkReal x2939=(sj5*sj6);
IkReal x2940=(cj5*sj4);
IkReal x2941=((1.0)*cj5);
IkReal x2942=((1.0)*cj6);
IkReal x2943=((0.076)*cj6);
IkReal x2944=((1.0)*x2936);
IkReal x2945=(r10*x2942);
IkReal x2946=((1.0)*cj4*sj6);
evalcond[0]=(((r00*x2943))+(((-1.0)*r01*x2937))+(((-1.0)*px))+(((-0.29)*x2936)));
evalcond[1]=(((r10*x2943))+(((-1.0)*py))+(((-0.29)*x2935))+(((-1.0)*r11*x2937)));
evalcond[2]=((((-1.0)*r12*x2941))+(((-1.0)*sj5*x2945))+(((-1.0)*x2935))+((r11*x2939)));
evalcond[3]=((((-1.0)*r02*x2941))+((r01*x2939))+(((-1.0)*x2944))+(((-1.0)*r00*sj5*x2942)));
evalcond[4]=(((r02*x2938))+(((-1.0)*r00*x2940*x2942))+(((-1.0)*r00*x2946))+((r01*sj6*x2940))+x2935+(((-1.0)*cj4*r01*x2942)));
evalcond[5]=((((-1.0)*x2940*x2945))+((r11*sj6*x2940))+(((-1.0)*cj4*r11*x2942))+(((-1.0)*x2944))+((r12*x2938))+(((-1.0)*r10*x2946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.372597569911564)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2947=((57213427.3137081)*sj6);
IkReal x2948=((57213427.3137081)*cj6);
if( IKabs((((r11*x2947))+(((-1.0)*r10*x2948))+(((752808254.127739)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2948))+((r01*x2947))+(((752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2947))+(((-1.0)*r10*x2948))+(((752808254.127739)*py))))+IKsqr(((((-1.0)*r00*x2948))+((r01*x2947))+(((752808254.127739)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x2947))+(((-1.0)*r10*x2948))+(((752808254.127739)*py))), ((((-1.0)*r00*x2948))+((r01*x2947))+(((752808254.127739)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2949=IKsin(j2);
IkReal x2950=IKcos(j2);
IkReal x2951=((0.076)*sj6);
IkReal x2952=(r02*sj5);
IkReal x2953=(r11*sj6);
IkReal x2954=(cj4*cj5);
IkReal x2955=(cj5*sj4);
IkReal x2956=(sj4*sj6);
IkReal x2957=(r01*sj6);
IkReal x2958=(r12*sj5);
IkReal x2959=((1.0)*cj4);
IkReal x2960=(cj6*r11);
IkReal x2961=(cj6*r01);
IkReal x2962=((1.0)*cj5);
IkReal x2963=((0.076)*cj6);
IkReal x2964=((1.0)*cj6*r10);
IkReal x2965=((1.0)*cj6*r00);
evalcond[0]=((((1.32835950524835e-9)*x2950))+(((-1.0)*px))+(((-1.0)*r01*x2951))+((r00*x2963)));
evalcond[1]=((((1.32835950524835e-9)*x2949))+((r10*x2963))+(((-1.0)*py))+(((-1.0)*r11*x2951)));
evalcond[2]=(((sj5*x2953))+(((-1.0)*sj5*x2964))+(((-1.0)*r12*x2962))+(((-0.36403599)*x2949)));
evalcond[3]=(((sj5*x2957))+(((-1.0)*r02*x2962))+(((-0.36403599)*x2950))+(((-1.0)*sj5*x2965)));
evalcond[4]=((((-1.0)*x2955*x2965))+(((-1.0)*r00*sj6*x2959))+(((-1.0)*x2959*x2961))+((sj4*x2952))+x2949+((x2955*x2957)));
evalcond[5]=((((-1.0)*x2954*x2964))+((r10*x2956))+((cj4*x2958))+((x2953*x2954))+(((0.931384876172381)*x2949))+((sj4*x2960)));
evalcond[6]=(((x2954*x2957))+(((-1.0)*x2954*x2965))+(((0.931384876172381)*x2950))+((r00*x2956))+((cj4*x2952))+((sj4*x2961)));
evalcond[7]=((((-1.0)*x2950))+(((-1.0)*x2955*x2964))+(((-1.0)*x2959*x2960))+((x2953*x2955))+(((-1.0)*r10*sj6*x2959))+((sj4*x2958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2966=((64920240.9929408)*cj6);
IkReal x2967=((64920240.9929408)*sj6);
if( IKabs(((((-1.0)*r11*x2967))+(((-854213697.275536)*py))+((r10*x2966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-854213697.275536)*px))+(((-1.0)*r01*x2967))+((r00*x2966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x2967))+(((-854213697.275536)*py))+((r10*x2966))))+IKsqr(((((-854213697.275536)*px))+(((-1.0)*r01*x2967))+((r00*x2966))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x2967))+(((-854213697.275536)*py))+((r10*x2966))), ((((-854213697.275536)*px))+(((-1.0)*r01*x2967))+((r00*x2966))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2968=IKsin(j2);
IkReal x2969=IKcos(j2);
IkReal x2970=((0.076)*sj6);
IkReal x2971=(r02*sj5);
IkReal x2972=(r11*sj6);
IkReal x2973=(cj4*cj5);
IkReal x2974=(cj5*sj4);
IkReal x2975=(sj4*sj6);
IkReal x2976=(r01*sj6);
IkReal x2977=(r12*sj5);
IkReal x2978=((1.0)*cj4);
IkReal x2979=(cj6*r11);
IkReal x2980=(cj6*r01);
IkReal x2981=((1.0)*cj5);
IkReal x2982=((0.076)*cj6);
IkReal x2983=((1.0)*cj6*r10);
IkReal x2984=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r01*x2970))+(((-1.0)*px))+((r00*x2982))+(((-1.17066725011486e-9)*x2969)));
evalcond[1]=((((-1.0)*r11*x2970))+(((-1.0)*py))+(((-1.17066725011486e-9)*x2968))+((r10*x2982)));
evalcond[2]=((((-1.0)*r12*x2981))+((sj5*x2972))+(((0.07239889)*x2968))+(((-1.0)*sj5*x2983)));
evalcond[3]=(((sj5*x2976))+(((0.07239889)*x2969))+(((-1.0)*r02*x2981))+(((-1.0)*sj5*x2984)));
evalcond[4]=((((-1.0)*x2978*x2980))+((sj4*x2971))+(((-1.0)*x2974*x2984))+((x2974*x2976))+(((-1.0)*r00*sj6*x2978))+x2968);
evalcond[5]=((((-0.997375754782803)*x2968))+((sj4*x2979))+((r10*x2975))+((cj4*x2977))+(((-1.0)*x2973*x2983))+((x2972*x2973)));
evalcond[6]=((((-0.997375754782803)*x2969))+((cj4*x2971))+((r00*x2975))+(((-1.0)*x2973*x2984))+((sj4*x2980))+((x2973*x2976)));
evalcond[7]=((((-1.0)*r10*sj6*x2978))+((sj4*x2977))+(((-1.0)*x2974*x2983))+(((-1.0)*x2969))+(((-1.0)*x2978*x2979))+((x2972*x2974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2985=((1.0)*sj6);
IkReal x2986=(cj4*cj5);
CheckValue<IkReal> x2987=IKPowWithIntegerCheck(sj3,-1);
if(!x2987.valid){
continue;
}
CheckValue<IkReal> x2988=IKPowWithIntegerCheck(cj3,-1);
if(!x2988.valid){
continue;
}
if( IKabs(((x2987.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*x2985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2988.value)*(((((-1.0)*cj4*r02*sj5))+((cj6*r00*x2986))+(((-1.0)*r00*sj4*x2985))+(((-1.0)*cj6*r01*sj4))+(((-1.0)*r01*x2985*x2986)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2987.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*x2985))))))+IKsqr(((x2988.value)*(((((-1.0)*cj4*r02*sj5))+((cj6*r00*x2986))+(((-1.0)*r00*sj4*x2985))+(((-1.0)*cj6*r01*sj4))+(((-1.0)*r01*x2985*x2986))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2987.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*x2985))))), ((x2988.value)*(((((-1.0)*cj4*r02*sj5))+((cj6*r00*x2986))+(((-1.0)*r00*sj4*x2985))+(((-1.0)*cj6*r01*sj4))+(((-1.0)*r01*x2985*x2986))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2989=IKsin(j2);
IkReal x2990=IKcos(j2);
IkReal x2991=((0.076)*sj6);
IkReal x2992=((0.3425)*sj3);
IkReal x2993=((0.0775)*cj3);
IkReal x2994=(r02*sj5);
IkReal x2995=(sj5*sj6);
IkReal x2996=(cj5*sj4);
IkReal x2997=(cj4*cj5);
IkReal x2998=(sj4*sj6);
IkReal x2999=(r01*sj6);
IkReal x3000=(r12*sj5);
IkReal x3001=((1.0)*cj4);
IkReal x3002=(cj6*r11);
IkReal x3003=(cj6*r01);
IkReal x3004=(r11*sj6);
IkReal x3005=((1.0)*cj5);
IkReal x3006=((0.076)*cj6);
IkReal x3007=((1.0)*cj6*r10);
IkReal x3008=((1.0)*cj6*r00);
evalcond[0]=(((sj3*x2989))+(((-1.0)*r12*x3005))+(((-1.0)*sj5*x3007))+((r11*x2995)));
evalcond[1]=((((-1.0)*r02*x3005))+((r01*x2995))+(((-1.0)*sj5*x3008))+((sj3*x2990)));
evalcond[2]=(((x2996*x2999))+(((-1.0)*x2996*x3008))+(((-1.0)*r00*sj6*x3001))+((sj4*x2994))+x2989+(((-1.0)*x3001*x3003)));
evalcond[3]=((((-1.0)*x2997*x3007))+((cj4*x3000))+((cj3*x2989))+((x2997*x3004))+((r10*x2998))+((sj4*x3002)));
evalcond[4]=((((-1.0)*x2997*x3008))+((r00*x2998))+((cj3*x2990))+((x2997*x2999))+((cj4*x2994))+((sj4*x3003)));
evalcond[5]=(((x2990*x2992))+((x2990*x2993))+((r00*x3006))+(((0.0525)*x2990))+(((-1.0)*px))+(((-1.0)*r01*x2991)));
evalcond[6]=((((-1.0)*r11*x2991))+((r10*x3006))+(((-1.0)*py))+((x2989*x2992))+((x2989*x2993))+(((0.0525)*x2989)));
evalcond[7]=(((x2996*x3004))+(((-1.0)*x2996*x3007))+(((-1.0)*x2990))+((sj4*x3000))+(((-1.0)*r10*sj6*x3001))+(((-1.0)*x3001*x3002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3009=IKPowWithIntegerCheck(sj3,-1);
if(!x3009.valid){
continue;
}
CheckValue<IkReal> x3010=IKPowWithIntegerCheck(((0.0525)+(((0.3425)*sj3))+(((0.0775)*cj3))),-1);
if(!x3010.valid){
continue;
}
if( IKabs(((x3009.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3010.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3009.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))))+IKsqr(((x3010.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x3009.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))), ((x3010.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3011=IKsin(j2);
IkReal x3012=IKcos(j2);
IkReal x3013=((0.076)*sj6);
IkReal x3014=((0.3425)*sj3);
IkReal x3015=((0.0775)*cj3);
IkReal x3016=(r02*sj5);
IkReal x3017=(sj5*sj6);
IkReal x3018=(cj5*sj4);
IkReal x3019=(cj4*cj5);
IkReal x3020=(sj4*sj6);
IkReal x3021=(r01*sj6);
IkReal x3022=(r12*sj5);
IkReal x3023=((1.0)*cj4);
IkReal x3024=(cj6*r11);
IkReal x3025=(cj6*r01);
IkReal x3026=(r11*sj6);
IkReal x3027=((1.0)*cj5);
IkReal x3028=((0.076)*cj6);
IkReal x3029=((1.0)*cj6*r10);
IkReal x3030=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r12*x3027))+(((-1.0)*sj5*x3029))+((sj3*x3011))+((r11*x3017)));
evalcond[1]=((((-1.0)*sj5*x3030))+((r01*x3017))+((sj3*x3012))+(((-1.0)*r02*x3027)));
evalcond[2]=(x3011+(((-1.0)*x3023*x3025))+(((-1.0)*r00*sj6*x3023))+((x3018*x3021))+((sj4*x3016))+(((-1.0)*x3018*x3030)));
evalcond[3]=(((r10*x3020))+((x3019*x3026))+(((-1.0)*x3019*x3029))+((cj3*x3011))+((cj4*x3022))+((sj4*x3024)));
evalcond[4]=((((-1.0)*x3019*x3030))+((x3019*x3021))+((cj4*x3016))+((cj3*x3012))+((sj4*x3025))+((r00*x3020)));
evalcond[5]=(((x3012*x3014))+((x3012*x3015))+(((-1.0)*r01*x3013))+(((-1.0)*px))+(((0.0525)*x3012))+((r00*x3028)));
evalcond[6]=(((r10*x3028))+((x3011*x3015))+((x3011*x3014))+(((-1.0)*py))+(((0.0525)*x3011))+(((-1.0)*r11*x3013)));
evalcond[7]=((((-1.0)*x3018*x3029))+(((-1.0)*r10*sj6*x3023))+((sj4*x3022))+(((-1.0)*x3023*x3024))+((x3018*x3026))+(((-1.0)*x3012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3031=(cj6*sj5);
IkReal x3032=((1.0)*sj5*sj6);
CheckValue<IkReal> x3033 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x3032))+((r10*x3031)))),IkReal(((((-1.0)*r01*x3032))+((r00*x3031))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3033.valid){
continue;
}
CheckValue<IkReal> x3034=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3034.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3033.value)+(((1.5707963267949)*(x3034.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3035=IKsin(j2);
IkReal x3036=IKcos(j2);
IkReal x3037=((0.076)*sj6);
IkReal x3038=((0.3425)*sj3);
IkReal x3039=((0.0775)*cj3);
IkReal x3040=(r02*sj5);
IkReal x3041=(sj5*sj6);
IkReal x3042=(cj5*sj4);
IkReal x3043=(cj4*cj5);
IkReal x3044=(sj4*sj6);
IkReal x3045=(r01*sj6);
IkReal x3046=(r12*sj5);
IkReal x3047=((1.0)*cj4);
IkReal x3048=(cj6*r11);
IkReal x3049=(cj6*r01);
IkReal x3050=(r11*sj6);
IkReal x3051=((1.0)*cj5);
IkReal x3052=((0.076)*cj6);
IkReal x3053=((1.0)*cj6*r10);
IkReal x3054=((1.0)*cj6*r00);
evalcond[0]=(((sj3*x3035))+(((-1.0)*r12*x3051))+((r11*x3041))+(((-1.0)*sj5*x3053)));
evalcond[1]=((((-1.0)*r02*x3051))+((sj3*x3036))+((r01*x3041))+(((-1.0)*sj5*x3054)));
evalcond[2]=(((x3042*x3045))+x3035+(((-1.0)*x3042*x3054))+(((-1.0)*x3047*x3049))+(((-1.0)*r00*sj6*x3047))+((sj4*x3040)));
evalcond[3]=(((cj3*x3035))+((r10*x3044))+(((-1.0)*x3043*x3053))+((cj4*x3046))+((x3043*x3050))+((sj4*x3048)));
evalcond[4]=(((x3043*x3045))+((cj3*x3036))+(((-1.0)*x3043*x3054))+((cj4*x3040))+((sj4*x3049))+((r00*x3044)));
evalcond[5]=((((-1.0)*r01*x3037))+((x3036*x3039))+((x3036*x3038))+((r00*x3052))+(((0.0525)*x3036))+(((-1.0)*px)));
evalcond[6]=(((x3035*x3039))+((x3035*x3038))+(((0.0525)*x3035))+(((-1.0)*py))+((r10*x3052))+(((-1.0)*r11*x3037)));
evalcond[7]=((((-1.0)*x3036))+(((-1.0)*x3042*x3053))+(((-1.0)*r10*sj6*x3047))+(((-1.0)*x3047*x3048))+((x3042*x3050))+((sj4*x3046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3055=(cj6*r20);
IkReal x3056=(cj4*cj5);
IkReal x3057=(r21*sj6);
if( IKabs((((x3056*x3057))+((cj4*r22*sj5))+((cj6*r21*sj4))+((r20*sj4*sj6))+(((-1.0)*x3055*x3056)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+(((-1.0)*sj5*x3057))+((sj5*x3055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3056*x3057))+((cj4*r22*sj5))+((cj6*r21*sj4))+((r20*sj4*sj6))+(((-1.0)*x3055*x3056))))+IKsqr((((cj5*r22))+(((-1.0)*sj5*x3057))+((sj5*x3055))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x3056*x3057))+((cj4*r22*sj5))+((cj6*r21*sj4))+((r20*sj4*sj6))+(((-1.0)*x3055*x3056))), (((cj5*r22))+(((-1.0)*sj5*x3057))+((sj5*x3055))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x3058=IKcos(j3);
IkReal x3059=IKsin(j3);
IkReal x3060=(r21*sj6);
IkReal x3061=(cj6*r20);
IkReal x3062=(cj4*cj5);
evalcond[0]=(x3058+(((-1.0)*sj5*x3061))+((sj5*x3060))+(((-1.0)*cj5*r22)));
evalcond[1]=((-0.293)+(((-0.0775)*x3059))+(((0.076)*x3061))+(((-1.0)*pz))+(((0.3425)*x3058))+(((-0.076)*x3060)));
evalcond[2]=((((-1.0)*x3059))+((cj4*r22*sj5))+(((-1.0)*x3061*x3062))+((cj6*r21*sj4))+((r20*sj4*sj6))+((x3060*x3062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3063=((1.0)*sj5);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
j2eval[2]=((IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3063)))))+(IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x3063))+(((-1.0)*cj5*r02))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=1.0;
j0=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
j2eval[1]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=1.0;
j0=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3064=((0.584615384615385)*sj6);
IkReal x3065=((0.584615384615385)*cj6);
if( IKabs(((((-1.0)*r10*x3065))+((r11*x3064))+(((7.69230769230769)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x3065))+(((-1.0)*r01*x3064))+(((-7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3065))+((r11*x3064))+(((7.69230769230769)*py))))+IKsqr((((r00*x3065))+(((-1.0)*r01*x3064))+(((-7.69230769230769)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x3065))+((r11*x3064))+(((7.69230769230769)*py))), (((r00*x3065))+(((-1.0)*r01*x3064))+(((-7.69230769230769)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3066=IKsin(j2);
IkReal x3067=IKcos(j2);
IkReal x3068=((0.076)*sj6);
IkReal x3069=(r02*sj5);
IkReal x3070=(cj4*cj5);
IkReal x3071=(r11*sj6);
IkReal x3072=(cj5*sj4);
IkReal x3073=(sj4*sj6);
IkReal x3074=(r01*sj6);
IkReal x3075=((1.0)*cj6);
IkReal x3076=(r12*sj5);
IkReal x3077=(cj6*sj4);
IkReal x3078=((0.076)*cj6);
IkReal x3079=((1.0)*x3067);
IkReal x3080=(r10*x3075);
IkReal x3081=((1.0)*cj4*sj6);
evalcond[0]=(((r00*x3078))+(((-0.13)*x3067))+(((-1.0)*r01*x3068))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*r11*x3068))+((r10*x3078))+(((-1.0)*py))+(((0.13)*x3066)));
evalcond[2]=(((cj4*x3076))+x3066+(((-1.0)*x3070*x3080))+((r10*x3073))+((r11*x3077))+((x3070*x3071)));
evalcond[3]=(((r01*x3077))+((cj4*x3069))+((r00*x3073))+(((-1.0)*x3079))+((x3070*x3074))+(((-1.0)*r00*x3070*x3075)));
evalcond[4]=((((-1.0)*x3066))+(((-1.0)*r00*x3072*x3075))+((x3072*x3074))+(((-1.0)*r00*x3081))+(((-1.0)*cj4*r01*x3075))+((sj4*x3069)));
evalcond[5]=((((-1.0)*cj4*r11*x3075))+(((-1.0)*x3079))+(((-1.0)*x3072*x3080))+(((-1.0)*r10*x3081))+((x3071*x3072))+((sj4*x3076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3082=((3.04)*cj6);
IkReal x3083=((3.04)*sj6);
if( IKabs((((r10*x3082))+(((-40.0)*py))+(((-1.0)*r11*x3083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((40.0)*px))+(((-1.0)*r00*x3082))+((r01*x3083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3082))+(((-40.0)*py))+(((-1.0)*r11*x3083))))+IKsqr(((((40.0)*px))+(((-1.0)*r00*x3082))+((r01*x3083))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x3082))+(((-40.0)*py))+(((-1.0)*r11*x3083))), ((((40.0)*px))+(((-1.0)*r00*x3082))+((r01*x3083))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3084=IKcos(j2);
IkReal x3085=IKsin(j2);
IkReal x3086=(r11*sj6);
IkReal x3087=(cj4*cj5);
IkReal x3088=(r01*sj6);
IkReal x3089=(r02*sj5);
IkReal x3090=((1.0)*cj6);
IkReal x3091=(sj4*sj6);
IkReal x3092=(cj5*sj4);
IkReal x3093=(r12*sj5);
IkReal x3094=(cj6*sj4);
IkReal x3095=((0.076)*cj6);
IkReal x3096=((1.0)*x3085);
IkReal x3097=((1.0)*cj4*sj6);
evalcond[0]=(((r00*x3095))+(((-0.076)*x3088))+(((0.025)*x3084))+(((-1.0)*px)));
evalcond[1]=((((-0.076)*x3086))+(((-0.025)*x3085))+((r10*x3095))+(((-1.0)*py)));
evalcond[2]=(((r01*x3094))+((r00*x3091))+(((-1.0)*r00*x3087*x3090))+x3084+((cj4*x3089))+((x3087*x3088)));
evalcond[3]=((((-1.0)*r10*x3087*x3090))+(((-1.0)*x3096))+((cj4*x3093))+((r10*x3091))+((x3086*x3087))+((r11*x3094)));
evalcond[4]=((((-1.0)*r00*x3090*x3092))+(((-1.0)*x3096))+(((-1.0)*cj4*r01*x3090))+((x3088*x3092))+((sj4*x3089))+(((-1.0)*r00*x3097)));
evalcond[5]=(((x3086*x3092))+(((-1.0)*x3084))+(((-1.0)*r10*x3097))+(((-1.0)*r10*x3090*x3092))+(((-1.0)*cj4*r11*x3090))+((sj4*x3093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3098=((0.192405063291139)*cj6);
IkReal x3099=((0.192405063291139)*sj6);
if( IKabs(((((2.53164556962025)*py))+(((-1.0)*r10*x3098))+((r11*x3099)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x3098))+(((-2.53164556962025)*px))+(((-1.0)*r01*x3099)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.53164556962025)*py))+(((-1.0)*r10*x3098))+((r11*x3099))))+IKsqr((((r00*x3098))+(((-2.53164556962025)*px))+(((-1.0)*r01*x3099))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((2.53164556962025)*py))+(((-1.0)*r10*x3098))+((r11*x3099))), (((r00*x3098))+(((-2.53164556962025)*px))+(((-1.0)*r01*x3099))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3100=IKsin(j2);
IkReal x3101=IKcos(j2);
IkReal x3102=(r01*sj6);
IkReal x3103=(sj4*sj5);
IkReal x3104=(r11*sj6);
IkReal x3105=(cj5*sj4);
IkReal x3106=((1.0)*cj6);
IkReal x3107=((1.0)*cj5);
IkReal x3108=((0.076)*cj6);
IkReal x3109=((1.0)*x3101);
IkReal x3110=(r10*x3106);
IkReal x3111=((1.0)*cj4*sj6);
evalcond[0]=(x3100+(((-1.0)*sj5*x3110))+((sj5*x3104))+(((-1.0)*r12*x3107)));
evalcond[1]=((((-0.395)*x3101))+(((-0.076)*x3102))+(((-1.0)*px))+((r00*x3108)));
evalcond[2]=((((-0.076)*x3104))+((r10*x3108))+(((-1.0)*py))+(((0.395)*x3100)));
evalcond[3]=(((sj5*x3102))+(((-1.0)*x3109))+(((-1.0)*r00*sj5*x3106))+(((-1.0)*r02*x3107)));
evalcond[4]=((((-1.0)*x3100))+((r02*x3103))+(((-1.0)*r00*x3111))+((x3102*x3105))+(((-1.0)*cj4*r01*x3106))+(((-1.0)*r00*x3105*x3106)));
evalcond[5]=((((-1.0)*cj4*r11*x3106))+(((-1.0)*x3109))+(((-1.0)*r10*x3111))+(((-1.0)*x3105*x3110))+((r12*x3103))+((x3104*x3105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3112=((0.262068965517241)*sj6);
IkReal x3113=((0.262068965517241)*cj6);
if( IKabs(((((-3.44827586206897)*py))+(((-1.0)*r11*x3112))+((r10*x3113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3113))+(((3.44827586206897)*px))+((r01*x3112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.44827586206897)*py))+(((-1.0)*r11*x3112))+((r10*x3113))))+IKsqr(((((-1.0)*r00*x3113))+(((3.44827586206897)*px))+((r01*x3112))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-3.44827586206897)*py))+(((-1.0)*r11*x3112))+((r10*x3113))), ((((-1.0)*r00*x3113))+(((3.44827586206897)*px))+((r01*x3112))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3114=IKcos(j2);
IkReal x3115=IKsin(j2);
IkReal x3116=(sj4*sj5);
IkReal x3117=((0.076)*sj6);
IkReal x3118=(sj5*sj6);
IkReal x3119=(cj5*sj4);
IkReal x3120=((1.0)*cj6);
IkReal x3121=((1.0)*cj5);
IkReal x3122=((0.076)*cj6);
IkReal x3123=((1.0)*x3115);
IkReal x3124=(r10*x3120);
IkReal x3125=((1.0)*cj4*sj6);
evalcond[0]=(x3114+(((-1.0)*r02*x3121))+(((-1.0)*r00*sj5*x3120))+((r01*x3118)));
evalcond[1]=(((r00*x3122))+(((-1.0)*px))+(((-1.0)*r01*x3117))+(((0.29)*x3114)));
evalcond[2]=((((-1.0)*r11*x3117))+(((-1.0)*py))+((r10*x3122))+(((-0.29)*x3115)));
evalcond[3]=((((-1.0)*sj5*x3124))+(((-1.0)*r12*x3121))+(((-1.0)*x3123))+((r11*x3118)));
evalcond[4]=(((r01*sj6*x3119))+((r02*x3116))+(((-1.0)*cj4*r01*x3120))+(((-1.0)*x3123))+(((-1.0)*r00*x3119*x3120))+(((-1.0)*r00*x3125)));
evalcond[5]=(((r12*x3116))+(((-1.0)*cj4*r11*x3120))+(((-1.0)*x3114))+(((-1.0)*r10*x3125))+((r11*sj6*x3119))+(((-1.0)*x3119*x3124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3126=((64920240.9929408)*cj6);
IkReal x3127=((64920240.9929408)*sj6);
if( IKabs(((((-854213697.275536)*py))+((r10*x3126))+(((-1.0)*r11*x3127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x3127))+(((854213697.275536)*px))+(((-1.0)*r00*x3126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-854213697.275536)*py))+((r10*x3126))+(((-1.0)*r11*x3127))))+IKsqr((((r01*x3127))+(((854213697.275536)*px))+(((-1.0)*r00*x3126))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-854213697.275536)*py))+((r10*x3126))+(((-1.0)*r11*x3127))), (((r01*x3127))+(((854213697.275536)*px))+(((-1.0)*r00*x3126))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3128=IKsin(j2);
IkReal x3129=IKcos(j2);
IkReal x3130=((0.076)*sj6);
IkReal x3131=(r02*sj5);
IkReal x3132=(r11*sj6);
IkReal x3133=(cj4*cj5);
IkReal x3134=(cj5*sj4);
IkReal x3135=(sj4*sj6);
IkReal x3136=(r01*sj6);
IkReal x3137=(r12*sj5);
IkReal x3138=((1.0)*cj4);
IkReal x3139=(cj6*r11);
IkReal x3140=(cj6*r01);
IkReal x3141=((1.0)*cj5);
IkReal x3142=((0.076)*cj6);
IkReal x3143=((1.0)*cj6*r10);
IkReal x3144=((1.0)*cj6*r00);
evalcond[0]=(((r00*x3142))+(((1.17066725011486e-9)*x3129))+(((-1.0)*px))+(((-1.0)*r01*x3130)));
evalcond[1]=(((r10*x3142))+(((-1.0)*py))+(((-1.17066725011486e-9)*x3128))+(((-1.0)*r11*x3130)));
evalcond[2]=((((-1.0)*r12*x3141))+(((0.07239889)*x3128))+((sj5*x3132))+(((-1.0)*sj5*x3143)));
evalcond[3]=((((-0.07239889)*x3129))+(((-1.0)*r02*x3141))+((sj5*x3136))+(((-1.0)*sj5*x3144)));
evalcond[4]=(((sj4*x3139))+((x3132*x3133))+((r10*x3135))+((cj4*x3137))+(((-1.0)*x3133*x3143))+(((-0.997375754782803)*x3128)));
evalcond[5]=((((0.997375754782803)*x3129))+((r00*x3135))+((x3133*x3136))+((sj4*x3140))+((cj4*x3131))+(((-1.0)*x3133*x3144)));
evalcond[6]=(((sj4*x3131))+(((-1.0)*x3128))+((x3134*x3136))+(((-1.0)*r00*sj6*x3138))+(((-1.0)*x3138*x3140))+(((-1.0)*x3134*x3144)));
evalcond[7]=(((sj4*x3137))+(((-1.0)*x3138*x3139))+((x3132*x3134))+(((-1.0)*x3129))+(((-1.0)*r10*sj6*x3138))+(((-1.0)*x3134*x3143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3145=((57213427.3137081)*sj6);
IkReal x3146=((57213427.3137081)*cj6);
if( IKabs((((r11*x3145))+(((-1.0)*r10*x3146))+(((752808254.127739)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x3146))+(((-1.0)*r01*x3145))+(((-752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x3145))+(((-1.0)*r10*x3146))+(((752808254.127739)*py))))+IKsqr((((r00*x3146))+(((-1.0)*r01*x3145))+(((-752808254.127739)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x3145))+(((-1.0)*r10*x3146))+(((752808254.127739)*py))), (((r00*x3146))+(((-1.0)*r01*x3145))+(((-752808254.127739)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3147=IKsin(j2);
IkReal x3148=IKcos(j2);
IkReal x3149=(r01*sj6);
IkReal x3150=(r02*sj5);
IkReal x3151=(r11*sj6);
IkReal x3152=(cj4*cj5);
IkReal x3153=(cj5*sj4);
IkReal x3154=(sj4*sj6);
IkReal x3155=(r12*sj5);
IkReal x3156=((1.0)*cj4);
IkReal x3157=(cj6*r11);
IkReal x3158=(cj6*r01);
IkReal x3159=((1.0)*cj5);
IkReal x3160=((0.076)*cj6);
IkReal x3161=((1.0)*cj6*r10);
IkReal x3162=((1.0)*cj6*r00);
evalcond[0]=((((-0.076)*x3149))+(((-1.0)*px))+(((-1.32835950524835e-9)*x3148))+((r00*x3160)));
evalcond[1]=((((-0.076)*x3151))+((r10*x3160))+(((-1.0)*py))+(((1.32835950524835e-9)*x3147)));
evalcond[2]=((((-0.36403599)*x3147))+((sj5*x3151))+(((-1.0)*sj5*x3161))+(((-1.0)*r12*x3159)));
evalcond[3]=(((sj5*x3149))+(((0.36403599)*x3148))+(((-1.0)*r02*x3159))+(((-1.0)*sj5*x3162)));
evalcond[4]=((((-1.0)*x3152*x3161))+((x3151*x3152))+((r10*x3154))+(((0.931384876172381)*x3147))+((cj4*x3155))+((sj4*x3157)));
evalcond[5]=((((-1.0)*x3152*x3162))+((x3149*x3152))+((cj4*x3150))+((sj4*x3158))+((r00*x3154))+(((-0.931384876172381)*x3148)));
evalcond[6]=((((-1.0)*x3147))+(((-1.0)*x3153*x3162))+((x3149*x3153))+(((-1.0)*r00*sj6*x3156))+(((-1.0)*x3156*x3158))+((sj4*x3150)));
evalcond[7]=(((x3151*x3153))+(((-1.0)*x3148))+(((-1.0)*x3153*x3161))+(((-1.0)*x3156*x3157))+((sj4*x3155))+(((-1.0)*r10*sj6*x3156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3163=(cj4*cj5);
CheckValue<IkReal> x3164=IKPowWithIntegerCheck(sj3,-1);
if(!x3164.valid){
continue;
}
CheckValue<IkReal> x3165=IKPowWithIntegerCheck(cj3,-1);
if(!x3165.valid){
continue;
}
if( IKabs(((x3164.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3165.value)*((((r00*sj4*sj6))+((cj6*r01*sj4))+((r01*sj6*x3163))+((cj4*r02*sj5))+(((-1.0)*cj6*r00*x3163)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3164.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))))+IKsqr(((x3165.value)*((((r00*sj4*sj6))+((cj6*r01*sj4))+((r01*sj6*x3163))+((cj4*r02*sj5))+(((-1.0)*cj6*r00*x3163))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x3164.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))), ((x3165.value)*((((r00*sj4*sj6))+((cj6*r01*sj4))+((r01*sj6*x3163))+((cj4*r02*sj5))+(((-1.0)*cj6*r00*x3163))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3166=IKsin(j2);
IkReal x3167=IKcos(j2);
IkReal x3168=(r01*sj6);
IkReal x3169=((0.3425)*sj3);
IkReal x3170=(r02*sj5);
IkReal x3171=(r11*sj6);
IkReal x3172=(cj5*sj4);
IkReal x3173=(cj4*cj5);
IkReal x3174=(sj4*sj6);
IkReal x3175=((0.0775)*cj3);
IkReal x3176=(r12*sj5);
IkReal x3177=((1.0)*cj4);
IkReal x3178=(cj6*r11);
IkReal x3179=(cj6*r01);
IkReal x3180=((1.0)*cj5);
IkReal x3181=((0.076)*cj6);
IkReal x3182=((1.0)*x3167);
IkReal x3183=((1.0)*cj6*r10);
IkReal x3184=((1.0)*cj6*r00);
evalcond[0]=(((sj3*x3166))+((sj5*x3171))+(((-1.0)*sj5*x3183))+(((-1.0)*r12*x3180)));
evalcond[1]=(((sj5*x3168))+(((-1.0)*r02*x3180))+(((-1.0)*sj5*x3184))+(((-1.0)*sj3*x3182)));
evalcond[2]=(((cj4*x3176))+((r10*x3174))+((cj3*x3166))+((x3171*x3173))+((sj4*x3178))+(((-1.0)*x3173*x3183)));
evalcond[3]=((((-1.0)*x3167*x3169))+((r00*x3181))+(((-1.0)*px))+(((-1.0)*x3167*x3175))+(((-0.076)*x3168))+(((-0.0525)*x3167)));
evalcond[4]=(((x3166*x3175))+((x3166*x3169))+(((0.0525)*x3166))+(((-0.076)*x3171))+(((-1.0)*py))+((r10*x3181)));
evalcond[5]=(((cj4*x3170))+(((-1.0)*cj3*x3182))+((x3168*x3173))+((r00*x3174))+((sj4*x3179))+(((-1.0)*x3173*x3184)));
evalcond[6]=((((-1.0)*x3172*x3184))+((x3168*x3172))+(((-1.0)*x3166))+(((-1.0)*x3177*x3179))+(((-1.0)*r00*sj6*x3177))+((sj4*x3170)));
evalcond[7]=((((-1.0)*r10*sj6*x3177))+(((-1.0)*x3172*x3183))+(((-1.0)*x3177*x3178))+((x3171*x3172))+((sj4*x3176))+(((-1.0)*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3185=IKPowWithIntegerCheck(sj3,-1);
if(!x3185.valid){
continue;
}
CheckValue<IkReal> x3186=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x3186.valid){
continue;
}
if( IKabs(((x3185.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3186.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3185.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))))+IKsqr(((x3186.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x3185.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))), ((x3186.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3187=IKsin(j2);
IkReal x3188=IKcos(j2);
IkReal x3189=(r01*sj6);
IkReal x3190=((0.3425)*sj3);
IkReal x3191=(r02*sj5);
IkReal x3192=(r11*sj6);
IkReal x3193=(cj5*sj4);
IkReal x3194=(cj4*cj5);
IkReal x3195=(sj4*sj6);
IkReal x3196=((0.0775)*cj3);
IkReal x3197=(r12*sj5);
IkReal x3198=((1.0)*cj4);
IkReal x3199=(cj6*r11);
IkReal x3200=(cj6*r01);
IkReal x3201=((1.0)*cj5);
IkReal x3202=((0.076)*cj6);
IkReal x3203=((1.0)*x3188);
IkReal x3204=((1.0)*cj6*r10);
IkReal x3205=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r12*x3201))+(((-1.0)*sj5*x3204))+((sj5*x3192))+((sj3*x3187)));
evalcond[1]=((((-1.0)*r02*x3201))+(((-1.0)*sj3*x3203))+((sj5*x3189))+(((-1.0)*sj5*x3205)));
evalcond[2]=((((-1.0)*x3194*x3204))+((sj4*x3199))+((cj4*x3197))+((x3192*x3194))+((r10*x3195))+((cj3*x3187)));
evalcond[3]=((((-0.0525)*x3188))+((r00*x3202))+(((-1.0)*x3188*x3190))+(((-1.0)*x3188*x3196))+(((-1.0)*px))+(((-0.076)*x3189)));
evalcond[4]=((((0.0525)*x3187))+(((-1.0)*py))+((x3187*x3190))+((x3187*x3196))+(((-0.076)*x3192))+((r10*x3202)));
evalcond[5]=((((-1.0)*x3194*x3205))+(((-1.0)*cj3*x3203))+((r00*x3195))+((cj4*x3191))+((sj4*x3200))+((x3189*x3194)));
evalcond[6]=((((-1.0)*x3193*x3205))+((sj4*x3191))+(((-1.0)*r00*sj6*x3198))+(((-1.0)*x3187))+((x3189*x3193))+(((-1.0)*x3198*x3200)));
evalcond[7]=((((-1.0)*x3193*x3204))+(((-1.0)*x3198*x3199))+((sj4*x3197))+(((-1.0)*r10*sj6*x3198))+(((-1.0)*x3203))+((x3192*x3193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3206=((1.0)*sj5);
CheckValue<IkReal> x3207=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3207.valid){
continue;
}
CheckValue<IkReal> x3208 = IKatan2WithCheck(IkReal((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3206)))),IkReal((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x3206))+(((-1.0)*cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3208.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3207.value)))+(x3208.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3209=IKsin(j2);
IkReal x3210=IKcos(j2);
IkReal x3211=(r01*sj6);
IkReal x3212=((0.3425)*sj3);
IkReal x3213=(r02*sj5);
IkReal x3214=(r11*sj6);
IkReal x3215=(cj5*sj4);
IkReal x3216=(cj4*cj5);
IkReal x3217=(sj4*sj6);
IkReal x3218=((0.0775)*cj3);
IkReal x3219=(r12*sj5);
IkReal x3220=((1.0)*cj4);
IkReal x3221=(cj6*r11);
IkReal x3222=(cj6*r01);
IkReal x3223=((1.0)*cj5);
IkReal x3224=((0.076)*cj6);
IkReal x3225=((1.0)*x3210);
IkReal x3226=((1.0)*cj6*r10);
IkReal x3227=((1.0)*cj6*r00);
evalcond[0]=(((sj3*x3209))+((sj5*x3214))+(((-1.0)*sj5*x3226))+(((-1.0)*r12*x3223)));
evalcond[1]=((((-1.0)*sj3*x3225))+(((-1.0)*r02*x3223))+((sj5*x3211))+(((-1.0)*sj5*x3227)));
evalcond[2]=(((cj4*x3219))+(((-1.0)*x3216*x3226))+((cj3*x3209))+((x3214*x3216))+((sj4*x3221))+((r10*x3217)));
evalcond[3]=((((-0.076)*x3211))+(((-1.0)*x3210*x3218))+(((-1.0)*x3210*x3212))+(((-1.0)*px))+((r00*x3224))+(((-0.0525)*x3210)));
evalcond[4]=(((r10*x3224))+(((-0.076)*x3214))+((x3209*x3212))+((x3209*x3218))+(((-1.0)*py))+(((0.0525)*x3209)));
evalcond[5]=(((cj4*x3213))+(((-1.0)*x3216*x3227))+((x3211*x3216))+(((-1.0)*cj3*x3225))+((r00*x3217))+((sj4*x3222)));
evalcond[6]=(((sj4*x3213))+((x3211*x3215))+(((-1.0)*x3209))+(((-1.0)*x3215*x3227))+(((-1.0)*r00*sj6*x3220))+(((-1.0)*x3220*x3222)));
evalcond[7]=(((sj4*x3219))+((x3214*x3215))+(((-1.0)*r10*sj6*x3220))+(((-1.0)*x3215*x3226))+(((-1.0)*x3220*x3221))+(((-1.0)*x3225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3228=(cj6*r00);
IkReal x3229=(cj5*r02);
IkReal x3230=((4.41935483870968)*sj5);
IkReal x3231=(r01*sj6);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*px))+(((-4.41935483870968)*x3229))+(((-1.0)*x3228*x3230))+(((-0.980645161290323)*x3228))+(((0.980645161290323)*x3231))+((x3230*x3231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3229))+((sj5*x3231))+(((-1.0)*sj5*x3228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*px))+(((-4.41935483870968)*x3229))+(((-1.0)*x3228*x3230))+(((-0.980645161290323)*x3228))+(((0.980645161290323)*x3231))+((x3230*x3231))))+IKsqr(((((-1.0)*x3229))+((sj5*x3231))+(((-1.0)*sj5*x3228))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*px))+(((-4.41935483870968)*x3229))+(((-1.0)*x3228*x3230))+(((-0.980645161290323)*x3228))+(((0.980645161290323)*x3231))+((x3230*x3231))), ((((-1.0)*x3229))+((sj5*x3231))+(((-1.0)*sj5*x3228))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x3232=IKcos(j3);
IkReal x3233=IKsin(j3);
IkReal x3234=(r01*sj6);
IkReal x3235=(cj4*cj5);
IkReal x3236=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*x3232))+((sj5*x3234))+(((-1.0)*sj5*x3236))+(((-1.0)*cj5*r02)));
evalcond[1]=((0.293)+(((-0.3425)*x3232))+(((0.076)*cj6*r00))+(((-1.0)*px))+(((0.0775)*x3233))+(((-0.076)*x3234)));
evalcond[2]=(((r00*sj4*sj6))+((cj6*r01*sj4))+((x3234*x3235))+x3233+(((-1.0)*x3235*x3236))+((cj4*r02*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x3237=((1.0)*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((r21*sj5*sj6))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r20*x3237)))))+(IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3237))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=1.0;
j0=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=1.0;
j0=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3238=((0.584615384615385)*cj6);
IkReal x3239=((0.584615384615385)*sj6);
if( IKabs(((((-1.0)*r10*x3238))+((r11*x3239))+(((7.69230769230769)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x3238))+(((-1.0)*r21*x3239))+(((-7.69230769230769)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3238))+((r11*x3239))+(((7.69230769230769)*py))))+IKsqr((((r20*x3238))+(((-1.0)*r21*x3239))+(((-7.69230769230769)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x3238))+((r11*x3239))+(((7.69230769230769)*py))), (((r20*x3238))+(((-1.0)*r21*x3239))+(((-7.69230769230769)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3240=IKsin(j2);
IkReal x3241=IKcos(j2);
IkReal x3242=(sj4*sj6);
IkReal x3243=(sj4*sj5);
IkReal x3244=(cj5*r21);
IkReal x3245=(cj5*cj6);
IkReal x3246=(r11*sj6);
IkReal x3247=((1.0)*sj4);
IkReal x3248=((1.0)*cj4);
IkReal x3249=(cj4*sj5);
IkReal x3250=(cj6*r11);
IkReal x3251=((0.076)*cj6);
IkReal x3252=(cj6*r21);
IkReal x3253=((1.0)*x3241);
IkReal x3254=(r20*x3248);
evalcond[0]=((((-0.076)*r21*sj6))+(((-1.0)*pz))+(((-0.13)*x3241))+((r20*x3251)));
evalcond[1]=(((r10*x3251))+(((-1.0)*py))+(((0.13)*x3240))+(((-0.076)*x3246)));
evalcond[2]=((((-1.0)*r10*x3245*x3248))+x3240+((cj4*cj5*x3246))+((sj4*x3250))+((r12*x3249))+((r10*x3242)));
evalcond[3]=(((r22*x3249))+(((-1.0)*x3245*x3254))+((r20*x3242))+((cj4*sj6*x3244))+((sj4*x3252))+(((-1.0)*x3253)));
evalcond[4]=(((r22*x3243))+(((-1.0)*x3240))+(((-1.0)*sj6*x3254))+(((-1.0)*x3248*x3252))+(((-1.0)*r20*x3245*x3247))+((x3242*x3244)));
evalcond[5]=((((-1.0)*r10*x3245*x3247))+(((-1.0)*x3248*x3250))+((cj5*r11*x3242))+((r12*x3243))+(((-1.0)*r10*sj6*x3248))+(((-1.0)*x3253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3255=((3.04)*cj6);
IkReal x3256=((3.04)*sj6);
if( IKabs((((r10*x3255))+(((-1.0)*r11*x3256))+(((-40.0)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((40.0)*pz))+((r21*x3256))+(((-1.0)*r20*x3255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3255))+(((-1.0)*r11*x3256))+(((-40.0)*py))))+IKsqr(((((40.0)*pz))+((r21*x3256))+(((-1.0)*r20*x3255))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x3255))+(((-1.0)*r11*x3256))+(((-40.0)*py))), ((((40.0)*pz))+((r21*x3256))+(((-1.0)*r20*x3255))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3257=IKcos(j2);
IkReal x3258=IKsin(j2);
IkReal x3259=(sj4*sj5);
IkReal x3260=(cj5*sj4);
IkReal x3261=(r21*sj6);
IkReal x3262=(r11*sj6);
IkReal x3263=((1.0)*r20);
IkReal x3264=(cj4*sj6);
IkReal x3265=(sj4*sj6);
IkReal x3266=((1.0)*cj6);
IkReal x3267=(cj4*sj5);
IkReal x3268=(cj4*cj5);
IkReal x3269=((0.076)*cj6);
IkReal x3270=(cj6*sj4);
IkReal x3271=((1.0)*x3258);
IkReal x3272=(x3266*x3268);
evalcond[0]=(((r20*x3269))+(((-1.0)*pz))+(((-0.076)*x3261))+(((0.025)*x3257)));
evalcond[1]=((((-0.025)*x3258))+(((-1.0)*py))+(((-0.076)*x3262))+((r10*x3269)));
evalcond[2]=((((-1.0)*cj6*x3263*x3268))+((r21*x3270))+((r20*x3265))+x3257+((x3261*x3268))+((r22*x3267)));
evalcond[3]=(((x3262*x3268))+(((-1.0)*x3271))+((r11*x3270))+(((-1.0)*r10*x3272))+((r12*x3267))+((r10*x3265)));
evalcond[4]=((((-1.0)*cj4*r21*x3266))+(((-1.0)*x3271))+((r22*x3259))+(((-1.0)*x3263*x3264))+((x3260*x3261))+(((-1.0)*cj6*x3260*x3263)));
evalcond[5]=(((r12*x3259))+(((-1.0)*x3257))+(((-1.0)*cj4*r11*x3266))+((x3260*x3262))+(((-1.0)*r10*x3260*x3266))+(((-1.0)*r10*x3264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3273=((0.192405063291139)*sj6);
IkReal x3274=((0.192405063291139)*cj6);
if( IKabs(((((2.53164556962025)*py))+((r11*x3273))+(((-1.0)*r10*x3274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.53164556962025)*pz))+(((-1.0)*r21*x3273))+((r20*x3274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.53164556962025)*py))+((r11*x3273))+(((-1.0)*r10*x3274))))+IKsqr(((((-2.53164556962025)*pz))+(((-1.0)*r21*x3273))+((r20*x3274))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((2.53164556962025)*py))+((r11*x3273))+(((-1.0)*r10*x3274))), ((((-2.53164556962025)*pz))+(((-1.0)*r21*x3273))+((r20*x3274))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3275=IKsin(j2);
IkReal x3276=IKcos(j2);
IkReal x3277=(sj4*sj5);
IkReal x3278=(r21*sj6);
IkReal x3279=(cj5*sj4);
IkReal x3280=((1.0)*cj5);
IkReal x3281=(r11*sj6);
IkReal x3282=((1.0)*r20);
IkReal x3283=(cj4*sj6);
IkReal x3284=((0.076)*cj6);
IkReal x3285=((1.0)*x3276);
IkReal x3286=((1.0)*cj6*r10);
IkReal x3287=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*r12*x3280))+(((-1.0)*sj5*x3286))+((sj5*x3281))+x3275);
evalcond[1]=(((r20*x3284))+(((-1.0)*pz))+(((-0.395)*x3276))+(((-0.076)*x3278)));
evalcond[2]=((((-1.0)*py))+(((-0.076)*x3281))+((r10*x3284))+(((0.395)*x3275)));
evalcond[3]=((((-1.0)*x3285))+(((-1.0)*r22*x3280))+((sj5*x3278))+(((-1.0)*cj6*sj5*x3282)));
evalcond[4]=((((-1.0)*x3275))+(((-1.0)*r21*x3287))+(((-1.0)*x3282*x3283))+((x3278*x3279))+(((-1.0)*cj6*x3279*x3282))+((r22*x3277)));
evalcond[5]=((((-1.0)*r10*x3283))+((x3279*x3281))+(((-1.0)*x3285))+(((-1.0)*x3279*x3286))+((r12*x3277))+(((-1.0)*r11*x3287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3288=((0.262068965517241)*cj6);
IkReal x3289=((0.262068965517241)*sj6);
if( IKabs(((((-3.44827586206897)*py))+((r10*x3288))+(((-1.0)*r11*x3289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x3288))+((r21*x3289))+(((3.44827586206897)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.44827586206897)*py))+((r10*x3288))+(((-1.0)*r11*x3289))))+IKsqr(((((-1.0)*r20*x3288))+((r21*x3289))+(((3.44827586206897)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-3.44827586206897)*py))+((r10*x3288))+(((-1.0)*r11*x3289))), ((((-1.0)*r20*x3288))+((r21*x3289))+(((3.44827586206897)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3290=IKcos(j2);
IkReal x3291=IKsin(j2);
IkReal x3292=(sj4*sj5);
IkReal x3293=(r21*sj6);
IkReal x3294=(cj5*sj4);
IkReal x3295=(r11*sj6);
IkReal x3296=((1.0)*cj4);
IkReal x3297=((1.0)*cj5);
IkReal x3298=((1.0)*cj6);
IkReal x3299=((0.076)*cj6);
IkReal x3300=((1.0)*x3291);
IkReal x3301=(sj5*x3298);
evalcond[0]=((((-1.0)*r20*x3301))+((sj5*x3293))+(((-1.0)*r22*x3297))+x3290);
evalcond[1]=(((r20*x3299))+(((0.29)*x3290))+(((-1.0)*pz))+(((-0.076)*x3293)));
evalcond[2]=((((-0.29)*x3291))+(((-1.0)*py))+((r10*x3299))+(((-0.076)*x3295)));
evalcond[3]=((((-1.0)*r12*x3297))+((sj5*x3295))+(((-1.0)*x3300))+(((-1.0)*r10*x3301)));
evalcond[4]=(((x3293*x3294))+(((-1.0)*x3300))+(((-1.0)*r20*sj6*x3296))+((r22*x3292))+(((-1.0)*cj6*r21*x3296))+(((-1.0)*r20*x3294*x3298)));
evalcond[5]=((((-1.0)*r10*sj6*x3296))+(((-1.0)*cj6*r11*x3296))+(((-1.0)*x3290))+((r12*x3292))+((x3294*x3295))+(((-1.0)*r10*x3294*x3298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3302=((64920240.9929408)*cj6);
IkReal x3303=((64920240.9929408)*sj6);
if( IKabs(((((-854213697.275536)*py))+((r10*x3302))+(((-1.0)*r11*x3303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((854213697.275536)*pz))+(((-1.0)*r20*x3302))+((r21*x3303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-854213697.275536)*py))+((r10*x3302))+(((-1.0)*r11*x3303))))+IKsqr(((((854213697.275536)*pz))+(((-1.0)*r20*x3302))+((r21*x3303))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-854213697.275536)*py))+((r10*x3302))+(((-1.0)*r11*x3303))), ((((854213697.275536)*pz))+(((-1.0)*r20*x3302))+((r21*x3303))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3304=IKcos(j2);
IkReal x3305=IKsin(j2);
IkReal x3306=(r20*sj4);
IkReal x3307=(sj4*sj5);
IkReal x3308=(cj4*r20);
IkReal x3309=((1.0)*r10);
IkReal x3310=(cj6*sj5);
IkReal x3311=(r11*sj6);
IkReal x3312=(r21*sj6);
IkReal x3313=(cj5*sj4);
IkReal x3314=(r10*sj4);
IkReal x3315=((1.0)*cj5);
IkReal x3316=(cj4*sj5);
IkReal x3317=(cj4*cj5);
IkReal x3318=((0.076)*cj6);
IkReal x3319=(cj6*sj4);
IkReal x3320=(cj6*x3315);
IkReal x3321=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*pz))+(((1.17066725011486e-9)*x3304))+((r20*x3318))+(((-0.076)*x3312)));
evalcond[1]=(((r10*x3318))+(((-1.17066725011486e-9)*x3305))+(((-1.0)*py))+(((-0.076)*x3311)));
evalcond[2]=((((-0.07239889)*x3304))+(((-1.0)*r22*x3315))+((sj5*x3312))+(((-1.0)*r20*x3310)));
evalcond[3]=((((-1.0)*x3309*x3310))+(((0.07239889)*x3305))+((sj5*x3311))+(((-1.0)*r12*x3315)));
evalcond[4]=(((r21*x3319))+((sj6*x3306))+((x3312*x3317))+((r22*x3316))+(((-1.0)*x3308*x3320))+(((0.997375754782803)*x3304)));
evalcond[5]=((((-1.0)*cj6*x3309*x3317))+((sj6*x3314))+((r11*x3319))+((r12*x3316))+(((-0.997375754782803)*x3305))+((x3311*x3317)));
evalcond[6]=((((-1.0)*sj6*x3308))+((x3312*x3313))+(((-1.0)*r21*x3321))+((r22*x3307))+(((-1.0)*x3305))+(((-1.0)*x3306*x3320)));
evalcond[7]=((((-1.0)*cj6*x3309*x3313))+(((-1.0)*cj4*sj6*x3309))+((r12*x3307))+(((-1.0)*x3304))+(((-1.0)*r11*x3321))+((x3311*x3313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3322=((57213427.3137081)*sj6);
IkReal x3323=((57213427.3137081)*cj6);
if( IKabs((((r11*x3322))+(((-1.0)*r10*x3323))+(((752808254.127739)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x3322))+((r20*x3323))+(((-752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x3322))+(((-1.0)*r10*x3323))+(((752808254.127739)*py))))+IKsqr(((((-1.0)*r21*x3322))+((r20*x3323))+(((-752808254.127739)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x3322))+(((-1.0)*r10*x3323))+(((752808254.127739)*py))), ((((-1.0)*r21*x3322))+((r20*x3323))+(((-752808254.127739)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3324=IKcos(j2);
IkReal x3325=IKsin(j2);
IkReal x3326=(r20*sj4);
IkReal x3327=(sj4*sj5);
IkReal x3328=(cj4*r20);
IkReal x3329=(cj4*r10);
IkReal x3330=(r11*sj6);
IkReal x3331=(r21*sj6);
IkReal x3332=(cj5*sj4);
IkReal x3333=((1.0)*sj6);
IkReal x3334=(r10*sj4);
IkReal x3335=((1.0)*cj5);
IkReal x3336=(cj4*cj5);
IkReal x3337=(cj4*sj5);
IkReal x3338=((0.076)*cj6);
IkReal x3339=(cj6*sj4);
IkReal x3340=(cj6*x3335);
IkReal x3341=((1.0)*cj6*sj5);
IkReal x3342=((1.0)*cj4*cj6);
evalcond[0]=((((-0.076)*x3331))+(((-1.32835950524835e-9)*x3324))+(((-1.0)*pz))+((r20*x3338)));
evalcond[1]=((((-0.076)*x3330))+((r10*x3338))+(((1.32835950524835e-9)*x3325))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*r20*x3341))+((sj5*x3331))+(((-1.0)*r22*x3335))+(((0.36403599)*x3324)));
evalcond[3]=((((-1.0)*r10*x3341))+((sj5*x3330))+(((-0.36403599)*x3325))+(((-1.0)*r12*x3335)));
evalcond[4]=(((r21*x3339))+((x3331*x3336))+(((-0.931384876172381)*x3324))+((r22*x3337))+((sj6*x3326))+(((-1.0)*x3328*x3340)));
evalcond[5]=(((x3330*x3336))+(((0.931384876172381)*x3325))+((sj6*x3334))+((r12*x3337))+((r11*x3339))+(((-1.0)*x3329*x3340)));
evalcond[6]=(((r22*x3327))+(((-1.0)*x3325))+((x3331*x3332))+(((-1.0)*r21*x3342))+(((-1.0)*x3326*x3340))+(((-1.0)*x3328*x3333)));
evalcond[7]=((((-1.0)*x3324))+((r12*x3327))+((x3330*x3332))+(((-1.0)*r11*x3342))+(((-1.0)*cj6*r10*x3332))+(((-1.0)*x3329*x3333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3343=(cj4*cj5);
CheckValue<IkReal> x3344=IKPowWithIntegerCheck(sj3,-1);
if(!x3344.valid){
continue;
}
CheckValue<IkReal> x3345=IKPowWithIntegerCheck(cj3,-1);
if(!x3345.valid){
continue;
}
if( IKabs(((x3344.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3345.value)*(((((-1.0)*cj6*r20*x3343))+((cj4*r22*sj5))+((r21*sj6*x3343))+((cj6*r21*sj4))+((r20*sj4*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3344.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))))+IKsqr(((x3345.value)*(((((-1.0)*cj6*r20*x3343))+((cj4*r22*sj5))+((r21*sj6*x3343))+((cj6*r21*sj4))+((r20*sj4*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x3344.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))), ((x3345.value)*(((((-1.0)*cj6*r20*x3343))+((cj4*r22*sj5))+((r21*sj6*x3343))+((cj6*r21*sj4))+((r20*sj4*sj6))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3346=IKcos(j2);
IkReal x3347=IKsin(j2);
IkReal x3348=(sj4*sj5);
IkReal x3349=((0.3425)*sj3);
IkReal x3350=(r20*sj4);
IkReal x3351=((1.0)*cj6);
IkReal x3352=(r11*sj6);
IkReal x3353=(cj5*sj4);
IkReal x3354=(r21*sj6);
IkReal x3355=((1.0)*cj5);
IkReal x3356=((0.0775)*cj3);
IkReal x3357=(cj4*sj5);
IkReal x3358=(cj4*cj5);
IkReal x3359=((0.076)*cj6);
IkReal x3360=(cj6*sj4);
IkReal x3361=((1.0)*x3346);
IkReal x3362=((1.0)*cj4*sj6);
IkReal x3363=(x3351*x3358);
evalcond[0]=((((-1.0)*r10*sj5*x3351))+((sj3*x3347))+(((-1.0)*r12*x3355))+((sj5*x3352)));
evalcond[1]=((((-1.0)*r20*sj5*x3351))+(((-1.0)*r22*x3355))+(((-1.0)*sj3*x3361))+((sj5*x3354)));
evalcond[2]=((((-1.0)*x3346*x3356))+(((-1.0)*x3346*x3349))+(((-0.0525)*x3346))+((r20*x3359))+(((-1.0)*pz))+(((-0.076)*x3354)));
evalcond[3]=((((-1.0)*r10*x3363))+((r12*x3357))+((r10*sj4*sj6))+((x3352*x3358))+((cj3*x3347))+((r11*x3360)));
evalcond[4]=(((x3347*x3356))+((x3347*x3349))+(((0.0525)*x3347))+(((-1.0)*py))+(((-0.076)*x3352))+((r10*x3359)));
evalcond[5]=((((-1.0)*cj3*x3361))+((r21*x3360))+(((-1.0)*r20*x3363))+((x3354*x3358))+((sj6*x3350))+((r22*x3357)));
evalcond[6]=((((-1.0)*x3347))+((r22*x3348))+(((-1.0)*cj5*x3350*x3351))+(((-1.0)*r20*x3362))+(((-1.0)*cj4*r21*x3351))+((x3353*x3354)));
evalcond[7]=((((-1.0)*r10*x3362))+(((-1.0)*x3361))+(((-1.0)*cj4*r11*x3351))+((x3352*x3353))+(((-1.0)*r10*x3351*x3353))+((r12*x3348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(sj3,-1);
if(!x3364.valid){
continue;
}
CheckValue<IkReal> x3365=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x3365.valid){
continue;
}
if( IKabs(((x3364.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3365.value)*(((((0.076)*r21*sj6))+pz+(((-0.076)*cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3364.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))))+IKsqr(((x3365.value)*(((((0.076)*r21*sj6))+pz+(((-0.076)*cj6*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x3364.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))), ((x3365.value)*(((((0.076)*r21*sj6))+pz+(((-0.076)*cj6*r20))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3366=IKcos(j2);
IkReal x3367=IKsin(j2);
IkReal x3368=(sj4*sj5);
IkReal x3369=((0.3425)*sj3);
IkReal x3370=(r20*sj4);
IkReal x3371=((1.0)*cj6);
IkReal x3372=(r11*sj6);
IkReal x3373=(cj5*sj4);
IkReal x3374=(r21*sj6);
IkReal x3375=((1.0)*cj5);
IkReal x3376=((0.0775)*cj3);
IkReal x3377=(cj4*sj5);
IkReal x3378=(cj4*cj5);
IkReal x3379=((0.076)*cj6);
IkReal x3380=(cj6*sj4);
IkReal x3381=((1.0)*x3366);
IkReal x3382=((1.0)*cj4*sj6);
IkReal x3383=(x3371*x3378);
evalcond[0]=((((-1.0)*r10*sj5*x3371))+((sj3*x3367))+((sj5*x3372))+(((-1.0)*r12*x3375)));
evalcond[1]=((((-1.0)*r22*x3375))+(((-1.0)*sj3*x3381))+(((-1.0)*r20*sj5*x3371))+((sj5*x3374)));
evalcond[2]=((((-1.0)*x3366*x3376))+(((-1.0)*pz))+(((-1.0)*x3366*x3369))+(((-0.076)*x3374))+((r20*x3379))+(((-0.0525)*x3366)));
evalcond[3]=(((r12*x3377))+((cj3*x3367))+((r10*sj4*sj6))+((x3372*x3378))+(((-1.0)*r10*x3383))+((r11*x3380)));
evalcond[4]=(((r10*x3379))+((x3367*x3369))+((x3367*x3376))+(((-1.0)*py))+(((0.0525)*x3367))+(((-0.076)*x3372)));
evalcond[5]=(((r22*x3377))+((r21*x3380))+((x3374*x3378))+(((-1.0)*r20*x3383))+(((-1.0)*cj3*x3381))+((sj6*x3370)));
evalcond[6]=((((-1.0)*cj4*r21*x3371))+((r22*x3368))+((x3373*x3374))+(((-1.0)*x3367))+(((-1.0)*r20*x3382))+(((-1.0)*cj5*x3370*x3371)));
evalcond[7]=(((x3372*x3373))+(((-1.0)*r10*x3382))+(((-1.0)*r10*x3371*x3373))+((r12*x3368))+(((-1.0)*x3381))+(((-1.0)*cj4*r11*x3371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3384=((1.0)*sj5);
CheckValue<IkReal> x3385=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3385.valid){
continue;
}
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3384)))),IkReal((((r21*sj5*sj6))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r20*x3384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3385.value)))+(x3386.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3387=IKcos(j2);
IkReal x3388=IKsin(j2);
IkReal x3389=(sj4*sj5);
IkReal x3390=((0.3425)*sj3);
IkReal x3391=(r20*sj4);
IkReal x3392=((1.0)*cj6);
IkReal x3393=(r11*sj6);
IkReal x3394=(cj5*sj4);
IkReal x3395=(r21*sj6);
IkReal x3396=((1.0)*cj5);
IkReal x3397=((0.0775)*cj3);
IkReal x3398=(cj4*sj5);
IkReal x3399=(cj4*cj5);
IkReal x3400=((0.076)*cj6);
IkReal x3401=(cj6*sj4);
IkReal x3402=((1.0)*x3387);
IkReal x3403=((1.0)*cj4*sj6);
IkReal x3404=(x3392*x3399);
evalcond[0]=(((sj5*x3393))+(((-1.0)*r12*x3396))+(((-1.0)*r10*sj5*x3392))+((sj3*x3388)));
evalcond[1]=(((sj5*x3395))+(((-1.0)*r22*x3396))+(((-1.0)*sj3*x3402))+(((-1.0)*r20*sj5*x3392)));
evalcond[2]=((((-0.076)*x3395))+(((-1.0)*x3387*x3390))+(((-1.0)*x3387*x3397))+(((-1.0)*pz))+(((-0.0525)*x3387))+((r20*x3400)));
evalcond[3]=(((r11*x3401))+((r10*sj4*sj6))+((x3393*x3399))+((cj3*x3388))+((r12*x3398))+(((-1.0)*r10*x3404)));
evalcond[4]=((((-0.076)*x3393))+((x3388*x3390))+((x3388*x3397))+(((-1.0)*py))+((r10*x3400))+(((0.0525)*x3388)));
evalcond[5]=((((-1.0)*r20*x3404))+((r21*x3401))+(((-1.0)*cj3*x3402))+((r22*x3398))+((sj6*x3391))+((x3395*x3399)));
evalcond[6]=(((x3394*x3395))+(((-1.0)*x3388))+(((-1.0)*cj5*x3391*x3392))+(((-1.0)*r20*x3403))+((r22*x3389))+(((-1.0)*cj4*r21*x3392)));
evalcond[7]=((((-1.0)*r10*x3392*x3394))+(((-1.0)*cj4*r11*x3392))+((x3393*x3394))+((r12*x3389))+(((-1.0)*r10*x3403))+(((-1.0)*x3402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3405=(cj4*cj5);
IkReal x3406=(r01*sj6);
IkReal x3407=(cj6*r00);
if( IKabs(((((-1.0)*x3405*x3407))+((r00*sj4*sj6))+((cj6*r01*sj4))+((cj4*r02*sj5))+((x3405*x3406)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x3406))+((sj5*x3407))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3405*x3407))+((r00*sj4*sj6))+((cj6*r01*sj4))+((cj4*r02*sj5))+((x3405*x3406))))+IKsqr(((((-1.0)*sj5*x3406))+((sj5*x3407))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x3405*x3407))+((r00*sj4*sj6))+((cj6*r01*sj4))+((cj4*r02*sj5))+((x3405*x3406))), ((((-1.0)*sj5*x3406))+((sj5*x3407))+((cj5*r02))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x3408=IKcos(j3);
IkReal x3409=IKsin(j3);
IkReal x3410=(r01*sj6);
IkReal x3411=(cj4*cj5);
IkReal x3412=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*sj5*x3412))+((sj5*x3410))+x3408+(((-1.0)*cj5*r02)));
evalcond[1]=((-0.293)+(((0.3425)*x3408))+(((0.076)*cj6*r00))+(((-1.0)*px))+(((-0.0775)*x3409))+(((-0.076)*x3410)));
evalcond[2]=(((r00*sj4*sj6))+(((-1.0)*x3411*x3412))+(((-1.0)*x3409))+((cj6*r01*sj4))+((cj4*r02*sj5))+((x3410*x3411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x3413=(cj6*sj5);
IkReal x3414=((1.0)*sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj5*r22))+(((-1.0)*r21*x3414))+((r20*x3413)))))+(IKabs((((cj5*r12))+(((-1.0)*r11*x3414))+((r10*x3413))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=0;
cj0=1.0;
j0=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=1.0;
j0=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=((1.0)+(((6.52380952380952)*sj3))+(((1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.372597569911564)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3415=((57213427.3137081)*sj6);
IkReal x3416=((57213427.3137081)*cj6);
if( IKabs((((r11*x3415))+(((-1.0)*r10*x3416))+(((752808254.127739)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x3416))+((r21*x3415))+(((752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x3415))+(((-1.0)*r10*x3416))+(((752808254.127739)*py))))+IKsqr(((((-1.0)*r20*x3416))+((r21*x3415))+(((752808254.127739)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x3415))+(((-1.0)*r10*x3416))+(((752808254.127739)*py))), ((((-1.0)*r20*x3416))+((r21*x3415))+(((752808254.127739)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3417=IKcos(j2);
IkReal x3418=IKsin(j2);
IkReal x3419=(sj4*sj6);
IkReal x3420=(sj4*sj5);
IkReal x3421=(cj5*r21);
IkReal x3422=((1.0)*cj6);
IkReal x3423=(cj4*cj5);
IkReal x3424=(r11*sj6);
IkReal x3425=(cj5*sj4);
IkReal x3426=((1.0)*cj5);
IkReal x3427=(r21*sj6);
IkReal x3428=(cj4*sj5);
IkReal x3429=((0.076)*cj6);
IkReal x3430=(cj6*sj4);
IkReal x3431=((1.0)*cj4*sj6);
evalcond[0]=(((r20*x3429))+(((-0.076)*x3427))+(((-1.0)*pz))+(((1.32835950524835e-9)*x3417)));
evalcond[1]=(((r10*x3429))+(((-0.076)*x3424))+(((-1.0)*py))+(((1.32835950524835e-9)*x3418)));
evalcond[2]=(((sj5*x3427))+(((-0.36403599)*x3417))+(((-1.0)*r20*sj5*x3422))+(((-1.0)*r22*x3426)));
evalcond[3]=(((sj5*x3424))+(((-1.0)*r12*x3426))+(((-0.36403599)*x3418))+(((-1.0)*r10*sj5*x3422)));
evalcond[4]=(x3418+(((-1.0)*r20*x3431))+(((-1.0)*r20*x3422*x3425))+((r22*x3420))+((x3419*x3421))+(((-1.0)*cj4*r21*x3422)));
evalcond[5]=(((cj4*sj6*x3421))+((r20*x3419))+((r21*x3430))+(((0.931384876172381)*x3417))+(((-1.0)*r20*x3422*x3423))+((r22*x3428)));
evalcond[6]=(((r12*x3428))+((r10*x3419))+(((0.931384876172381)*x3418))+(((-1.0)*r10*x3422*x3423))+((r11*x3430))+((x3423*x3424)));
evalcond[7]=((((-1.0)*x3417))+(((-1.0)*r10*x3431))+(((-1.0)*cj4*r11*x3422))+((cj5*r11*x3419))+((r12*x3420))+(((-1.0)*r10*x3422*x3425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3432=((64920240.9929408)*cj6);
IkReal x3433=((64920240.9929408)*sj6);
if( IKabs((((r10*x3432))+(((-1.0)*r11*x3433))+(((-854213697.275536)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-854213697.275536)*pz))+((r20*x3432))+(((-1.0)*r21*x3433)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3432))+(((-1.0)*r11*x3433))+(((-854213697.275536)*py))))+IKsqr(((((-854213697.275536)*pz))+((r20*x3432))+(((-1.0)*r21*x3433))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x3432))+(((-1.0)*r11*x3433))+(((-854213697.275536)*py))), ((((-854213697.275536)*pz))+((r20*x3432))+(((-1.0)*r21*x3433))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3434=IKcos(j2);
IkReal x3435=IKsin(j2);
IkReal x3436=(sj4*sj6);
IkReal x3437=(sj4*sj5);
IkReal x3438=(cj5*r21);
IkReal x3439=((1.0)*cj6);
IkReal x3440=(cj4*cj5);
IkReal x3441=(r11*sj6);
IkReal x3442=(cj5*sj4);
IkReal x3443=((1.0)*cj5);
IkReal x3444=(r21*sj6);
IkReal x3445=(cj4*sj5);
IkReal x3446=((0.076)*cj6);
IkReal x3447=(cj6*sj4);
IkReal x3448=((1.0)*cj4*sj6);
evalcond[0]=((((-1.17066725011486e-9)*x3434))+(((-1.0)*pz))+((r20*x3446))+(((-0.076)*x3444)));
evalcond[1]=(((r10*x3446))+(((-1.17066725011486e-9)*x3435))+(((-1.0)*py))+(((-0.076)*x3441)));
evalcond[2]=((((-1.0)*r20*sj5*x3439))+(((-1.0)*r22*x3443))+((sj5*x3444))+(((0.07239889)*x3434)));
evalcond[3]=((((-1.0)*r12*x3443))+((sj5*x3441))+(((0.07239889)*x3435))+(((-1.0)*r10*sj5*x3439)));
evalcond[4]=((((-1.0)*cj4*r21*x3439))+x3435+(((-1.0)*r20*x3448))+((x3436*x3438))+(((-1.0)*r20*x3439*x3442))+((r22*x3437)));
evalcond[5]=(((r21*x3447))+((r20*x3436))+((cj4*sj6*x3438))+((r22*x3445))+(((-0.997375754782803)*x3434))+(((-1.0)*r20*x3439*x3440)));
evalcond[6]=(((r10*x3436))+((r11*x3447))+((r12*x3445))+(((-1.0)*r10*x3439*x3440))+(((-0.997375754782803)*x3435))+((x3440*x3441)));
evalcond[7]=((((-1.0)*cj4*r11*x3439))+(((-1.0)*r10*x3448))+(((-1.0)*x3434))+(((-1.0)*r10*x3439*x3442))+((r12*x3437))+((cj5*r11*x3436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3449=((0.584615384615385)*cj6);
IkReal x3450=((0.584615384615385)*sj6);
if( IKabs(((((-1.0)*r10*x3449))+(((7.69230769230769)*py))+((r11*x3450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x3450))+(((-1.0)*r20*x3449))+(((7.69230769230769)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3449))+(((7.69230769230769)*py))+((r11*x3450))))+IKsqr((((r21*x3450))+(((-1.0)*r20*x3449))+(((7.69230769230769)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x3449))+(((7.69230769230769)*py))+((r11*x3450))), (((r21*x3450))+(((-1.0)*r20*x3449))+(((7.69230769230769)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3451=IKcos(j2);
IkReal x3452=IKsin(j2);
IkReal x3453=(sj4*sj5);
IkReal x3454=(r21*sj4);
IkReal x3455=(cj5*sj6);
IkReal x3456=((0.076)*sj6);
IkReal x3457=(r20*sj6);
IkReal x3458=((1.0)*cj4);
IkReal x3459=(r10*sj4);
IkReal x3460=(cj4*sj5);
IkReal x3461=(cj6*r11);
IkReal x3462=((0.076)*cj6);
IkReal x3463=((1.0)*cj5*cj6);
IkReal x3464=(cj5*cj6*x3458);
evalcond[0]=((((0.13)*x3451))+((r20*x3462))+(((-1.0)*pz))+(((-1.0)*r21*x3456)));
evalcond[1]=((((0.13)*x3452))+(((-1.0)*py))+((r10*x3462))+(((-1.0)*r11*x3456)));
evalcond[2]=(((cj4*r21*x3455))+((cj6*x3454))+(((-1.0)*r20*x3464))+((sj4*x3457))+x3451+((r22*x3460)));
evalcond[3]=(((sj4*x3461))+(((-1.0)*r10*x3464))+((sj6*x3459))+((r12*x3460))+x3452+((cj4*r11*x3455)));
evalcond[4]=((((-1.0)*x3457*x3458))+((r22*x3453))+x3452+(((-1.0)*cj6*r21*x3458))+(((-1.0)*r20*sj4*x3463))+((x3454*x3455)));
evalcond[5]=(((r12*x3453))+(((-1.0)*x3458*x3461))+(((-1.0)*x3451))+(((-1.0)*x3459*x3463))+((r11*sj4*x3455))+(((-1.0)*r10*sj6*x3458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3465=((3.04)*cj6);
IkReal x3466=((3.04)*sj6);
if( IKabs(((((-1.0)*r11*x3466))+((r10*x3465))+(((-40.0)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x3466))+((r20*x3465))+(((-40.0)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x3466))+((r10*x3465))+(((-40.0)*py))))+IKsqr(((((-1.0)*r21*x3466))+((r20*x3465))+(((-40.0)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x3466))+((r10*x3465))+(((-40.0)*py))), ((((-1.0)*r21*x3466))+((r20*x3465))+(((-40.0)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3467=IKsin(j2);
IkReal x3468=IKcos(j2);
IkReal x3469=(sj4*sj5);
IkReal x3470=(cj5*sj4);
IkReal x3471=(r21*sj6);
IkReal x3472=(r11*sj6);
IkReal x3473=((1.0)*r20);
IkReal x3474=(cj4*sj6);
IkReal x3475=((1.0)*cj6);
IkReal x3476=(sj4*sj6);
IkReal x3477=(cj4*cj5);
IkReal x3478=(cj4*sj5);
IkReal x3479=((0.076)*cj6);
IkReal x3480=(cj6*sj4);
IkReal x3481=((1.0)*x3468);
IkReal x3482=(x3475*x3477);
evalcond[0]=((((-0.025)*x3468))+(((-1.0)*pz))+((r20*x3479))+(((-0.076)*x3471)));
evalcond[1]=((((-0.025)*x3467))+(((-1.0)*py))+((r10*x3479))+(((-0.076)*x3472)));
evalcond[2]=(((x3470*x3471))+x3467+(((-1.0)*x3473*x3474))+(((-1.0)*cj4*r21*x3475))+((r22*x3469))+(((-1.0)*cj6*x3470*x3473)));
evalcond[3]=(((x3471*x3477))+((r20*x3476))+((r21*x3480))+(((-1.0)*cj6*x3473*x3477))+(((-1.0)*x3481))+((r22*x3478)));
evalcond[4]=((((-1.0)*r10*x3482))+((r12*x3478))+((r10*x3476))+((r11*x3480))+(((-1.0)*x3467))+((x3472*x3477)));
evalcond[5]=((((-1.0)*r10*x3474))+((x3470*x3472))+(((-1.0)*r10*x3470*x3475))+((r12*x3469))+(((-1.0)*cj4*r11*x3475))+(((-1.0)*x3481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3483=IKPowWithIntegerCheck(((0.0525)+(((0.3425)*sj3))+(((0.0775)*cj3))),-1);
if(!x3483.valid){
continue;
}
CheckValue<IkReal> x3484=IKPowWithIntegerCheck(sj3,-1);
if(!x3484.valid){
continue;
}
if( IKabs(((x3483.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3484.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3483.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))))+IKsqr(((x3484.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x3483.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))), ((x3484.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3485=IKsin(j2);
IkReal x3486=IKcos(j2);
IkReal x3487=(sj4*sj6);
IkReal x3488=(sj4*sj5);
IkReal x3489=(cj5*r21);
IkReal x3490=((1.0)*cj6);
IkReal x3491=(cj4*cj5);
IkReal x3492=((0.3425)*sj3);
IkReal x3493=((0.0775)*cj3);
IkReal x3494=((1.0)*cj5);
IkReal x3495=((0.076)*sj6);
IkReal x3496=(cj5*sj4);
IkReal x3497=(sj5*sj6);
IkReal x3498=(cj4*sj5);
IkReal x3499=((0.076)*cj6);
IkReal x3500=(cj6*sj4);
IkReal x3501=((1.0)*cj4*sj6);
evalcond[0]=(((sj3*x3486))+(((-1.0)*r22*x3494))+(((-1.0)*r20*sj5*x3490))+((r21*x3497)));
evalcond[1]=((((-1.0)*r12*x3494))+(((-1.0)*r10*sj5*x3490))+((sj3*x3485))+((r11*x3497)));
evalcond[2]=(((x3487*x3489))+x3485+(((-1.0)*r20*x3490*x3496))+(((-1.0)*cj4*r21*x3490))+(((-1.0)*r20*x3501))+((r22*x3488)));
evalcond[3]=((((-1.0)*r20*x3490*x3491))+((r20*x3487))+((cj3*x3486))+((r22*x3498))+((cj4*sj6*x3489))+((r21*x3500)));
evalcond[4]=(((r20*x3499))+(((-1.0)*pz))+((x3486*x3492))+((x3486*x3493))+(((0.0525)*x3486))+(((-1.0)*r21*x3495)));
evalcond[5]=(((r10*x3487))+(((-1.0)*r10*x3490*x3491))+((r11*x3500))+((cj3*x3485))+((r11*sj6*x3491))+((r12*x3498)));
evalcond[6]=(((r10*x3499))+((x3485*x3493))+((x3485*x3492))+(((-1.0)*py))+(((0.0525)*x3485))+(((-1.0)*r11*x3495)));
evalcond[7]=((((-1.0)*r10*x3501))+((cj5*r11*x3487))+(((-1.0)*cj4*r11*x3490))+(((-1.0)*r10*x3490*x3496))+((r12*x3488))+(((-1.0)*x3486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3502=((1.0)*sj4);
IkReal x3503=(r21*sj6);
IkReal x3504=(cj6*r20);
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(sj3,-1);
if(!x3505.valid){
continue;
}
if( IKabs(((((-1.0)*r22*sj5*x3502))+((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*cj5*x3502*x3503))+((cj5*sj4*x3504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3505.value)*((((cj5*r22))+(((-1.0)*sj5*x3503))+((sj5*x3504)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*sj5*x3502))+((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*cj5*x3502*x3503))+((cj5*sj4*x3504))))+IKsqr(((x3505.value)*((((cj5*r22))+(((-1.0)*sj5*x3503))+((sj5*x3504))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*sj5*x3502))+((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*cj5*x3502*x3503))+((cj5*sj4*x3504))), ((x3505.value)*((((cj5*r22))+(((-1.0)*sj5*x3503))+((sj5*x3504))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3506=IKsin(j2);
IkReal x3507=IKcos(j2);
IkReal x3508=(sj4*sj6);
IkReal x3509=(sj4*sj5);
IkReal x3510=(cj5*r21);
IkReal x3511=((1.0)*cj6);
IkReal x3512=(cj4*cj5);
IkReal x3513=((0.3425)*sj3);
IkReal x3514=((0.0775)*cj3);
IkReal x3515=((1.0)*cj5);
IkReal x3516=((0.076)*sj6);
IkReal x3517=(cj5*sj4);
IkReal x3518=(sj5*sj6);
IkReal x3519=(cj4*sj5);
IkReal x3520=((0.076)*cj6);
IkReal x3521=(cj6*sj4);
IkReal x3522=((1.0)*cj4*sj6);
evalcond[0]=(((sj3*x3507))+((r21*x3518))+(((-1.0)*r22*x3515))+(((-1.0)*r20*sj5*x3511)));
evalcond[1]=(((sj3*x3506))+((r11*x3518))+(((-1.0)*r12*x3515))+(((-1.0)*r10*sj5*x3511)));
evalcond[2]=((((-1.0)*r20*x3522))+(((-1.0)*cj4*r21*x3511))+x3506+((x3508*x3510))+(((-1.0)*r20*x3511*x3517))+((r22*x3509)));
evalcond[3]=(((cj3*x3507))+((r21*x3521))+((r20*x3508))+((cj4*sj6*x3510))+((r22*x3519))+(((-1.0)*r20*x3511*x3512)));
evalcond[4]=(((x3507*x3514))+((x3507*x3513))+(((0.0525)*x3507))+((r20*x3520))+(((-1.0)*pz))+(((-1.0)*r21*x3516)));
evalcond[5]=(((r11*sj6*x3512))+((cj3*x3506))+((r10*x3508))+(((-1.0)*r10*x3511*x3512))+((r11*x3521))+((r12*x3519)));
evalcond[6]=((((0.0525)*x3506))+((x3506*x3514))+((x3506*x3513))+((r10*x3520))+(((-1.0)*py))+(((-1.0)*r11*x3516)));
evalcond[7]=(((cj5*r11*x3508))+(((-1.0)*r10*x3522))+(((-1.0)*cj4*r11*x3511))+(((-1.0)*r10*x3511*x3517))+((r12*x3509))+(((-1.0)*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3523=(cj6*sj5);
IkReal x3524=((1.0)*sj5*sj6);
CheckValue<IkReal> x3525 = IKatan2WithCheck(IkReal((((cj5*r12))+((r10*x3523))+(((-1.0)*r11*x3524)))),IkReal((((cj5*r22))+((r20*x3523))+(((-1.0)*r21*x3524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3525.valid){
continue;
}
CheckValue<IkReal> x3526=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3526.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3525.value)+(((1.5707963267949)*(x3526.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3527=IKsin(j2);
IkReal x3528=IKcos(j2);
IkReal x3529=(sj4*sj6);
IkReal x3530=(sj4*sj5);
IkReal x3531=(cj5*r21);
IkReal x3532=((1.0)*cj6);
IkReal x3533=(cj4*cj5);
IkReal x3534=((0.3425)*sj3);
IkReal x3535=((0.0775)*cj3);
IkReal x3536=((1.0)*cj5);
IkReal x3537=((0.076)*sj6);
IkReal x3538=(cj5*sj4);
IkReal x3539=(sj5*sj6);
IkReal x3540=(cj4*sj5);
IkReal x3541=((0.076)*cj6);
IkReal x3542=(cj6*sj4);
IkReal x3543=((1.0)*cj4*sj6);
evalcond[0]=(((r21*x3539))+(((-1.0)*r20*sj5*x3532))+(((-1.0)*r22*x3536))+((sj3*x3528)));
evalcond[1]=(((r11*x3539))+(((-1.0)*r10*sj5*x3532))+(((-1.0)*r12*x3536))+((sj3*x3527)));
evalcond[2]=((((-1.0)*r20*x3543))+(((-1.0)*cj4*r21*x3532))+((r22*x3530))+(((-1.0)*r20*x3532*x3538))+x3527+((x3529*x3531)));
evalcond[3]=(((r20*x3529))+((r21*x3542))+(((-1.0)*r20*x3532*x3533))+((cj4*sj6*x3531))+((r22*x3540))+((cj3*x3528)));
evalcond[4]=(((r20*x3541))+(((0.0525)*x3528))+(((-1.0)*r21*x3537))+(((-1.0)*pz))+((x3528*x3535))+((x3528*x3534)));
evalcond[5]=((((-1.0)*r10*x3532*x3533))+((r10*x3529))+((r11*sj6*x3533))+((r12*x3540))+((r11*x3542))+((cj3*x3527)));
evalcond[6]=((((-1.0)*r11*x3537))+(((0.0525)*x3527))+(((-1.0)*py))+((x3527*x3535))+((x3527*x3534))+((r10*x3541)));
evalcond[7]=((((-1.0)*x3528))+((r12*x3530))+(((-1.0)*r10*x3532*x3538))+((cj5*r11*x3529))+(((-1.0)*r10*x3543))+(((-1.0)*cj4*r11*x3532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3544=(sj4*sj5);
IkReal x3545=((1.0)*cj6);
IkReal x3546=(cj5*sj4);
IkReal x3547=((1.0)*cj4*sj6);
CheckValue<IkReal> x3548=IKPowWithIntegerCheck(sj1,-1);
if(!x3548.valid){
continue;
}
if( IKabs(((x3548.value)*(((((-1.0)*r20*x3547))+(((-1.0)*r20*x3545*x3546))+((r21*sj6*x3546))+((r22*x3544))+(((-1.0)*cj4*r21*x3545)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x3545*x3546))+(((-1.0)*r10*x3547))+((r12*x3544))+((r11*sj6*x3546))+(((-1.0)*cj4*r11*x3545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3548.value)*(((((-1.0)*r20*x3547))+(((-1.0)*r20*x3545*x3546))+((r21*sj6*x3546))+((r22*x3544))+(((-1.0)*cj4*r21*x3545))))))+IKsqr(((((-1.0)*r10*x3545*x3546))+(((-1.0)*r10*x3547))+((r12*x3544))+((r11*sj6*x3546))+(((-1.0)*cj4*r11*x3545))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x3548.value)*(((((-1.0)*r20*x3547))+(((-1.0)*r20*x3545*x3546))+((r21*sj6*x3546))+((r22*x3544))+(((-1.0)*cj4*r21*x3545))))), ((((-1.0)*r10*x3545*x3546))+(((-1.0)*r10*x3547))+((r12*x3544))+((r11*sj6*x3546))+(((-1.0)*cj4*r11*x3545))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x3549=IKsin(j2);
IkReal x3550=(cj5*sj4);
IkReal x3551=((1.0)*cj6);
IkReal x3552=(sj4*sj5);
IkReal x3553=((1.0)*cj4*sj6);
evalcond[0]=(((cj1*x3549))+(((-1.0)*cj4*r01*x3551))+(((-1.0)*r00*x3553))+(((-1.0)*r00*x3550*x3551))+((r01*sj6*x3550))+((r02*x3552)));
evalcond[1]=((((-1.0)*r10*x3553))+(((-1.0)*r10*x3550*x3551))+((r12*x3552))+((r11*sj6*x3550))+(((-1.0)*(IKcos(j2))))+(((-1.0)*cj4*r11*x3551)));
evalcond[2]=((((-1.0)*r20*x3553))+((r21*sj6*x3550))+(((-1.0)*r20*x3550*x3551))+(((-1.0)*cj4*r21*x3551))+((r22*x3552))+(((-1.0)*sj1*x3549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x3554=((1.0)*sj5);
IkReal x3555=(r11*sj6);
IkReal x3556=((1.0)*sj4);
IkReal x3557=(cj6*r10);
IkReal x3558=(cj4*cj5);
j3eval[0]=sj2;
j3eval[1]=IKsign(sj2);
j3eval[2]=((IKabs((((cj5*r12))+(((-1.0)*x3554*x3555))+((sj5*x3557)))))+(IKabs(((((-1.0)*x3555*x3558))+(((-1.0)*cj6*r11*x3556))+(((-1.0)*r10*sj6*x3556))+(((-1.0)*cj4*r12*x3554))+((x3557*x3558))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj0=0;
cj0=1.0;
j0=0;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj0=0;
cj0=1.0;
j0=0;
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3559=(sj1*sj5);
IkReal x3560=(r21*sj6);
IkReal x3561=((1.0)*cj6);
IkReal x3562=(r01*sj6);
IkReal x3563=(cj1*sj5);
IkReal x3564=(cj1*cj5);
IkReal x3565=((1.0)*cj5*sj1);
if( IKabs((((x3559*x3560))+(((-1.0)*r20*x3559*x3561))+((cj6*r00*x3563))+(((-1.0)*x3562*x3563))+(((-1.0)*r22*x3565))+((r02*x3564)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3559*x3562))+(((-1.0)*r02*x3565))+(((-1.0)*r00*x3559*x3561))+(((-1.0)*r22*x3564))+(((-1.0)*r20*x3561*x3563))+((x3560*x3563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3559*x3560))+(((-1.0)*r20*x3559*x3561))+((cj6*r00*x3563))+(((-1.0)*x3562*x3563))+(((-1.0)*r22*x3565))+((r02*x3564))))+IKsqr((((x3559*x3562))+(((-1.0)*r02*x3565))+(((-1.0)*r00*x3559*x3561))+(((-1.0)*r22*x3564))+(((-1.0)*r20*x3561*x3563))+((x3560*x3563))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x3559*x3560))+(((-1.0)*r20*x3559*x3561))+((cj6*r00*x3563))+(((-1.0)*x3562*x3563))+(((-1.0)*r22*x3565))+((r02*x3564))), (((x3559*x3562))+(((-1.0)*r02*x3565))+(((-1.0)*r00*x3559*x3561))+(((-1.0)*r22*x3564))+(((-1.0)*r20*x3561*x3563))+((x3560*x3563))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x3566=IKcos(j3);
IkReal x3567=IKsin(j3);
IkReal x3568=(r21*sj6);
IkReal x3569=(r01*sj6);
IkReal x3570=((1.0)*cj5);
IkReal x3571=(cj6*r20);
IkReal x3572=((1.0)*sj5);
IkReal x3573=(sj4*sj6);
IkReal x3574=(cj6*r00);
IkReal x3575=(cj6*sj4);
IkReal x3576=(cj4*cj5);
IkReal x3577=(cj4*sj5);
IkReal x3578=(cj1*x3567);
IkReal x3579=(sj1*x3567);
IkReal x3580=(sj1*x3566);
IkReal x3581=(cj1*x3566);
IkReal x3582=((1.0)*x3580);
evalcond[0]=(((sj5*x3569))+x3578+(((-1.0)*x3572*x3574))+(((-1.0)*r02*x3570))+(((-1.0)*x3582)));
evalcond[1]=(((sj5*x3568))+(((-1.0)*x3571*x3572))+(((-1.0)*r22*x3570))+(((-1.0)*x3579))+(((-1.0)*x3581)));
evalcond[2]=(((r00*x3573))+((r01*x3575))+(((-1.0)*cj4*x3570*x3574))+x3579+x3581+((x3569*x3576))+((r02*x3577)));
evalcond[3]=(((r21*x3575))+(((-1.0)*cj4*x3570*x3571))+x3578+((r20*x3573))+((x3568*x3576))+((r22*x3577))+(((-1.0)*x3582)));
evalcond[4]=((((-0.3425)*x3581))+(((-0.076)*x3568))+(((-0.0775)*x3580))+(((-1.0)*pz))+(((0.0775)*x3578))+(((-0.3425)*x3579))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((0.076)*x3571)));
evalcond[5]=((((0.0525)*cj1))+(((-0.3425)*x3580))+(((-0.076)*x3569))+(((0.3425)*x3578))+(((-1.0)*px))+(((0.0775)*x3579))+(((0.293)*sj1))+(((0.0775)*x3581))+(((0.076)*x3574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3583=(sj5*sj6);
IkReal x3584=((1.0)*sj1);
IkReal x3585=(cj5*r22);
IkReal x3586=(cj6*sj5);
IkReal x3587=(cj5*r02);
IkReal x3588=((1.0)*cj1);
if( IKabs(((((-1.0)*x3587*x3588))+((r20*sj1*x3586))+(((-1.0)*r21*x3583*x3584))+((cj1*r01*x3583))+(((-1.0)*r00*x3586*x3588))+((sj1*x3585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3584*x3586))+(((-1.0)*r20*x3586*x3588))+((cj1*r21*x3583))+((r01*sj1*x3583))+(((-1.0)*x3584*x3587))+(((-1.0)*x3585*x3588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3587*x3588))+((r20*sj1*x3586))+(((-1.0)*r21*x3583*x3584))+((cj1*r01*x3583))+(((-1.0)*r00*x3586*x3588))+((sj1*x3585))))+IKsqr(((((-1.0)*r00*x3584*x3586))+(((-1.0)*r20*x3586*x3588))+((cj1*r21*x3583))+((r01*sj1*x3583))+(((-1.0)*x3584*x3587))+(((-1.0)*x3585*x3588))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x3587*x3588))+((r20*sj1*x3586))+(((-1.0)*r21*x3583*x3584))+((cj1*r01*x3583))+(((-1.0)*r00*x3586*x3588))+((sj1*x3585))), ((((-1.0)*r00*x3584*x3586))+(((-1.0)*r20*x3586*x3588))+((cj1*r21*x3583))+((r01*sj1*x3583))+(((-1.0)*x3584*x3587))+(((-1.0)*x3585*x3588))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x3589=IKsin(j3);
IkReal x3590=IKcos(j3);
IkReal x3591=(r21*sj6);
IkReal x3592=(r01*sj6);
IkReal x3593=((1.0)*cj5);
IkReal x3594=(cj6*r20);
IkReal x3595=(sj4*sj6);
IkReal x3596=((1.0)*sj5);
IkReal x3597=(cj6*r00);
IkReal x3598=(cj6*sj4);
IkReal x3599=(cj4*cj5);
IkReal x3600=(cj4*sj5);
IkReal x3601=(sj1*x3589);
IkReal x3602=(cj1*x3589);
IkReal x3603=(sj1*x3590);
IkReal x3604=(cj1*x3590);
IkReal x3605=((1.0)*x3604);
evalcond[0]=((((-1.0)*x3594*x3596))+(((-1.0)*r22*x3593))+((sj5*x3591))+x3601+(((-1.0)*x3605)));
evalcond[1]=(((sj5*x3592))+(((-1.0)*x3603))+(((-1.0)*x3602))+(((-1.0)*r02*x3593))+(((-1.0)*x3596*x3597)));
evalcond[2]=(((r21*x3598))+((x3591*x3599))+((r20*x3595))+(((-1.0)*cj4*x3593*x3594))+((r22*x3600))+x3603+x3602);
evalcond[3]=(((r02*x3600))+(((-1.0)*cj4*x3593*x3597))+((x3592*x3599))+x3601+((r00*x3595))+(((-1.0)*x3605))+((r01*x3598)));
evalcond[4]=((((0.3425)*x3601))+(((-0.3425)*x3604))+(((-1.0)*pz))+(((-0.076)*x3591))+(((0.293)*cj1))+(((0.076)*x3594))+(((0.0525)*sj1))+(((0.0775)*x3603))+(((0.0775)*x3602)));
evalcond[5]=((((-0.0525)*cj1))+(((-0.3425)*x3603))+(((-0.3425)*x3602))+(((-1.0)*px))+(((-0.076)*x3592))+(((0.293)*sj1))+(((-0.0775)*x3604))+(((0.076)*x3597))+(((0.0775)*x3601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3606=(r21*sj6);
IkReal x3607=(cj6*r20);
IkReal x3608=(cj5*r22);
IkReal x3609=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+((x3606*x3609))+(((-0.980645161290323)*x3607))+(((12.9032258064516)*pz))+(((0.980645161290323)*x3606))+(((-1.0)*x3607*x3609))+(((-4.41935483870968)*x3608)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x3606))+(((-1.0)*x3608))+(((-1.0)*sj5*x3607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+((x3606*x3609))+(((-0.980645161290323)*x3607))+(((12.9032258064516)*pz))+(((0.980645161290323)*x3606))+(((-1.0)*x3607*x3609))+(((-4.41935483870968)*x3608))))+IKsqr((((sj5*x3606))+(((-1.0)*x3608))+(((-1.0)*sj5*x3607))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+((x3606*x3609))+(((-0.980645161290323)*x3607))+(((12.9032258064516)*pz))+(((0.980645161290323)*x3606))+(((-1.0)*x3607*x3609))+(((-4.41935483870968)*x3608))), (((sj5*x3606))+(((-1.0)*x3608))+(((-1.0)*sj5*x3607))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3610=IKsin(j3);
IkReal x3611=IKcos(j3);
IkReal x3612=(sj4*sj6);
IkReal x3613=((1.0)*cj6);
IkReal x3614=(cj4*cj5);
IkReal x3615=((0.076)*sj6);
IkReal x3616=(r11*sj6);
IkReal x3617=((1.0)*cj5);
IkReal x3618=(cj6*sj4);
IkReal x3619=(sj5*sj6);
IkReal x3620=(cj4*sj5);
IkReal x3621=((0.076)*cj6);
IkReal x3622=((0.0775)*x3611);
IkReal x3623=(cj2*x3610);
IkReal x3624=(sj2*x3610);
evalcond[0]=((((-1.0)*x3611))+((r21*x3619))+(((-1.0)*r22*x3617))+(((-1.0)*r20*sj5*x3613)));
evalcond[1]=(((sj5*x3616))+(((-1.0)*r10*sj5*x3613))+(((-1.0)*r12*x3617))+x3624);
evalcond[2]=(x3623+(((-1.0)*r02*x3617))+((r01*x3619))+(((-1.0)*r00*sj5*x3613)));
evalcond[3]=((0.293)+(((-0.3425)*x3611))+((r20*x3621))+(((-1.0)*pz))+(((-1.0)*r21*x3615))+(((0.0775)*x3610)));
evalcond[4]=((((-1.0)*r20*x3613*x3614))+((r21*sj6*x3614))+x3610+((r21*x3618))+((r22*x3620))+((r20*x3612)));
evalcond[5]=(((cj2*x3622))+(((0.0525)*cj2))+(((-1.0)*r01*x3615))+((r00*x3621))+(((-1.0)*px))+(((0.3425)*x3623)));
evalcond[6]=(((r10*x3621))+(((-1.0)*r11*x3615))+((sj2*x3622))+(((-1.0)*py))+(((0.3425)*x3624))+(((0.0525)*sj2)));
evalcond[7]=(((r11*x3618))+((sj2*x3611))+((r10*x3612))+((r12*x3620))+(((-1.0)*r10*x3613*x3614))+((x3614*x3616)));
evalcond[8]=(((r01*sj6*x3614))+(((-1.0)*r00*x3613*x3614))+((r02*x3620))+((r00*x3612))+((r01*x3618))+((cj2*x3611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3625=(cj6*r20);
IkReal x3626=(cj5*r22);
IkReal x3627=(r21*sj6);
IkReal x3628=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((-0.980645161290323)*x3627))+(((0.980645161290323)*x3625))+(((-1.0)*x3627*x3628))+((x3625*x3628))+(((4.41935483870968)*x3626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x3627))+x3626+((sj5*x3625)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((-0.980645161290323)*x3627))+(((0.980645161290323)*x3625))+(((-1.0)*x3627*x3628))+((x3625*x3628))+(((4.41935483870968)*x3626))))+IKsqr(((((-1.0)*sj5*x3627))+x3626+((sj5*x3625))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((-0.980645161290323)*x3627))+(((0.980645161290323)*x3625))+(((-1.0)*x3627*x3628))+((x3625*x3628))+(((4.41935483870968)*x3626))), ((((-1.0)*sj5*x3627))+x3626+((sj5*x3625))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3629=IKsin(j3);
IkReal x3630=IKcos(j3);
IkReal x3631=(sj4*sj6);
IkReal x3632=(cj4*sj5);
IkReal x3633=((1.0)*cj6);
IkReal x3634=(cj4*cj5);
IkReal x3635=((0.076)*sj6);
IkReal x3636=(r11*sj6);
IkReal x3637=((1.0)*cj5);
IkReal x3638=(r21*sj6);
IkReal x3639=(r01*sj6);
IkReal x3640=(cj6*sj4);
IkReal x3641=((0.076)*cj6);
IkReal x3642=((0.0775)*x3630);
IkReal x3643=(cj2*x3629);
IkReal x3644=(sj2*x3629);
evalcond[0]=(((sj5*x3638))+(((-1.0)*r22*x3637))+x3630+(((-1.0)*r20*sj5*x3633)));
evalcond[1]=(((sj5*x3636))+(((-1.0)*r12*x3637))+(((-1.0)*r10*sj5*x3633))+x3644);
evalcond[2]=(((sj5*x3639))+(((-1.0)*r02*x3637))+(((-1.0)*x3643))+(((-1.0)*r00*sj5*x3633)));
evalcond[3]=((-0.293)+(((0.3425)*x3630))+(((-0.0775)*x3629))+((r20*x3641))+(((-1.0)*pz))+(((-1.0)*r21*x3635)));
evalcond[4]=((((-0.0525)*cj2))+((r00*x3641))+(((-1.0)*r01*x3635))+(((-1.0)*cj2*x3642))+(((-1.0)*px))+(((-0.3425)*x3643)));
evalcond[5]=((((-1.0)*r11*x3635))+((sj2*x3642))+(((-1.0)*py))+((r10*x3641))+(((0.3425)*x3644))+(((0.0525)*sj2)));
evalcond[6]=(((r22*x3632))+((x3634*x3638))+((r21*x3640))+((r20*x3631))+(((-1.0)*r20*x3633*x3634))+(((-1.0)*x3629)));
evalcond[7]=(((sj2*x3630))+((r12*x3632))+((r11*x3640))+((x3634*x3636))+(((-1.0)*r10*x3633*x3634))+((r10*x3631)));
evalcond[8]=(((r02*x3632))+((r01*x3640))+(((-1.0)*cj2*x3630))+((x3634*x3639))+(((-1.0)*r00*x3633*x3634))+((r00*x3631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(sj2,-1);
if(!x3651.valid){
continue;
}
IkReal x3645=x3651.value;
IkReal x3646=(cj1*cj2);
IkReal x3647=(cj5*r12);
IkReal x3648=(sj2*sj5);
IkReal x3649=(cj6*r10*sj5);
IkReal x3650=((1.0)*r11*sj5*sj6);
CheckValue<IkReal> x3652=IKPowWithIntegerCheck(sj1,-1);
if(!x3652.valid){
continue;
}
if( IKabs((x3645*((x3649+x3647+(((-1.0)*x3650)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3645*(x3652.value)*(((((-1.0)*x3646*x3650))+(((-1.0)*cj5*r02*sj2))+((r01*sj6*x3648))+(((-1.0)*cj6*r00*x3648))+((x3646*x3649))+((x3646*x3647)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3645*((x3649+x3647+(((-1.0)*x3650))))))+IKsqr((x3645*(x3652.value)*(((((-1.0)*x3646*x3650))+(((-1.0)*cj5*r02*sj2))+((r01*sj6*x3648))+(((-1.0)*cj6*r00*x3648))+((x3646*x3649))+((x3646*x3647))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x3645*((x3649+x3647+(((-1.0)*x3650))))), (x3645*(x3652.value)*(((((-1.0)*x3646*x3650))+(((-1.0)*cj5*r02*sj2))+((r01*sj6*x3648))+(((-1.0)*cj6*r00*x3648))+((x3646*x3649))+((x3646*x3647))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3653=IKsin(j3);
IkReal x3654=IKcos(j3);
IkReal x3655=(cj4*cj5);
IkReal x3656=((0.076)*sj6);
IkReal x3657=((0.3425)*cj2);
IkReal x3658=(sj4*sj6);
IkReal x3659=(cj2*sj1);
IkReal x3660=((1.0)*cj5);
IkReal x3661=(sj5*sj6);
IkReal x3662=(cj4*sj5);
IkReal x3663=(cj1*cj2);
IkReal x3664=(cj6*sj4);
IkReal x3665=((0.076)*cj6);
IkReal x3666=((1.0)*cj6*r10);
IkReal x3667=(cj1*x3653);
IkReal x3668=((0.0775)*x3654);
IkReal x3669=((0.3425)*x3654);
IkReal x3670=((1.0)*cj6*r20);
IkReal x3671=((1.0)*x3654);
IkReal x3672=((1.0)*cj6*r00);
IkReal x3673=(sj2*x3653);
IkReal x3674=(sj1*x3653);
evalcond[0]=(((r11*x3661))+x3673+(((-1.0)*sj5*x3666))+(((-1.0)*r12*x3660)));
evalcond[1]=((((-1.0)*r02*x3660))+((x3653*x3663))+((r01*x3661))+(((-1.0)*sj1*x3671))+(((-1.0)*sj5*x3672)));
evalcond[2]=((((-1.0)*r22*x3660))+(((-1.0)*sj5*x3670))+(((-1.0)*cj1*x3671))+((r21*x3661))+(((-1.0)*x3653*x3659)));
evalcond[3]=(((r10*x3665))+(((-1.0)*py))+(((-1.0)*r11*x3656))+(((0.3425)*x3673))+((sj2*x3668))+(((0.0525)*sj2)));
evalcond[4]=(((r11*sj6*x3655))+((r11*x3664))+((r12*x3662))+((sj2*x3654))+((r10*x3658))+(((-1.0)*x3655*x3666)));
evalcond[5]=(((r00*x3658))+((r01*x3664))+x3674+((r01*sj6*x3655))+((x3654*x3663))+((r02*x3662))+(((-1.0)*x3655*x3672)));
evalcond[6]=(((r22*x3662))+((r21*sj6*x3655))+((r20*x3658))+x3667+(((-1.0)*x3659*x3671))+((r21*x3664))+(((-1.0)*x3655*x3670)));
evalcond[7]=((((-1.0)*r21*x3656))+(((-1.0)*x3657*x3674))+(((-1.0)*x3659*x3668))+((r20*x3665))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x3667))+(((-1.0)*cj1*x3669))+(((-0.0525)*x3659)));
evalcond[8]=((((0.0525)*x3663))+(((-1.0)*sj1*x3669))+((r00*x3665))+((x3657*x3667))+(((-1.0)*px))+(((0.0775)*x3674))+(((-1.0)*r01*x3656))+(((0.293)*sj1))+((x3663*x3668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x3679=IKPowWithIntegerCheck(sj2,-1);
if(!x3679.valid){
continue;
}
IkReal x3675=x3679.value;
IkReal x3676=(cj6*r10);
IkReal x3677=(cj5*r12);
IkReal x3678=(r11*sj5*sj6);
if( IKabs((x3675*((((sj5*x3676))+x3677+(((-1.0)*x3678)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x3675*(((((137.0)*x3678))+(((30.4)*r11*sj6))+(((400.0)*py))+(((-21.0)*sj2))+(((-30.4)*x3676))+(((-137.0)*sj5*x3676))+(((-137.0)*x3677)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3675*((((sj5*x3676))+x3677+(((-1.0)*x3678))))))+IKsqr(((0.032258064516129)*x3675*(((((137.0)*x3678))+(((30.4)*r11*sj6))+(((400.0)*py))+(((-21.0)*sj2))+(((-30.4)*x3676))+(((-137.0)*sj5*x3676))+(((-137.0)*x3677))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x3675*((((sj5*x3676))+x3677+(((-1.0)*x3678))))), ((0.032258064516129)*x3675*(((((137.0)*x3678))+(((30.4)*r11*sj6))+(((400.0)*py))+(((-21.0)*sj2))+(((-30.4)*x3676))+(((-137.0)*sj5*x3676))+(((-137.0)*x3677))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3680=IKsin(j3);
IkReal x3681=IKcos(j3);
IkReal x3682=(cj4*cj5);
IkReal x3683=((0.076)*sj6);
IkReal x3684=((0.3425)*cj2);
IkReal x3685=(sj4*sj6);
IkReal x3686=(cj2*sj1);
IkReal x3687=((1.0)*cj5);
IkReal x3688=(sj5*sj6);
IkReal x3689=(cj4*sj5);
IkReal x3690=(cj1*cj2);
IkReal x3691=(cj6*sj4);
IkReal x3692=((0.076)*cj6);
IkReal x3693=((1.0)*cj6*r10);
IkReal x3694=(cj1*x3680);
IkReal x3695=((0.0775)*x3681);
IkReal x3696=((0.3425)*x3681);
IkReal x3697=((1.0)*cj6*r20);
IkReal x3698=((1.0)*x3681);
IkReal x3699=((1.0)*cj6*r00);
IkReal x3700=(sj2*x3680);
IkReal x3701=(sj1*x3680);
evalcond[0]=((((-1.0)*sj5*x3693))+x3700+(((-1.0)*r12*x3687))+((r11*x3688)));
evalcond[1]=((((-1.0)*sj1*x3698))+(((-1.0)*sj5*x3699))+((r01*x3688))+((x3680*x3690))+(((-1.0)*r02*x3687)));
evalcond[2]=((((-1.0)*r22*x3687))+((r21*x3688))+(((-1.0)*sj5*x3697))+(((-1.0)*cj1*x3698))+(((-1.0)*x3680*x3686)));
evalcond[3]=((((0.3425)*x3700))+((sj2*x3695))+(((-1.0)*py))+(((-1.0)*r11*x3683))+(((0.0525)*sj2))+((r10*x3692)));
evalcond[4]=(((r10*x3685))+((r12*x3689))+(((-1.0)*x3682*x3693))+((sj2*x3681))+((r11*x3691))+((r11*sj6*x3682)));
evalcond[5]=(((r01*x3691))+((r00*x3685))+((r01*sj6*x3682))+x3701+(((-1.0)*x3682*x3699))+((r02*x3689))+((x3681*x3690)));
evalcond[6]=((((-1.0)*x3686*x3698))+((r21*x3691))+x3694+((r20*x3685))+(((-1.0)*x3682*x3697))+((r21*sj6*x3682))+((r22*x3689)));
evalcond[7]=((((-1.0)*x3686*x3695))+((r20*x3692))+(((-1.0)*r21*x3683))+(((0.0775)*x3694))+(((-1.0)*cj1*x3696))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*x3686))+(((-1.0)*x3684*x3701)));
evalcond[8]=((((-1.0)*sj1*x3696))+((r00*x3692))+(((0.0775)*x3701))+(((-1.0)*px))+(((-1.0)*r01*x3683))+(((0.0525)*x3690))+((x3684*x3694))+(((0.293)*sj1))+((x3690*x3695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3702=((1.0)*sj5);
IkReal x3703=(r11*sj6);
IkReal x3704=((1.0)*sj4);
IkReal x3705=(cj6*r10);
IkReal x3706=(cj4*cj5);
CheckValue<IkReal> x3707=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x3707.valid){
continue;
}
CheckValue<IkReal> x3708 = IKatan2WithCheck(IkReal((((cj5*r12))+((sj5*x3705))+(((-1.0)*x3702*x3703)))),IkReal(((((-1.0)*x3703*x3706))+((x3705*x3706))+(((-1.0)*cj6*r11*x3704))+(((-1.0)*r10*sj6*x3704))+(((-1.0)*cj4*r12*x3702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3708.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3707.value)))+(x3708.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3709=IKsin(j3);
IkReal x3710=IKcos(j3);
IkReal x3711=(cj4*cj5);
IkReal x3712=((0.076)*sj6);
IkReal x3713=((0.3425)*cj2);
IkReal x3714=(sj4*sj6);
IkReal x3715=(cj2*sj1);
IkReal x3716=((1.0)*cj5);
IkReal x3717=(sj5*sj6);
IkReal x3718=(cj4*sj5);
IkReal x3719=(cj1*cj2);
IkReal x3720=(cj6*sj4);
IkReal x3721=((0.076)*cj6);
IkReal x3722=((1.0)*cj6*r10);
IkReal x3723=(cj1*x3709);
IkReal x3724=((0.0775)*x3710);
IkReal x3725=((0.3425)*x3710);
IkReal x3726=((1.0)*cj6*r20);
IkReal x3727=((1.0)*x3710);
IkReal x3728=((1.0)*cj6*r00);
IkReal x3729=(sj2*x3709);
IkReal x3730=(sj1*x3709);
evalcond[0]=(((r11*x3717))+(((-1.0)*r12*x3716))+x3729+(((-1.0)*sj5*x3722)));
evalcond[1]=((((-1.0)*r02*x3716))+((x3709*x3719))+((r01*x3717))+(((-1.0)*sj1*x3727))+(((-1.0)*sj5*x3728)));
evalcond[2]=((((-1.0)*x3709*x3715))+(((-1.0)*cj1*x3727))+((r21*x3717))+(((-1.0)*sj5*x3726))+(((-1.0)*r22*x3716)));
evalcond[3]=((((0.3425)*x3729))+(((-1.0)*py))+((sj2*x3724))+(((-1.0)*r11*x3712))+((r10*x3721))+(((0.0525)*sj2)));
evalcond[4]=(((r12*x3718))+((r11*x3720))+((r11*sj6*x3711))+(((-1.0)*x3711*x3722))+((r10*x3714))+((sj2*x3710)));
evalcond[5]=(((x3710*x3719))+((r01*sj6*x3711))+((r01*x3720))+((r00*x3714))+x3730+(((-1.0)*x3711*x3728))+((r02*x3718)));
evalcond[6]=(((r20*x3714))+x3723+(((-1.0)*x3711*x3726))+((r21*sj6*x3711))+((r22*x3718))+((r21*x3720))+(((-1.0)*x3715*x3727)));
evalcond[7]=(((r20*x3721))+(((-0.0525)*x3715))+(((0.0775)*x3723))+(((-1.0)*cj1*x3725))+(((-1.0)*x3713*x3730))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*r21*x3712))+(((-1.0)*x3715*x3724)));
evalcond[8]=((((0.0775)*x3730))+(((0.0525)*x3719))+((x3719*x3724))+((r00*x3721))+(((-1.0)*r01*x3712))+(((-1.0)*px))+(((-1.0)*sj1*x3725))+((x3713*x3723))+(((0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3731=(cj4*sj6);
IkReal x3732=(cj4*cj6);
IkReal x3733=((1.0)*r10);
IkReal x3734=(sj4*sj5);
IkReal x3735=(cj5*cj6*sj4);
IkReal x3736=(cj5*sj4*sj6);
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(cj1,-1);
if(!x3737.valid){
continue;
}
if( IKabs(((x3737.value)*((((r01*x3732))+(((-1.0)*r02*x3734))+((r00*x3731))+((r00*x3735))+(((-1.0)*r01*x3736)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3736))+((r12*x3734))+(((-1.0)*x3731*x3733))+(((-1.0)*r11*x3732))+(((-1.0)*x3733*x3735)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3737.value)*((((r01*x3732))+(((-1.0)*r02*x3734))+((r00*x3731))+((r00*x3735))+(((-1.0)*r01*x3736))))))+IKsqr((((r11*x3736))+((r12*x3734))+(((-1.0)*x3731*x3733))+(((-1.0)*r11*x3732))+(((-1.0)*x3733*x3735))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x3737.value)*((((r01*x3732))+(((-1.0)*r02*x3734))+((r00*x3731))+((r00*x3735))+(((-1.0)*r01*x3736))))), (((r11*x3736))+((r12*x3734))+(((-1.0)*x3731*x3733))+(((-1.0)*r11*x3732))+(((-1.0)*x3733*x3735))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x3738=IKsin(j2);
IkReal x3739=(cj5*sj4);
IkReal x3740=((1.0)*cj6);
IkReal x3741=(sj4*sj5);
IkReal x3742=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r00*x3742))+((r01*sj6*x3739))+(((-1.0)*cj4*r01*x3740))+((r02*x3741))+(((-1.0)*r00*x3739*x3740))+((cj1*x3738)));
evalcond[1]=((((-1.0)*r10*x3739*x3740))+(((-1.0)*cj4*r11*x3740))+((r12*x3741))+((r11*sj6*x3739))+(((-1.0)*r10*x3742))+(((-1.0)*(IKcos(j2)))));
evalcond[2]=((((-1.0)*r20*x3742))+(((-1.0)*sj1*x3738))+(((-1.0)*r20*x3739*x3740))+((r22*x3741))+((r21*sj6*x3739))+(((-1.0)*cj4*r21*x3740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x3743=((1.0)*sj5);
IkReal x3744=(r11*sj6);
IkReal x3745=((1.0)*sj4);
IkReal x3746=(cj6*r10);
IkReal x3747=(cj4*cj5);
j3eval[0]=sj2;
j3eval[1]=IKsign(sj2);
j3eval[2]=((IKabs(((((-1.0)*cj4*r12*x3743))+(((-1.0)*r10*sj6*x3745))+(((-1.0)*cj6*r11*x3745))+((x3746*x3747))+(((-1.0)*x3744*x3747)))))+(IKabs((((cj5*r12))+(((-1.0)*x3743*x3744))+((sj5*x3746))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj0=0;
cj0=1.0;
j0=0;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj0=0;
cj0=1.0;
j0=0;
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3748=(sj1*sj5);
IkReal x3749=(r21*sj6);
IkReal x3750=((1.0)*cj6);
IkReal x3751=(r01*sj6);
IkReal x3752=(cj1*sj5);
IkReal x3753=(cj1*cj5);
IkReal x3754=((1.0)*cj5*sj1);
if( IKabs(((((-1.0)*r22*x3754))+(((-1.0)*r20*x3748*x3750))+((cj6*r00*x3752))+((x3748*x3749))+((r02*x3753))+(((-1.0)*x3751*x3752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3748*x3751))+((x3749*x3752))+(((-1.0)*r00*x3748*x3750))+(((-1.0)*r20*x3750*x3752))+(((-1.0)*r02*x3754))+(((-1.0)*r22*x3753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3754))+(((-1.0)*r20*x3748*x3750))+((cj6*r00*x3752))+((x3748*x3749))+((r02*x3753))+(((-1.0)*x3751*x3752))))+IKsqr((((x3748*x3751))+((x3749*x3752))+(((-1.0)*r00*x3748*x3750))+(((-1.0)*r20*x3750*x3752))+(((-1.0)*r02*x3754))+(((-1.0)*r22*x3753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r22*x3754))+(((-1.0)*r20*x3748*x3750))+((cj6*r00*x3752))+((x3748*x3749))+((r02*x3753))+(((-1.0)*x3751*x3752))), (((x3748*x3751))+((x3749*x3752))+(((-1.0)*r00*x3748*x3750))+(((-1.0)*r20*x3750*x3752))+(((-1.0)*r02*x3754))+(((-1.0)*r22*x3753))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x3755=IKcos(j3);
IkReal x3756=IKsin(j3);
IkReal x3757=(r21*sj6);
IkReal x3758=(r01*sj6);
IkReal x3759=((1.0)*cj5);
IkReal x3760=(cj6*r20);
IkReal x3761=((1.0)*sj5);
IkReal x3762=(sj4*sj6);
IkReal x3763=(cj6*r00);
IkReal x3764=(cj6*sj4);
IkReal x3765=(cj4*cj5);
IkReal x3766=(cj4*sj5);
IkReal x3767=(cj1*x3756);
IkReal x3768=(sj1*x3756);
IkReal x3769=(sj1*x3755);
IkReal x3770=(cj1*x3755);
IkReal x3771=((1.0)*x3769);
evalcond[0]=((((-1.0)*x3761*x3763))+x3767+((sj5*x3758))+(((-1.0)*x3771))+(((-1.0)*r02*x3759)));
evalcond[1]=((((-1.0)*r22*x3759))+(((-1.0)*x3768))+(((-1.0)*x3770))+((sj5*x3757))+(((-1.0)*x3760*x3761)));
evalcond[2]=((((-1.0)*cj4*x3759*x3763))+((r02*x3766))+((x3758*x3765))+x3768+x3770+((r00*x3762))+((r01*x3764)));
evalcond[3]=(((r22*x3766))+(((-1.0)*cj4*x3759*x3760))+((r21*x3764))+x3767+((x3757*x3765))+(((-1.0)*x3771))+((r20*x3762)));
evalcond[4]=((((-0.3425)*x3768))+(((-0.3425)*x3770))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.076)*x3760))+(((-0.0525)*sj1))+(((0.0775)*x3767))+(((-0.0775)*x3769))+(((-0.076)*x3757)));
evalcond[5]=((((0.0525)*cj1))+(((-0.3425)*x3769))+(((-1.0)*px))+(((0.076)*x3763))+(((0.293)*sj1))+(((0.3425)*x3767))+(((0.0775)*x3770))+(((0.0775)*x3768))+(((-0.076)*x3758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3772=(sj5*sj6);
IkReal x3773=((1.0)*sj1);
IkReal x3774=(cj5*r22);
IkReal x3775=(cj6*sj5);
IkReal x3776=(cj5*r02);
IkReal x3777=((1.0)*cj1);
if( IKabs((((r20*sj1*x3775))+(((-1.0)*r00*x3775*x3777))+((cj1*r01*x3772))+(((-1.0)*r21*x3772*x3773))+((sj1*x3774))+(((-1.0)*x3776*x3777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x3775*x3777))+((r01*sj1*x3772))+(((-1.0)*x3773*x3776))+(((-1.0)*x3774*x3777))+((cj1*r21*x3772))+(((-1.0)*r00*x3773*x3775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x3775))+(((-1.0)*r00*x3775*x3777))+((cj1*r01*x3772))+(((-1.0)*r21*x3772*x3773))+((sj1*x3774))+(((-1.0)*x3776*x3777))))+IKsqr(((((-1.0)*r20*x3775*x3777))+((r01*sj1*x3772))+(((-1.0)*x3773*x3776))+(((-1.0)*x3774*x3777))+((cj1*r21*x3772))+(((-1.0)*r00*x3773*x3775))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r20*sj1*x3775))+(((-1.0)*r00*x3775*x3777))+((cj1*r01*x3772))+(((-1.0)*r21*x3772*x3773))+((sj1*x3774))+(((-1.0)*x3776*x3777))), ((((-1.0)*r20*x3775*x3777))+((r01*sj1*x3772))+(((-1.0)*x3773*x3776))+(((-1.0)*x3774*x3777))+((cj1*r21*x3772))+(((-1.0)*r00*x3773*x3775))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x3778=IKsin(j3);
IkReal x3779=IKcos(j3);
IkReal x3780=(r21*sj6);
IkReal x3781=(r01*sj6);
IkReal x3782=((1.0)*cj5);
IkReal x3783=(cj6*r20);
IkReal x3784=(sj4*sj6);
IkReal x3785=((1.0)*sj5);
IkReal x3786=(cj6*r00);
IkReal x3787=(cj6*sj4);
IkReal x3788=(cj4*cj5);
IkReal x3789=(cj4*sj5);
IkReal x3790=(sj1*x3778);
IkReal x3791=(cj1*x3778);
IkReal x3792=(sj1*x3779);
IkReal x3793=(cj1*x3779);
IkReal x3794=((1.0)*x3793);
evalcond[0]=((((-1.0)*x3794))+((sj5*x3780))+(((-1.0)*r22*x3782))+x3790+(((-1.0)*x3783*x3785)));
evalcond[1]=(((sj5*x3781))+(((-1.0)*x3792))+(((-1.0)*x3791))+(((-1.0)*r02*x3782))+(((-1.0)*x3785*x3786)));
evalcond[2]=(((r22*x3789))+((r21*x3787))+((r20*x3784))+(((-1.0)*cj4*x3782*x3783))+x3791+x3792+((x3780*x3788)));
evalcond[3]=((((-1.0)*x3794))+((r02*x3789))+(((-1.0)*cj4*x3782*x3786))+x3790+((r01*x3787))+((r00*x3784))+((x3781*x3788)));
evalcond[4]=((((-0.076)*x3780))+(((0.076)*x3783))+(((-0.3425)*x3793))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.3425)*x3790))+(((0.0775)*x3791))+(((0.0775)*x3792))+(((0.0525)*sj1)));
evalcond[5]=((((-0.0525)*cj1))+(((-0.076)*x3781))+(((0.076)*x3786))+(((-0.3425)*x3791))+(((-0.3425)*x3792))+(((-1.0)*px))+(((0.293)*sj1))+(((0.0775)*x3790))+(((-0.0775)*x3793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3795=(r21*sj6);
IkReal x3796=(cj6*r20);
IkReal x3797=(cj5*r22);
IkReal x3798=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-1.0)*x3796*x3798))+(((-4.41935483870968)*x3797))+(((12.9032258064516)*pz))+((x3795*x3798))+(((0.980645161290323)*x3795))+(((-0.980645161290323)*x3796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3797))+((sj5*x3795))+(((-1.0)*sj5*x3796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-1.0)*x3796*x3798))+(((-4.41935483870968)*x3797))+(((12.9032258064516)*pz))+((x3795*x3798))+(((0.980645161290323)*x3795))+(((-0.980645161290323)*x3796))))+IKsqr(((((-1.0)*x3797))+((sj5*x3795))+(((-1.0)*sj5*x3796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-1.0)*x3796*x3798))+(((-4.41935483870968)*x3797))+(((12.9032258064516)*pz))+((x3795*x3798))+(((0.980645161290323)*x3795))+(((-0.980645161290323)*x3796))), ((((-1.0)*x3797))+((sj5*x3795))+(((-1.0)*sj5*x3796))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3799=IKsin(j3);
IkReal x3800=IKcos(j3);
IkReal x3801=(sj4*sj6);
IkReal x3802=((1.0)*cj6);
IkReal x3803=(cj4*cj5);
IkReal x3804=((0.076)*sj6);
IkReal x3805=(r11*sj6);
IkReal x3806=((1.0)*cj5);
IkReal x3807=(cj6*sj4);
IkReal x3808=(sj5*sj6);
IkReal x3809=(cj4*sj5);
IkReal x3810=((0.076)*cj6);
IkReal x3811=((0.0775)*x3800);
IkReal x3812=(cj2*x3799);
IkReal x3813=(sj2*x3799);
evalcond[0]=((((-1.0)*r20*sj5*x3802))+((r21*x3808))+(((-1.0)*x3800))+(((-1.0)*r22*x3806)));
evalcond[1]=(((sj5*x3805))+x3813+(((-1.0)*r10*sj5*x3802))+(((-1.0)*r12*x3806)));
evalcond[2]=(((r01*x3808))+(((-1.0)*r02*x3806))+x3812+(((-1.0)*r00*sj5*x3802)));
evalcond[3]=((0.293)+(((-0.3425)*x3800))+(((-1.0)*pz))+(((0.0775)*x3799))+(((-1.0)*r21*x3804))+((r20*x3810)));
evalcond[4]=(((r21*sj6*x3803))+(((-1.0)*r20*x3802*x3803))+((r21*x3807))+((r22*x3809))+x3799+((r20*x3801)));
evalcond[5]=(((cj2*x3811))+(((0.0525)*cj2))+(((-1.0)*r01*x3804))+(((0.3425)*x3812))+(((-1.0)*px))+((r00*x3810)));
evalcond[6]=((((0.3425)*x3813))+(((-1.0)*py))+((r10*x3810))+((sj2*x3811))+(((0.0525)*sj2))+(((-1.0)*r11*x3804)));
evalcond[7]=(((r11*x3807))+((r12*x3809))+((sj2*x3800))+(((-1.0)*r10*x3802*x3803))+((r10*x3801))+((x3803*x3805)));
evalcond[8]=(((r00*x3801))+((r01*x3807))+((r01*sj6*x3803))+((r02*x3809))+(((-1.0)*r00*x3802*x3803))+((cj2*x3800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3814=(cj6*r20);
IkReal x3815=(cj5*r22);
IkReal x3816=(r21*sj6);
IkReal x3817=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((0.980645161290323)*x3814))+((x3814*x3817))+(((-1.0)*x3816*x3817))+(((4.41935483870968)*x3815))+(((-0.980645161290323)*x3816)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x3816))+((sj5*x3814))+x3815)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((0.980645161290323)*x3814))+((x3814*x3817))+(((-1.0)*x3816*x3817))+(((4.41935483870968)*x3815))+(((-0.980645161290323)*x3816))))+IKsqr(((((-1.0)*sj5*x3816))+((sj5*x3814))+x3815))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((0.980645161290323)*x3814))+((x3814*x3817))+(((-1.0)*x3816*x3817))+(((4.41935483870968)*x3815))+(((-0.980645161290323)*x3816))), ((((-1.0)*sj5*x3816))+((sj5*x3814))+x3815));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3818=IKsin(j3);
IkReal x3819=IKcos(j3);
IkReal x3820=(sj4*sj6);
IkReal x3821=(cj4*sj5);
IkReal x3822=((1.0)*cj6);
IkReal x3823=(cj4*cj5);
IkReal x3824=((0.076)*sj6);
IkReal x3825=(r11*sj6);
IkReal x3826=((1.0)*cj5);
IkReal x3827=(r21*sj6);
IkReal x3828=(r01*sj6);
IkReal x3829=(cj6*sj4);
IkReal x3830=((0.076)*cj6);
IkReal x3831=((0.0775)*x3819);
IkReal x3832=(cj2*x3818);
IkReal x3833=(sj2*x3818);
evalcond[0]=((((-1.0)*r22*x3826))+((sj5*x3827))+x3819+(((-1.0)*r20*sj5*x3822)));
evalcond[1]=((((-1.0)*r12*x3826))+((sj5*x3825))+(((-1.0)*r10*sj5*x3822))+x3833);
evalcond[2]=((((-1.0)*x3832))+(((-1.0)*r02*x3826))+((sj5*x3828))+(((-1.0)*r00*sj5*x3822)));
evalcond[3]=((-0.293)+(((0.3425)*x3819))+((r20*x3830))+(((-0.0775)*x3818))+(((-1.0)*pz))+(((-1.0)*r21*x3824)));
evalcond[4]=((((-0.0525)*cj2))+(((-1.0)*r01*x3824))+((r00*x3830))+(((-1.0)*px))+(((-1.0)*cj2*x3831))+(((-0.3425)*x3832)));
evalcond[5]=(((sj2*x3831))+(((-1.0)*py))+(((0.0525)*sj2))+((r10*x3830))+(((0.3425)*x3833))+(((-1.0)*r11*x3824)));
evalcond[6]=(((r22*x3821))+(((-1.0)*x3818))+(((-1.0)*r20*x3822*x3823))+((x3823*x3827))+((r20*x3820))+((r21*x3829)));
evalcond[7]=(((r12*x3821))+((r11*x3829))+(((-1.0)*r10*x3822*x3823))+((r10*x3820))+((sj2*x3819))+((x3823*x3825)));
evalcond[8]=(((r02*x3821))+((x3823*x3828))+((r01*x3829))+(((-1.0)*cj2*x3819))+((r00*x3820))+(((-1.0)*r00*x3822*x3823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(sj2,-1);
if(!x3840.valid){
continue;
}
IkReal x3834=x3840.value;
IkReal x3835=(cj1*cj2);
IkReal x3836=(cj5*r12);
IkReal x3837=(sj2*sj5);
IkReal x3838=(cj6*r10*sj5);
IkReal x3839=((1.0)*r11*sj5*sj6);
CheckValue<IkReal> x3841=IKPowWithIntegerCheck(sj1,-1);
if(!x3841.valid){
continue;
}
if( IKabs((x3834*((x3836+x3838+(((-1.0)*x3839)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3834*(x3841.value)*((((r01*sj6*x3837))+((x3835*x3836))+((x3835*x3838))+(((-1.0)*cj6*r00*x3837))+(((-1.0)*cj5*r02*sj2))+(((-1.0)*x3835*x3839)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3834*((x3836+x3838+(((-1.0)*x3839))))))+IKsqr((x3834*(x3841.value)*((((r01*sj6*x3837))+((x3835*x3836))+((x3835*x3838))+(((-1.0)*cj6*r00*x3837))+(((-1.0)*cj5*r02*sj2))+(((-1.0)*x3835*x3839))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x3834*((x3836+x3838+(((-1.0)*x3839))))), (x3834*(x3841.value)*((((r01*sj6*x3837))+((x3835*x3836))+((x3835*x3838))+(((-1.0)*cj6*r00*x3837))+(((-1.0)*cj5*r02*sj2))+(((-1.0)*x3835*x3839))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3842=IKsin(j3);
IkReal x3843=IKcos(j3);
IkReal x3844=(cj4*cj5);
IkReal x3845=((0.076)*sj6);
IkReal x3846=((0.3425)*cj2);
IkReal x3847=(sj4*sj6);
IkReal x3848=(cj2*sj1);
IkReal x3849=((1.0)*cj5);
IkReal x3850=(sj5*sj6);
IkReal x3851=(cj4*sj5);
IkReal x3852=(cj1*cj2);
IkReal x3853=(cj6*sj4);
IkReal x3854=((0.076)*cj6);
IkReal x3855=((1.0)*cj6*r10);
IkReal x3856=(cj1*x3842);
IkReal x3857=((0.0775)*x3843);
IkReal x3858=((0.3425)*x3843);
IkReal x3859=((1.0)*cj6*r20);
IkReal x3860=((1.0)*x3843);
IkReal x3861=((1.0)*cj6*r00);
IkReal x3862=(sj2*x3842);
IkReal x3863=(sj1*x3842);
evalcond[0]=(((r11*x3850))+(((-1.0)*sj5*x3855))+(((-1.0)*r12*x3849))+x3862);
evalcond[1]=((((-1.0)*r02*x3849))+(((-1.0)*sj5*x3861))+((r01*x3850))+(((-1.0)*sj1*x3860))+((x3842*x3852)));
evalcond[2]=(((r21*x3850))+(((-1.0)*sj5*x3859))+(((-1.0)*cj1*x3860))+(((-1.0)*x3842*x3848))+(((-1.0)*r22*x3849)));
evalcond[3]=(((sj2*x3857))+(((-1.0)*py))+(((-1.0)*r11*x3845))+((r10*x3854))+(((0.0525)*sj2))+(((0.3425)*x3862)));
evalcond[4]=(((r11*x3853))+((sj2*x3843))+(((-1.0)*x3844*x3855))+((r11*sj6*x3844))+((r10*x3847))+((r12*x3851)));
evalcond[5]=(((r02*x3851))+(((-1.0)*x3844*x3861))+((r01*x3853))+((x3843*x3852))+x3863+((r00*x3847))+((r01*sj6*x3844)));
evalcond[6]=((((-1.0)*x3848*x3860))+((r21*x3853))+((r21*sj6*x3844))+(((-1.0)*x3844*x3859))+((r20*x3847))+x3856+((r22*x3851)));
evalcond[7]=((((-1.0)*r21*x3845))+(((-1.0)*x3848*x3857))+((r20*x3854))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*cj1*x3858))+(((-1.0)*x3846*x3863))+(((0.0775)*x3856))+(((-0.0525)*x3848)));
evalcond[8]=((((0.0525)*x3852))+((x3846*x3856))+((x3852*x3857))+(((-1.0)*sj1*x3858))+(((-1.0)*px))+((r00*x3854))+(((0.293)*sj1))+(((-1.0)*r01*x3845))+(((0.0775)*x3863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(sj2,-1);
if(!x3868.valid){
continue;
}
IkReal x3864=x3868.value;
IkReal x3865=(cj6*r10);
IkReal x3866=(cj5*r12);
IkReal x3867=(r11*sj5*sj6);
if( IKabs((x3864*((((sj5*x3865))+(((-1.0)*x3867))+x3866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x3864*(((((30.4)*r11*sj6))+(((-137.0)*x3866))+(((-137.0)*sj5*x3865))+(((137.0)*x3867))+(((400.0)*py))+(((-21.0)*sj2))+(((-30.4)*x3865)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3864*((((sj5*x3865))+(((-1.0)*x3867))+x3866))))+IKsqr(((0.032258064516129)*x3864*(((((30.4)*r11*sj6))+(((-137.0)*x3866))+(((-137.0)*sj5*x3865))+(((137.0)*x3867))+(((400.0)*py))+(((-21.0)*sj2))+(((-30.4)*x3865))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x3864*((((sj5*x3865))+(((-1.0)*x3867))+x3866))), ((0.032258064516129)*x3864*(((((30.4)*r11*sj6))+(((-137.0)*x3866))+(((-137.0)*sj5*x3865))+(((137.0)*x3867))+(((400.0)*py))+(((-21.0)*sj2))+(((-30.4)*x3865))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3869=IKsin(j3);
IkReal x3870=IKcos(j3);
IkReal x3871=(cj4*cj5);
IkReal x3872=((0.076)*sj6);
IkReal x3873=((0.3425)*cj2);
IkReal x3874=(sj4*sj6);
IkReal x3875=(cj2*sj1);
IkReal x3876=((1.0)*cj5);
IkReal x3877=(sj5*sj6);
IkReal x3878=(cj4*sj5);
IkReal x3879=(cj1*cj2);
IkReal x3880=(cj6*sj4);
IkReal x3881=((0.076)*cj6);
IkReal x3882=((1.0)*cj6*r10);
IkReal x3883=(cj1*x3869);
IkReal x3884=((0.0775)*x3870);
IkReal x3885=((0.3425)*x3870);
IkReal x3886=((1.0)*cj6*r20);
IkReal x3887=((1.0)*x3870);
IkReal x3888=((1.0)*cj6*r00);
IkReal x3889=(sj2*x3869);
IkReal x3890=(sj1*x3869);
evalcond[0]=((((-1.0)*r12*x3876))+x3889+((r11*x3877))+(((-1.0)*sj5*x3882)));
evalcond[1]=((((-1.0)*sj1*x3887))+((r01*x3877))+(((-1.0)*r02*x3876))+((x3869*x3879))+(((-1.0)*sj5*x3888)));
evalcond[2]=((((-1.0)*cj1*x3887))+(((-1.0)*x3869*x3875))+((r21*x3877))+(((-1.0)*r22*x3876))+(((-1.0)*sj5*x3886)));
evalcond[3]=(((r10*x3881))+(((-1.0)*r11*x3872))+((sj2*x3884))+(((-1.0)*py))+(((0.3425)*x3889))+(((0.0525)*sj2)));
evalcond[4]=(((r11*x3880))+((r11*sj6*x3871))+((r10*x3874))+((r12*x3878))+((sj2*x3870))+(((-1.0)*x3871*x3882)));
evalcond[5]=(((r00*x3874))+((r01*sj6*x3871))+((x3870*x3879))+x3890+((r01*x3880))+((r02*x3878))+(((-1.0)*x3871*x3888)));
evalcond[6]=(((r20*x3874))+((r21*x3880))+x3883+((r21*sj6*x3871))+((r22*x3878))+(((-1.0)*x3875*x3887))+(((-1.0)*x3871*x3886)));
evalcond[7]=((((-1.0)*cj1*x3885))+(((-1.0)*x3873*x3890))+(((0.0775)*x3883))+(((-0.0525)*x3875))+(((-1.0)*pz))+(((0.293)*cj1))+((r20*x3881))+(((-1.0)*x3875*x3884))+(((-1.0)*r21*x3872)));
evalcond[8]=((((-1.0)*sj1*x3885))+(((0.0775)*x3890))+((x3873*x3883))+(((-1.0)*px))+(((0.0525)*x3879))+((r00*x3881))+(((0.293)*sj1))+((x3879*x3884))+(((-1.0)*r01*x3872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3891=((1.0)*sj5);
IkReal x3892=(r11*sj6);
IkReal x3893=((1.0)*sj4);
IkReal x3894=(cj6*r10);
IkReal x3895=(cj4*cj5);
CheckValue<IkReal> x3896 = IKatan2WithCheck(IkReal((((cj5*r12))+((sj5*x3894))+(((-1.0)*x3891*x3892)))),IkReal(((((-1.0)*x3892*x3895))+((x3894*x3895))+(((-1.0)*cj6*r11*x3893))+(((-1.0)*cj4*r12*x3891))+(((-1.0)*r10*sj6*x3893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3896.valid){
continue;
}
CheckValue<IkReal> x3897=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x3897.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x3896.value)+(((1.5707963267949)*(x3897.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3898=IKsin(j3);
IkReal x3899=IKcos(j3);
IkReal x3900=(cj4*cj5);
IkReal x3901=((0.076)*sj6);
IkReal x3902=((0.3425)*cj2);
IkReal x3903=(sj4*sj6);
IkReal x3904=(cj2*sj1);
IkReal x3905=((1.0)*cj5);
IkReal x3906=(sj5*sj6);
IkReal x3907=(cj4*sj5);
IkReal x3908=(cj1*cj2);
IkReal x3909=(cj6*sj4);
IkReal x3910=((0.076)*cj6);
IkReal x3911=((1.0)*cj6*r10);
IkReal x3912=(cj1*x3898);
IkReal x3913=((0.0775)*x3899);
IkReal x3914=((0.3425)*x3899);
IkReal x3915=((1.0)*cj6*r20);
IkReal x3916=((1.0)*x3899);
IkReal x3917=((1.0)*cj6*r00);
IkReal x3918=(sj2*x3898);
IkReal x3919=(sj1*x3898);
evalcond[0]=((((-1.0)*r12*x3905))+(((-1.0)*sj5*x3911))+x3918+((r11*x3906)));
evalcond[1]=((((-1.0)*sj1*x3916))+((r01*x3906))+(((-1.0)*sj5*x3917))+((x3898*x3908))+(((-1.0)*r02*x3905)));
evalcond[2]=((((-1.0)*x3898*x3904))+(((-1.0)*r22*x3905))+(((-1.0)*sj5*x3915))+(((-1.0)*cj1*x3916))+((r21*x3906)));
evalcond[3]=(((r10*x3910))+(((-1.0)*py))+(((0.0525)*sj2))+(((0.3425)*x3918))+(((-1.0)*r11*x3901))+((sj2*x3913)));
evalcond[4]=(((r11*sj6*x3900))+((r10*x3903))+(((-1.0)*x3900*x3911))+((r12*x3907))+((r11*x3909))+((sj2*x3899)));
evalcond[5]=((((-1.0)*x3900*x3917))+((r01*x3909))+((x3899*x3908))+((r00*x3903))+x3919+((r01*sj6*x3900))+((r02*x3907)));
evalcond[6]=((((-1.0)*x3904*x3916))+((r22*x3907))+(((-1.0)*x3900*x3915))+x3912+((r21*sj6*x3900))+((r20*x3903))+((r21*x3909)));
evalcond[7]=((((-1.0)*x3902*x3919))+(((-1.0)*x3904*x3913))+(((-0.0525)*x3904))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x3912))+((r20*x3910))+(((-1.0)*cj1*x3914))+(((-1.0)*r21*x3901)));
evalcond[8]=((((-1.0)*sj1*x3914))+((x3902*x3912))+(((-1.0)*px))+(((0.0525)*x3908))+(((0.0775)*x3919))+((r00*x3910))+(((0.293)*sj1))+((x3908*x3913))+(((-1.0)*r01*x3901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3920=(cj4*cj5);
IkReal x3921=(r01*sj6);
IkReal x3922=(cj6*r00);
if( IKabs((((r00*sj4*sj6))+((x3920*x3921))+((cj6*r01*sj4))+(((-1.0)*x3920*x3922))+((cj4*r02*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x3922))+((cj5*r02))+(((-1.0)*sj5*x3921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj4*sj6))+((x3920*x3921))+((cj6*r01*sj4))+(((-1.0)*x3920*x3922))+((cj4*r02*sj5))))+IKsqr((((sj5*x3922))+((cj5*r02))+(((-1.0)*sj5*x3921))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r00*sj4*sj6))+((x3920*x3921))+((cj6*r01*sj4))+(((-1.0)*x3920*x3922))+((cj4*r02*sj5))), (((sj5*x3922))+((cj5*r02))+(((-1.0)*sj5*x3921))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x3923=IKcos(j3);
IkReal x3924=IKsin(j3);
IkReal x3925=(r01*sj6);
IkReal x3926=(cj4*cj5);
IkReal x3927=((1.0)*cj6*r00);
evalcond[0]=(((sj5*x3925))+x3923+(((-1.0)*sj5*x3927))+(((-1.0)*cj5*r02)));
evalcond[1]=((-0.293)+(((-0.0775)*x3924))+(((0.3425)*x3923))+(((-0.076)*x3925))+(((0.076)*cj6*r00))+(((-1.0)*px)));
evalcond[2]=(((r00*sj4*sj6))+(((-1.0)*x3924))+((cj6*r01*sj4))+(((-1.0)*x3926*x3927))+((cj4*r02*sj5))+((x3925*x3926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x3928=((1.0)*cj5);
IkReal x3929=(sj5*sj6);
IkReal x3930=((1.0)*cj6*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((r21*x3929))+(((-1.0)*r20*x3930))+(((-1.0)*r22*x3928)))))+(IKabs((((r11*x3929))+(((-1.0)*r12*x3928))+(((-1.0)*r10*x3930))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3931=((64920240.9929408)*cj6);
IkReal x3932=((64920240.9929408)*sj6);
if( IKabs(((((854213697.275536)*py))+(((-1.0)*r10*x3931))+((r11*x3932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x3932))+(((854213697.275536)*pz))+(((-1.0)*r20*x3931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((854213697.275536)*py))+(((-1.0)*r10*x3931))+((r11*x3932))))+IKsqr((((r21*x3932))+(((854213697.275536)*pz))+(((-1.0)*r20*x3931))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((854213697.275536)*py))+(((-1.0)*r10*x3931))+((r11*x3932))), (((r21*x3932))+(((854213697.275536)*pz))+(((-1.0)*r20*x3931))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3933=IKcos(j2);
IkReal x3934=IKsin(j2);
IkReal x3935=(r20*sj4);
IkReal x3936=(sj4*sj5);
IkReal x3937=(cj4*r20);
IkReal x3938=((1.0)*cj6);
IkReal x3939=(cj4*r10);
IkReal x3940=(cj4*r21);
IkReal x3941=(r11*sj6);
IkReal x3942=(r21*sj6);
IkReal x3943=(cj5*sj4);
IkReal x3944=((1.0)*sj6);
IkReal x3945=(r10*sj4);
IkReal x3946=((1.0)*cj5);
IkReal x3947=(cj4*sj5);
IkReal x3948=((0.076)*cj6);
IkReal x3949=(cj6*sj4);
IkReal x3950=(cj5*x3938);
evalcond[0]=(((r20*x3948))+(((1.17066725011486e-9)*x3933))+(((-1.0)*pz))+(((-0.076)*x3942)));
evalcond[1]=((((1.17066725011486e-9)*x3934))+(((-1.0)*py))+((r10*x3948))+(((-0.076)*x3941)));
evalcond[2]=((((-1.0)*r22*x3946))+(((-0.07239889)*x3933))+(((-1.0)*r20*sj5*x3938))+((sj5*x3942)));
evalcond[3]=((((-1.0)*r10*sj5*x3938))+(((-0.07239889)*x3934))+((sj5*x3941))+(((-1.0)*r12*x3946)));
evalcond[4]=((((0.997375754782803)*x3933))+((r22*x3947))+((sj6*x3935))+((cj5*sj6*x3940))+(((-1.0)*x3937*x3950))+((r21*x3949)));
evalcond[5]=((((-1.0)*cj4*r11*x3938))+((x3941*x3943))+x3933+(((-1.0)*x3939*x3944))+((r12*x3936))+(((-1.0)*r10*x3938*x3943)));
evalcond[6]=((((0.997375754782803)*x3934))+((cj4*cj5*x3941))+((sj6*x3945))+(((-1.0)*x3939*x3950))+((r12*x3947))+((r11*x3949)));
evalcond[7]=(((r22*x3936))+(((-1.0)*x3934))+(((-1.0)*x3937*x3944))+((x3942*x3943))+(((-1.0)*x3935*x3950))+(((-1.0)*x3938*x3940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3951=((57213427.3137081)*sj6);
IkReal x3952=((57213427.3137081)*cj6);
if( IKabs(((((-1.0)*r11*x3951))+((r10*x3952))+(((-752808254.127739)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x3952))+(((-1.0)*r21*x3951))+(((-752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x3951))+((r10*x3952))+(((-752808254.127739)*py))))+IKsqr((((r20*x3952))+(((-1.0)*r21*x3951))+(((-752808254.127739)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x3951))+((r10*x3952))+(((-752808254.127739)*py))), (((r20*x3952))+(((-1.0)*r21*x3951))+(((-752808254.127739)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3953=IKcos(j2);
IkReal x3954=IKsin(j2);
IkReal x3955=(r20*sj4);
IkReal x3956=(sj4*sj5);
IkReal x3957=(cj4*r20);
IkReal x3958=(cj4*r10);
IkReal x3959=(r11*sj6);
IkReal x3960=(r21*sj6);
IkReal x3961=(cj5*sj4);
IkReal x3962=((1.0)*sj6);
IkReal x3963=(r10*sj4);
IkReal x3964=((1.0)*cj5);
IkReal x3965=(cj4*cj5);
IkReal x3966=(cj4*sj5);
IkReal x3967=((0.076)*cj6);
IkReal x3968=(cj6*sj4);
IkReal x3969=(cj6*x3964);
IkReal x3970=((1.0)*cj6*sj5);
IkReal x3971=((1.0)*cj4*cj6);
evalcond[0]=((((-0.076)*x3960))+(((-1.32835950524835e-9)*x3953))+(((-1.0)*pz))+((r20*x3967)));
evalcond[1]=((((-1.32835950524835e-9)*x3954))+((r10*x3967))+(((-1.0)*py))+(((-0.076)*x3959)));
evalcond[2]=((((-1.0)*r20*x3970))+((sj5*x3960))+(((-1.0)*r22*x3964))+(((0.36403599)*x3953)));
evalcond[3]=((((-1.0)*r10*x3970))+((sj5*x3959))+(((0.36403599)*x3954))+(((-1.0)*r12*x3964)));
evalcond[4]=((((-0.931384876172381)*x3953))+((sj6*x3955))+((r22*x3966))+((x3960*x3965))+((r21*x3968))+(((-1.0)*x3957*x3969)));
evalcond[5]=((((-1.0)*x3958*x3962))+x3953+(((-1.0)*cj6*r10*x3961))+((x3959*x3961))+(((-1.0)*r11*x3971))+((r12*x3956)));
evalcond[6]=((((-0.931384876172381)*x3954))+((r11*x3968))+((r12*x3966))+(((-1.0)*x3958*x3969))+((x3959*x3965))+((sj6*x3963)));
evalcond[7]=((((-1.0)*r21*x3971))+(((-1.0)*x3954))+(((-1.0)*x3955*x3969))+((x3960*x3961))+(((-1.0)*x3957*x3962))+((r22*x3956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3972=((0.584615384615385)*cj6);
IkReal x3973=((0.584615384615385)*sj6);
if( IKabs((((r10*x3972))+(((-7.69230769230769)*py))+(((-1.0)*r11*x3973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x3973))+(((-7.69230769230769)*pz))+((r20*x3972)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3972))+(((-7.69230769230769)*py))+(((-1.0)*r11*x3973))))+IKsqr(((((-1.0)*r21*x3973))+(((-7.69230769230769)*pz))+((r20*x3972))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x3972))+(((-7.69230769230769)*py))+(((-1.0)*r11*x3973))), ((((-1.0)*r21*x3973))+(((-7.69230769230769)*pz))+((r20*x3972))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3974=IKcos(j2);
IkReal x3975=IKsin(j2);
IkReal x3976=(sj4*sj5);
IkReal x3977=(cj5*sj4);
IkReal x3978=(r21*sj6);
IkReal x3979=(r11*sj6);
IkReal x3980=((1.0)*r20);
IkReal x3981=(cj4*sj6);
IkReal x3982=((1.0)*cj6);
IkReal x3983=(sj4*sj6);
IkReal x3984=(cj4*cj5);
IkReal x3985=(cj4*sj5);
IkReal x3986=((0.076)*cj6);
IkReal x3987=(cj6*sj4);
IkReal x3988=((1.0)*x3975);
IkReal x3989=(x3982*x3984);
evalcond[0]=((((-0.076)*x3978))+(((-0.13)*x3974))+(((-1.0)*pz))+((r20*x3986)));
evalcond[1]=(((r10*x3986))+(((-0.076)*x3979))+(((-0.13)*x3975))+(((-1.0)*py)));
evalcond[2]=(((r21*x3987))+(((-1.0)*cj6*x3980*x3984))+((r20*x3983))+((x3978*x3984))+((r22*x3985))+(((-1.0)*x3974)));
evalcond[3]=((((-1.0)*cj4*r11*x3982))+(((-1.0)*r10*x3977*x3982))+((x3977*x3979))+((r12*x3976))+(((-1.0)*r10*x3981))+x3974);
evalcond[4]=(((r10*x3983))+((r11*x3987))+(((-1.0)*r10*x3989))+((x3979*x3984))+(((-1.0)*x3988))+((r12*x3985)));
evalcond[5]=(((x3977*x3978))+(((-1.0)*cj4*r21*x3982))+((r22*x3976))+(((-1.0)*cj6*x3977*x3980))+(((-1.0)*x3980*x3981))+(((-1.0)*x3988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3990=((3.04)*cj6);
IkReal x3991=((3.04)*sj6);
if( IKabs(((((40.0)*py))+(((-1.0)*r10*x3990))+((r11*x3991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((40.0)*pz))+((r21*x3991))+(((-1.0)*r20*x3990)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((40.0)*py))+(((-1.0)*r10*x3990))+((r11*x3991))))+IKsqr(((((40.0)*pz))+((r21*x3991))+(((-1.0)*r20*x3990))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((40.0)*py))+(((-1.0)*r10*x3990))+((r11*x3991))), ((((40.0)*pz))+((r21*x3991))+(((-1.0)*r20*x3990))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3992=IKcos(j2);
IkReal x3993=IKsin(j2);
IkReal x3994=(sj4*sj5);
IkReal x3995=(cj5*sj4);
IkReal x3996=(r21*sj6);
IkReal x3997=(r11*sj6);
IkReal x3998=((1.0)*r20);
IkReal x3999=(cj4*sj6);
IkReal x4000=(sj4*sj6);
IkReal x4001=(cj4*cj5);
IkReal x4002=(cj4*sj5);
IkReal x4003=((0.076)*cj6);
IkReal x4004=(cj6*sj4);
IkReal x4005=((1.0)*r10);
IkReal x4006=((1.0)*cj4*cj6);
IkReal x4007=((1.0)*cj6*x4001);
evalcond[0]=((((-1.0)*pz))+(((-0.076)*x3996))+(((0.025)*x3992))+((r20*x4003)));
evalcond[1]=(((r10*x4003))+(((-1.0)*py))+(((-0.076)*x3997))+(((0.025)*x3993)));
evalcond[2]=(((x3996*x4001))+((r22*x4002))+x3992+(((-1.0)*cj6*x3998*x4001))+((r21*x4004))+((r20*x4000)));
evalcond[3]=(((r12*x4002))+((r10*x4000))+((x3997*x4001))+x3993+(((-1.0)*cj6*x4001*x4005))+((r11*x4004)));
evalcond[4]=((((-1.0)*cj6*x3995*x4005))+(((-1.0)*x3999*x4005))+((x3995*x3997))+((r12*x3994))+x3992+(((-1.0)*r11*x4006)));
evalcond[5]=((((-1.0)*x3998*x3999))+((x3995*x3996))+((r22*x3994))+(((-1.0)*r21*x4006))+(((-1.0)*x3993))+(((-1.0)*cj6*x3995*x3998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4008=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x4008.valid){
continue;
}
CheckValue<IkReal> x4009=IKPowWithIntegerCheck(sj3,-1);
if(!x4009.valid){
continue;
}
if( IKabs(((x4008.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4009.value)*((((r21*sj5*sj6))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4008.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))))+IKsqr(((x4009.value)*((((r21*sj5*sj6))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r20*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x4008.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))), ((x4009.value)*((((r21*sj5*sj6))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r20*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4010=IKcos(j2);
IkReal x4011=IKsin(j2);
IkReal x4012=(r20*sj4);
IkReal x4013=(sj4*sj5);
IkReal x4014=((1.0)*cj6);
IkReal x4015=(cj4*cj5);
IkReal x4016=((1.0)*cj5);
IkReal x4017=((0.076)*sj6);
IkReal x4018=(r10*sj4);
IkReal x4019=(sj5*sj6);
IkReal x4020=((0.0775)*cj3);
IkReal x4021=(cj4*sj5);
IkReal x4022=((1.0)*cj3);
IkReal x4023=(r11*sj6);
IkReal x4024=((0.076)*cj6);
IkReal x4025=(cj5*sj4);
IkReal x4026=(r21*sj6);
IkReal x4027=(cj6*sj4);
IkReal x4028=(sj3*x4011);
IkReal x4029=(sj3*x4010);
IkReal x4030=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r22*x4016))+(((-1.0)*x4029))+(((-1.0)*r20*sj5*x4014))+((r21*x4019)));
evalcond[1]=((((-1.0)*r12*x4016))+(((-1.0)*r10*sj5*x4014))+(((-1.0)*x4028))+((r11*x4019)));
evalcond[2]=(((r20*x4024))+(((-1.0)*pz))+(((-0.3425)*x4029))+(((-1.0)*x4010*x4020))+(((-1.0)*r21*x4017))+(((-0.0525)*x4010)));
evalcond[3]=((((-1.0)*cj4*r11*x4014))+x4010+(((-1.0)*cj5*x4014*x4018))+((x4023*x4025))+((r12*x4013))+(((-1.0)*r10*x4030)));
evalcond[4]=((((-1.0)*r11*x4017))+(((-1.0)*x4011*x4020))+((r10*x4024))+(((-1.0)*py))+(((-0.3425)*x4028))+(((-0.0525)*x4011)));
evalcond[5]=(((r21*x4027))+(((-1.0)*r20*x4014*x4015))+(((-1.0)*x4010*x4022))+((r22*x4021))+((x4015*x4026))+((sj6*x4012)));
evalcond[6]=((((-1.0)*x4011*x4022))+(((-1.0)*r10*x4014*x4015))+((r12*x4021))+((x4015*x4023))+((r11*x4027))+((sj6*x4018)));
evalcond[7]=((((-1.0)*r20*x4030))+(((-1.0)*x4011))+((x4025*x4026))+((r22*x4013))+(((-1.0)*cj4*r21*x4014))+(((-1.0)*cj5*x4012*x4014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4031=(cj5*sj4);
IkReal x4032=(cj6*r10);
IkReal x4033=(r11*sj6);
IkReal x4034=((1.0)*sj5);
CheckValue<IkReal> x4035=IKPowWithIntegerCheck(sj3,-1);
if(!x4035.valid){
continue;
}
if( IKabs(((x4035.value)*(((((-1.0)*cj5*r12))+((sj5*x4033))+(((-1.0)*x4032*x4034)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4031*x4033))+(((-1.0)*r12*sj4*x4034))+((cj4*cj6*r11))+((cj4*r10*sj6))+((x4031*x4032)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4035.value)*(((((-1.0)*cj5*r12))+((sj5*x4033))+(((-1.0)*x4032*x4034))))))+IKsqr(((((-1.0)*x4031*x4033))+(((-1.0)*r12*sj4*x4034))+((cj4*cj6*r11))+((cj4*r10*sj6))+((x4031*x4032))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x4035.value)*(((((-1.0)*cj5*r12))+((sj5*x4033))+(((-1.0)*x4032*x4034))))), ((((-1.0)*x4031*x4033))+(((-1.0)*r12*sj4*x4034))+((cj4*cj6*r11))+((cj4*r10*sj6))+((x4031*x4032))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4036=IKcos(j2);
IkReal x4037=IKsin(j2);
IkReal x4038=(r20*sj4);
IkReal x4039=(sj4*sj5);
IkReal x4040=((1.0)*cj6);
IkReal x4041=(cj4*cj5);
IkReal x4042=((1.0)*cj5);
IkReal x4043=((0.076)*sj6);
IkReal x4044=(r10*sj4);
IkReal x4045=(sj5*sj6);
IkReal x4046=((0.0775)*cj3);
IkReal x4047=(cj4*sj5);
IkReal x4048=((1.0)*cj3);
IkReal x4049=(r11*sj6);
IkReal x4050=((0.076)*cj6);
IkReal x4051=(cj5*sj4);
IkReal x4052=(r21*sj6);
IkReal x4053=(cj6*sj4);
IkReal x4054=(sj3*x4037);
IkReal x4055=(sj3*x4036);
IkReal x4056=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r20*sj5*x4040))+((r21*x4045))+(((-1.0)*x4055))+(((-1.0)*r22*x4042)));
evalcond[1]=((((-1.0)*r10*sj5*x4040))+(((-1.0)*r12*x4042))+((r11*x4045))+(((-1.0)*x4054)));
evalcond[2]=((((-1.0)*r21*x4043))+(((-1.0)*x4036*x4046))+(((-1.0)*pz))+((r20*x4050))+(((-0.0525)*x4036))+(((-0.3425)*x4055)));
evalcond[3]=((((-1.0)*cj4*r11*x4040))+((x4049*x4051))+(((-1.0)*cj5*x4040*x4044))+x4036+(((-1.0)*r10*x4056))+((r12*x4039)));
evalcond[4]=((((-1.0)*r11*x4043))+(((-1.0)*py))+(((-0.0525)*x4037))+((r10*x4050))+(((-0.3425)*x4054))+(((-1.0)*x4037*x4046)));
evalcond[5]=(((r22*x4047))+(((-1.0)*x4036*x4048))+((r21*x4053))+((sj6*x4038))+((x4041*x4052))+(((-1.0)*r20*x4040*x4041)));
evalcond[6]=(((x4041*x4049))+(((-1.0)*r10*x4040*x4041))+((r11*x4053))+((r12*x4047))+((sj6*x4044))+(((-1.0)*x4037*x4048)));
evalcond[7]=((((-1.0)*r20*x4056))+(((-1.0)*cj4*r21*x4040))+(((-1.0)*x4037))+((x4051*x4052))+(((-1.0)*cj5*x4038*x4040))+((r22*x4039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4057=(sj5*sj6);
IkReal x4058=((1.0)*cj5);
IkReal x4059=((1.0)*cj6*sj5);
CheckValue<IkReal> x4060=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4060.valid){
continue;
}
CheckValue<IkReal> x4061 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4058))+((r11*x4057))+(((-1.0)*r10*x4059)))),IkReal(((((-1.0)*r20*x4059))+((r21*x4057))+(((-1.0)*r22*x4058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4061.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4060.value)))+(x4061.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4062=IKcos(j2);
IkReal x4063=IKsin(j2);
IkReal x4064=(r20*sj4);
IkReal x4065=(sj4*sj5);
IkReal x4066=((1.0)*cj6);
IkReal x4067=(cj4*cj5);
IkReal x4068=((1.0)*cj5);
IkReal x4069=((0.076)*sj6);
IkReal x4070=(r10*sj4);
IkReal x4071=(sj5*sj6);
IkReal x4072=((0.0775)*cj3);
IkReal x4073=(cj4*sj5);
IkReal x4074=((1.0)*cj3);
IkReal x4075=(r11*sj6);
IkReal x4076=((0.076)*cj6);
IkReal x4077=(cj5*sj4);
IkReal x4078=(r21*sj6);
IkReal x4079=(cj6*sj4);
IkReal x4080=(sj3*x4063);
IkReal x4081=(sj3*x4062);
IkReal x4082=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r20*sj5*x4066))+(((-1.0)*x4081))+(((-1.0)*r22*x4068))+((r21*x4071)));
evalcond[1]=((((-1.0)*r10*sj5*x4066))+(((-1.0)*r12*x4068))+(((-1.0)*x4080))+((r11*x4071)));
evalcond[2]=(((r20*x4076))+(((-1.0)*x4062*x4072))+(((-1.0)*r21*x4069))+(((-0.0525)*x4062))+(((-1.0)*pz))+(((-0.3425)*x4081)));
evalcond[3]=((((-1.0)*cj5*x4066*x4070))+((x4075*x4077))+x4062+((r12*x4065))+(((-1.0)*cj4*r11*x4066))+(((-1.0)*r10*x4082)));
evalcond[4]=(((r10*x4076))+(((-1.0)*r11*x4069))+(((-0.0525)*x4063))+(((-1.0)*py))+(((-0.3425)*x4080))+(((-1.0)*x4063*x4072)));
evalcond[5]=((((-1.0)*x4062*x4074))+((r22*x4073))+((sj6*x4064))+(((-1.0)*r20*x4066*x4067))+((x4067*x4078))+((r21*x4079)));
evalcond[6]=(((sj6*x4070))+((r12*x4073))+((x4067*x4075))+(((-1.0)*r10*x4066*x4067))+((r11*x4079))+(((-1.0)*x4063*x4074)));
evalcond[7]=((((-1.0)*r20*x4082))+((x4077*x4078))+(((-1.0)*cj5*x4064*x4066))+(((-1.0)*x4063))+((r22*x4065))+(((-1.0)*cj4*r21*x4066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4083=(cj6*r00);
IkReal x4084=(cj5*r02);
IkReal x4085=((4.41935483870968)*sj5);
IkReal x4086=(r01*sj6);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*px))+((x4085*x4086))+(((-4.41935483870968)*x4084))+(((-1.0)*x4083*x4085))+(((0.980645161290323)*x4086))+(((-0.980645161290323)*x4083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x4083))+((sj5*x4086))+(((-1.0)*x4084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*px))+((x4085*x4086))+(((-4.41935483870968)*x4084))+(((-1.0)*x4083*x4085))+(((0.980645161290323)*x4086))+(((-0.980645161290323)*x4083))))+IKsqr(((((-1.0)*sj5*x4083))+((sj5*x4086))+(((-1.0)*x4084))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*px))+((x4085*x4086))+(((-4.41935483870968)*x4084))+(((-1.0)*x4083*x4085))+(((0.980645161290323)*x4086))+(((-0.980645161290323)*x4083))), ((((-1.0)*sj5*x4083))+((sj5*x4086))+(((-1.0)*x4084))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x4087=IKcos(j3);
IkReal x4088=IKsin(j3);
IkReal x4089=(r01*sj6);
IkReal x4090=(cj4*cj5);
IkReal x4091=((1.0)*cj6*r00);
evalcond[0]=(((sj5*x4089))+(((-1.0)*sj5*x4091))+(((-1.0)*x4087))+(((-1.0)*cj5*r02)));
evalcond[1]=((0.293)+(((0.0775)*x4088))+(((0.076)*cj6*r00))+(((-1.0)*px))+(((-0.3425)*x4087))+(((-0.076)*x4089)));
evalcond[2]=(((r00*sj4*sj6))+((cj6*r01*sj4))+(((-1.0)*x4090*x4091))+x4088+((x4089*x4090))+((cj4*r02*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x4092=(cj6*sj5);
IkReal x4093=(sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*cj5*r12))+(((-1.0)*r10*x4092))+((r11*x4093)))))+(IKabs((((r20*x4092))+((cj5*r22))+(((-1.0)*r21*x4093))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4094=((64920240.9929408)*cj6);
IkReal x4095=((64920240.9929408)*sj6);
if( IKabs(((((-1.0)*r10*x4094))+(((854213697.275536)*py))+((r11*x4095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x4094))+(((-854213697.275536)*pz))+(((-1.0)*r21*x4095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4094))+(((854213697.275536)*py))+((r11*x4095))))+IKsqr((((r20*x4094))+(((-854213697.275536)*pz))+(((-1.0)*r21*x4095))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x4094))+(((854213697.275536)*py))+((r11*x4095))), (((r20*x4094))+(((-854213697.275536)*pz))+(((-1.0)*r21*x4095))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4096=IKcos(j2);
IkReal x4097=IKsin(j2);
IkReal x4098=(sj4*sj6);
IkReal x4099=(sj4*sj5);
IkReal x4100=(cj5*r21);
IkReal x4101=((1.0)*cj6);
IkReal x4102=(cj4*cj5);
IkReal x4103=(r11*sj6);
IkReal x4104=(cj4*sj6);
IkReal x4105=(cj5*sj4);
IkReal x4106=((1.0)*cj5);
IkReal x4107=(r21*sj6);
IkReal x4108=(cj4*sj5);
IkReal x4109=((0.076)*cj6);
IkReal x4110=(cj6*sj4);
evalcond[0]=((((-1.17066725011486e-9)*x4096))+((r20*x4109))+(((-1.0)*pz))+(((-0.076)*x4107)));
evalcond[1]=((((1.17066725011486e-9)*x4097))+(((-1.0)*py))+(((-0.076)*x4103))+((r10*x4109)));
evalcond[2]=((((-1.0)*r20*sj5*x4101))+(((-1.0)*r22*x4106))+((sj5*x4107))+(((0.07239889)*x4096)));
evalcond[3]=((((-0.07239889)*x4097))+(((-1.0)*r12*x4106))+((sj5*x4103))+(((-1.0)*r10*sj5*x4101)));
evalcond[4]=((((-1.0)*r20*x4104))+((x4098*x4100))+((r22*x4099))+x4097+(((-1.0)*r20*x4101*x4105))+(((-1.0)*cj4*r21*x4101)));
evalcond[5]=(((r20*x4098))+((r21*x4110))+((r22*x4108))+(((-0.997375754782803)*x4096))+((x4100*x4104))+(((-1.0)*r20*x4101*x4102)));
evalcond[6]=(((cj5*r11*x4098))+(((-1.0)*r10*x4104))+(((-1.0)*cj4*r11*x4101))+(((-1.0)*r10*x4101*x4105))+x4096+((r12*x4099)));
evalcond[7]=(((r10*x4098))+(((-1.0)*r10*x4101*x4102))+((r12*x4108))+(((0.997375754782803)*x4097))+((r11*x4110))+((x4102*x4103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4111=((57213427.3137081)*sj6);
IkReal x4112=((57213427.3137081)*cj6);
if( IKabs(((((-1.0)*r11*x4111))+(((-752808254.127739)*py))+((r10*x4112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x4111))+(((-1.0)*r20*x4112))+(((752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x4111))+(((-752808254.127739)*py))+((r10*x4112))))+IKsqr((((r21*x4111))+(((-1.0)*r20*x4112))+(((752808254.127739)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x4111))+(((-752808254.127739)*py))+((r10*x4112))), (((r21*x4111))+(((-1.0)*r20*x4112))+(((752808254.127739)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4113=IKcos(j2);
IkReal x4114=IKsin(j2);
IkReal x4115=(sj4*sj6);
IkReal x4116=(sj4*sj5);
IkReal x4117=(cj5*r21);
IkReal x4118=((1.0)*cj6);
IkReal x4119=(cj4*cj5);
IkReal x4120=(r11*sj6);
IkReal x4121=(cj5*sj4);
IkReal x4122=((1.0)*cj5);
IkReal x4123=(r21*sj6);
IkReal x4124=(cj4*sj5);
IkReal x4125=((0.076)*cj6);
IkReal x4126=(cj6*sj4);
IkReal x4127=((1.0)*cj4*sj6);
evalcond[0]=((((-0.076)*x4123))+((r20*x4125))+(((-1.0)*pz))+(((1.32835950524835e-9)*x4113)));
evalcond[1]=((((-0.076)*x4120))+(((-1.0)*py))+(((-1.32835950524835e-9)*x4114))+((r10*x4125)));
evalcond[2]=((((-1.0)*r22*x4122))+((sj5*x4123))+(((-1.0)*r20*sj5*x4118))+(((-0.36403599)*x4113)));
evalcond[3]=((((-1.0)*r10*sj5*x4118))+(((-1.0)*r12*x4122))+((sj5*x4120))+(((0.36403599)*x4114)));
evalcond[4]=((((-1.0)*r20*x4127))+(((-1.0)*r20*x4118*x4121))+x4114+(((-1.0)*cj4*r21*x4118))+((x4115*x4117))+((r22*x4116)));
evalcond[5]=(((r21*x4126))+((cj4*sj6*x4117))+((r20*x4115))+(((0.931384876172381)*x4113))+(((-1.0)*r20*x4118*x4119))+((r22*x4124)));
evalcond[6]=(((r12*x4116))+(((-1.0)*r10*x4118*x4121))+(((-1.0)*r10*x4127))+((cj5*r11*x4115))+x4113+(((-1.0)*cj4*r11*x4118)));
evalcond[7]=(((r12*x4124))+(((-1.0)*r10*x4118*x4119))+(((-0.931384876172381)*x4114))+((r11*x4126))+((x4119*x4120))+((r10*x4115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4128=((0.584615384615385)*cj6);
IkReal x4129=((0.584615384615385)*sj6);
if( IKabs(((((-1.0)*r11*x4129))+(((-7.69230769230769)*py))+((r10*x4128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x4129))+(((-1.0)*r20*x4128))+(((7.69230769230769)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x4129))+(((-7.69230769230769)*py))+((r10*x4128))))+IKsqr((((r21*x4129))+(((-1.0)*r20*x4128))+(((7.69230769230769)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x4129))+(((-7.69230769230769)*py))+((r10*x4128))), (((r21*x4129))+(((-1.0)*r20*x4128))+(((7.69230769230769)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4130=IKcos(j2);
IkReal x4131=IKsin(j2);
IkReal x4132=(sj4*sj5);
IkReal x4133=(r21*sj4);
IkReal x4134=(cj5*sj6);
IkReal x4135=((0.076)*sj6);
IkReal x4136=(r20*sj6);
IkReal x4137=((1.0)*cj4);
IkReal x4138=(r10*sj4);
IkReal x4139=(cj4*sj5);
IkReal x4140=(cj6*r11);
IkReal x4141=((0.076)*cj6);
IkReal x4142=((1.0)*cj5*cj6);
IkReal x4143=(cj5*cj6*x4137);
evalcond[0]=((((-1.0)*r21*x4135))+(((-1.0)*pz))+(((0.13)*x4130))+((r20*x4141)));
evalcond[1]=(((r10*x4141))+(((-1.0)*py))+(((-0.13)*x4131))+(((-1.0)*r11*x4135)));
evalcond[2]=(((sj4*x4136))+((r22*x4139))+((cj6*x4133))+((cj4*r21*x4134))+x4130+(((-1.0)*r20*x4143)));
evalcond[3]=(((r22*x4132))+(((-1.0)*r20*sj4*x4142))+(((-1.0)*cj6*r21*x4137))+x4131+((x4133*x4134))+(((-1.0)*x4136*x4137)));
evalcond[4]=(((r11*sj4*x4134))+((r12*x4132))+x4130+(((-1.0)*x4138*x4142))+(((-1.0)*r10*sj6*x4137))+(((-1.0)*x4137*x4140)));
evalcond[5]=(((sj6*x4138))+((sj4*x4140))+(((-1.0)*x4131))+((cj4*r11*x4134))+((r12*x4139))+(((-1.0)*r10*x4143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4144=((3.04)*cj6);
IkReal x4145=((3.04)*sj6);
if( IKabs(((((40.0)*py))+((r11*x4145))+(((-1.0)*r10*x4144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x4144))+(((-40.0)*pz))+(((-1.0)*r21*x4145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((40.0)*py))+((r11*x4145))+(((-1.0)*r10*x4144))))+IKsqr((((r20*x4144))+(((-40.0)*pz))+(((-1.0)*r21*x4145))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((40.0)*py))+((r11*x4145))+(((-1.0)*r10*x4144))), (((r20*x4144))+(((-40.0)*pz))+(((-1.0)*r21*x4145))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4146=IKsin(j2);
IkReal x4147=IKcos(j2);
IkReal x4148=(sj4*sj6);
IkReal x4149=(sj4*sj5);
IkReal x4150=(cj5*r21);
IkReal x4151=(cj5*cj6);
IkReal x4152=(r11*sj6);
IkReal x4153=((1.0)*sj4);
IkReal x4154=((1.0)*cj4);
IkReal x4155=(cj4*sj5);
IkReal x4156=(cj6*r11);
IkReal x4157=((0.076)*cj6);
IkReal x4158=(cj6*r21);
IkReal x4159=(r20*x4154);
evalcond[0]=((((-0.025)*x4147))+(((-0.076)*r21*sj6))+(((-1.0)*pz))+((r20*x4157)));
evalcond[1]=(((r10*x4157))+(((-1.0)*py))+(((0.025)*x4146))+(((-0.076)*x4152)));
evalcond[2]=(((cj4*cj5*x4152))+(((-1.0)*r10*x4151*x4154))+((sj4*x4156))+((r10*x4148))+((r12*x4155))+x4146);
evalcond[3]=((((-1.0)*r20*x4151*x4153))+(((-1.0)*sj6*x4159))+((r22*x4149))+(((-1.0)*x4154*x4158))+x4146+((x4148*x4150)));
evalcond[4]=(((sj4*x4158))+((cj4*sj6*x4150))+(((-1.0)*x4147))+((r22*x4155))+(((-1.0)*x4151*x4159))+((r20*x4148)));
evalcond[5]=((((-1.0)*r10*x4151*x4153))+((r12*x4149))+(((-1.0)*x4154*x4156))+x4147+(((-1.0)*r10*sj6*x4154))+((cj5*r11*x4148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4160=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x4160.valid){
continue;
}
CheckValue<IkReal> x4161=IKPowWithIntegerCheck(sj3,-1);
if(!x4161.valid){
continue;
}
if( IKabs(((x4160.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4161.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4160.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))))+IKsqr(((x4161.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x4160.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))), ((x4161.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4162=IKsin(j2);
IkReal x4163=IKcos(j2);
IkReal x4164=(sj4*sj6);
IkReal x4165=(sj4*sj5);
IkReal x4166=((1.0)*cj6);
IkReal x4167=(cj4*cj5);
IkReal x4168=((0.0775)*cj3);
IkReal x4169=((1.0)*cj5);
IkReal x4170=((0.076)*sj6);
IkReal x4171=(cj5*sj4);
IkReal x4172=(sj5*sj6);
IkReal x4173=(cj4*sj5);
IkReal x4174=((0.076)*cj6);
IkReal x4175=(cj6*sj4);
IkReal x4176=(sj3*x4162);
IkReal x4177=(sj3*x4163);
IkReal x4178=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r20*sj5*x4166))+((r21*x4172))+x4177+(((-1.0)*r22*x4169)));
evalcond[1]=(((r11*x4172))+(((-1.0)*r12*x4169))+(((-1.0)*x4176))+(((-1.0)*r10*sj5*x4166)));
evalcond[2]=(((r22*x4165))+((cj5*r21*x4164))+(((-1.0)*r20*x4178))+(((-1.0)*cj4*r21*x4166))+x4162+(((-1.0)*r20*x4166*x4171)));
evalcond[3]=(((r22*x4173))+((r20*x4164))+((r21*x4175))+((r21*sj6*x4167))+(((-1.0)*r20*x4166*x4167))+((cj3*x4163)));
evalcond[4]=((((0.3425)*x4177))+(((-1.0)*r21*x4170))+(((-1.0)*pz))+(((0.0525)*x4163))+((x4163*x4168))+((r20*x4174)));
evalcond[5]=((((-1.0)*cj4*r11*x4166))+x4163+((r12*x4165))+((cj5*r11*x4164))+(((-1.0)*r10*x4166*x4171))+(((-1.0)*r10*x4178)));
evalcond[6]=((((-0.3425)*x4176))+(((-0.0525)*x4162))+(((-1.0)*py))+(((-1.0)*x4162*x4168))+((r10*x4174))+(((-1.0)*r11*x4170)));
evalcond[7]=(((r11*x4175))+((r10*x4164))+((r12*x4173))+((r11*sj6*x4167))+(((-1.0)*cj3*x4162))+(((-1.0)*r10*x4166*x4167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4179=((1.0)*sj4);
IkReal x4180=(r21*sj6);
IkReal x4181=(cj6*r20);
CheckValue<IkReal> x4182=IKPowWithIntegerCheck(sj3,-1);
if(!x4182.valid){
continue;
}
if( IKabs(((((-1.0)*r22*sj5*x4179))+((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*cj5*x4179*x4180))+((cj5*sj4*x4181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4182.value)*((((cj5*r22))+(((-1.0)*sj5*x4180))+((sj5*x4181)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*sj5*x4179))+((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*cj5*x4179*x4180))+((cj5*sj4*x4181))))+IKsqr(((x4182.value)*((((cj5*r22))+(((-1.0)*sj5*x4180))+((sj5*x4181))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*sj5*x4179))+((cj4*r20*sj6))+((cj4*cj6*r21))+(((-1.0)*cj5*x4179*x4180))+((cj5*sj4*x4181))), ((x4182.value)*((((cj5*r22))+(((-1.0)*sj5*x4180))+((sj5*x4181))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4183=IKsin(j2);
IkReal x4184=IKcos(j2);
IkReal x4185=(sj4*sj6);
IkReal x4186=(sj4*sj5);
IkReal x4187=((1.0)*cj6);
IkReal x4188=(cj4*cj5);
IkReal x4189=((0.0775)*cj3);
IkReal x4190=((1.0)*cj5);
IkReal x4191=((0.076)*sj6);
IkReal x4192=(cj5*sj4);
IkReal x4193=(sj5*sj6);
IkReal x4194=(cj4*sj5);
IkReal x4195=((0.076)*cj6);
IkReal x4196=(cj6*sj4);
IkReal x4197=(sj3*x4183);
IkReal x4198=(sj3*x4184);
IkReal x4199=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r20*sj5*x4187))+((r21*x4193))+x4198+(((-1.0)*r22*x4190)));
evalcond[1]=((((-1.0)*r12*x4190))+((r11*x4193))+(((-1.0)*r10*sj5*x4187))+(((-1.0)*x4197)));
evalcond[2]=((((-1.0)*r20*x4199))+((cj5*r21*x4185))+((r22*x4186))+x4183+(((-1.0)*cj4*r21*x4187))+(((-1.0)*r20*x4187*x4192)));
evalcond[3]=(((r20*x4185))+((r21*x4196))+((cj3*x4184))+((r22*x4194))+(((-1.0)*r20*x4187*x4188))+((r21*sj6*x4188)));
evalcond[4]=(((r20*x4195))+(((0.0525)*x4184))+(((0.3425)*x4198))+(((-1.0)*r21*x4191))+(((-1.0)*pz))+((x4184*x4189)));
evalcond[5]=(((cj5*r11*x4185))+((r12*x4186))+(((-1.0)*cj4*r11*x4187))+x4184+(((-1.0)*r10*x4187*x4192))+(((-1.0)*r10*x4199)));
evalcond[6]=((((-1.0)*x4183*x4189))+(((-1.0)*r11*x4191))+(((-0.3425)*x4197))+(((-1.0)*py))+((r10*x4195))+(((-0.0525)*x4183)));
evalcond[7]=(((r12*x4194))+((r11*x4196))+(((-1.0)*cj3*x4183))+((r11*sj6*x4188))+(((-1.0)*r10*x4187*x4188))+((r10*x4185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4200=(cj6*sj5);
IkReal x4201=(sj5*sj6);
CheckValue<IkReal> x4202=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4202.valid){
continue;
}
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r12))+((r11*x4201))+(((-1.0)*r10*x4200)))),IkReal((((cj5*r22))+(((-1.0)*r21*x4201))+((r20*x4200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4202.value)))+(x4203.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4204=IKsin(j2);
IkReal x4205=IKcos(j2);
IkReal x4206=(sj4*sj6);
IkReal x4207=(sj4*sj5);
IkReal x4208=((1.0)*cj6);
IkReal x4209=(cj4*cj5);
IkReal x4210=((0.0775)*cj3);
IkReal x4211=((1.0)*cj5);
IkReal x4212=((0.076)*sj6);
IkReal x4213=(cj5*sj4);
IkReal x4214=(sj5*sj6);
IkReal x4215=(cj4*sj5);
IkReal x4216=((0.076)*cj6);
IkReal x4217=(cj6*sj4);
IkReal x4218=(sj3*x4204);
IkReal x4219=(sj3*x4205);
IkReal x4220=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r22*x4211))+x4219+(((-1.0)*r20*sj5*x4208))+((r21*x4214)));
evalcond[1]=(((r11*x4214))+(((-1.0)*r12*x4211))+(((-1.0)*r10*sj5*x4208))+(((-1.0)*x4218)));
evalcond[2]=(((r22*x4207))+(((-1.0)*cj4*r21*x4208))+((cj5*r21*x4206))+(((-1.0)*r20*x4208*x4213))+x4204+(((-1.0)*r20*x4220)));
evalcond[3]=(((r22*x4215))+(((-1.0)*r20*x4208*x4209))+((cj3*x4205))+((r21*sj6*x4209))+((r20*x4206))+((r21*x4217)));
evalcond[4]=(((x4205*x4210))+(((-1.0)*r21*x4212))+(((-1.0)*pz))+((r20*x4216))+(((0.0525)*x4205))+(((0.3425)*x4219)));
evalcond[5]=(((cj5*r11*x4206))+(((-1.0)*r10*x4208*x4213))+(((-1.0)*r10*x4220))+(((-1.0)*cj4*r11*x4208))+x4205+((r12*x4207)));
evalcond[6]=((((-1.0)*x4204*x4210))+(((-1.0)*r11*x4212))+(((-0.3425)*x4218))+(((-1.0)*py))+(((-0.0525)*x4204))+((r10*x4216)));
evalcond[7]=(((r12*x4215))+((r11*x4217))+(((-1.0)*r10*x4208*x4209))+((r10*x4206))+((r11*sj6*x4209))+(((-1.0)*cj3*x4204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4221=(r21*sj6);
IkReal x4222=(cj6*r20);
IkReal x4223=(cj5*r22);
IkReal x4224=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*pz))+(((0.980645161290323)*x4221))+(((-1.0)*x4222*x4224))+(((-4.41935483870968)*x4223))+((x4221*x4224))+(((-0.980645161290323)*x4222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x4222))+(((-1.0)*x4223))+((sj5*x4221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*pz))+(((0.980645161290323)*x4221))+(((-1.0)*x4222*x4224))+(((-4.41935483870968)*x4223))+((x4221*x4224))+(((-0.980645161290323)*x4222))))+IKsqr(((((-1.0)*sj5*x4222))+(((-1.0)*x4223))+((sj5*x4221))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*pz))+(((0.980645161290323)*x4221))+(((-1.0)*x4222*x4224))+(((-4.41935483870968)*x4223))+((x4221*x4224))+(((-0.980645161290323)*x4222))), ((((-1.0)*sj5*x4222))+(((-1.0)*x4223))+((sj5*x4221))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x4225=IKcos(j3);
IkReal x4226=IKsin(j3);
IkReal x4227=(r21*sj6);
IkReal x4228=(cj6*r20);
IkReal x4229=(cj4*cj5);
evalcond[0]=((((-1.0)*sj5*x4228))+(((-1.0)*x4225))+(((-1.0)*cj5*r22))+((sj5*x4227)));
evalcond[1]=((0.293)+(((-0.3425)*x4225))+(((-1.0)*pz))+(((-0.076)*x4227))+(((0.076)*x4228))+(((0.0775)*x4226)));
evalcond[2]=((((-1.0)*x4228*x4229))+((cj4*r22*sj5))+((x4227*x4229))+((cj6*r21*sj4))+x4226+((r20*sj4*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x4230=((1.0)*cj5);
IkReal x4231=(sj5*sj6);
IkReal x4232=((1.0)*cj6*sj5);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
j2eval[2]=((IKabs(((((-1.0)*r12*x4230))+(((-1.0)*r10*x4232))+((r11*x4231)))))+(IKabs((((r01*x4231))+(((-1.0)*r02*x4230))+(((-1.0)*r00*x4232))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4233=IKPowWithIntegerCheck(sj3,-1);
if(!x4233.valid){
continue;
}
CheckValue<IkReal> x4234=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x4234.valid){
continue;
}
if( IKabs(((x4233.value)*(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4234.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4233.value)*(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))))+IKsqr(((x4234.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x4233.value)*(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))), ((x4234.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4235=IKcos(j2);
IkReal x4236=IKsin(j2);
IkReal x4237=(r11*sj6);
IkReal x4238=(cj4*cj5);
IkReal x4239=(r01*sj6);
IkReal x4240=(r02*sj5);
IkReal x4241=(cj5*sj4);
IkReal x4242=(sj4*sj6);
IkReal x4243=((0.0775)*cj3);
IkReal x4244=(r12*sj5);
IkReal x4245=((1.0)*cj3);
IkReal x4246=((1.0)*cj4);
IkReal x4247=(cj6*r11);
IkReal x4248=(cj6*r01);
IkReal x4249=((1.0)*cj5);
IkReal x4250=((0.076)*cj6);
IkReal x4251=(sj3*x4236);
IkReal x4252=((1.0)*cj6*r10);
IkReal x4253=(sj3*x4235);
IkReal x4254=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r12*x4249))+(((-1.0)*x4251))+((sj5*x4237))+(((-1.0)*sj5*x4252)));
evalcond[1]=((((-1.0)*x4253))+(((-1.0)*r02*x4249))+((sj5*x4239))+(((-1.0)*sj5*x4254)));
evalcond[2]=(((sj4*x4244))+((x4237*x4241))+(((-1.0)*x4241*x4252))+x4235+(((-1.0)*x4246*x4247))+(((-1.0)*r10*sj6*x4246)));
evalcond[3]=((((-0.3425)*x4253))+(((-1.0)*x4235*x4243))+((r00*x4250))+(((-1.0)*px))+(((-0.076)*x4239))+(((-0.0525)*x4235)));
evalcond[4]=((((-0.3425)*x4251))+((r10*x4250))+(((-1.0)*py))+(((-0.076)*x4237))+(((-1.0)*x4236*x4243))+(((-0.0525)*x4236)));
evalcond[5]=(((r10*x4242))+(((-1.0)*x4238*x4252))+((cj4*x4244))+((sj4*x4247))+((x4237*x4238))+(((-1.0)*x4236*x4245)));
evalcond[6]=((((-1.0)*x4238*x4254))+((cj4*x4240))+((r00*x4242))+((sj4*x4248))+((x4238*x4239))+(((-1.0)*x4235*x4245)));
evalcond[7]=(((x4239*x4241))+((sj4*x4240))+(((-1.0)*x4236))+(((-1.0)*x4241*x4254))+(((-1.0)*x4246*x4248))+(((-1.0)*r00*sj6*x4246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4255=(cj5*sj4);
IkReal x4256=(cj6*r10);
IkReal x4257=(r11*sj6);
IkReal x4258=((1.0)*sj5);
CheckValue<IkReal> x4259=IKPowWithIntegerCheck(sj3,-1);
if(!x4259.valid){
continue;
}
if( IKabs(((x4259.value)*(((((-1.0)*cj5*r12))+(((-1.0)*x4256*x4258))+((sj5*x4257)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*sj4*x4258))+((cj4*cj6*r11))+(((-1.0)*x4255*x4257))+((cj4*r10*sj6))+((x4255*x4256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4259.value)*(((((-1.0)*cj5*r12))+(((-1.0)*x4256*x4258))+((sj5*x4257))))))+IKsqr(((((-1.0)*r12*sj4*x4258))+((cj4*cj6*r11))+(((-1.0)*x4255*x4257))+((cj4*r10*sj6))+((x4255*x4256))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x4259.value)*(((((-1.0)*cj5*r12))+(((-1.0)*x4256*x4258))+((sj5*x4257))))), ((((-1.0)*r12*sj4*x4258))+((cj4*cj6*r11))+(((-1.0)*x4255*x4257))+((cj4*r10*sj6))+((x4255*x4256))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4260=IKcos(j2);
IkReal x4261=IKsin(j2);
IkReal x4262=(r11*sj6);
IkReal x4263=(cj4*cj5);
IkReal x4264=(r01*sj6);
IkReal x4265=(r02*sj5);
IkReal x4266=(cj5*sj4);
IkReal x4267=(sj4*sj6);
IkReal x4268=((0.0775)*cj3);
IkReal x4269=(r12*sj5);
IkReal x4270=((1.0)*cj3);
IkReal x4271=((1.0)*cj4);
IkReal x4272=(cj6*r11);
IkReal x4273=(cj6*r01);
IkReal x4274=((1.0)*cj5);
IkReal x4275=((0.076)*cj6);
IkReal x4276=(sj3*x4261);
IkReal x4277=((1.0)*cj6*r10);
IkReal x4278=(sj3*x4260);
IkReal x4279=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r12*x4274))+(((-1.0)*sj5*x4277))+((sj5*x4262))+(((-1.0)*x4276)));
evalcond[1]=((((-1.0)*sj5*x4279))+((sj5*x4264))+(((-1.0)*r02*x4274))+(((-1.0)*x4278)));
evalcond[2]=((((-1.0)*x4271*x4272))+(((-1.0)*r10*sj6*x4271))+x4260+((x4262*x4266))+((sj4*x4269))+(((-1.0)*x4266*x4277)));
evalcond[3]=(((r00*x4275))+(((-0.0525)*x4260))+(((-0.076)*x4264))+(((-0.3425)*x4278))+(((-1.0)*px))+(((-1.0)*x4260*x4268)));
evalcond[4]=((((-0.0525)*x4261))+(((-0.076)*x4262))+(((-0.3425)*x4276))+(((-1.0)*py))+(((-1.0)*x4261*x4268))+((r10*x4275)));
evalcond[5]=(((cj4*x4269))+(((-1.0)*x4263*x4277))+(((-1.0)*x4261*x4270))+((x4262*x4263))+((sj4*x4272))+((r10*x4267)));
evalcond[6]=(((cj4*x4265))+(((-1.0)*x4263*x4279))+((x4263*x4264))+(((-1.0)*x4260*x4270))+((sj4*x4273))+((r00*x4267)));
evalcond[7]=((((-1.0)*x4271*x4273))+((x4264*x4266))+(((-1.0)*r00*sj6*x4271))+((sj4*x4265))+(((-1.0)*x4261))+(((-1.0)*x4266*x4279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4280=((1.0)*cj5);
IkReal x4281=(sj5*sj6);
IkReal x4282=((1.0)*cj6*sj5);
CheckValue<IkReal> x4283=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4283.valid){
continue;
}
CheckValue<IkReal> x4284 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4282))+((r11*x4281))+(((-1.0)*r12*x4280)))),IkReal(((((-1.0)*r00*x4282))+(((-1.0)*r02*x4280))+((r01*x4281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4284.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4283.value)))+(x4284.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4285=IKcos(j2);
IkReal x4286=IKsin(j2);
IkReal x4287=(r11*sj6);
IkReal x4288=(cj4*cj5);
IkReal x4289=(r01*sj6);
IkReal x4290=(r02*sj5);
IkReal x4291=(cj5*sj4);
IkReal x4292=(sj4*sj6);
IkReal x4293=((0.0775)*cj3);
IkReal x4294=(r12*sj5);
IkReal x4295=((1.0)*cj3);
IkReal x4296=((1.0)*cj4);
IkReal x4297=(cj6*r11);
IkReal x4298=(cj6*r01);
IkReal x4299=((1.0)*cj5);
IkReal x4300=((0.076)*cj6);
IkReal x4301=(sj3*x4286);
IkReal x4302=((1.0)*cj6*r10);
IkReal x4303=(sj3*x4285);
IkReal x4304=((1.0)*cj6*r00);
evalcond[0]=(((sj5*x4287))+(((-1.0)*sj5*x4302))+(((-1.0)*x4301))+(((-1.0)*r12*x4299)));
evalcond[1]=(((sj5*x4289))+(((-1.0)*sj5*x4304))+(((-1.0)*x4303))+(((-1.0)*r02*x4299)));
evalcond[2]=((((-1.0)*x4291*x4302))+(((-1.0)*x4296*x4297))+((sj4*x4294))+x4285+((x4287*x4291))+(((-1.0)*r10*sj6*x4296)));
evalcond[3]=((((-0.0525)*x4285))+(((-0.3425)*x4303))+(((-0.076)*x4289))+(((-1.0)*x4285*x4293))+(((-1.0)*px))+((r00*x4300)));
evalcond[4]=((((-0.0525)*x4286))+(((-0.3425)*x4301))+(((-0.076)*x4287))+(((-1.0)*py))+((r10*x4300))+(((-1.0)*x4286*x4293)));
evalcond[5]=(((cj4*x4294))+((r10*x4292))+((sj4*x4297))+((x4287*x4288))+(((-1.0)*x4286*x4295))+(((-1.0)*x4288*x4302)));
evalcond[6]=(((cj4*x4290))+((r00*x4292))+((sj4*x4298))+(((-1.0)*x4285*x4295))+((x4288*x4289))+(((-1.0)*x4288*x4304)));
evalcond[7]=((((-1.0)*x4291*x4304))+(((-1.0)*x4296*x4298))+((sj4*x4290))+((x4289*x4291))+(((-1.0)*x4286))+(((-1.0)*r00*sj6*x4296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4305=(cj6*r20);
IkReal x4306=(cj4*cj5);
IkReal x4307=(r21*sj6);
if( IKabs((((cj4*r22*sj5))+((cj6*r21*sj4))+((x4306*x4307))+((r20*sj4*sj6))+(((-1.0)*x4305*x4306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+(((-1.0)*sj5*x4307))+((sj5*x4305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r22*sj5))+((cj6*r21*sj4))+((x4306*x4307))+((r20*sj4*sj6))+(((-1.0)*x4305*x4306))))+IKsqr((((cj5*r22))+(((-1.0)*sj5*x4307))+((sj5*x4305))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj4*r22*sj5))+((cj6*r21*sj4))+((x4306*x4307))+((r20*sj4*sj6))+(((-1.0)*x4305*x4306))), (((cj5*r22))+(((-1.0)*sj5*x4307))+((sj5*x4305))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x4308=IKcos(j3);
IkReal x4309=IKsin(j3);
IkReal x4310=(r21*sj6);
IkReal x4311=(cj6*r20);
IkReal x4312=(cj4*cj5);
evalcond[0]=((((-1.0)*sj5*x4311))+((sj5*x4310))+(((-1.0)*cj5*r22))+x4308);
evalcond[1]=((-0.293)+(((-0.0775)*x4309))+(((-1.0)*pz))+(((0.3425)*x4308))+(((-0.076)*x4310))+(((0.076)*x4311)));
evalcond[2]=(((x4310*x4312))+((cj4*r22*sj5))+((cj6*r21*sj4))+(((-1.0)*x4309))+((r20*sj4*sj6))+(((-1.0)*x4311*x4312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x4313=((1.0)*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*x4313))+((r11*sj5*sj6)))))+(IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x4313))+((cj5*r02))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4314=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x4314.valid){
continue;
}
CheckValue<IkReal> x4315=IKPowWithIntegerCheck(sj3,-1);
if(!x4315.valid){
continue;
}
if( IKabs(((x4314.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4315.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4314.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))))+IKsqr(((x4315.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x4314.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))), ((x4315.value)*((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4316=IKsin(j2);
IkReal x4317=IKcos(j2);
IkReal x4318=(r11*sj6);
IkReal x4319=(cj4*cj5);
IkReal x4320=(r01*sj6);
IkReal x4321=((0.0775)*cj3);
IkReal x4322=(r02*sj5);
IkReal x4323=(cj5*sj4);
IkReal x4324=(sj4*sj6);
IkReal x4325=(r12*sj5);
IkReal x4326=((1.0)*cj4);
IkReal x4327=(cj6*r11);
IkReal x4328=(cj6*r01);
IkReal x4329=((1.0)*cj5);
IkReal x4330=((0.076)*cj6);
IkReal x4331=(sj3*x4316);
IkReal x4332=((1.0)*cj6*r10);
IkReal x4333=(sj3*x4317);
IkReal x4334=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*sj5*x4334))+((sj5*x4320))+(((-1.0)*r02*x4329))+x4333);
evalcond[1]=((((-1.0)*sj5*x4332))+(((-1.0)*x4331))+((sj5*x4318))+(((-1.0)*r12*x4329)));
evalcond[2]=((((-1.0)*r00*sj6*x4326))+((x4320*x4323))+(((-1.0)*x4326*x4328))+(((-1.0)*x4323*x4334))+x4316+((sj4*x4322)));
evalcond[3]=((((-1.0)*r10*sj6*x4326))+((x4318*x4323))+(((-1.0)*x4326*x4327))+(((-1.0)*x4323*x4332))+x4317+((sj4*x4325)));
evalcond[4]=(((r00*x4324))+((cj4*x4322))+((cj3*x4317))+((x4319*x4320))+((sj4*x4328))+(((-1.0)*x4319*x4334)));
evalcond[5]=(((r00*x4330))+((x4317*x4321))+(((0.0525)*x4317))+(((-1.0)*px))+(((-0.076)*x4320))+(((0.3425)*x4333)));
evalcond[6]=((((-1.0)*x4316*x4321))+(((-0.0525)*x4316))+(((-1.0)*py))+(((-0.076)*x4318))+((r10*x4330))+(((-0.3425)*x4331)));
evalcond[7]=(((cj4*x4325))+(((-1.0)*cj3*x4316))+((sj4*x4327))+((x4318*x4319))+((r10*x4324))+(((-1.0)*x4319*x4332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4335=((1.0)*sj5);
IkReal x4336=(r01*sj6);
IkReal x4337=(cj5*sj4);
IkReal x4338=(cj6*r00);
CheckValue<IkReal> x4339=IKPowWithIntegerCheck(sj3,-1);
if(!x4339.valid){
continue;
}
if( IKabs((((x4337*x4338))+((cj4*r00*sj6))+(((-1.0)*x4336*x4337))+(((-1.0)*r02*sj4*x4335))+((cj4*cj6*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4339.value)*((((sj5*x4338))+(((-1.0)*x4335*x4336))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4337*x4338))+((cj4*r00*sj6))+(((-1.0)*x4336*x4337))+(((-1.0)*r02*sj4*x4335))+((cj4*cj6*r01))))+IKsqr(((x4339.value)*((((sj5*x4338))+(((-1.0)*x4335*x4336))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4337*x4338))+((cj4*r00*sj6))+(((-1.0)*x4336*x4337))+(((-1.0)*r02*sj4*x4335))+((cj4*cj6*r01))), ((x4339.value)*((((sj5*x4338))+(((-1.0)*x4335*x4336))+((cj5*r02))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4340=IKsin(j2);
IkReal x4341=IKcos(j2);
IkReal x4342=(r11*sj6);
IkReal x4343=(cj4*cj5);
IkReal x4344=(r01*sj6);
IkReal x4345=((0.0775)*cj3);
IkReal x4346=(r02*sj5);
IkReal x4347=(cj5*sj4);
IkReal x4348=(sj4*sj6);
IkReal x4349=(r12*sj5);
IkReal x4350=((1.0)*cj4);
IkReal x4351=(cj6*r11);
IkReal x4352=(cj6*r01);
IkReal x4353=((1.0)*cj5);
IkReal x4354=((0.076)*cj6);
IkReal x4355=(sj3*x4340);
IkReal x4356=((1.0)*cj6*r10);
IkReal x4357=(sj3*x4341);
IkReal x4358=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r02*x4353))+x4357+(((-1.0)*sj5*x4358))+((sj5*x4344)));
evalcond[1]=((((-1.0)*r12*x4353))+(((-1.0)*sj5*x4356))+(((-1.0)*x4355))+((sj5*x4342)));
evalcond[2]=(((x4344*x4347))+(((-1.0)*r00*sj6*x4350))+(((-1.0)*x4350*x4352))+x4340+((sj4*x4346))+(((-1.0)*x4347*x4358)));
evalcond[3]=((((-1.0)*r10*sj6*x4350))+((x4342*x4347))+(((-1.0)*x4350*x4351))+x4341+((sj4*x4349))+(((-1.0)*x4347*x4356)));
evalcond[4]=(((r00*x4348))+((x4343*x4344))+((cj4*x4346))+(((-1.0)*x4343*x4358))+((sj4*x4352))+((cj3*x4341)));
evalcond[5]=((((0.3425)*x4357))+(((-1.0)*px))+(((-0.076)*x4344))+((x4341*x4345))+(((0.0525)*x4341))+((r00*x4354)));
evalcond[6]=((((-1.0)*x4340*x4345))+(((-1.0)*py))+(((-0.076)*x4342))+(((-0.3425)*x4355))+(((-0.0525)*x4340))+((r10*x4354)));
evalcond[7]=(((cj4*x4349))+(((-1.0)*cj3*x4340))+(((-1.0)*x4343*x4356))+((x4342*x4343))+((sj4*x4351))+((r10*x4348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4359=((1.0)*sj5);
CheckValue<IkReal> x4360=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4360.valid){
continue;
}
CheckValue<IkReal> x4361 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r12))+(((-1.0)*cj6*r10*x4359))+((r11*sj5*sj6)))),IkReal((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x4359))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4361.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4360.value)))+(x4361.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4362=IKsin(j2);
IkReal x4363=IKcos(j2);
IkReal x4364=(r11*sj6);
IkReal x4365=(cj4*cj5);
IkReal x4366=(r01*sj6);
IkReal x4367=((0.0775)*cj3);
IkReal x4368=(r02*sj5);
IkReal x4369=(cj5*sj4);
IkReal x4370=(sj4*sj6);
IkReal x4371=(r12*sj5);
IkReal x4372=((1.0)*cj4);
IkReal x4373=(cj6*r11);
IkReal x4374=(cj6*r01);
IkReal x4375=((1.0)*cj5);
IkReal x4376=((0.076)*cj6);
IkReal x4377=(sj3*x4362);
IkReal x4378=((1.0)*cj6*r10);
IkReal x4379=(sj3*x4363);
IkReal x4380=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*sj5*x4380))+(((-1.0)*r02*x4375))+((sj5*x4366))+x4379);
evalcond[1]=((((-1.0)*sj5*x4378))+((sj5*x4364))+(((-1.0)*x4377))+(((-1.0)*r12*x4375)));
evalcond[2]=((((-1.0)*x4369*x4380))+((x4366*x4369))+x4362+((sj4*x4368))+(((-1.0)*r00*sj6*x4372))+(((-1.0)*x4372*x4374)));
evalcond[3]=(((sj4*x4371))+(((-1.0)*r10*sj6*x4372))+x4363+(((-1.0)*x4369*x4378))+((x4364*x4369))+(((-1.0)*x4372*x4373)));
evalcond[4]=(((cj3*x4363))+((sj4*x4374))+(((-1.0)*x4365*x4380))+((r00*x4370))+((cj4*x4368))+((x4365*x4366)));
evalcond[5]=(((r00*x4376))+(((0.0525)*x4363))+((x4363*x4367))+(((-1.0)*px))+(((0.3425)*x4379))+(((-0.076)*x4366)));
evalcond[6]=(((r10*x4376))+(((-0.3425)*x4377))+(((-0.0525)*x4362))+(((-1.0)*x4362*x4367))+(((-1.0)*py))+(((-0.076)*x4364)));
evalcond[7]=(((sj4*x4373))+((r10*x4370))+(((-1.0)*cj3*x4362))+(((-1.0)*x4365*x4378))+((cj4*x4371))+((x4364*x4365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4381=(cj5*sj4);
IkReal x4382=((1.0)*sj6);
IkReal x4383=(cj4*cj6);
IkReal x4384=(sj4*sj5);
CheckValue<IkReal> x4385=IKPowWithIntegerCheck(cj1,-1);
if(!x4385.valid){
continue;
}
if( IKabs(((x4385.value)*((((r02*x4384))+(((-1.0)*cj4*r00*x4382))+(((-1.0)*r01*x4383))+((r01*sj6*x4381))+(((-1.0)*cj6*r00*x4381)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4381*x4382))+(((-1.0)*r12*x4384))+((cj6*r10*x4381))+((cj4*r10*sj6))+((r11*x4383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4385.value)*((((r02*x4384))+(((-1.0)*cj4*r00*x4382))+(((-1.0)*r01*x4383))+((r01*sj6*x4381))+(((-1.0)*cj6*r00*x4381))))))+IKsqr(((((-1.0)*r11*x4381*x4382))+(((-1.0)*r12*x4384))+((cj6*r10*x4381))+((cj4*r10*sj6))+((r11*x4383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x4385.value)*((((r02*x4384))+(((-1.0)*cj4*r00*x4382))+(((-1.0)*r01*x4383))+((r01*sj6*x4381))+(((-1.0)*cj6*r00*x4381))))), ((((-1.0)*r11*x4381*x4382))+(((-1.0)*r12*x4384))+((cj6*r10*x4381))+((cj4*r10*sj6))+((r11*x4383))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x4386=IKsin(j2);
IkReal x4387=((1.0)*cj4);
IkReal x4388=(cj5*sj4);
IkReal x4389=(sj4*sj5);
IkReal x4390=((1.0)*cj6);
IkReal x4391=((1.0)*x4386);
evalcond[0]=(((r11*sj6*x4388))+(IKcos(j2))+(((-1.0)*cj6*r11*x4387))+(((-1.0)*r10*sj6*x4387))+(((-1.0)*r10*x4388*x4390))+((r12*x4389)));
evalcond[1]=((((-1.0)*cj6*r21*x4387))+((r21*sj6*x4388))+((r22*x4389))+(((-1.0)*r20*sj6*x4387))+(((-1.0)*r20*x4388*x4390))+(((-1.0)*sj1*x4391)));
evalcond[2]=(((r02*x4389))+(((-1.0)*cj1*x4391))+(((-1.0)*r00*sj6*x4387))+(((-1.0)*cj6*r01*x4387))+((r01*sj6*x4388))+(((-1.0)*r00*x4388*x4390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4392=(sj5*sj6);
IkReal x4393=((1.0)*sj1);
IkReal x4394=(cj6*sj5);
IkReal x4395=((1.0)*cj1);
IkReal x4396=(cj5*r02);
IkReal x4397=(cj5*r22);
if( IKabs((((cj1*r01*x4392))+((r21*sj1*x4392))+(((-1.0)*r20*x4393*x4394))+(((-1.0)*x4395*x4396))+(((-1.0)*r00*x4394*x4395))+(((-1.0)*x4393*x4397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4392*x4393))+(((-1.0)*r20*x4394*x4395))+((cj1*r21*x4392))+(((-1.0)*x4395*x4397))+((sj1*x4396))+((r00*sj1*x4394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x4392))+((r21*sj1*x4392))+(((-1.0)*r20*x4393*x4394))+(((-1.0)*x4395*x4396))+(((-1.0)*r00*x4394*x4395))+(((-1.0)*x4393*x4397))))+IKsqr(((((-1.0)*r01*x4392*x4393))+(((-1.0)*r20*x4394*x4395))+((cj1*r21*x4392))+(((-1.0)*x4395*x4397))+((sj1*x4396))+((r00*sj1*x4394))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r01*x4392))+((r21*sj1*x4392))+(((-1.0)*r20*x4393*x4394))+(((-1.0)*x4395*x4396))+(((-1.0)*r00*x4394*x4395))+(((-1.0)*x4393*x4397))), ((((-1.0)*r01*x4392*x4393))+(((-1.0)*r20*x4394*x4395))+((cj1*r21*x4392))+(((-1.0)*x4395*x4397))+((sj1*x4396))+((r00*sj1*x4394))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x4398=IKcos(j3);
IkReal x4399=IKsin(j3);
IkReal x4400=(r21*sj6);
IkReal x4401=(r01*sj6);
IkReal x4402=((1.0)*cj5);
IkReal x4403=(cj6*r20);
IkReal x4404=(sj4*sj6);
IkReal x4405=((1.0)*sj5);
IkReal x4406=(cj6*r00);
IkReal x4407=(cj6*sj4);
IkReal x4408=(cj4*cj5);
IkReal x4409=(cj4*sj5);
IkReal x4410=(sj1*x4398);
IkReal x4411=(cj1*x4398);
IkReal x4412=(cj1*x4399);
IkReal x4413=(sj1*x4399);
IkReal x4414=((1.0)*x4411);
IkReal x4415=((1.0)*x4413);
IkReal x4416=(x4415+x4414);
evalcond[0]=(x4410+(((-1.0)*r02*x4402))+(((-1.0)*x4412))+(((-1.0)*x4405*x4406))+((sj5*x4401)));
evalcond[1]=((((-1.0)*x4403*x4405))+(((-1.0)*x4416))+((sj5*x4400))+(((-1.0)*r22*x4402)));
evalcond[2]=(((r22*x4409))+((r21*x4407))+x4412+((x4400*x4408))+(((-1.0)*cj4*x4402*x4403))+(((-1.0)*x4410))+((r20*x4404)));
evalcond[3]=(((x4401*x4408))+(((-1.0)*cj4*x4402*x4406))+((r00*x4404))+(((-1.0)*x4416))+((r01*x4407))+((r02*x4409)));
evalcond[4]=((((-0.0775)*x4410))+(((0.076)*x4403))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((-0.3425)*x4413))+(((-0.3425)*x4411))+(((-0.076)*x4400))+(((0.0775)*x4412)));
evalcond[5]=((((-0.0525)*cj1))+(((-0.0775)*x4413))+(((-0.0775)*x4411))+(((0.3425)*x4410))+(((0.076)*x4406))+(((-1.0)*px))+(((-0.3425)*x4412))+(((-0.076)*x4401))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4417=(cj6*sj5);
IkReal x4418=((1.0)*cj1);
IkReal x4419=(cj5*sj1);
IkReal x4420=(sj5*sj6);
IkReal x4421=((1.0)*sj1*x4420);
if( IKabs((((r20*sj1*x4417))+((r22*x4419))+((cj1*cj5*r02))+(((-1.0)*r01*x4418*x4420))+((cj1*r00*x4417))+(((-1.0)*r21*x4421)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r22*x4418))+((cj1*r21*x4420))+(((-1.0)*r20*x4417*x4418))+(((-1.0)*r01*x4421))+((r02*x4419))+((r00*sj1*x4417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x4417))+((r22*x4419))+((cj1*cj5*r02))+(((-1.0)*r01*x4418*x4420))+((cj1*r00*x4417))+(((-1.0)*r21*x4421))))+IKsqr(((((-1.0)*cj5*r22*x4418))+((cj1*r21*x4420))+(((-1.0)*r20*x4417*x4418))+(((-1.0)*r01*x4421))+((r02*x4419))+((r00*sj1*x4417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r20*sj1*x4417))+((r22*x4419))+((cj1*cj5*r02))+(((-1.0)*r01*x4418*x4420))+((cj1*r00*x4417))+(((-1.0)*r21*x4421))), ((((-1.0)*cj5*r22*x4418))+((cj1*r21*x4420))+(((-1.0)*r20*x4417*x4418))+(((-1.0)*r01*x4421))+((r02*x4419))+((r00*sj1*x4417))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x4422=IKsin(j3);
IkReal x4423=IKcos(j3);
IkReal x4424=(r21*sj6);
IkReal x4425=((1.0)*cj5);
IkReal x4426=(r01*sj6);
IkReal x4427=(cj6*r20);
IkReal x4428=(sj4*sj6);
IkReal x4429=((1.0)*sj5);
IkReal x4430=(cj6*r00);
IkReal x4431=(cj6*sj4);
IkReal x4432=(cj4*cj5);
IkReal x4433=(cj4*sj5);
IkReal x4434=(sj1*x4423);
IkReal x4435=(cj1*x4422);
IkReal x4436=(cj1*x4423);
IkReal x4437=(sj1*x4422);
IkReal x4438=(x4435+x4434);
evalcond[0]=(x4438+(((-1.0)*x4429*x4430))+(((-1.0)*r02*x4425))+((sj5*x4426)));
evalcond[1]=(x4437+(((-1.0)*x4436))+(((-1.0)*x4427*x4429))+(((-1.0)*r22*x4425))+((sj5*x4424)));
evalcond[2]=((((-1.0)*cj4*x4425*x4427))+((r22*x4433))+((r20*x4428))+x4438+((x4424*x4432))+((r21*x4431)));
evalcond[3]=(x4436+(((-1.0)*x4437))+(((-1.0)*cj4*x4425*x4430))+((r00*x4428))+((x4426*x4432))+((r02*x4433))+((r01*x4431)));
evalcond[4]=((((0.3425)*x4437))+(((-0.076)*x4424))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.076)*x4427))+(((0.0525)*sj1))+(((0.0775)*x4435))+(((0.0775)*x4434))+(((-0.3425)*x4436)));
evalcond[5]=((((0.076)*x4430))+(((0.0525)*cj1))+(((0.3425)*x4435))+(((0.3425)*x4434))+(((-0.076)*x4426))+(((-0.0775)*x4437))+(((-1.0)*px))+(((0.0775)*x4436))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4439=(r21*sj6);
IkReal x4440=(cj6*r20);
IkReal x4441=(cj5*r22);
IkReal x4442=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-0.980645161290323)*x4440))+(((12.9032258064516)*pz))+(((0.980645161290323)*x4439))+(((-4.41935483870968)*x4441))+((x4439*x4442))+(((-1.0)*x4440*x4442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x4439))+(((-1.0)*x4441))+(((-1.0)*sj5*x4440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-0.980645161290323)*x4440))+(((12.9032258064516)*pz))+(((0.980645161290323)*x4439))+(((-4.41935483870968)*x4441))+((x4439*x4442))+(((-1.0)*x4440*x4442))))+IKsqr((((sj5*x4439))+(((-1.0)*x4441))+(((-1.0)*sj5*x4440))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-0.980645161290323)*x4440))+(((12.9032258064516)*pz))+(((0.980645161290323)*x4439))+(((-4.41935483870968)*x4441))+((x4439*x4442))+(((-1.0)*x4440*x4442))), (((sj5*x4439))+(((-1.0)*x4441))+(((-1.0)*sj5*x4440))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4443=IKsin(j3);
IkReal x4444=IKcos(j3);
IkReal x4445=(sj4*sj6);
IkReal x4446=((1.0)*cj6);
IkReal x4447=(cj4*cj5);
IkReal x4448=((0.076)*sj6);
IkReal x4449=((1.0)*sj2);
IkReal x4450=(r11*sj6);
IkReal x4451=((1.0)*cj5);
IkReal x4452=(cj6*sj4);
IkReal x4453=(sj5*sj6);
IkReal x4454=(cj4*sj5);
IkReal x4455=((0.076)*cj6);
IkReal x4456=((0.0775)*x4444);
IkReal x4457=(cj2*x4443);
IkReal x4458=((1.0)*x4444);
evalcond[0]=(((r21*x4453))+(((-1.0)*x4458))+(((-1.0)*r20*sj5*x4446))+(((-1.0)*r22*x4451)));
evalcond[1]=(((sj5*x4450))+(((-1.0)*x4443*x4449))+(((-1.0)*r12*x4451))+(((-1.0)*r10*sj5*x4446)));
evalcond[2]=(((r01*x4453))+(((-1.0)*r02*x4451))+(((-1.0)*x4457))+(((-1.0)*r00*sj5*x4446)));
evalcond[3]=((0.293)+(((0.0775)*x4443))+((r20*x4455))+(((-1.0)*pz))+(((-0.3425)*x4444))+(((-1.0)*r21*x4448)));
evalcond[4]=(((r21*x4452))+((r21*sj6*x4447))+x4443+((r20*x4445))+(((-1.0)*r20*x4446*x4447))+((r22*x4454)));
evalcond[5]=((((-0.0525)*cj2))+((r00*x4455))+(((-1.0)*px))+(((-1.0)*r01*x4448))+(((-1.0)*cj2*x4456))+(((-0.3425)*x4457)));
evalcond[6]=((((-0.3425)*sj2*x4443))+(((-1.0)*r11*x4448))+(((-1.0)*sj2*x4456))+(((-1.0)*py))+(((-0.0525)*sj2))+((r10*x4455)));
evalcond[7]=((((-1.0)*x4444*x4449))+((r11*x4452))+((r10*x4445))+(((-1.0)*r10*x4446*x4447))+((r12*x4454))+((x4447*x4450)));
evalcond[8]=((((-1.0)*r00*x4446*x4447))+((r00*x4445))+((r01*x4452))+(((-1.0)*cj2*x4458))+((r01*sj6*x4447))+((r02*x4454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4459=(cj6*r20);
IkReal x4460=(cj5*r22);
IkReal x4461=(r21*sj6);
IkReal x4462=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((0.980645161290323)*x4459))+(((-0.980645161290323)*x4461))+((x4459*x4462))+(((4.41935483870968)*x4460))+(((-1.0)*x4461*x4462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4460+((sj5*x4459))+(((-1.0)*sj5*x4461)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((0.980645161290323)*x4459))+(((-0.980645161290323)*x4461))+((x4459*x4462))+(((4.41935483870968)*x4460))+(((-1.0)*x4461*x4462))))+IKsqr((x4460+((sj5*x4459))+(((-1.0)*sj5*x4461))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-12.9032258064516)*pz))+(((0.980645161290323)*x4459))+(((-0.980645161290323)*x4461))+((x4459*x4462))+(((4.41935483870968)*x4460))+(((-1.0)*x4461*x4462))), (x4460+((sj5*x4459))+(((-1.0)*sj5*x4461))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4463=IKsin(j3);
IkReal x4464=IKcos(j3);
IkReal x4465=(sj4*sj6);
IkReal x4466=(cj4*sj5);
IkReal x4467=((1.0)*cj6);
IkReal x4468=(cj4*cj5);
IkReal x4469=((0.076)*sj6);
IkReal x4470=((1.0)*sj2);
IkReal x4471=(r11*sj6);
IkReal x4472=((1.0)*cj5);
IkReal x4473=(r21*sj6);
IkReal x4474=(r01*sj6);
IkReal x4475=(cj6*sj4);
IkReal x4476=((0.076)*cj6);
IkReal x4477=((0.0775)*x4464);
IkReal x4478=(cj2*x4463);
evalcond[0]=(x4464+(((-1.0)*r20*sj5*x4467))+((sj5*x4473))+(((-1.0)*r22*x4472)));
evalcond[1]=(x4478+(((-1.0)*r00*sj5*x4467))+((sj5*x4474))+(((-1.0)*r02*x4472)));
evalcond[2]=((((-1.0)*r12*x4472))+(((-1.0)*x4463*x4470))+(((-1.0)*r10*sj5*x4467))+((sj5*x4471)));
evalcond[3]=((-0.293)+(((-1.0)*r21*x4469))+((r20*x4476))+(((0.3425)*x4464))+(((-1.0)*pz))+(((-0.0775)*x4463)));
evalcond[4]=((((-1.0)*r01*x4469))+(((0.0525)*cj2))+(((-1.0)*px))+((cj2*x4477))+(((0.3425)*x4478))+((r00*x4476)));
evalcond[5]=((((-0.3425)*sj2*x4463))+(((-1.0)*sj2*x4477))+((r10*x4476))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-1.0)*r11*x4469)));
evalcond[6]=(((r22*x4466))+((r21*x4475))+(((-1.0)*x4463))+((r20*x4465))+(((-1.0)*r20*x4467*x4468))+((x4468*x4473)));
evalcond[7]=((((-1.0)*r00*x4467*x4468))+((cj2*x4464))+((r00*x4465))+((r01*x4475))+((x4468*x4474))+((r02*x4466)));
evalcond[8]=(((r12*x4466))+(((-1.0)*x4464*x4470))+((r10*x4465))+((x4468*x4471))+(((-1.0)*r10*x4467*x4468))+((r11*x4475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4479=(cj5*r12);
IkReal x4480=(r11*sj6);
IkReal x4481=(cj6*r10*sj5);
if( IKabs(((((-1.0)*x4481))+((sj5*x4480))+(((-1.0)*x4479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-0.980645161290323)*x4480))+(((4.41935483870968)*x4481))+(((4.41935483870968)*x4479))+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-4.41935483870968)*sj5*x4480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4481))+((sj5*x4480))+(((-1.0)*x4479))))+IKsqr(((-0.67741935483871)+(((-0.980645161290323)*x4480))+(((4.41935483870968)*x4481))+(((4.41935483870968)*x4479))+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-4.41935483870968)*sj5*x4480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x4481))+((sj5*x4480))+(((-1.0)*x4479))), ((-0.67741935483871)+(((-0.980645161290323)*x4480))+(((4.41935483870968)*x4481))+(((4.41935483870968)*x4479))+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-4.41935483870968)*sj5*x4480))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4482=IKcos(j3);
IkReal x4483=IKsin(j3);
IkReal x4484=(sj4*sj6);
IkReal x4485=(cj4*sj5);
IkReal x4486=((0.076)*sj6);
IkReal x4487=(cj4*cj5);
IkReal x4488=(r11*sj6);
IkReal x4489=((1.0)*cj5);
IkReal x4490=(r21*sj6);
IkReal x4491=(r01*sj6);
IkReal x4492=(cj6*sj4);
IkReal x4493=((0.076)*cj6);
IkReal x4494=(cj1*x4483);
IkReal x4495=((1.0)*cj6*r10);
IkReal x4496=(sj1*x4482);
IkReal x4497=((1.0)*cj6*r20);
IkReal x4498=(cj1*x4482);
IkReal x4499=((1.0)*cj6*r00);
IkReal x4500=(sj1*x4483);
evalcond[0]=((((-1.0)*x4483))+(((-1.0)*r12*x4489))+(((-1.0)*sj5*x4495))+((sj5*x4488)));
evalcond[1]=(x4496+(((-1.0)*sj5*x4499))+(((-1.0)*r02*x4489))+((sj5*x4491)));
evalcond[2]=((((-1.0)*x4498))+(((-1.0)*sj5*x4497))+(((-1.0)*r22*x4489))+((sj5*x4490)));
evalcond[3]=((-0.0525)+(((-1.0)*r11*x4486))+(((-0.0775)*x4482))+((r10*x4493))+(((-1.0)*py))+(((-0.3425)*x4483)));
evalcond[4]=((((-1.0)*r21*x4486))+(((-1.0)*pz))+(((-0.3425)*x4498))+(((0.293)*cj1))+(((0.0775)*x4494))+((r20*x4493)));
evalcond[5]=((((-1.0)*px))+(((-0.0775)*x4500))+(((0.3425)*x4496))+(((-1.0)*r01*x4486))+((r00*x4493))+(((-0.293)*sj1)));
evalcond[6]=(((r20*x4484))+x4494+((x4487*x4490))+((r21*x4492))+((r22*x4485))+(((-1.0)*x4487*x4497)));
evalcond[7]=((((-1.0)*x4482))+((x4487*x4488))+((r10*x4484))+((r11*x4492))+((r12*x4485))+(((-1.0)*x4487*x4495)));
evalcond[8]=(((x4487*x4491))+((r02*x4485))+((r00*x4484))+(((-1.0)*x4500))+((r01*x4492))+(((-1.0)*x4487*x4499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4501=(cj5*r12);
IkReal x4502=(r11*sj6);
IkReal x4503=(cj6*r10*sj5);
if( IKabs(((((-1.0)*sj5*x4502))+x4501+x4503)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((-4.41935483870968)*x4501))+(((-4.41935483870968)*x4503))+(((4.41935483870968)*sj5*x4502))+(((0.980645161290323)*x4502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x4502))+x4501+x4503))+IKsqr(((-0.67741935483871)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((-4.41935483870968)*x4501))+(((-4.41935483870968)*x4503))+(((4.41935483870968)*sj5*x4502))+(((0.980645161290323)*x4502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x4502))+x4501+x4503), ((-0.67741935483871)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((-4.41935483870968)*x4501))+(((-4.41935483870968)*x4503))+(((4.41935483870968)*sj5*x4502))+(((0.980645161290323)*x4502))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4504=IKcos(j3);
IkReal x4505=IKsin(j3);
IkReal x4506=(cj4*cj5);
IkReal x4507=((0.076)*sj6);
IkReal x4508=(sj4*sj6);
IkReal x4509=((1.0)*cj5);
IkReal x4510=(sj5*sj6);
IkReal x4511=(cj4*sj5);
IkReal x4512=(cj6*sj4);
IkReal x4513=((0.076)*cj6);
IkReal x4514=((1.0)*cj6*r10);
IkReal x4515=(cj1*x4505);
IkReal x4516=((0.3425)*x4504);
IkReal x4517=((1.0)*cj6*r20);
IkReal x4518=((1.0)*cj6*r00);
IkReal x4519=(sj1*x4505);
evalcond[0]=(x4505+((r11*x4510))+(((-1.0)*r12*x4509))+(((-1.0)*sj5*x4514)));
evalcond[1]=(((sj1*x4504))+(((-1.0)*r02*x4509))+((r01*x4510))+(((-1.0)*sj5*x4518)));
evalcond[2]=((((-1.0)*cj1*x4504))+((r21*x4510))+(((-1.0)*r22*x4509))+(((-1.0)*sj5*x4517)));
evalcond[3]=((0.0525)+((r10*x4513))+(((-1.0)*py))+(((0.3425)*x4505))+(((-1.0)*r11*x4507))+(((0.0775)*x4504)));
evalcond[4]=((((-1.0)*cj1*x4516))+((r20*x4513))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x4515))+(((-1.0)*r21*x4507)));
evalcond[5]=(((r11*sj6*x4506))+((r10*x4508))+(((-1.0)*x4506*x4514))+x4504+((r11*x4512))+((r12*x4511)));
evalcond[6]=((((-1.0)*r01*x4507))+(((-0.0775)*x4519))+(((-1.0)*px))+((r00*x4513))+((sj1*x4516))+(((-0.293)*sj1)));
evalcond[7]=((((-1.0)*x4506*x4517))+x4515+((r21*x4512))+((r21*sj6*x4506))+((r20*x4508))+((r22*x4511)));
evalcond[8]=(((r02*x4511))+(((-1.0)*x4506*x4518))+((r01*sj6*x4506))+((r01*x4512))+(((-1.0)*x4519))+((r00*x4508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x4525=IKPowWithIntegerCheck(sj2,-1);
if(!x4525.valid){
continue;
}
IkReal x4520=x4525.value;
IkReal x4521=(cj1*cj2);
IkReal x4522=(sj5*sj6);
IkReal x4523=((1.0)*cj5*r12);
IkReal x4524=((1.0)*cj6*r10*sj5);
CheckValue<IkReal> x4526=IKPowWithIntegerCheck(sj1,-1);
if(!x4526.valid){
continue;
}
if( IKabs((x4520*((((r11*x4522))+(((-1.0)*x4523))+(((-1.0)*x4524)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4520*(x4526.value)*(((((-1.0)*x4521*x4523))+(((-1.0)*x4521*x4524))+((r11*x4521*x4522))+(((-1.0)*r01*sj2*x4522))+((cj5*r02*sj2))+((cj6*r00*sj2*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4520*((((r11*x4522))+(((-1.0)*x4523))+(((-1.0)*x4524))))))+IKsqr((x4520*(x4526.value)*(((((-1.0)*x4521*x4523))+(((-1.0)*x4521*x4524))+((r11*x4521*x4522))+(((-1.0)*r01*sj2*x4522))+((cj5*r02*sj2))+((cj6*r00*sj2*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x4520*((((r11*x4522))+(((-1.0)*x4523))+(((-1.0)*x4524))))), (x4520*(x4526.value)*(((((-1.0)*x4521*x4523))+(((-1.0)*x4521*x4524))+((r11*x4521*x4522))+(((-1.0)*r01*sj2*x4522))+((cj5*r02*sj2))+((cj6*r00*sj2*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4527=IKsin(j3);
IkReal x4528=IKcos(j3);
IkReal x4529=(cj4*cj5);
IkReal x4530=((0.076)*sj6);
IkReal x4531=(sj4*sj6);
IkReal x4532=((0.0775)*sj1);
IkReal x4533=((1.0)*cj1);
IkReal x4534=(cj2*sj1);
IkReal x4535=((1.0)*cj5);
IkReal x4536=(sj5*sj6);
IkReal x4537=(cj4*sj5);
IkReal x4538=(cj6*sj4);
IkReal x4539=((0.076)*cj6);
IkReal x4540=((1.0)*cj6*r10);
IkReal x4541=(cj1*x4527);
IkReal x4542=(sj2*x4528);
IkReal x4543=(cj2*x4528);
IkReal x4544=(sj1*x4528);
IkReal x4545=((1.0)*cj6*r20);
IkReal x4546=((1.0)*cj6*r00);
IkReal x4547=((1.0)*x4527);
IkReal x4548=((0.3425)*x4527);
evalcond[0]=((((-1.0)*sj5*x4540))+(((-1.0)*sj2*x4547))+(((-1.0)*r12*x4535))+((r11*x4536)));
evalcond[1]=(((r01*x4536))+x4544+(((-1.0)*cj2*x4527*x4533))+(((-1.0)*r02*x4535))+(((-1.0)*sj5*x4546)));
evalcond[2]=(((r21*x4536))+(((-1.0)*x4534*x4547))+(((-1.0)*x4528*x4533))+(((-1.0)*r22*x4535))+(((-1.0)*sj5*x4545)));
evalcond[3]=((((-1.0)*r11*x4530))+(((-0.0775)*x4542))+((r10*x4539))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-1.0)*sj2*x4548)));
evalcond[4]=(((r11*sj6*x4529))+((r12*x4537))+((r10*x4531))+(((-1.0)*x4542))+(((-1.0)*x4529*x4540))+((r11*x4538)));
evalcond[5]=(((r21*x4538))+x4541+(((-1.0)*x4528*x4534))+((r22*x4537))+(((-1.0)*x4529*x4545))+((r21*sj6*x4529))+((r20*x4531)));
evalcond[6]=(((r00*x4531))+((r01*x4538))+((r01*sj6*x4529))+(((-1.0)*x4533*x4543))+(((-1.0)*x4529*x4546))+((r02*x4537))+(((-1.0)*sj1*x4547)));
evalcond[7]=((((-1.0)*x4532*x4543))+(((-1.0)*x4534*x4548))+(((-1.0)*r21*x4530))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x4541))+(((-0.3425)*cj1*x4528))+(((-0.0525)*x4534))+((r20*x4539)));
evalcond[8]=(((r00*x4539))+(((0.3425)*x4544))+(((-1.0)*r01*x4530))+(((-0.0525)*cj1*cj2))+(((-1.0)*px))+(((-1.0)*x4527*x4532))+(((-0.0775)*cj1*x4543))+(((-0.3425)*cj2*x4541))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x4554=IKPowWithIntegerCheck(sj2,-1);
if(!x4554.valid){
continue;
}
IkReal x4549=x4554.value;
IkReal x4550=(cj6*r10);
IkReal x4551=(cj5*r12);
IkReal x4552=((137.0)*sj5);
IkReal x4553=(r11*sj6);
if( IKabs((x4549*((((sj5*x4553))+(((-1.0)*x4551))+(((-1.0)*sj5*x4550)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x4549*(((((30.4)*x4550))+((x4550*x4552))+(((-1.0)*x4552*x4553))+(((-21.0)*sj2))+(((-30.4)*x4553))+(((137.0)*x4551))+(((-400.0)*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4549*((((sj5*x4553))+(((-1.0)*x4551))+(((-1.0)*sj5*x4550))))))+IKsqr(((0.032258064516129)*x4549*(((((30.4)*x4550))+((x4550*x4552))+(((-1.0)*x4552*x4553))+(((-21.0)*sj2))+(((-30.4)*x4553))+(((137.0)*x4551))+(((-400.0)*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x4549*((((sj5*x4553))+(((-1.0)*x4551))+(((-1.0)*sj5*x4550))))), ((0.032258064516129)*x4549*(((((30.4)*x4550))+((x4550*x4552))+(((-1.0)*x4552*x4553))+(((-21.0)*sj2))+(((-30.4)*x4553))+(((137.0)*x4551))+(((-400.0)*py))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4555=IKsin(j3);
IkReal x4556=IKcos(j3);
IkReal x4557=(cj4*cj5);
IkReal x4558=((0.076)*sj6);
IkReal x4559=(sj4*sj6);
IkReal x4560=((0.0775)*sj1);
IkReal x4561=((1.0)*cj1);
IkReal x4562=(cj2*sj1);
IkReal x4563=((1.0)*cj5);
IkReal x4564=(sj5*sj6);
IkReal x4565=(cj4*sj5);
IkReal x4566=(cj6*sj4);
IkReal x4567=((0.076)*cj6);
IkReal x4568=((1.0)*cj6*r10);
IkReal x4569=(cj1*x4555);
IkReal x4570=(sj2*x4556);
IkReal x4571=(cj2*x4556);
IkReal x4572=(sj1*x4556);
IkReal x4573=((1.0)*cj6*r20);
IkReal x4574=((1.0)*cj6*r00);
IkReal x4575=((1.0)*x4555);
IkReal x4576=((0.3425)*x4555);
evalcond[0]=((((-1.0)*sj5*x4568))+(((-1.0)*sj2*x4575))+((r11*x4564))+(((-1.0)*r12*x4563)));
evalcond[1]=((((-1.0)*sj5*x4574))+x4572+(((-1.0)*r02*x4563))+(((-1.0)*cj2*x4555*x4561))+((r01*x4564)));
evalcond[2]=((((-1.0)*sj5*x4573))+(((-1.0)*x4556*x4561))+((r21*x4564))+(((-1.0)*r22*x4563))+(((-1.0)*x4562*x4575)));
evalcond[3]=((((-1.0)*r11*x4558))+(((-1.0)*sj2*x4576))+((r10*x4567))+(((-1.0)*py))+(((-0.0775)*x4570))+(((-0.0525)*sj2)));
evalcond[4]=(((r10*x4559))+((r11*x4566))+((r12*x4565))+(((-1.0)*x4570))+((r11*sj6*x4557))+(((-1.0)*x4557*x4568)));
evalcond[5]=((((-1.0)*x4557*x4573))+((r22*x4565))+((r21*sj6*x4557))+x4569+((r21*x4566))+(((-1.0)*x4556*x4562))+((r20*x4559)));
evalcond[6]=((((-1.0)*x4557*x4574))+((r01*sj6*x4557))+(((-1.0)*sj1*x4575))+((r00*x4559))+((r02*x4565))+((r01*x4566))+(((-1.0)*x4561*x4571)));
evalcond[7]=((((-1.0)*r21*x4558))+(((-1.0)*pz))+(((0.293)*cj1))+((r20*x4567))+(((-1.0)*x4562*x4576))+(((-1.0)*x4560*x4571))+(((-0.0525)*x4562))+(((-0.3425)*cj1*x4556))+(((0.0775)*x4569)));
evalcond[8]=((((-1.0)*r01*x4558))+(((-0.3425)*cj2*x4569))+(((-0.0525)*cj1*cj2))+(((-1.0)*x4555*x4560))+(((-1.0)*px))+(((-0.0775)*cj1*x4571))+(((0.3425)*x4572))+((r00*x4567))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4577=(sj5*sj6);
IkReal x4578=((1.0)*sj1);
IkReal x4579=(cj6*sj5);
IkReal x4580=((1.0)*cj1);
IkReal x4581=(cj5*r02);
IkReal x4582=(cj5*r22);
CheckValue<IkReal> x4583=IKPowWithIntegerCheck(cj2,-1);
if(!x4583.valid){
continue;
}
if( IKabs(((x4583.value)*(((((-1.0)*x4580*x4581))+(((-1.0)*r00*x4579*x4580))+(((-1.0)*r20*x4578*x4579))+((r21*sj1*x4577))+((cj1*r01*x4577))+(((-1.0)*x4578*x4582)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x4577))+((sj1*x4581))+(((-1.0)*x4580*x4582))+((r00*sj1*x4579))+(((-1.0)*r20*x4579*x4580))+(((-1.0)*r01*x4577*x4578)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4583.value)*(((((-1.0)*x4580*x4581))+(((-1.0)*r00*x4579*x4580))+(((-1.0)*r20*x4578*x4579))+((r21*sj1*x4577))+((cj1*r01*x4577))+(((-1.0)*x4578*x4582))))))+IKsqr((((cj1*r21*x4577))+((sj1*x4581))+(((-1.0)*x4580*x4582))+((r00*sj1*x4579))+(((-1.0)*r20*x4579*x4580))+(((-1.0)*r01*x4577*x4578))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x4583.value)*(((((-1.0)*x4580*x4581))+(((-1.0)*r00*x4579*x4580))+(((-1.0)*r20*x4578*x4579))+((r21*sj1*x4577))+((cj1*r01*x4577))+(((-1.0)*x4578*x4582))))), (((cj1*r21*x4577))+((sj1*x4581))+(((-1.0)*x4580*x4582))+((r00*sj1*x4579))+(((-1.0)*r20*x4579*x4580))+(((-1.0)*r01*x4577*x4578))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4584=IKsin(j3);
IkReal x4585=IKcos(j3);
IkReal x4586=(cj4*cj5);
IkReal x4587=((0.076)*sj6);
IkReal x4588=(sj4*sj6);
IkReal x4589=((0.0775)*sj1);
IkReal x4590=((1.0)*cj1);
IkReal x4591=(cj2*sj1);
IkReal x4592=((1.0)*cj5);
IkReal x4593=(sj5*sj6);
IkReal x4594=(cj4*sj5);
IkReal x4595=(cj6*sj4);
IkReal x4596=((0.076)*cj6);
IkReal x4597=((1.0)*cj6*r10);
IkReal x4598=(cj1*x4584);
IkReal x4599=(sj2*x4585);
IkReal x4600=(cj2*x4585);
IkReal x4601=(sj1*x4585);
IkReal x4602=((1.0)*cj6*r20);
IkReal x4603=((1.0)*cj6*r00);
IkReal x4604=((1.0)*x4584);
IkReal x4605=((0.3425)*x4584);
evalcond[0]=((((-1.0)*sj2*x4604))+((r11*x4593))+(((-1.0)*r12*x4592))+(((-1.0)*sj5*x4597)));
evalcond[1]=(x4601+(((-1.0)*r02*x4592))+(((-1.0)*sj5*x4603))+(((-1.0)*cj2*x4584*x4590))+((r01*x4593)));
evalcond[2]=((((-1.0)*x4585*x4590))+((r21*x4593))+(((-1.0)*r22*x4592))+(((-1.0)*x4591*x4604))+(((-1.0)*sj5*x4602)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*sj2*x4605))+(((-0.0525)*sj2))+(((-1.0)*r11*x4587))+((r10*x4596))+(((-0.0775)*x4599)));
evalcond[4]=((((-1.0)*x4599))+((r11*sj6*x4586))+(((-1.0)*x4586*x4597))+((r11*x4595))+((r12*x4594))+((r10*x4588)));
evalcond[5]=(((r21*x4595))+((r22*x4594))+(((-1.0)*x4585*x4591))+x4598+((r21*sj6*x4586))+((r20*x4588))+(((-1.0)*x4586*x4602)));
evalcond[6]=((((-1.0)*x4590*x4600))+((r02*x4594))+((r01*sj6*x4586))+(((-1.0)*sj1*x4604))+(((-1.0)*x4586*x4603))+((r00*x4588))+((r01*x4595)));
evalcond[7]=((((-0.3425)*cj1*x4585))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*x4591*x4605))+(((-1.0)*x4589*x4600))+((r20*x4596))+(((-1.0)*r21*x4587))+(((-0.0525)*x4591))+(((0.0775)*x4598)));
evalcond[8]=((((-0.0775)*cj1*x4600))+(((-0.0525)*cj1*cj2))+(((-1.0)*r01*x4587))+(((-1.0)*px))+(((0.3425)*x4601))+(((-0.3425)*cj2*x4598))+(((-1.0)*x4584*x4589))+((r00*x4596))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4606=((1.0)*sj6);
IkReal x4607=(sj4*sj5);
IkReal x4608=(cj5*sj4);
IkReal x4609=(cj4*cj6);
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(sj1,-1);
if(!x4610.valid){
continue;
}
if( IKabs(((x4610.value)*(((((-1.0)*r21*x4609))+((r21*sj6*x4608))+((r22*x4607))+(((-1.0)*cj4*r20*x4606))+(((-1.0)*cj6*r20*x4608)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x4609))+((cj6*r10*x4608))+(((-1.0)*r12*x4607))+(((-1.0)*r11*x4606*x4608))+((cj4*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4610.value)*(((((-1.0)*r21*x4609))+((r21*sj6*x4608))+((r22*x4607))+(((-1.0)*cj4*r20*x4606))+(((-1.0)*cj6*r20*x4608))))))+IKsqr((((r11*x4609))+((cj6*r10*x4608))+(((-1.0)*r12*x4607))+(((-1.0)*r11*x4606*x4608))+((cj4*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x4610.value)*(((((-1.0)*r21*x4609))+((r21*sj6*x4608))+((r22*x4607))+(((-1.0)*cj4*r20*x4606))+(((-1.0)*cj6*r20*x4608))))), (((r11*x4609))+((cj6*r10*x4608))+(((-1.0)*r12*x4607))+(((-1.0)*r11*x4606*x4608))+((cj4*r10*sj6))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x4611=IKsin(j2);
IkReal x4612=((1.0)*cj4);
IkReal x4613=(cj5*sj4);
IkReal x4614=(sj4*sj5);
IkReal x4615=((1.0)*cj6);
IkReal x4616=((1.0)*x4611);
evalcond[0]=(((r12*x4614))+(((-1.0)*r10*x4613*x4615))+(IKcos(j2))+(((-1.0)*r10*sj6*x4612))+(((-1.0)*cj6*r11*x4612))+((r11*sj6*x4613)));
evalcond[1]=((((-1.0)*sj1*x4616))+(((-1.0)*cj6*r21*x4612))+((r21*sj6*x4613))+(((-1.0)*r20*x4613*x4615))+((r22*x4614))+(((-1.0)*r20*sj6*x4612)));
evalcond[2]=(((r01*sj6*x4613))+((r02*x4614))+(((-1.0)*r00*sj6*x4612))+(((-1.0)*r00*x4613*x4615))+(((-1.0)*cj6*r01*x4612))+(((-1.0)*cj1*x4616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4617=(sj5*sj6);
IkReal x4618=((1.0)*sj1);
IkReal x4619=(cj6*sj5);
IkReal x4620=((1.0)*cj1);
IkReal x4621=(cj5*r02);
IkReal x4622=(cj5*r22);
if( IKabs(((((-1.0)*r00*x4619*x4620))+((cj1*r01*x4617))+(((-1.0)*x4618*x4622))+((r21*sj1*x4617))+(((-1.0)*r20*x4618*x4619))+(((-1.0)*x4620*x4621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x4621))+(((-1.0)*r01*x4617*x4618))+(((-1.0)*x4620*x4622))+(((-1.0)*r20*x4619*x4620))+((cj1*r21*x4617))+((r00*sj1*x4619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4619*x4620))+((cj1*r01*x4617))+(((-1.0)*x4618*x4622))+((r21*sj1*x4617))+(((-1.0)*r20*x4618*x4619))+(((-1.0)*x4620*x4621))))+IKsqr((((sj1*x4621))+(((-1.0)*r01*x4617*x4618))+(((-1.0)*x4620*x4622))+(((-1.0)*r20*x4619*x4620))+((cj1*r21*x4617))+((r00*sj1*x4619))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x4619*x4620))+((cj1*r01*x4617))+(((-1.0)*x4618*x4622))+((r21*sj1*x4617))+(((-1.0)*r20*x4618*x4619))+(((-1.0)*x4620*x4621))), (((sj1*x4621))+(((-1.0)*r01*x4617*x4618))+(((-1.0)*x4620*x4622))+(((-1.0)*r20*x4619*x4620))+((cj1*r21*x4617))+((r00*sj1*x4619))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x4623=IKcos(j3);
IkReal x4624=IKsin(j3);
IkReal x4625=(r21*sj6);
IkReal x4626=(r01*sj6);
IkReal x4627=((1.0)*cj5);
IkReal x4628=(cj6*r20);
IkReal x4629=(sj4*sj6);
IkReal x4630=((1.0)*sj5);
IkReal x4631=(cj6*r00);
IkReal x4632=(cj6*sj4);
IkReal x4633=(cj4*cj5);
IkReal x4634=(cj4*sj5);
IkReal x4635=(sj1*x4623);
IkReal x4636=(cj1*x4623);
IkReal x4637=(cj1*x4624);
IkReal x4638=(sj1*x4624);
IkReal x4639=((1.0)*x4636);
IkReal x4640=((1.0)*x4638);
IkReal x4641=(x4639+x4640);
evalcond[0]=((((-1.0)*x4637))+((sj5*x4626))+(((-1.0)*r02*x4627))+x4635+(((-1.0)*x4630*x4631)));
evalcond[1]=(((sj5*x4625))+(((-1.0)*r22*x4627))+(((-1.0)*x4628*x4630))+(((-1.0)*x4641)));
evalcond[2]=(((r21*x4632))+(((-1.0)*x4635))+((r20*x4629))+((x4625*x4633))+x4637+(((-1.0)*cj4*x4627*x4628))+((r22*x4634)));
evalcond[3]=(((r01*x4632))+((x4626*x4633))+(((-1.0)*x4641))+((r02*x4634))+((r00*x4629))+(((-1.0)*cj4*x4627*x4631)));
evalcond[4]=((((0.076)*x4628))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((-0.3425)*x4636))+(((-0.3425)*x4638))+(((0.0775)*x4637))+(((-0.076)*x4625))+(((-0.0775)*x4635)));
evalcond[5]=((((-0.0525)*cj1))+(((-1.0)*px))+(((0.3425)*x4635))+(((-0.3425)*x4637))+(((-0.076)*x4626))+(((-0.0775)*x4638))+(((-0.0775)*x4636))+(((0.076)*x4631))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4642=(cj6*sj5);
IkReal x4643=((1.0)*cj1);
IkReal x4644=(cj5*sj1);
IkReal x4645=(sj5*sj6);
IkReal x4646=((1.0)*sj1*x4645);
if( IKabs((((r20*sj1*x4642))+((cj1*cj5*r02))+((cj1*r00*x4642))+(((-1.0)*r21*x4646))+((r22*x4644))+(((-1.0)*r01*x4643*x4645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x4644))+((r00*sj1*x4642))+(((-1.0)*cj5*r22*x4643))+(((-1.0)*r20*x4642*x4643))+(((-1.0)*r01*x4646))+((cj1*r21*x4645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x4642))+((cj1*cj5*r02))+((cj1*r00*x4642))+(((-1.0)*r21*x4646))+((r22*x4644))+(((-1.0)*r01*x4643*x4645))))+IKsqr((((r02*x4644))+((r00*sj1*x4642))+(((-1.0)*cj5*r22*x4643))+(((-1.0)*r20*x4642*x4643))+(((-1.0)*r01*x4646))+((cj1*r21*x4645))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r20*sj1*x4642))+((cj1*cj5*r02))+((cj1*r00*x4642))+(((-1.0)*r21*x4646))+((r22*x4644))+(((-1.0)*r01*x4643*x4645))), (((r02*x4644))+((r00*sj1*x4642))+(((-1.0)*cj5*r22*x4643))+(((-1.0)*r20*x4642*x4643))+(((-1.0)*r01*x4646))+((cj1*r21*x4645))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x4647=IKsin(j3);
IkReal x4648=IKcos(j3);
IkReal x4649=(r21*sj6);
IkReal x4650=((1.0)*cj5);
IkReal x4651=(r01*sj6);
IkReal x4652=(cj6*r20);
IkReal x4653=(sj4*sj6);
IkReal x4654=((1.0)*sj5);
IkReal x4655=(cj6*r00);
IkReal x4656=(cj6*sj4);
IkReal x4657=(cj4*cj5);
IkReal x4658=(cj4*sj5);
IkReal x4659=(sj1*x4648);
IkReal x4660=(cj1*x4647);
IkReal x4661=(cj1*x4648);
IkReal x4662=(sj1*x4647);
IkReal x4663=(x4660+x4659);
evalcond[0]=(((sj5*x4651))+(((-1.0)*x4654*x4655))+x4663+(((-1.0)*r02*x4650)));
evalcond[1]=(((sj5*x4649))+(((-1.0)*x4661))+x4662+(((-1.0)*r22*x4650))+(((-1.0)*x4652*x4654)));
evalcond[2]=(((r20*x4653))+x4663+((x4649*x4657))+(((-1.0)*cj4*x4650*x4652))+((r22*x4658))+((r21*x4656)));
evalcond[3]=((((-1.0)*x4662))+x4661+((r02*x4658))+(((-1.0)*cj4*x4650*x4655))+((r00*x4653))+((r01*x4656))+((x4651*x4657)));
evalcond[4]=((((-0.3425)*x4661))+(((0.0775)*x4660))+(((-0.076)*x4649))+(((0.076)*x4652))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x4659))+(((0.0525)*sj1))+(((0.3425)*x4662)));
evalcond[5]=((((-0.0775)*x4662))+(((0.0525)*cj1))+(((0.0775)*x4661))+(((0.076)*x4655))+(((-1.0)*px))+(((0.3425)*x4659))+(((-0.076)*x4651))+(((-0.293)*sj1))+(((0.3425)*x4660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4664=(r21*sj6);
IkReal x4665=(cj6*r20);
IkReal x4666=(cj5*r22);
IkReal x4667=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+((x4664*x4667))+(((12.9032258064516)*pz))+(((-1.0)*x4665*x4667))+(((-4.41935483870968)*x4666))+(((-0.980645161290323)*x4665))+(((0.980645161290323)*x4664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4666))+(((-1.0)*sj5*x4665))+((sj5*x4664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+((x4664*x4667))+(((12.9032258064516)*pz))+(((-1.0)*x4665*x4667))+(((-4.41935483870968)*x4666))+(((-0.980645161290323)*x4665))+(((0.980645161290323)*x4664))))+IKsqr(((((-1.0)*x4666))+(((-1.0)*sj5*x4665))+((sj5*x4664))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+((x4664*x4667))+(((12.9032258064516)*pz))+(((-1.0)*x4665*x4667))+(((-4.41935483870968)*x4666))+(((-0.980645161290323)*x4665))+(((0.980645161290323)*x4664))), ((((-1.0)*x4666))+(((-1.0)*sj5*x4665))+((sj5*x4664))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4668=IKsin(j3);
IkReal x4669=IKcos(j3);
IkReal x4670=(sj4*sj6);
IkReal x4671=((1.0)*cj6);
IkReal x4672=(cj4*cj5);
IkReal x4673=((0.076)*sj6);
IkReal x4674=((1.0)*sj2);
IkReal x4675=(r11*sj6);
IkReal x4676=((1.0)*cj5);
IkReal x4677=(cj6*sj4);
IkReal x4678=(sj5*sj6);
IkReal x4679=(cj4*sj5);
IkReal x4680=((0.076)*cj6);
IkReal x4681=((0.0775)*x4669);
IkReal x4682=(cj2*x4668);
IkReal x4683=((1.0)*x4669);
evalcond[0]=((((-1.0)*r20*sj5*x4671))+((r21*x4678))+(((-1.0)*r22*x4676))+(((-1.0)*x4683)));
evalcond[1]=(((sj5*x4675))+(((-1.0)*r12*x4676))+(((-1.0)*x4668*x4674))+(((-1.0)*r10*sj5*x4671)));
evalcond[2]=((((-1.0)*r02*x4676))+(((-1.0)*r00*sj5*x4671))+((r01*x4678))+(((-1.0)*x4682)));
evalcond[3]=((0.293)+((r20*x4680))+(((-0.3425)*x4669))+(((0.0775)*x4668))+(((-1.0)*r21*x4673))+(((-1.0)*pz)));
evalcond[4]=(((r21*x4677))+x4668+((r21*sj6*x4672))+((r22*x4679))+(((-1.0)*r20*x4671*x4672))+((r20*x4670)));
evalcond[5]=((((-0.0525)*cj2))+(((-1.0)*px))+((r00*x4680))+(((-1.0)*r01*x4673))+(((-1.0)*cj2*x4681))+(((-0.3425)*x4682)));
evalcond[6]=((((-1.0)*r11*x4673))+(((-0.3425)*sj2*x4668))+(((-1.0)*py))+(((-0.0525)*sj2))+((r10*x4680))+(((-1.0)*sj2*x4681)));
evalcond[7]=((((-1.0)*r10*x4671*x4672))+((x4672*x4675))+((r10*x4670))+((r11*x4677))+((r12*x4679))+(((-1.0)*x4669*x4674)));
evalcond[8]=(((r02*x4679))+(((-1.0)*r00*x4671*x4672))+((r01*x4677))+((r00*x4670))+(((-1.0)*cj2*x4683))+((r01*sj6*x4672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4684=(cj6*r20);
IkReal x4685=(cj5*r22);
IkReal x4686=(r21*sj6);
IkReal x4687=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-1.0)*x4686*x4687))+(((-12.9032258064516)*pz))+(((0.980645161290323)*x4684))+(((-0.980645161290323)*x4686))+((x4684*x4687))+(((4.41935483870968)*x4685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x4684))+x4685+(((-1.0)*sj5*x4686)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-1.0)*x4686*x4687))+(((-12.9032258064516)*pz))+(((0.980645161290323)*x4684))+(((-0.980645161290323)*x4686))+((x4684*x4687))+(((4.41935483870968)*x4685))))+IKsqr((((sj5*x4684))+x4685+(((-1.0)*sj5*x4686))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-1.0)*x4686*x4687))+(((-12.9032258064516)*pz))+(((0.980645161290323)*x4684))+(((-0.980645161290323)*x4686))+((x4684*x4687))+(((4.41935483870968)*x4685))), (((sj5*x4684))+x4685+(((-1.0)*sj5*x4686))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4688=IKsin(j3);
IkReal x4689=IKcos(j3);
IkReal x4690=(sj4*sj6);
IkReal x4691=(cj4*sj5);
IkReal x4692=((1.0)*cj6);
IkReal x4693=(cj4*cj5);
IkReal x4694=((0.076)*sj6);
IkReal x4695=((1.0)*sj2);
IkReal x4696=(r11*sj6);
IkReal x4697=((1.0)*cj5);
IkReal x4698=(r21*sj6);
IkReal x4699=(r01*sj6);
IkReal x4700=(cj6*sj4);
IkReal x4701=((0.076)*cj6);
IkReal x4702=((0.0775)*x4689);
IkReal x4703=(cj2*x4688);
evalcond[0]=(((sj5*x4698))+x4689+(((-1.0)*r20*sj5*x4692))+(((-1.0)*r22*x4697)));
evalcond[1]=(((sj5*x4699))+x4703+(((-1.0)*r02*x4697))+(((-1.0)*r00*sj5*x4692)));
evalcond[2]=((((-1.0)*r12*x4697))+((sj5*x4696))+(((-1.0)*x4688*x4695))+(((-1.0)*r10*sj5*x4692)));
evalcond[3]=((-0.293)+(((-0.0775)*x4688))+(((0.3425)*x4689))+(((-1.0)*pz))+((r20*x4701))+(((-1.0)*r21*x4694)));
evalcond[4]=(((cj2*x4702))+(((0.0525)*cj2))+(((0.3425)*x4703))+(((-1.0)*r01*x4694))+(((-1.0)*px))+((r00*x4701)));
evalcond[5]=(((r10*x4701))+(((-1.0)*sj2*x4702))+(((-1.0)*py))+(((-0.3425)*sj2*x4688))+(((-0.0525)*sj2))+(((-1.0)*r11*x4694)));
evalcond[6]=((((-1.0)*r20*x4692*x4693))+((x4693*x4698))+((r21*x4700))+((r22*x4691))+(((-1.0)*x4688))+((r20*x4690)));
evalcond[7]=(((r02*x4691))+(((-1.0)*r00*x4692*x4693))+((x4693*x4699))+((cj2*x4689))+((r01*x4700))+((r00*x4690)));
evalcond[8]=(((x4693*x4696))+((r12*x4691))+(((-1.0)*r10*x4692*x4693))+((r11*x4700))+((r10*x4690))+(((-1.0)*x4689*x4695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4704=(cj5*r12);
IkReal x4705=(r11*sj6);
IkReal x4706=(cj6*r10*sj5);
if( IKabs(((((-1.0)*x4706))+(((-1.0)*x4704))+((sj5*x4705)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-4.41935483870968)*sj5*x4705))+(((-0.980645161290323)*x4705))+(((4.41935483870968)*x4704))+(((4.41935483870968)*x4706)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4706))+(((-1.0)*x4704))+((sj5*x4705))))+IKsqr(((-0.67741935483871)+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-4.41935483870968)*sj5*x4705))+(((-0.980645161290323)*x4705))+(((4.41935483870968)*x4704))+(((4.41935483870968)*x4706))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x4706))+(((-1.0)*x4704))+((sj5*x4705))), ((-0.67741935483871)+(((-12.9032258064516)*py))+(((0.980645161290323)*cj6*r10))+(((-4.41935483870968)*sj5*x4705))+(((-0.980645161290323)*x4705))+(((4.41935483870968)*x4704))+(((4.41935483870968)*x4706))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4707=IKcos(j3);
IkReal x4708=IKsin(j3);
IkReal x4709=(sj4*sj6);
IkReal x4710=(cj4*sj5);
IkReal x4711=((0.076)*sj6);
IkReal x4712=(cj4*cj5);
IkReal x4713=(r11*sj6);
IkReal x4714=((1.0)*cj5);
IkReal x4715=(r21*sj6);
IkReal x4716=(r01*sj6);
IkReal x4717=(cj6*sj4);
IkReal x4718=((0.076)*cj6);
IkReal x4719=(cj1*x4708);
IkReal x4720=((1.0)*cj6*r10);
IkReal x4721=(sj1*x4707);
IkReal x4722=((1.0)*cj6*r20);
IkReal x4723=(cj1*x4707);
IkReal x4724=((1.0)*cj6*r00);
IkReal x4725=(sj1*x4708);
evalcond[0]=((((-1.0)*x4708))+(((-1.0)*r12*x4714))+((sj5*x4713))+(((-1.0)*sj5*x4720)));
evalcond[1]=((((-1.0)*r02*x4714))+x4721+((sj5*x4716))+(((-1.0)*sj5*x4724)));
evalcond[2]=((((-1.0)*x4723))+(((-1.0)*r22*x4714))+((sj5*x4715))+(((-1.0)*sj5*x4722)));
evalcond[3]=((-0.0525)+((r10*x4718))+(((-0.0775)*x4707))+(((-1.0)*py))+(((-1.0)*r11*x4711))+(((-0.3425)*x4708)));
evalcond[4]=((((0.0775)*x4719))+(((-1.0)*r21*x4711))+(((-1.0)*pz))+(((-0.3425)*x4723))+(((0.293)*cj1))+((r20*x4718)));
evalcond[5]=(((r00*x4718))+(((0.3425)*x4721))+(((-1.0)*px))+(((-0.0775)*x4725))+(((-1.0)*r01*x4711))+(((-0.293)*sj1)));
evalcond[6]=((((-1.0)*x4712*x4722))+((r22*x4710))+((r21*x4717))+x4719+((r20*x4709))+((x4712*x4715)));
evalcond[7]=((((-1.0)*x4712*x4720))+((r10*x4709))+(((-1.0)*x4707))+((x4712*x4713))+((r12*x4710))+((r11*x4717)));
evalcond[8]=((((-1.0)*x4712*x4724))+(((-1.0)*x4725))+((r01*x4717))+((r00*x4709))+((x4712*x4716))+((r02*x4710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4726=(cj5*r12);
IkReal x4727=(r11*sj6);
IkReal x4728=(cj6*r10*sj5);
if( IKabs((x4728+x4726+(((-1.0)*sj5*x4727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((-4.41935483870968)*x4728))+(((-4.41935483870968)*x4726))+(((4.41935483870968)*sj5*x4727))+(((0.980645161290323)*x4727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4728+x4726+(((-1.0)*sj5*x4727))))+IKsqr(((-0.67741935483871)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((-4.41935483870968)*x4728))+(((-4.41935483870968)*x4726))+(((4.41935483870968)*sj5*x4727))+(((0.980645161290323)*x4727))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x4728+x4726+(((-1.0)*sj5*x4727))), ((-0.67741935483871)+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((-4.41935483870968)*x4728))+(((-4.41935483870968)*x4726))+(((4.41935483870968)*sj5*x4727))+(((0.980645161290323)*x4727))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4729=IKcos(j3);
IkReal x4730=IKsin(j3);
IkReal x4731=(cj4*cj5);
IkReal x4732=((0.076)*sj6);
IkReal x4733=(sj4*sj6);
IkReal x4734=((1.0)*cj5);
IkReal x4735=(sj5*sj6);
IkReal x4736=(cj4*sj5);
IkReal x4737=(cj6*sj4);
IkReal x4738=((0.076)*cj6);
IkReal x4739=((1.0)*cj6*r10);
IkReal x4740=(cj1*x4730);
IkReal x4741=((0.3425)*x4729);
IkReal x4742=((1.0)*cj6*r20);
IkReal x4743=((1.0)*cj6*r00);
IkReal x4744=(sj1*x4730);
evalcond[0]=(((r11*x4735))+(((-1.0)*r12*x4734))+x4730+(((-1.0)*sj5*x4739)));
evalcond[1]=(((sj1*x4729))+(((-1.0)*sj5*x4743))+((r01*x4735))+(((-1.0)*r02*x4734)));
evalcond[2]=((((-1.0)*cj1*x4729))+((r21*x4735))+(((-1.0)*sj5*x4742))+(((-1.0)*r22*x4734)));
evalcond[3]=((0.0525)+(((0.0775)*x4729))+(((-1.0)*r11*x4732))+(((-1.0)*py))+(((0.3425)*x4730))+((r10*x4738)));
evalcond[4]=((((0.0775)*x4740))+((r20*x4738))+(((-1.0)*cj1*x4741))+(((-1.0)*r21*x4732))+(((-1.0)*pz))+(((0.293)*cj1)));
evalcond[5]=(((r11*x4737))+((r11*sj6*x4731))+(((-1.0)*x4731*x4739))+x4729+((r10*x4733))+((r12*x4736)));
evalcond[6]=((((-1.0)*r01*x4732))+(((-1.0)*px))+((r00*x4738))+(((-0.0775)*x4744))+((sj1*x4741))+(((-0.293)*sj1)));
evalcond[7]=((((-1.0)*x4731*x4742))+((r20*x4733))+((r21*sj6*x4731))+((r21*x4737))+x4740+((r22*x4736)));
evalcond[8]=((((-1.0)*x4731*x4743))+((r01*sj6*x4731))+((r02*x4736))+((r00*x4733))+((r01*x4737))+(((-1.0)*x4744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x4750=IKPowWithIntegerCheck(sj2,-1);
if(!x4750.valid){
continue;
}
IkReal x4745=x4750.value;
IkReal x4746=(cj1*cj2);
IkReal x4747=(sj5*sj6);
IkReal x4748=((1.0)*cj5*r12);
IkReal x4749=((1.0)*cj6*r10*sj5);
CheckValue<IkReal> x4751=IKPowWithIntegerCheck(sj1,-1);
if(!x4751.valid){
continue;
}
if( IKabs((x4745*((((r11*x4747))+(((-1.0)*x4748))+(((-1.0)*x4749)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4745*(x4751.value)*(((((-1.0)*x4746*x4748))+(((-1.0)*x4746*x4749))+((r11*x4746*x4747))+((cj5*r02*sj2))+(((-1.0)*r01*sj2*x4747))+((cj6*r00*sj2*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4745*((((r11*x4747))+(((-1.0)*x4748))+(((-1.0)*x4749))))))+IKsqr((x4745*(x4751.value)*(((((-1.0)*x4746*x4748))+(((-1.0)*x4746*x4749))+((r11*x4746*x4747))+((cj5*r02*sj2))+(((-1.0)*r01*sj2*x4747))+((cj6*r00*sj2*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x4745*((((r11*x4747))+(((-1.0)*x4748))+(((-1.0)*x4749))))), (x4745*(x4751.value)*(((((-1.0)*x4746*x4748))+(((-1.0)*x4746*x4749))+((r11*x4746*x4747))+((cj5*r02*sj2))+(((-1.0)*r01*sj2*x4747))+((cj6*r00*sj2*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4752=IKsin(j3);
IkReal x4753=IKcos(j3);
IkReal x4754=(cj4*cj5);
IkReal x4755=((0.076)*sj6);
IkReal x4756=(sj4*sj6);
IkReal x4757=((0.0775)*sj1);
IkReal x4758=((1.0)*cj1);
IkReal x4759=(cj2*sj1);
IkReal x4760=((1.0)*cj5);
IkReal x4761=(sj5*sj6);
IkReal x4762=(cj4*sj5);
IkReal x4763=(cj6*sj4);
IkReal x4764=((0.076)*cj6);
IkReal x4765=((1.0)*cj6*r10);
IkReal x4766=(cj1*x4752);
IkReal x4767=(sj2*x4753);
IkReal x4768=(cj2*x4753);
IkReal x4769=(sj1*x4753);
IkReal x4770=((1.0)*cj6*r20);
IkReal x4771=((1.0)*cj6*r00);
IkReal x4772=((1.0)*x4752);
IkReal x4773=((0.3425)*x4752);
evalcond[0]=((((-1.0)*sj2*x4772))+(((-1.0)*sj5*x4765))+(((-1.0)*r12*x4760))+((r11*x4761)));
evalcond[1]=((((-1.0)*r02*x4760))+(((-1.0)*cj2*x4752*x4758))+(((-1.0)*sj5*x4771))+((r01*x4761))+x4769);
evalcond[2]=((((-1.0)*x4753*x4758))+(((-1.0)*x4759*x4772))+(((-1.0)*r22*x4760))+((r21*x4761))+(((-1.0)*sj5*x4770)));
evalcond[3]=((((-1.0)*sj2*x4773))+(((-1.0)*r11*x4755))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-0.0775)*x4767))+((r10*x4764)));
evalcond[4]=((((-1.0)*x4767))+((r11*sj6*x4754))+(((-1.0)*x4754*x4765))+((r10*x4756))+((r12*x4762))+((r11*x4763)));
evalcond[5]=(((r22*x4762))+(((-1.0)*x4754*x4770))+((r21*x4763))+((r20*x4756))+x4766+(((-1.0)*x4753*x4759))+((r21*sj6*x4754)));
evalcond[6]=(((r02*x4762))+(((-1.0)*x4758*x4768))+(((-1.0)*sj1*x4772))+((r00*x4756))+(((-1.0)*x4754*x4771))+((r01*x4763))+((r01*sj6*x4754)));
evalcond[7]=((((-1.0)*r21*x4755))+(((0.0775)*x4766))+(((-1.0)*x4759*x4773))+(((-0.3425)*cj1*x4753))+(((-1.0)*x4757*x4768))+(((-1.0)*pz))+(((0.293)*cj1))+((r20*x4764))+(((-0.0525)*x4759)));
evalcond[8]=((((-0.0775)*cj1*x4768))+(((0.3425)*x4769))+(((-1.0)*r01*x4755))+(((-0.0525)*cj1*cj2))+(((-0.3425)*cj2*x4766))+((r00*x4764))+(((-1.0)*x4752*x4757))+(((-1.0)*px))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x4779=IKPowWithIntegerCheck(sj2,-1);
if(!x4779.valid){
continue;
}
IkReal x4774=x4779.value;
IkReal x4775=(cj6*r10);
IkReal x4776=(cj5*r12);
IkReal x4777=((137.0)*sj5);
IkReal x4778=(r11*sj6);
if( IKabs((x4774*(((((-1.0)*x4776))+((sj5*x4778))+(((-1.0)*sj5*x4775)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x4774*(((((-1.0)*x4777*x4778))+((x4775*x4777))+(((-21.0)*sj2))+(((137.0)*x4776))+(((-400.0)*py))+(((30.4)*x4775))+(((-30.4)*x4778)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4774*(((((-1.0)*x4776))+((sj5*x4778))+(((-1.0)*sj5*x4775))))))+IKsqr(((0.032258064516129)*x4774*(((((-1.0)*x4777*x4778))+((x4775*x4777))+(((-21.0)*sj2))+(((137.0)*x4776))+(((-400.0)*py))+(((30.4)*x4775))+(((-30.4)*x4778))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x4774*(((((-1.0)*x4776))+((sj5*x4778))+(((-1.0)*sj5*x4775))))), ((0.032258064516129)*x4774*(((((-1.0)*x4777*x4778))+((x4775*x4777))+(((-21.0)*sj2))+(((137.0)*x4776))+(((-400.0)*py))+(((30.4)*x4775))+(((-30.4)*x4778))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4780=IKsin(j3);
IkReal x4781=IKcos(j3);
IkReal x4782=(cj4*cj5);
IkReal x4783=((0.076)*sj6);
IkReal x4784=(sj4*sj6);
IkReal x4785=((0.0775)*sj1);
IkReal x4786=((1.0)*cj1);
IkReal x4787=(cj2*sj1);
IkReal x4788=((1.0)*cj5);
IkReal x4789=(sj5*sj6);
IkReal x4790=(cj4*sj5);
IkReal x4791=(cj6*sj4);
IkReal x4792=((0.076)*cj6);
IkReal x4793=((1.0)*cj6*r10);
IkReal x4794=(cj1*x4780);
IkReal x4795=(sj2*x4781);
IkReal x4796=(cj2*x4781);
IkReal x4797=(sj1*x4781);
IkReal x4798=((1.0)*cj6*r20);
IkReal x4799=((1.0)*cj6*r00);
IkReal x4800=((1.0)*x4780);
IkReal x4801=((0.3425)*x4780);
evalcond[0]=((((-1.0)*sj2*x4800))+(((-1.0)*sj5*x4793))+((r11*x4789))+(((-1.0)*r12*x4788)));
evalcond[1]=(((r01*x4789))+(((-1.0)*sj5*x4799))+x4797+(((-1.0)*r02*x4788))+(((-1.0)*cj2*x4780*x4786)));
evalcond[2]=((((-1.0)*sj5*x4798))+(((-1.0)*x4781*x4786))+(((-1.0)*r22*x4788))+(((-1.0)*x4787*x4800))+((r21*x4789)));
evalcond[3]=((((-1.0)*sj2*x4801))+((r10*x4792))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-0.0775)*x4795))+(((-1.0)*r11*x4783)));
evalcond[4]=(((r10*x4784))+((r11*sj6*x4782))+(((-1.0)*x4795))+((r11*x4791))+((r12*x4790))+(((-1.0)*x4782*x4793)));
evalcond[5]=(((r21*x4791))+x4794+((r20*x4784))+(((-1.0)*x4782*x4798))+(((-1.0)*x4781*x4787))+((r21*sj6*x4782))+((r22*x4790)));
evalcond[6]=((((-1.0)*sj1*x4800))+((r01*x4791))+((r00*x4784))+(((-1.0)*x4786*x4796))+((r02*x4790))+(((-1.0)*x4782*x4799))+((r01*sj6*x4782)));
evalcond[7]=((((-1.0)*r21*x4783))+(((-0.3425)*cj1*x4781))+((r20*x4792))+(((-1.0)*x4785*x4796))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*x4787*x4801))+(((-0.0525)*x4787))+(((0.0775)*x4794)));
evalcond[8]=(((r00*x4792))+(((-0.0525)*cj1*cj2))+(((0.3425)*x4797))+(((-1.0)*px))+(((-1.0)*r01*x4783))+(((-0.0775)*cj1*x4796))+(((-1.0)*x4780*x4785))+(((-0.3425)*cj2*x4794))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4802=(sj5*sj6);
IkReal x4803=((1.0)*sj1);
IkReal x4804=(cj6*sj5);
IkReal x4805=((1.0)*cj1);
IkReal x4806=(cj5*r02);
IkReal x4807=(cj5*r22);
CheckValue<IkReal> x4808=IKPowWithIntegerCheck(cj2,-1);
if(!x4808.valid){
continue;
}
if( IKabs(((x4808.value)*(((((-1.0)*x4805*x4806))+(((-1.0)*x4803*x4807))+((cj1*r01*x4802))+(((-1.0)*r20*x4803*x4804))+((r21*sj1*x4802))+(((-1.0)*r00*x4804*x4805)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4805*x4807))+((cj1*r21*x4802))+((sj1*x4806))+(((-1.0)*r20*x4804*x4805))+(((-1.0)*r01*x4802*x4803))+((r00*sj1*x4804)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4808.value)*(((((-1.0)*x4805*x4806))+(((-1.0)*x4803*x4807))+((cj1*r01*x4802))+(((-1.0)*r20*x4803*x4804))+((r21*sj1*x4802))+(((-1.0)*r00*x4804*x4805))))))+IKsqr(((((-1.0)*x4805*x4807))+((cj1*r21*x4802))+((sj1*x4806))+(((-1.0)*r20*x4804*x4805))+(((-1.0)*r01*x4802*x4803))+((r00*sj1*x4804))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x4808.value)*(((((-1.0)*x4805*x4806))+(((-1.0)*x4803*x4807))+((cj1*r01*x4802))+(((-1.0)*r20*x4803*x4804))+((r21*sj1*x4802))+(((-1.0)*r00*x4804*x4805))))), ((((-1.0)*x4805*x4807))+((cj1*r21*x4802))+((sj1*x4806))+(((-1.0)*r20*x4804*x4805))+(((-1.0)*r01*x4802*x4803))+((r00*sj1*x4804))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4809=IKsin(j3);
IkReal x4810=IKcos(j3);
IkReal x4811=(cj4*cj5);
IkReal x4812=((0.076)*sj6);
IkReal x4813=(sj4*sj6);
IkReal x4814=((0.0775)*sj1);
IkReal x4815=((1.0)*cj1);
IkReal x4816=(cj2*sj1);
IkReal x4817=((1.0)*cj5);
IkReal x4818=(sj5*sj6);
IkReal x4819=(cj4*sj5);
IkReal x4820=(cj6*sj4);
IkReal x4821=((0.076)*cj6);
IkReal x4822=((1.0)*cj6*r10);
IkReal x4823=(cj1*x4809);
IkReal x4824=(sj2*x4810);
IkReal x4825=(cj2*x4810);
IkReal x4826=(sj1*x4810);
IkReal x4827=((1.0)*cj6*r20);
IkReal x4828=((1.0)*cj6*r00);
IkReal x4829=((1.0)*x4809);
IkReal x4830=((0.3425)*x4809);
evalcond[0]=(((r11*x4818))+(((-1.0)*sj2*x4829))+(((-1.0)*sj5*x4822))+(((-1.0)*r12*x4817)));
evalcond[1]=((((-1.0)*r02*x4817))+(((-1.0)*sj5*x4828))+(((-1.0)*cj2*x4809*x4815))+x4826+((r01*x4818)));
evalcond[2]=(((r21*x4818))+(((-1.0)*x4816*x4829))+(((-1.0)*r22*x4817))+(((-1.0)*sj5*x4827))+(((-1.0)*x4810*x4815)));
evalcond[3]=((((-1.0)*r11*x4812))+(((-0.0775)*x4824))+((r10*x4821))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-1.0)*sj2*x4830)));
evalcond[4]=((((-1.0)*x4811*x4822))+((r11*sj6*x4811))+((r10*x4813))+((r11*x4820))+(((-1.0)*x4824))+((r12*x4819)));
evalcond[5]=((((-1.0)*x4811*x4827))+((r21*x4820))+((r20*x4813))+(((-1.0)*x4810*x4816))+((r21*sj6*x4811))+x4823+((r22*x4819)));
evalcond[6]=((((-1.0)*x4811*x4828))+((r01*sj6*x4811))+(((-1.0)*x4815*x4825))+((r02*x4819))+(((-1.0)*sj1*x4829))+((r00*x4813))+((r01*x4820)));
evalcond[7]=((((-1.0)*x4814*x4825))+((r20*x4821))+(((-0.0525)*x4816))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x4823))+(((-1.0)*x4816*x4830))+(((-1.0)*r21*x4812))+(((-0.3425)*cj1*x4810)));
evalcond[8]=((((-1.0)*r01*x4812))+(((-0.3425)*cj2*x4823))+(((-1.0)*x4809*x4814))+(((-0.0525)*cj1*cj2))+(((-1.0)*px))+(((-0.0775)*cj1*x4825))+(((0.3425)*x4826))+(((-0.293)*sj1))+((r00*x4821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2, j3]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4831=(sj4*sj5);
IkReal x4832=(cj5*sj4);
IkReal x4833=((1.0)*cj6);
IkReal x4834=((1.0)*cj4*sj6);
CheckValue<IkReal> x4835=IKPowWithIntegerCheck(cj0,-1);
if(!x4835.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r21*x4833))+((r22*x4831))+((r21*sj6*x4832))+(((-1.0)*r20*x4834))+(((-1.0)*r20*x4832*x4833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4835.value)*(((((-1.0)*r10*x4834))+((r12*x4831))+(((-1.0)*cj4*r11*x4833))+((r11*sj6*x4832))+(((-1.0)*r10*x4832*x4833)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r21*x4833))+((r22*x4831))+((r21*sj6*x4832))+(((-1.0)*r20*x4834))+(((-1.0)*r20*x4832*x4833))))+IKsqr(((x4835.value)*(((((-1.0)*r10*x4834))+((r12*x4831))+(((-1.0)*cj4*r11*x4833))+((r11*sj6*x4832))+(((-1.0)*r10*x4832*x4833))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r21*x4833))+((r22*x4831))+((r21*sj6*x4832))+(((-1.0)*r20*x4834))+(((-1.0)*r20*x4832*x4833))), ((x4835.value)*(((((-1.0)*r10*x4834))+((r12*x4831))+(((-1.0)*cj4*r11*x4833))+((r11*sj6*x4832))+(((-1.0)*r10*x4832*x4833))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x4836=IKcos(j2);
IkReal x4837=((1.0)*cj6);
IkReal x4838=(cj5*sj4);
IkReal x4839=(sj4*sj5);
IkReal x4840=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*r20*x4837*x4838))+(((-1.0)*cj4*r21*x4837))+((r22*x4839))+(((-1.0)*(IKsin(j2))))+((r21*sj6*x4838))+(((-1.0)*r20*x4840)));
evalcond[1]=((((-1.0)*r00*x4840))+((r01*sj6*x4838))+(((-1.0)*r00*x4837*x4838))+((sj0*x4836))+((r02*x4839))+(((-1.0)*cj4*r01*x4837)));
evalcond[2]=(((r12*x4839))+(((-1.0)*cj4*r11*x4837))+((r11*sj6*x4838))+(((-1.0)*r10*x4837*x4838))+(((-1.0)*cj0*x4836))+(((-1.0)*r10*x4840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=cj0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4841=((1.0)*sj5);
IkReal x4842=(r11*sj6);
IkReal x4843=(cj6*r10);
IkReal x4844=(cj6*r00);
IkReal x4845=(sj0*sj5);
IkReal x4846=((1.0)*cj5);
IkReal x4847=(r01*sj6);
IkReal x4848=(cj0*sj5);
if( IKabs(((((-1.0)*r02*sj0*x4846))+(((-1.0)*cj0*x4841*x4842))+((cj0*cj5*r12))+((x4845*x4847))+(((-1.0)*sj0*x4841*x4844))+((x4843*x4848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4842*x4845))+(((-1.0)*cj0*x4841*x4844))+((x4847*x4848))+(((-1.0)*cj0*r02*x4846))+(((-1.0)*r12*sj0*x4846))+(((-1.0)*sj0*x4841*x4843)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj0*x4846))+(((-1.0)*cj0*x4841*x4842))+((cj0*cj5*r12))+((x4845*x4847))+(((-1.0)*sj0*x4841*x4844))+((x4843*x4848))))+IKsqr((((x4842*x4845))+(((-1.0)*cj0*x4841*x4844))+((x4847*x4848))+(((-1.0)*cj0*r02*x4846))+(((-1.0)*r12*sj0*x4846))+(((-1.0)*sj0*x4841*x4843))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r02*sj0*x4846))+(((-1.0)*cj0*x4841*x4842))+((cj0*cj5*r12))+((x4845*x4847))+(((-1.0)*sj0*x4841*x4844))+((x4843*x4848))), (((x4842*x4845))+(((-1.0)*cj0*x4841*x4844))+((x4847*x4848))+(((-1.0)*cj0*r02*x4846))+(((-1.0)*r12*sj0*x4846))+(((-1.0)*sj0*x4841*x4843))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x4849=IKsin(j3);
IkReal x4850=IKcos(j3);
IkReal x4851=((1.0)*cj5);
IkReal x4852=((0.076)*sj6);
IkReal x4853=(cj6*r10);
IkReal x4854=((1.0)*sj5);
IkReal x4855=(sj5*sj6);
IkReal x4856=(sj4*sj6);
IkReal x4857=(cj6*r00);
IkReal x4858=(cj4*sj5);
IkReal x4859=(cj6*sj4);
IkReal x4860=(cj0*x4849);
IkReal x4861=(sj0*x4850);
IkReal x4862=(sj0*x4849);
IkReal x4863=(cj0*x4850);
IkReal x4864=(cj4*cj5*sj6);
IkReal x4865=((1.0)*x4861);
evalcond[0]=((((-1.0)*x4853*x4854))+(((-1.0)*r12*x4851))+(((-1.0)*x4865))+x4860+((r11*x4855)));
evalcond[1]=(((r01*x4855))+(((-1.0)*r02*x4851))+(((-1.0)*x4862))+(((-1.0)*x4863))+(((-1.0)*x4854*x4857)));
evalcond[2]=(((r11*x4864))+((r12*x4858))+((r10*x4856))+(((-1.0)*cj4*x4851*x4853))+x4862+x4863+((r11*x4859)));
evalcond[3]=(((r00*x4856))+((r01*x4864))+((r01*x4859))+(((-1.0)*x4865))+((r02*x4858))+(((-1.0)*cj4*x4851*x4857))+x4860);
evalcond[4]=((((-1.0)*r01*x4852))+(((-0.0775)*x4861))+(((0.076)*x4857))+(((-1.0)*px))+(((0.293)*cj0))+(((-0.0525)*sj0))+(((-0.3425)*x4863))+(((-0.3425)*x4862))+(((0.0775)*x4860)));
evalcond[5]=((((0.0525)*cj0))+(((-1.0)*r11*x4852))+(((0.076)*x4853))+(((-1.0)*py))+(((0.293)*sj0))+(((-0.3425)*x4861))+(((0.3425)*x4860))+(((0.0775)*x4863))+(((0.0775)*x4862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4866=(cj0*sj5);
IkReal x4867=(r11*sj6);
IkReal x4868=((1.0)*cj6);
IkReal x4869=(sj0*sj5);
IkReal x4870=((1.0)*cj5);
IkReal x4871=(r01*sj6);
if( IKabs(((((-1.0)*r10*x4866*x4868))+((cj5*r02*sj0))+((x4866*x4867))+(((-1.0)*cj0*r12*x4870))+(((-1.0)*x4869*x4871))+((cj6*r00*x4869)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x4866*x4868))+((x4867*x4869))+(((-1.0)*r10*x4868*x4869))+(((-1.0)*cj0*r02*x4870))+((x4866*x4871))+(((-1.0)*r12*sj0*x4870)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4866*x4868))+((cj5*r02*sj0))+((x4866*x4867))+(((-1.0)*cj0*r12*x4870))+(((-1.0)*x4869*x4871))+((cj6*r00*x4869))))+IKsqr(((((-1.0)*r00*x4866*x4868))+((x4867*x4869))+(((-1.0)*r10*x4868*x4869))+(((-1.0)*cj0*r02*x4870))+((x4866*x4871))+(((-1.0)*r12*sj0*x4870))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x4866*x4868))+((cj5*r02*sj0))+((x4866*x4867))+(((-1.0)*cj0*r12*x4870))+(((-1.0)*x4869*x4871))+((cj6*r00*x4869))), ((((-1.0)*r00*x4866*x4868))+((x4867*x4869))+(((-1.0)*r10*x4868*x4869))+(((-1.0)*cj0*r02*x4870))+((x4866*x4871))+(((-1.0)*r12*sj0*x4870))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x4872=IKcos(j3);
IkReal x4873=IKsin(j3);
IkReal x4874=((0.076)*sj6);
IkReal x4875=(sj5*sj6);
IkReal x4876=(cj4*cj5);
IkReal x4877=(sj4*sj6);
IkReal x4878=(cj4*sj5);
IkReal x4879=(cj6*sj4);
IkReal x4880=((1.0)*cj5);
IkReal x4881=((0.076)*cj6);
IkReal x4882=(sj0*x4873);
IkReal x4883=((1.0)*x4872);
IkReal x4884=(sj0*x4872);
IkReal x4885=((1.0)*cj6*r10);
IkReal x4886=((1.0)*cj6*r00);
IkReal x4887=(cj0*x4873);
IkReal x4888=(cj0*x4872);
IkReal x4889=(cj0*x4883);
evalcond[0]=((((-1.0)*sj5*x4886))+(((-1.0)*x4889))+((r01*x4875))+(((-1.0)*r02*x4880))+x4882);
evalcond[1]=((((-1.0)*sj5*x4885))+(((-1.0)*r12*x4880))+(((-1.0)*x4887))+((r11*x4875))+(((-1.0)*sj0*x4883)));
evalcond[2]=(((r02*x4878))+(((-1.0)*x4876*x4886))+((r00*x4877))+((r01*x4879))+((r01*sj6*x4876))+x4884+x4887);
evalcond[3]=((((-1.0)*x4876*x4885))+(((-1.0)*x4889))+((r11*sj6*x4876))+((r10*x4877))+((r12*x4878))+((r11*x4879))+x4882);
evalcond[4]=((((0.3425)*x4882))+(((-0.3425)*x4888))+(((-1.0)*px))+(((0.0775)*x4884))+(((0.0775)*x4887))+(((-1.0)*r01*x4874))+(((0.293)*cj0))+((r00*x4881))+(((0.0525)*sj0)));
evalcond[5]=((((-0.0525)*cj0))+(((-0.3425)*x4884))+(((-0.3425)*x4887))+(((-1.0)*py))+(((-0.0775)*x4888))+(((0.0775)*x4882))+(((0.293)*sj0))+((r10*x4881))+(((-1.0)*r11*x4874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4890=(r21*sj6);
IkReal x4891=(cj6*r20);
IkReal x4892=(cj5*r22);
IkReal x4893=((4.41935483870968)*sj5);
if( IKabs((((sj5*x4890))+(((-1.0)*x4892))+(((-1.0)*sj5*x4891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-12.9032258064516)*pz))+((x4891*x4893))+(((4.41935483870968)*x4892))+(((-1.0)*x4890*x4893))+(((0.980645161290323)*x4891))+(((-0.980645161290323)*x4890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x4890))+(((-1.0)*x4892))+(((-1.0)*sj5*x4891))))+IKsqr(((-0.67741935483871)+(((-12.9032258064516)*pz))+((x4891*x4893))+(((4.41935483870968)*x4892))+(((-1.0)*x4890*x4893))+(((0.980645161290323)*x4891))+(((-0.980645161290323)*x4890))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj5*x4890))+(((-1.0)*x4892))+(((-1.0)*sj5*x4891))), ((-0.67741935483871)+(((-12.9032258064516)*pz))+((x4891*x4893))+(((4.41935483870968)*x4892))+(((-1.0)*x4890*x4893))+(((0.980645161290323)*x4891))+(((-0.980645161290323)*x4890))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4894=IKcos(j3);
IkReal x4895=IKsin(j3);
IkReal x4896=(sj4*sj6);
IkReal x4897=(cj4*sj5);
IkReal x4898=((1.0)*cj5);
IkReal x4899=((0.076)*sj6);
IkReal x4900=(cj6*r10);
IkReal x4901=((1.0)*sj5);
IkReal x4902=(cj6*sj4);
IkReal x4903=(r11*sj6);
IkReal x4904=(cj4*cj5);
IkReal x4905=(cj6*r20);
IkReal x4906=(r21*sj6);
IkReal x4907=(cj6*r00);
IkReal x4908=(r01*sj6);
IkReal x4909=(sj0*x4894);
IkReal x4910=(cj0*x4895);
IkReal x4911=((1.0)*x4894);
IkReal x4912=(sj0*x4895);
evalcond[0]=((((-1.0)*x4895))+(((-1.0)*x4901*x4905))+(((-1.0)*r22*x4898))+((sj5*x4906)));
evalcond[1]=((((-1.0)*r12*x4898))+(((-1.0)*x4909))+(((-1.0)*x4900*x4901))+((sj5*x4903)));
evalcond[2]=((((-1.0)*cj0*x4911))+(((-1.0)*r02*x4898))+(((-1.0)*x4901*x4907))+((sj5*x4908)));
evalcond[3]=((-0.0525)+(((-0.3425)*x4895))+(((-1.0)*r21*x4899))+(((-1.0)*pz))+(((-0.0775)*x4894))+(((0.076)*x4905)));
evalcond[4]=((((-1.0)*r01*x4899))+(((-1.0)*px))+(((0.293)*cj0))+(((-0.3425)*cj0*x4894))+(((0.076)*x4907))+(((0.0775)*x4910)));
evalcond[5]=((((-0.3425)*x4909))+(((-1.0)*r11*x4899))+(((-1.0)*py))+(((0.293)*sj0))+(((0.076)*x4900))+(((0.0775)*x4912)));
evalcond[6]=((((-1.0)*x4911))+((x4904*x4906))+((r20*x4896))+((r21*x4902))+(((-1.0)*cj4*x4898*x4905))+((r22*x4897)));
evalcond[7]=(x4912+((r12*x4897))+((x4903*x4904))+(((-1.0)*cj4*x4898*x4900))+((r11*x4902))+((r10*x4896)));
evalcond[8]=(x4910+((r02*x4897))+((x4904*x4908))+(((-1.0)*cj4*x4898*x4907))+((r00*x4896))+((r01*x4902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4913=(cj6*r20);
IkReal x4914=(cj5*r22);
IkReal x4915=(r21*sj6);
IkReal x4916=((4.41935483870968)*sj5);
if( IKabs((x4914+(((-1.0)*sj5*x4915))+((sj5*x4913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((0.980645161290323)*x4915))+(((12.9032258064516)*pz))+(((-1.0)*x4913*x4916))+((x4915*x4916))+(((-4.41935483870968)*x4914))+(((-0.980645161290323)*x4913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4914+(((-1.0)*sj5*x4915))+((sj5*x4913))))+IKsqr(((-0.67741935483871)+(((0.980645161290323)*x4915))+(((12.9032258064516)*pz))+(((-1.0)*x4913*x4916))+((x4915*x4916))+(((-4.41935483870968)*x4914))+(((-0.980645161290323)*x4913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x4914+(((-1.0)*sj5*x4915))+((sj5*x4913))), ((-0.67741935483871)+(((0.980645161290323)*x4915))+(((12.9032258064516)*pz))+(((-1.0)*x4913*x4916))+((x4915*x4916))+(((-4.41935483870968)*x4914))+(((-0.980645161290323)*x4913))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4917=IKcos(j3);
IkReal x4918=IKsin(j3);
IkReal x4919=(r21*sj6);
IkReal x4920=((1.0)*cj5);
IkReal x4921=((0.076)*sj6);
IkReal x4922=(cj6*r10);
IkReal x4923=((1.0)*sj5);
IkReal x4924=(cj6*sj4);
IkReal x4925=(r11*sj6);
IkReal x4926=(cj4*cj5);
IkReal x4927=(cj6*r20);
IkReal x4928=(sj4*sj6);
IkReal x4929=(cj6*r00);
IkReal x4930=(cj4*sj5);
IkReal x4931=(r01*sj6);
IkReal x4932=(sj0*x4917);
IkReal x4933=(cj0*x4918);
IkReal x4934=(cj0*x4917);
IkReal x4935=(sj0*x4918);
evalcond[0]=(x4918+(((-1.0)*r22*x4920))+((sj5*x4919))+(((-1.0)*x4923*x4927)));
evalcond[1]=((((-1.0)*x4932))+((sj5*x4925))+(((-1.0)*x4922*x4923))+(((-1.0)*r12*x4920)));
evalcond[2]=((((-1.0)*x4934))+(((-1.0)*r02*x4920))+((sj5*x4931))+(((-1.0)*x4923*x4929)));
evalcond[3]=((0.0525)+(((-0.076)*x4919))+(((-1.0)*pz))+(((0.076)*x4927))+(((0.3425)*x4918))+(((0.0775)*x4917)));
evalcond[4]=(x4917+((x4919*x4926))+((r20*x4928))+(((-1.0)*cj4*x4920*x4927))+((r22*x4930))+((r21*x4924)));
evalcond[5]=((((-1.0)*r01*x4921))+(((-1.0)*px))+(((0.076)*x4929))+(((0.293)*cj0))+(((0.0775)*x4933))+(((-0.3425)*x4934)));
evalcond[6]=((((-1.0)*py))+(((0.076)*x4922))+(((0.293)*sj0))+(((-1.0)*r11*x4921))+(((0.0775)*x4935))+(((-0.3425)*x4932)));
evalcond[7]=(((r12*x4930))+x4935+((r10*x4928))+(((-1.0)*cj4*x4920*x4922))+((x4925*x4926))+((r11*x4924)));
evalcond[8]=(x4933+((x4926*x4931))+(((-1.0)*cj4*x4920*x4929))+((r01*x4924))+((r00*x4928))+((r02*x4930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x4942=IKPowWithIntegerCheck(cj2,-1);
if(!x4942.valid){
continue;
}
IkReal x4936=x4942.value;
IkReal x4937=((1.0)*sj5);
IkReal x4938=(sj0*sj2);
IkReal x4939=(r21*sj6);
IkReal x4940=(cj6*r20);
IkReal x4941=(cj5*r22);
CheckValue<IkReal> x4943=IKPowWithIntegerCheck(cj0,-1);
if(!x4943.valid){
continue;
}
if( IKabs((x4936*(((((-1.0)*x4937*x4940))+(((-1.0)*x4941))+((sj5*x4939)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4936*(x4943.value)*(((((-1.0)*x4937*x4938*x4939))+((cj2*r01*sj5*sj6))+((x4938*x4941))+(((-1.0)*cj2*cj5*r02))+((sj5*x4938*x4940))+(((-1.0)*cj2*cj6*r00*x4937)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4936*(((((-1.0)*x4937*x4940))+(((-1.0)*x4941))+((sj5*x4939))))))+IKsqr((x4936*(x4943.value)*(((((-1.0)*x4937*x4938*x4939))+((cj2*r01*sj5*sj6))+((x4938*x4941))+(((-1.0)*cj2*cj5*r02))+((sj5*x4938*x4940))+(((-1.0)*cj2*cj6*r00*x4937))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x4936*(((((-1.0)*x4937*x4940))+(((-1.0)*x4941))+((sj5*x4939))))), (x4936*(x4943.value)*(((((-1.0)*x4937*x4938*x4939))+((cj2*r01*sj5*sj6))+((x4938*x4941))+(((-1.0)*cj2*cj5*r02))+((sj5*x4938*x4940))+(((-1.0)*cj2*cj6*r00*x4937))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4944=IKsin(j3);
IkReal x4945=IKcos(j3);
IkReal x4946=(sj4*sj6);
IkReal x4947=(cj0*sj2);
IkReal x4948=((1.0)*cj5);
IkReal x4949=((0.076)*sj6);
IkReal x4950=(sj0*sj2);
IkReal x4951=(cj6*r10);
IkReal x4952=((1.0)*sj5);
IkReal x4953=(cj6*r20);
IkReal x4954=(sj5*sj6);
IkReal x4955=(cj6*r00);
IkReal x4956=(cj4*sj5);
IkReal x4957=(cj6*sj4);
IkReal x4958=((0.0775)*x4945);
IkReal x4959=(sj0*x4945);
IkReal x4960=((1.0)*x4944);
IkReal x4961=((0.3425)*x4944);
IkReal x4962=(cj4*cj5*sj6);
IkReal x4963=(cj0*x4944);
IkReal x4964=((1.0)*x4945);
IkReal x4965=(sj0*x4944);
evalcond[0]=((((-1.0)*r22*x4948))+(((-1.0)*x4952*x4953))+((r21*x4954))+(((-1.0)*cj2*x4960)));
evalcond[1]=((((-1.0)*r12*x4948))+((r11*x4954))+(((-1.0)*x4959))+((x4944*x4947))+(((-1.0)*x4951*x4952)));
evalcond[2]=((((-1.0)*cj0*x4964))+(((-1.0)*x4952*x4955))+(((-1.0)*r02*x4948))+(((-1.0)*x4950*x4960))+((r01*x4954)));
evalcond[3]=((((-0.0525)*cj2))+(((0.076)*x4953))+(((-1.0)*r21*x4949))+(((-1.0)*pz))+(((-1.0)*cj2*x4961))+(((-1.0)*cj2*x4958)));
evalcond[4]=(((r22*x4956))+((r20*x4946))+(((-1.0)*cj4*x4948*x4953))+((r21*x4962))+((r21*x4957))+(((-1.0)*cj2*x4964)));
evalcond[5]=(x4965+((r12*x4956))+((r11*x4957))+((r10*x4946))+((r11*x4962))+(((-1.0)*cj4*x4948*x4951))+((x4945*x4947)));
evalcond[6]=(x4963+((r00*x4946))+((r02*x4956))+(((-1.0)*cj4*x4948*x4955))+(((-1.0)*x4950*x4964))+((r01*x4957))+((r01*x4962)));
evalcond[7]=((((0.0775)*x4963))+(((0.076)*x4955))+(((-1.0)*px))+(((0.293)*cj0))+(((-0.0525)*x4950))+(((-0.3425)*cj0*x4945))+(((-1.0)*x4950*x4961))+(((-1.0)*x4950*x4958))+(((-1.0)*r01*x4949)));
evalcond[8]=((((0.0775)*x4965))+(((0.0525)*x4947))+(((0.076)*x4951))+(((-1.0)*r11*x4949))+(((-0.3425)*x4959))+(((-1.0)*py))+((x4947*x4961))+((x4947*x4958))+(((0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x4970=IKPowWithIntegerCheck(cj2,-1);
if(!x4970.valid){
continue;
}
IkReal x4966=x4970.value;
IkReal x4967=(cj6*r20);
IkReal x4968=(cj5*r22);
IkReal x4969=(r21*sj5*sj6);
if( IKabs((x4966*((x4969+(((-1.0)*sj5*x4967))+(((-1.0)*x4968)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x4966*(((((-137.0)*x4969))+(((137.0)*x4968))+(((-21.0)*cj2))+(((-30.4)*r21*sj6))+(((30.4)*x4967))+(((-400.0)*pz))+(((137.0)*sj5*x4967)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4966*((x4969+(((-1.0)*sj5*x4967))+(((-1.0)*x4968))))))+IKsqr(((0.032258064516129)*x4966*(((((-137.0)*x4969))+(((137.0)*x4968))+(((-21.0)*cj2))+(((-30.4)*r21*sj6))+(((30.4)*x4967))+(((-400.0)*pz))+(((137.0)*sj5*x4967))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x4966*((x4969+(((-1.0)*sj5*x4967))+(((-1.0)*x4968))))), ((0.032258064516129)*x4966*(((((-137.0)*x4969))+(((137.0)*x4968))+(((-21.0)*cj2))+(((-30.4)*r21*sj6))+(((30.4)*x4967))+(((-400.0)*pz))+(((137.0)*sj5*x4967))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x4971=IKsin(j3);
IkReal x4972=IKcos(j3);
IkReal x4973=(sj4*sj6);
IkReal x4974=(cj0*sj2);
IkReal x4975=((1.0)*cj5);
IkReal x4976=((0.076)*sj6);
IkReal x4977=(sj0*sj2);
IkReal x4978=(cj6*r10);
IkReal x4979=((1.0)*sj5);
IkReal x4980=(cj6*r20);
IkReal x4981=(sj5*sj6);
IkReal x4982=(cj6*r00);
IkReal x4983=(cj4*sj5);
IkReal x4984=(cj6*sj4);
IkReal x4985=((0.0775)*x4972);
IkReal x4986=(sj0*x4972);
IkReal x4987=((1.0)*x4971);
IkReal x4988=((0.3425)*x4971);
IkReal x4989=(cj4*cj5*sj6);
IkReal x4990=(cj0*x4971);
IkReal x4991=((1.0)*x4972);
IkReal x4992=(sj0*x4971);
evalcond[0]=(((r21*x4981))+(((-1.0)*r22*x4975))+(((-1.0)*cj2*x4987))+(((-1.0)*x4979*x4980)));
evalcond[1]=((((-1.0)*x4978*x4979))+((r11*x4981))+(((-1.0)*r12*x4975))+(((-1.0)*x4986))+((x4971*x4974)));
evalcond[2]=((((-1.0)*x4977*x4987))+((r01*x4981))+(((-1.0)*cj0*x4991))+(((-1.0)*r02*x4975))+(((-1.0)*x4979*x4982)));
evalcond[3]=((((-0.0525)*cj2))+(((-1.0)*r21*x4976))+(((0.076)*x4980))+(((-1.0)*pz))+(((-1.0)*cj2*x4985))+(((-1.0)*cj2*x4988)));
evalcond[4]=((((-1.0)*cj4*x4975*x4980))+((r22*x4983))+((r21*x4989))+((r21*x4984))+(((-1.0)*cj2*x4991))+((r20*x4973)));
evalcond[5]=(x4992+((r12*x4983))+((r11*x4984))+((r11*x4989))+((r10*x4973))+(((-1.0)*cj4*x4975*x4978))+((x4972*x4974)));
evalcond[6]=(x4990+((r01*x4989))+((r01*x4984))+(((-1.0)*cj4*x4975*x4982))+(((-1.0)*x4977*x4991))+((r00*x4973))+((r02*x4983)));
evalcond[7]=((((-1.0)*x4977*x4988))+(((-1.0)*x4977*x4985))+(((0.076)*x4982))+(((0.0775)*x4990))+(((-1.0)*px))+(((-0.3425)*cj0*x4972))+(((0.293)*cj0))+(((-0.0525)*x4977))+(((-1.0)*r01*x4976)));
evalcond[8]=((((0.076)*x4978))+((x4974*x4985))+((x4974*x4988))+(((0.0775)*x4992))+(((-1.0)*py))+(((-1.0)*r11*x4976))+(((0.293)*sj0))+(((-0.3425)*x4986))+(((0.0525)*x4974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4993=((1.0)*sj5);
IkReal x4994=(r11*sj6);
IkReal x4995=(cj6*r10);
IkReal x4996=(sj0*sj5);
IkReal x4997=((1.0)*cj5);
IkReal x4998=(cj6*r00);
IkReal x4999=(r01*sj6);
IkReal x5000=(cj0*sj5);
CheckValue<IkReal> x5001=IKPowWithIntegerCheck(sj2,-1);
if(!x5001.valid){
continue;
}
if( IKabs(((x5001.value)*((((cj0*cj5*r12))+(((-1.0)*cj0*x4993*x4994))+((x4996*x4999))+(((-1.0)*r02*sj0*x4997))+((x4995*x5000))+(((-1.0)*sj0*x4993*x4998)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4994*x4996))+((x4999*x5000))+(((-1.0)*cj0*x4993*x4998))+(((-1.0)*cj0*r02*x4997))+(((-1.0)*r12*sj0*x4997))+(((-1.0)*sj0*x4993*x4995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5001.value)*((((cj0*cj5*r12))+(((-1.0)*cj0*x4993*x4994))+((x4996*x4999))+(((-1.0)*r02*sj0*x4997))+((x4995*x5000))+(((-1.0)*sj0*x4993*x4998))))))+IKsqr((((x4994*x4996))+((x4999*x5000))+(((-1.0)*cj0*x4993*x4998))+(((-1.0)*cj0*r02*x4997))+(((-1.0)*r12*sj0*x4997))+(((-1.0)*sj0*x4993*x4995))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5001.value)*((((cj0*cj5*r12))+(((-1.0)*cj0*x4993*x4994))+((x4996*x4999))+(((-1.0)*r02*sj0*x4997))+((x4995*x5000))+(((-1.0)*sj0*x4993*x4998))))), (((x4994*x4996))+((x4999*x5000))+(((-1.0)*cj0*x4993*x4998))+(((-1.0)*cj0*r02*x4997))+(((-1.0)*r12*sj0*x4997))+(((-1.0)*sj0*x4993*x4995))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5002=IKsin(j3);
IkReal x5003=IKcos(j3);
IkReal x5004=(sj4*sj6);
IkReal x5005=(cj0*sj2);
IkReal x5006=((1.0)*cj5);
IkReal x5007=((0.076)*sj6);
IkReal x5008=(sj0*sj2);
IkReal x5009=(cj6*r10);
IkReal x5010=((1.0)*sj5);
IkReal x5011=(cj6*r20);
IkReal x5012=(sj5*sj6);
IkReal x5013=(cj6*r00);
IkReal x5014=(cj4*sj5);
IkReal x5015=(cj6*sj4);
IkReal x5016=((0.0775)*x5003);
IkReal x5017=(sj0*x5003);
IkReal x5018=((1.0)*x5002);
IkReal x5019=((0.3425)*x5002);
IkReal x5020=(cj4*cj5*sj6);
IkReal x5021=(cj0*x5002);
IkReal x5022=((1.0)*x5003);
IkReal x5023=(sj0*x5002);
evalcond[0]=((((-1.0)*cj2*x5018))+((r21*x5012))+(((-1.0)*x5010*x5011))+(((-1.0)*r22*x5006)));
evalcond[1]=((((-1.0)*x5009*x5010))+((x5002*x5005))+(((-1.0)*r12*x5006))+((r11*x5012))+(((-1.0)*x5017)));
evalcond[2]=((((-1.0)*cj0*x5022))+(((-1.0)*x5008*x5018))+(((-1.0)*x5010*x5013))+((r01*x5012))+(((-1.0)*r02*x5006)));
evalcond[3]=((((-0.0525)*cj2))+(((0.076)*x5011))+(((-1.0)*cj2*x5016))+(((-1.0)*cj2*x5019))+(((-1.0)*pz))+(((-1.0)*r21*x5007)));
evalcond[4]=(((r20*x5004))+((r21*x5015))+(((-1.0)*cj2*x5022))+((r22*x5014))+(((-1.0)*cj4*x5006*x5011))+((r21*x5020)));
evalcond[5]=(((r11*x5020))+((x5003*x5005))+((r10*x5004))+x5023+(((-1.0)*cj4*x5006*x5009))+((r11*x5015))+((r12*x5014)));
evalcond[6]=(((r02*x5014))+x5021+((r00*x5004))+((r01*x5020))+((r01*x5015))+(((-1.0)*cj4*x5006*x5013))+(((-1.0)*x5008*x5022)));
evalcond[7]=((((-1.0)*x5008*x5019))+(((-1.0)*x5008*x5016))+(((0.076)*x5013))+(((-1.0)*px))+(((0.293)*cj0))+(((-0.0525)*x5008))+(((-0.3425)*cj0*x5003))+(((-1.0)*r01*x5007))+(((0.0775)*x5021)));
evalcond[8]=((((-0.3425)*x5017))+(((0.076)*x5009))+(((-1.0)*py))+(((-1.0)*r11*x5007))+(((0.293)*sj0))+(((0.0525)*x5005))+((x5005*x5019))+((x5005*x5016))+(((0.0775)*x5023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5024=(cj4*sj6);
IkReal x5025=(cj4*cj6);
IkReal x5026=((1.0)*r20);
IkReal x5027=(sj4*sj5);
IkReal x5028=(cj5*sj4);
CheckValue<IkReal> x5029=IKPowWithIntegerCheck(sj0,-1);
if(!x5029.valid){
continue;
}
if( IKabs(((((-1.0)*cj6*x5026*x5028))+(((-1.0)*r21*x5025))+((r22*x5027))+(((-1.0)*x5024*x5026))+((r21*sj6*x5028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5029.value)*((((cj6*r00*x5028))+(((-1.0)*r01*sj6*x5028))+((r00*x5024))+((r01*x5025))+(((-1.0)*r02*x5027)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x5026*x5028))+(((-1.0)*r21*x5025))+((r22*x5027))+(((-1.0)*x5024*x5026))+((r21*sj6*x5028))))+IKsqr(((x5029.value)*((((cj6*r00*x5028))+(((-1.0)*r01*sj6*x5028))+((r00*x5024))+((r01*x5025))+(((-1.0)*r02*x5027))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj6*x5026*x5028))+(((-1.0)*r21*x5025))+((r22*x5027))+(((-1.0)*x5024*x5026))+((r21*sj6*x5028))), ((x5029.value)*((((cj6*r00*x5028))+(((-1.0)*r01*sj6*x5028))+((r00*x5024))+((r01*x5025))+(((-1.0)*r02*x5027))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x5030=IKcos(j2);
IkReal x5031=((1.0)*cj6);
IkReal x5032=(cj5*sj4);
IkReal x5033=(sj4*sj5);
IkReal x5034=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*(IKsin(j2))))+(((-1.0)*r20*x5031*x5032))+((r21*sj6*x5032))+((r22*x5033))+(((-1.0)*r20*x5034))+(((-1.0)*cj4*r21*x5031)));
evalcond[1]=(((r02*x5033))+((r01*sj6*x5032))+((sj0*x5030))+(((-1.0)*r00*x5031*x5032))+(((-1.0)*cj4*r01*x5031))+(((-1.0)*r00*x5034)));
evalcond[2]=((((-1.0)*cj4*r11*x5031))+(((-1.0)*cj0*x5030))+((r12*x5033))+(((-1.0)*r10*x5034))+(((-1.0)*r10*x5031*x5032))+((r11*sj6*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=cj0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5035=((1.0)*sj5);
IkReal x5036=(r11*sj6);
IkReal x5037=(cj6*r10);
IkReal x5038=(cj6*r00);
IkReal x5039=(sj0*sj5);
IkReal x5040=((1.0)*cj5);
IkReal x5041=(r01*sj6);
IkReal x5042=(cj0*sj5);
if( IKabs((((x5037*x5042))+(((-1.0)*cj0*x5035*x5036))+(((-1.0)*r02*sj0*x5040))+((cj0*cj5*r12))+((x5039*x5041))+(((-1.0)*sj0*x5035*x5038)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*sj0*x5040))+(((-1.0)*cj0*x5035*x5038))+((x5036*x5039))+(((-1.0)*cj0*r02*x5040))+((x5041*x5042))+(((-1.0)*sj0*x5035*x5037)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5037*x5042))+(((-1.0)*cj0*x5035*x5036))+(((-1.0)*r02*sj0*x5040))+((cj0*cj5*r12))+((x5039*x5041))+(((-1.0)*sj0*x5035*x5038))))+IKsqr(((((-1.0)*r12*sj0*x5040))+(((-1.0)*cj0*x5035*x5038))+((x5036*x5039))+(((-1.0)*cj0*r02*x5040))+((x5041*x5042))+(((-1.0)*sj0*x5035*x5037))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x5037*x5042))+(((-1.0)*cj0*x5035*x5036))+(((-1.0)*r02*sj0*x5040))+((cj0*cj5*r12))+((x5039*x5041))+(((-1.0)*sj0*x5035*x5038))), ((((-1.0)*r12*sj0*x5040))+(((-1.0)*cj0*x5035*x5038))+((x5036*x5039))+(((-1.0)*cj0*r02*x5040))+((x5041*x5042))+(((-1.0)*sj0*x5035*x5037))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5043=IKsin(j3);
IkReal x5044=IKcos(j3);
IkReal x5045=((1.0)*cj5);
IkReal x5046=((0.076)*sj6);
IkReal x5047=(cj6*r10);
IkReal x5048=((1.0)*sj5);
IkReal x5049=(sj5*sj6);
IkReal x5050=(sj4*sj6);
IkReal x5051=(cj6*r00);
IkReal x5052=(cj4*sj5);
IkReal x5053=(cj6*sj4);
IkReal x5054=(cj0*x5043);
IkReal x5055=(sj0*x5044);
IkReal x5056=(sj0*x5043);
IkReal x5057=(cj0*x5044);
IkReal x5058=(cj4*cj5*sj6);
IkReal x5059=((1.0)*x5055);
evalcond[0]=(x5054+(((-1.0)*x5047*x5048))+(((-1.0)*r12*x5045))+(((-1.0)*x5059))+((r11*x5049)));
evalcond[1]=((((-1.0)*r02*x5045))+((r01*x5049))+(((-1.0)*x5056))+(((-1.0)*x5057))+(((-1.0)*x5048*x5051)));
evalcond[2]=(((r10*x5050))+((r12*x5052))+((r11*x5053))+((r11*x5058))+(((-1.0)*cj4*x5045*x5047))+x5056+x5057);
evalcond[3]=((((-1.0)*cj4*x5045*x5051))+((r00*x5050))+((r01*x5053))+((r01*x5058))+x5054+(((-1.0)*x5059))+((r02*x5052)));
evalcond[4]=((((0.076)*x5051))+(((-0.0775)*x5055))+(((0.0775)*x5054))+(((-1.0)*px))+(((0.293)*cj0))+(((-0.0525)*sj0))+(((-0.3425)*x5057))+(((-0.3425)*x5056))+(((-1.0)*r01*x5046)));
evalcond[5]=((((0.0525)*cj0))+(((0.0775)*x5057))+(((0.0775)*x5056))+(((-1.0)*py))+(((0.076)*x5047))+(((0.293)*sj0))+(((-0.3425)*x5055))+(((0.3425)*x5054))+(((-1.0)*r11*x5046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5060=(cj0*sj5);
IkReal x5061=(r11*sj6);
IkReal x5062=((1.0)*cj6);
IkReal x5063=(sj0*sj5);
IkReal x5064=((1.0)*cj5);
IkReal x5065=(r01*sj6);
if( IKabs(((((-1.0)*x5063*x5065))+((x5060*x5061))+(((-1.0)*r10*x5060*x5062))+((cj5*r02*sj0))+((cj6*r00*x5063))+(((-1.0)*cj0*r12*x5064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5060*x5065))+(((-1.0)*cj0*r02*x5064))+(((-1.0)*r10*x5062*x5063))+(((-1.0)*r00*x5060*x5062))+((x5061*x5063))+(((-1.0)*r12*sj0*x5064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5063*x5065))+((x5060*x5061))+(((-1.0)*r10*x5060*x5062))+((cj5*r02*sj0))+((cj6*r00*x5063))+(((-1.0)*cj0*r12*x5064))))+IKsqr((((x5060*x5065))+(((-1.0)*cj0*r02*x5064))+(((-1.0)*r10*x5062*x5063))+(((-1.0)*r00*x5060*x5062))+((x5061*x5063))+(((-1.0)*r12*sj0*x5064))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x5063*x5065))+((x5060*x5061))+(((-1.0)*r10*x5060*x5062))+((cj5*r02*sj0))+((cj6*r00*x5063))+(((-1.0)*cj0*r12*x5064))), (((x5060*x5065))+(((-1.0)*cj0*r02*x5064))+(((-1.0)*r10*x5062*x5063))+(((-1.0)*r00*x5060*x5062))+((x5061*x5063))+(((-1.0)*r12*sj0*x5064))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5066=IKcos(j3);
IkReal x5067=IKsin(j3);
IkReal x5068=((0.076)*sj6);
IkReal x5069=(sj5*sj6);
IkReal x5070=(cj4*cj5);
IkReal x5071=(sj4*sj6);
IkReal x5072=(cj4*sj5);
IkReal x5073=(cj6*sj4);
IkReal x5074=((1.0)*cj5);
IkReal x5075=((0.076)*cj6);
IkReal x5076=(sj0*x5067);
IkReal x5077=((1.0)*x5066);
IkReal x5078=(sj0*x5066);
IkReal x5079=((1.0)*cj6*r10);
IkReal x5080=((1.0)*cj6*r00);
IkReal x5081=(cj0*x5067);
IkReal x5082=(cj0*x5066);
IkReal x5083=(cj0*x5077);
evalcond[0]=((((-1.0)*r02*x5074))+(((-1.0)*sj5*x5080))+(((-1.0)*x5083))+x5076+((r01*x5069)));
evalcond[1]=((((-1.0)*x5081))+(((-1.0)*sj5*x5079))+((r11*x5069))+(((-1.0)*r12*x5074))+(((-1.0)*sj0*x5077)));
evalcond[2]=((((-1.0)*x5070*x5080))+((r01*sj6*x5070))+x5081+x5078+((r02*x5072))+((r01*x5073))+((r00*x5071)));
evalcond[3]=((((-1.0)*x5083))+x5076+(((-1.0)*x5070*x5079))+((r10*x5071))+((r12*x5072))+((r11*sj6*x5070))+((r11*x5073)));
evalcond[4]=((((0.0775)*x5078))+(((0.3425)*x5076))+(((-1.0)*px))+(((0.293)*cj0))+(((0.0775)*x5081))+((r00*x5075))+(((-0.3425)*x5082))+(((0.0525)*sj0))+(((-1.0)*r01*x5068)));
evalcond[5]=((((0.0775)*x5076))+(((-0.0525)*cj0))+(((-0.3425)*x5078))+(((-0.0775)*x5082))+(((-1.0)*py))+(((0.293)*sj0))+((r10*x5075))+(((-1.0)*r11*x5068))+(((-0.3425)*x5081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5084=(r21*sj6);
IkReal x5085=(cj6*r20);
IkReal x5086=(cj5*r22);
IkReal x5087=((4.41935483870968)*sj5);
if( IKabs(((((-1.0)*x5086))+((sj5*x5084))+(((-1.0)*sj5*x5085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((0.980645161290323)*x5085))+(((-12.9032258064516)*pz))+((x5085*x5087))+(((-0.980645161290323)*x5084))+(((-1.0)*x5084*x5087))+(((4.41935483870968)*x5086)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5086))+((sj5*x5084))+(((-1.0)*sj5*x5085))))+IKsqr(((-0.67741935483871)+(((0.980645161290323)*x5085))+(((-12.9032258064516)*pz))+((x5085*x5087))+(((-0.980645161290323)*x5084))+(((-1.0)*x5084*x5087))+(((4.41935483870968)*x5086))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x5086))+((sj5*x5084))+(((-1.0)*sj5*x5085))), ((-0.67741935483871)+(((0.980645161290323)*x5085))+(((-12.9032258064516)*pz))+((x5085*x5087))+(((-0.980645161290323)*x5084))+(((-1.0)*x5084*x5087))+(((4.41935483870968)*x5086))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5088=IKcos(j3);
IkReal x5089=IKsin(j3);
IkReal x5090=(sj4*sj6);
IkReal x5091=(cj4*sj5);
IkReal x5092=((1.0)*cj5);
IkReal x5093=((0.076)*sj6);
IkReal x5094=(cj6*r10);
IkReal x5095=((1.0)*sj5);
IkReal x5096=(cj6*sj4);
IkReal x5097=(r11*sj6);
IkReal x5098=(cj4*cj5);
IkReal x5099=(cj6*r20);
IkReal x5100=(r21*sj6);
IkReal x5101=(cj6*r00);
IkReal x5102=(r01*sj6);
IkReal x5103=(sj0*x5088);
IkReal x5104=(cj0*x5089);
IkReal x5105=((1.0)*x5088);
IkReal x5106=(sj0*x5089);
evalcond[0]=((((-1.0)*r22*x5092))+((sj5*x5100))+(((-1.0)*x5089))+(((-1.0)*x5095*x5099)));
evalcond[1]=((((-1.0)*x5103))+((sj5*x5097))+(((-1.0)*x5094*x5095))+(((-1.0)*r12*x5092)));
evalcond[2]=(((sj5*x5102))+(((-1.0)*x5095*x5101))+(((-1.0)*r02*x5092))+(((-1.0)*cj0*x5105)));
evalcond[3]=((-0.0525)+(((-0.0775)*x5088))+(((-1.0)*pz))+(((-0.3425)*x5089))+(((-1.0)*r21*x5093))+(((0.076)*x5099)));
evalcond[4]=((((0.076)*x5101))+(((-0.3425)*cj0*x5088))+(((-1.0)*r01*x5093))+(((-1.0)*px))+(((0.293)*cj0))+(((0.0775)*x5104)));
evalcond[5]=((((-0.3425)*x5103))+(((-1.0)*r11*x5093))+(((-1.0)*py))+(((0.293)*sj0))+(((0.0775)*x5106))+(((0.076)*x5094)));
evalcond[6]=((((-1.0)*x5105))+((r21*x5096))+(((-1.0)*cj4*x5092*x5099))+((x5098*x5100))+((r22*x5091))+((r20*x5090)));
evalcond[7]=((((-1.0)*cj4*x5092*x5094))+((r10*x5090))+((r11*x5096))+x5106+((r12*x5091))+((x5097*x5098)));
evalcond[8]=(((x5098*x5102))+((r00*x5090))+(((-1.0)*cj4*x5092*x5101))+x5104+((r01*x5096))+((r02*x5091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5107=(cj6*r20);
IkReal x5108=(cj5*r22);
IkReal x5109=(r21*sj6);
IkReal x5110=((4.41935483870968)*sj5);
if( IKabs((((sj5*x5107))+x5108+(((-1.0)*sj5*x5109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-0.980645161290323)*x5107))+(((12.9032258064516)*pz))+((x5109*x5110))+(((-4.41935483870968)*x5108))+(((0.980645161290323)*x5109))+(((-1.0)*x5107*x5110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x5107))+x5108+(((-1.0)*sj5*x5109))))+IKsqr(((-0.67741935483871)+(((-0.980645161290323)*x5107))+(((12.9032258064516)*pz))+((x5109*x5110))+(((-4.41935483870968)*x5108))+(((0.980645161290323)*x5109))+(((-1.0)*x5107*x5110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj5*x5107))+x5108+(((-1.0)*sj5*x5109))), ((-0.67741935483871)+(((-0.980645161290323)*x5107))+(((12.9032258064516)*pz))+((x5109*x5110))+(((-4.41935483870968)*x5108))+(((0.980645161290323)*x5109))+(((-1.0)*x5107*x5110))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5111=IKcos(j3);
IkReal x5112=IKsin(j3);
IkReal x5113=(r21*sj6);
IkReal x5114=((1.0)*cj5);
IkReal x5115=((0.076)*sj6);
IkReal x5116=(cj6*r10);
IkReal x5117=((1.0)*sj5);
IkReal x5118=(cj6*sj4);
IkReal x5119=(r11*sj6);
IkReal x5120=(cj4*cj5);
IkReal x5121=(cj6*r20);
IkReal x5122=(sj4*sj6);
IkReal x5123=(cj6*r00);
IkReal x5124=(cj4*sj5);
IkReal x5125=(r01*sj6);
IkReal x5126=(sj0*x5111);
IkReal x5127=(cj0*x5112);
IkReal x5128=(cj0*x5111);
IkReal x5129=(sj0*x5112);
evalcond[0]=(((sj5*x5113))+(((-1.0)*r22*x5114))+x5112+(((-1.0)*x5117*x5121)));
evalcond[1]=(((sj5*x5119))+(((-1.0)*x5116*x5117))+(((-1.0)*x5126))+(((-1.0)*r12*x5114)));
evalcond[2]=((((-1.0)*r02*x5114))+(((-1.0)*x5117*x5123))+((sj5*x5125))+(((-1.0)*x5128)));
evalcond[3]=((0.0525)+(((-0.076)*x5113))+(((0.3425)*x5112))+(((-1.0)*pz))+(((0.0775)*x5111))+(((0.076)*x5121)));
evalcond[4]=(((r22*x5124))+(((-1.0)*cj4*x5114*x5121))+((r21*x5118))+x5111+((x5113*x5120))+((r20*x5122)));
evalcond[5]=((((0.0775)*x5127))+(((-1.0)*px))+(((0.293)*cj0))+(((-0.3425)*x5128))+(((0.076)*x5123))+(((-1.0)*r01*x5115)));
evalcond[6]=((((0.0775)*x5129))+(((0.076)*x5116))+(((-1.0)*py))+(((0.293)*sj0))+(((-0.3425)*x5126))+(((-1.0)*r11*x5115)));
evalcond[7]=(((x5119*x5120))+((r10*x5122))+((r12*x5124))+x5129+(((-1.0)*cj4*x5114*x5116))+((r11*x5118)));
evalcond[8]=(((r01*x5118))+(((-1.0)*cj4*x5114*x5123))+((r00*x5122))+x5127+((x5120*x5125))+((r02*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x5136=IKPowWithIntegerCheck(cj2,-1);
if(!x5136.valid){
continue;
}
IkReal x5130=x5136.value;
IkReal x5131=((1.0)*sj5);
IkReal x5132=(sj0*sj2);
IkReal x5133=(r21*sj6);
IkReal x5134=(cj6*r20);
IkReal x5135=(cj5*r22);
CheckValue<IkReal> x5137=IKPowWithIntegerCheck(cj0,-1);
if(!x5137.valid){
continue;
}
if( IKabs((x5130*(((((-1.0)*x5131*x5134))+((sj5*x5133))+(((-1.0)*x5135)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5130*(x5137.value)*((((x5132*x5135))+(((-1.0)*x5131*x5132*x5133))+((cj2*r01*sj5*sj6))+(((-1.0)*cj2*cj6*r00*x5131))+((sj5*x5132*x5134))+(((-1.0)*cj2*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5130*(((((-1.0)*x5131*x5134))+((sj5*x5133))+(((-1.0)*x5135))))))+IKsqr((x5130*(x5137.value)*((((x5132*x5135))+(((-1.0)*x5131*x5132*x5133))+((cj2*r01*sj5*sj6))+(((-1.0)*cj2*cj6*r00*x5131))+((sj5*x5132*x5134))+(((-1.0)*cj2*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x5130*(((((-1.0)*x5131*x5134))+((sj5*x5133))+(((-1.0)*x5135))))), (x5130*(x5137.value)*((((x5132*x5135))+(((-1.0)*x5131*x5132*x5133))+((cj2*r01*sj5*sj6))+(((-1.0)*cj2*cj6*r00*x5131))+((sj5*x5132*x5134))+(((-1.0)*cj2*cj5*r02))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5138=IKsin(j3);
IkReal x5139=IKcos(j3);
IkReal x5140=(sj4*sj6);
IkReal x5141=(cj0*sj2);
IkReal x5142=((1.0)*cj5);
IkReal x5143=((0.076)*sj6);
IkReal x5144=(sj0*sj2);
IkReal x5145=(cj6*r10);
IkReal x5146=((1.0)*sj5);
IkReal x5147=(cj6*r20);
IkReal x5148=(sj5*sj6);
IkReal x5149=(cj6*r00);
IkReal x5150=(cj4*sj5);
IkReal x5151=(cj6*sj4);
IkReal x5152=((0.0775)*x5139);
IkReal x5153=(sj0*x5139);
IkReal x5154=((1.0)*x5138);
IkReal x5155=((0.3425)*x5138);
IkReal x5156=(cj4*cj5*sj6);
IkReal x5157=(cj0*x5138);
IkReal x5158=((1.0)*x5139);
IkReal x5159=(sj0*x5138);
evalcond[0]=(((r21*x5148))+(((-1.0)*cj2*x5154))+(((-1.0)*x5146*x5147))+(((-1.0)*r22*x5142)));
evalcond[1]=((((-1.0)*r12*x5142))+(((-1.0)*x5153))+((x5138*x5141))+((r11*x5148))+(((-1.0)*x5145*x5146)));
evalcond[2]=(((r01*x5148))+(((-1.0)*r02*x5142))+(((-1.0)*x5144*x5154))+(((-1.0)*cj0*x5158))+(((-1.0)*x5146*x5149)));
evalcond[3]=((((-0.0525)*cj2))+(((-1.0)*r21*x5143))+(((-1.0)*cj2*x5152))+(((-1.0)*cj2*x5155))+(((-1.0)*pz))+(((0.076)*x5147)));
evalcond[4]=(((r21*x5156))+((r21*x5151))+(((-1.0)*cj2*x5158))+((r20*x5140))+(((-1.0)*cj4*x5142*x5147))+((r22*x5150)));
evalcond[5]=(((r11*x5151))+((r11*x5156))+((r10*x5140))+((r12*x5150))+x5159+(((-1.0)*cj4*x5142*x5145))+((x5139*x5141)));
evalcond[6]=(((r01*x5156))+((r01*x5151))+((r00*x5140))+(((-1.0)*x5144*x5158))+x5157+((r02*x5150))+(((-1.0)*cj4*x5142*x5149)));
evalcond[7]=((((0.0775)*x5157))+(((-1.0)*x5144*x5152))+(((-1.0)*x5144*x5155))+(((-1.0)*r01*x5143))+(((-1.0)*px))+(((-0.3425)*cj0*x5139))+(((0.293)*cj0))+(((-0.0525)*x5144))+(((0.076)*x5149)));
evalcond[8]=((((-1.0)*r11*x5143))+(((0.0775)*x5159))+(((0.0525)*x5141))+(((-0.3425)*x5153))+(((-1.0)*py))+(((0.076)*x5145))+(((0.293)*sj0))+((x5141*x5155))+((x5141*x5152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x5164=IKPowWithIntegerCheck(cj2,-1);
if(!x5164.valid){
continue;
}
IkReal x5160=x5164.value;
IkReal x5161=(cj6*r20);
IkReal x5162=(cj5*r22);
IkReal x5163=(r21*sj5*sj6);
if( IKabs((x5160*(((((-1.0)*sj5*x5161))+x5163+(((-1.0)*x5162)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x5160*(((((137.0)*x5162))+(((-21.0)*cj2))+(((-137.0)*x5163))+(((-30.4)*r21*sj6))+(((-400.0)*pz))+(((30.4)*x5161))+(((137.0)*sj5*x5161)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5160*(((((-1.0)*sj5*x5161))+x5163+(((-1.0)*x5162))))))+IKsqr(((0.032258064516129)*x5160*(((((137.0)*x5162))+(((-21.0)*cj2))+(((-137.0)*x5163))+(((-30.4)*r21*sj6))+(((-400.0)*pz))+(((30.4)*x5161))+(((137.0)*sj5*x5161))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x5160*(((((-1.0)*sj5*x5161))+x5163+(((-1.0)*x5162))))), ((0.032258064516129)*x5160*(((((137.0)*x5162))+(((-21.0)*cj2))+(((-137.0)*x5163))+(((-30.4)*r21*sj6))+(((-400.0)*pz))+(((30.4)*x5161))+(((137.0)*sj5*x5161))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5165=IKsin(j3);
IkReal x5166=IKcos(j3);
IkReal x5167=(sj4*sj6);
IkReal x5168=(cj0*sj2);
IkReal x5169=((1.0)*cj5);
IkReal x5170=((0.076)*sj6);
IkReal x5171=(sj0*sj2);
IkReal x5172=(cj6*r10);
IkReal x5173=((1.0)*sj5);
IkReal x5174=(cj6*r20);
IkReal x5175=(sj5*sj6);
IkReal x5176=(cj6*r00);
IkReal x5177=(cj4*sj5);
IkReal x5178=(cj6*sj4);
IkReal x5179=((0.0775)*x5166);
IkReal x5180=(sj0*x5166);
IkReal x5181=((1.0)*x5165);
IkReal x5182=((0.3425)*x5165);
IkReal x5183=(cj4*cj5*sj6);
IkReal x5184=(cj0*x5165);
IkReal x5185=((1.0)*x5166);
IkReal x5186=(sj0*x5165);
evalcond[0]=((((-1.0)*cj2*x5181))+(((-1.0)*r22*x5169))+(((-1.0)*x5173*x5174))+((r21*x5175)));
evalcond[1]=(((x5165*x5168))+(((-1.0)*x5172*x5173))+(((-1.0)*r12*x5169))+((r11*x5175))+(((-1.0)*x5180)));
evalcond[2]=((((-1.0)*x5173*x5176))+(((-1.0)*x5171*x5181))+((r01*x5175))+(((-1.0)*r02*x5169))+(((-1.0)*cj0*x5185)));
evalcond[3]=((((-1.0)*cj2*x5182))+(((-1.0)*r21*x5170))+(((-0.0525)*cj2))+(((-1.0)*pz))+(((0.076)*x5174))+(((-1.0)*cj2*x5179)));
evalcond[4]=((((-1.0)*cj2*x5185))+(((-1.0)*cj4*x5169*x5174))+((r20*x5167))+((r21*x5183))+((r22*x5177))+((r21*x5178)));
evalcond[5]=(((r10*x5167))+(((-1.0)*cj4*x5169*x5172))+((x5166*x5168))+x5186+((r12*x5177))+((r11*x5178))+((r11*x5183)));
evalcond[6]=((((-1.0)*cj4*x5169*x5176))+((r00*x5167))+(((-1.0)*x5171*x5185))+((r01*x5178))+((r01*x5183))+x5184+((r02*x5177)));
evalcond[7]=((((-1.0)*x5171*x5182))+(((-1.0)*r01*x5170))+(((0.0775)*x5184))+(((-1.0)*px))+(((-0.3425)*cj0*x5166))+(((-0.0525)*x5171))+(((0.293)*cj0))+(((0.076)*x5176))+(((-1.0)*x5171*x5179)));
evalcond[8]=((((0.0525)*x5168))+(((-1.0)*r11*x5170))+(((0.0775)*x5186))+(((-1.0)*py))+(((0.293)*sj0))+(((0.076)*x5172))+(((-0.3425)*x5180))+((x5168*x5182))+((x5168*x5179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5187=((1.0)*sj5);
IkReal x5188=(r11*sj6);
IkReal x5189=(cj6*r10);
IkReal x5190=(sj0*sj5);
IkReal x5191=((1.0)*cj5);
IkReal x5192=(cj6*r00);
IkReal x5193=(r01*sj6);
IkReal x5194=(cj0*sj5);
CheckValue<IkReal> x5195=IKPowWithIntegerCheck(sj2,-1);
if(!x5195.valid){
continue;
}
if( IKabs(((x5195.value)*((((cj0*cj5*r12))+(((-1.0)*cj0*x5187*x5188))+(((-1.0)*r02*sj0*x5191))+(((-1.0)*sj0*x5187*x5192))+((x5190*x5193))+((x5189*x5194)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x5187*x5192))+((x5188*x5190))+((x5193*x5194))+(((-1.0)*sj0*x5187*x5189))+(((-1.0)*r12*sj0*x5191))+(((-1.0)*cj0*r02*x5191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5195.value)*((((cj0*cj5*r12))+(((-1.0)*cj0*x5187*x5188))+(((-1.0)*r02*sj0*x5191))+(((-1.0)*sj0*x5187*x5192))+((x5190*x5193))+((x5189*x5194))))))+IKsqr(((((-1.0)*cj0*x5187*x5192))+((x5188*x5190))+((x5193*x5194))+(((-1.0)*sj0*x5187*x5189))+(((-1.0)*r12*sj0*x5191))+(((-1.0)*cj0*r02*x5191))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5195.value)*((((cj0*cj5*r12))+(((-1.0)*cj0*x5187*x5188))+(((-1.0)*r02*sj0*x5191))+(((-1.0)*sj0*x5187*x5192))+((x5190*x5193))+((x5189*x5194))))), ((((-1.0)*cj0*x5187*x5192))+((x5188*x5190))+((x5193*x5194))+(((-1.0)*sj0*x5187*x5189))+(((-1.0)*r12*sj0*x5191))+(((-1.0)*cj0*r02*x5191))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5196=IKsin(j3);
IkReal x5197=IKcos(j3);
IkReal x5198=(sj4*sj6);
IkReal x5199=(cj0*sj2);
IkReal x5200=((1.0)*cj5);
IkReal x5201=((0.076)*sj6);
IkReal x5202=(sj0*sj2);
IkReal x5203=(cj6*r10);
IkReal x5204=((1.0)*sj5);
IkReal x5205=(cj6*r20);
IkReal x5206=(sj5*sj6);
IkReal x5207=(cj6*r00);
IkReal x5208=(cj4*sj5);
IkReal x5209=(cj6*sj4);
IkReal x5210=((0.0775)*x5197);
IkReal x5211=(sj0*x5197);
IkReal x5212=((1.0)*x5196);
IkReal x5213=((0.3425)*x5196);
IkReal x5214=(cj4*cj5*sj6);
IkReal x5215=(cj0*x5196);
IkReal x5216=((1.0)*x5197);
IkReal x5217=(sj0*x5196);
evalcond[0]=((((-1.0)*cj2*x5212))+(((-1.0)*r22*x5200))+(((-1.0)*x5204*x5205))+((r21*x5206)));
evalcond[1]=((((-1.0)*x5203*x5204))+((r11*x5206))+((x5196*x5199))+(((-1.0)*r12*x5200))+(((-1.0)*x5211)));
evalcond[2]=((((-1.0)*r02*x5200))+(((-1.0)*cj0*x5216))+((r01*x5206))+(((-1.0)*x5202*x5212))+(((-1.0)*x5204*x5207)));
evalcond[3]=((((-1.0)*cj2*x5210))+(((-1.0)*cj2*x5213))+(((-0.0525)*cj2))+(((-1.0)*pz))+(((0.076)*x5205))+(((-1.0)*r21*x5201)));
evalcond[4]=((((-1.0)*cj2*x5216))+((r22*x5208))+(((-1.0)*cj4*x5200*x5205))+((r21*x5214))+((r21*x5209))+((r20*x5198)));
evalcond[5]=(((r10*x5198))+x5217+((r11*x5209))+((r11*x5214))+((x5197*x5199))+((r12*x5208))+(((-1.0)*cj4*x5200*x5203)));
evalcond[6]=(((r01*x5214))+((r01*x5209))+x5215+(((-1.0)*x5202*x5216))+((r02*x5208))+((r00*x5198))+(((-1.0)*cj4*x5200*x5207)));
evalcond[7]=((((-0.3425)*cj0*x5197))+(((-1.0)*px))+(((0.293)*cj0))+(((-1.0)*x5202*x5210))+(((-1.0)*x5202*x5213))+(((0.076)*x5207))+(((-1.0)*r01*x5201))+(((0.0775)*x5215))+(((-0.0525)*x5202)));
evalcond[8]=((((0.0525)*x5199))+((x5199*x5213))+((x5199*x5210))+(((-1.0)*py))+(((0.293)*sj0))+(((0.076)*x5203))+(((0.0775)*x5217))+(((-0.3425)*x5211))+(((-1.0)*r11*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2, j3]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5218=((1.0)*sj6);
IkReal x5219=(sj4*sj5);
IkReal x5220=(cj4*cj6);
IkReal x5221=(cj5*sj4);
CheckValue<IkReal> x5222=IKPowWithIntegerCheck(cj0,-1);
if(!x5222.valid){
continue;
}
if( IKabs((((cj4*r20*sj6))+((r21*x5220))+((cj6*r20*x5221))+(((-1.0)*r22*x5219))+(((-1.0)*r21*x5218*x5221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5222.value)*(((((-1.0)*cj6*r10*x5221))+((r11*sj6*x5221))+(((-1.0)*r11*x5220))+((r12*x5219))+(((-1.0)*cj4*r10*x5218)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r20*sj6))+((r21*x5220))+((cj6*r20*x5221))+(((-1.0)*r22*x5219))+(((-1.0)*r21*x5218*x5221))))+IKsqr(((x5222.value)*(((((-1.0)*cj6*r10*x5221))+((r11*sj6*x5221))+(((-1.0)*r11*x5220))+((r12*x5219))+(((-1.0)*cj4*r10*x5218))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*r20*sj6))+((r21*x5220))+((cj6*r20*x5221))+(((-1.0)*r22*x5219))+(((-1.0)*r21*x5218*x5221))), ((x5222.value)*(((((-1.0)*cj6*r10*x5221))+((r11*sj6*x5221))+(((-1.0)*r11*x5220))+((r12*x5219))+(((-1.0)*cj4*r10*x5218))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x5223=IKcos(j2);
IkReal x5224=(sj4*sj5);
IkReal x5225=(cj5*sj4);
IkReal x5226=((1.0)*cj6);
IkReal x5227=((1.0)*cj4*sj6);
evalcond[0]=(((r22*x5224))+(IKsin(j2))+(((-1.0)*r20*x5227))+((r21*sj6*x5225))+(((-1.0)*cj4*r21*x5226))+(((-1.0)*r20*x5225*x5226)));
evalcond[1]=((((-1.0)*cj4*r01*x5226))+((r02*x5224))+((r01*sj6*x5225))+((sj0*x5223))+(((-1.0)*r00*x5225*x5226))+(((-1.0)*r00*x5227)));
evalcond[2]=((((-1.0)*r10*x5225*x5226))+((r11*sj6*x5225))+(((-1.0)*cj0*x5223))+(((-1.0)*cj4*r11*x5226))+(((-1.0)*r10*x5227))+((r12*x5224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=cj0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5228=(cj0*cj5);
IkReal x5229=(sj0*sj5);
IkReal x5230=(cj6*r10);
IkReal x5231=(r01*sj6);
IkReal x5232=(cj0*sj5);
IkReal x5233=(cj6*r00);
IkReal x5234=(cj5*sj0);
IkReal x5235=((1.0)*r11*sj5*sj6);
if( IKabs((((x5229*x5231))+(((-1.0)*r11*sj6*x5232))+((x5230*x5232))+(((-1.0)*x5229*x5233))+((r12*x5228))+(((-1.0)*r02*x5234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5231*x5232))+(((-1.0)*r11*sj6*x5229))+((r02*x5228))+((r12*x5234))+((x5232*x5233))+((x5229*x5230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5229*x5231))+(((-1.0)*r11*sj6*x5232))+((x5230*x5232))+(((-1.0)*x5229*x5233))+((r12*x5228))+(((-1.0)*r02*x5234))))+IKsqr(((((-1.0)*x5231*x5232))+(((-1.0)*r11*sj6*x5229))+((r02*x5228))+((r12*x5234))+((x5232*x5233))+((x5229*x5230))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x5229*x5231))+(((-1.0)*r11*sj6*x5232))+((x5230*x5232))+(((-1.0)*x5229*x5233))+((r12*x5228))+(((-1.0)*r02*x5234))), ((((-1.0)*x5231*x5232))+(((-1.0)*r11*sj6*x5229))+((r02*x5228))+((r12*x5234))+((x5232*x5233))+((x5229*x5230))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5236=IKcos(j3);
IkReal x5237=IKsin(j3);
IkReal x5238=((0.076)*sj6);
IkReal x5239=(sj5*sj6);
IkReal x5240=(cj4*cj5);
IkReal x5241=(sj4*sj6);
IkReal x5242=(cj4*sj5);
IkReal x5243=(cj6*sj4);
IkReal x5244=((1.0)*cj5);
IkReal x5245=((0.076)*cj6);
IkReal x5246=(cj0*x5236);
IkReal x5247=(sj0*x5236);
IkReal x5248=((1.0)*cj6*r10);
IkReal x5249=((1.0)*cj6*r00);
IkReal x5250=(cj0*x5237);
IkReal x5251=(sj0*x5237);
IkReal x5252=((1.0)*x5251);
evalcond[0]=((((-1.0)*r12*x5244))+((r11*x5239))+(((-1.0)*sj5*x5248))+x5250+x5247);
evalcond[1]=((((-1.0)*x5252))+(((-1.0)*sj5*x5249))+((r01*x5239))+x5246+(((-1.0)*r02*x5244)));
evalcond[2]=(((r10*x5241))+((r11*x5243))+(((-1.0)*x5252))+((r12*x5242))+x5246+((r11*sj6*x5240))+(((-1.0)*x5240*x5248)));
evalcond[3]=(((r01*sj6*x5240))+(((-1.0)*x5250))+(((-1.0)*x5247))+((r00*x5241))+((r01*x5243))+(((-1.0)*x5240*x5249))+((r02*x5242)));
evalcond[4]=(((r00*x5245))+(((-0.0775)*x5250))+(((-1.0)*r01*x5238))+(((-0.0775)*x5247))+(((-1.0)*px))+(((-0.293)*cj0))+(((-0.0525)*sj0))+(((0.3425)*x5246))+(((-0.3425)*x5251)));
evalcond[5]=((((0.0775)*x5246))+((r10*x5245))+(((0.0525)*cj0))+(((-1.0)*r11*x5238))+(((-0.0775)*x5251))+(((-1.0)*py))+(((0.3425)*x5250))+(((0.3425)*x5247))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5253=(cj5*r02);
IkReal x5254=((1.0)*sj0);
IkReal x5255=((1.0)*cj0);
IkReal x5256=(cj5*r12);
IkReal x5257=(r11*sj5*sj6);
IkReal x5258=(cj6*r10*sj5);
IkReal x5259=(cj6*r00*sj5);
IkReal x5260=(r01*sj5*sj6);
if( IKabs((((sj0*x5253))+((sj0*x5259))+(((-1.0)*x5254*x5260))+(((-1.0)*x5255*x5258))+(((-1.0)*x5255*x5256))+((cj0*x5257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5254*x5257))+((sj0*x5256))+((sj0*x5258))+(((-1.0)*x5255*x5260))+((cj0*x5253))+((cj0*x5259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x5253))+((sj0*x5259))+(((-1.0)*x5254*x5260))+(((-1.0)*x5255*x5258))+(((-1.0)*x5255*x5256))+((cj0*x5257))))+IKsqr(((((-1.0)*x5254*x5257))+((sj0*x5256))+((sj0*x5258))+(((-1.0)*x5255*x5260))+((cj0*x5253))+((cj0*x5259))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x5253))+((sj0*x5259))+(((-1.0)*x5254*x5260))+(((-1.0)*x5255*x5258))+(((-1.0)*x5255*x5256))+((cj0*x5257))), ((((-1.0)*x5254*x5257))+((sj0*x5256))+((sj0*x5258))+(((-1.0)*x5255*x5260))+((cj0*x5253))+((cj0*x5259))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5261=IKcos(j3);
IkReal x5262=IKsin(j3);
IkReal x5263=((0.076)*sj6);
IkReal x5264=(sj5*sj6);
IkReal x5265=(cj4*cj5);
IkReal x5266=(sj4*sj6);
IkReal x5267=(cj4*sj5);
IkReal x5268=(cj6*sj4);
IkReal x5269=((1.0)*cj5);
IkReal x5270=((0.076)*cj6);
IkReal x5271=(sj0*x5261);
IkReal x5272=(sj0*x5262);
IkReal x5273=((1.0)*cj6*r10);
IkReal x5274=(cj0*x5261);
IkReal x5275=((1.0)*cj6*r00);
IkReal x5276=(cj0*x5262);
IkReal x5277=((1.0)*x5276);
evalcond[0]=(((r01*x5264))+(((-1.0)*r02*x5269))+x5274+x5272+(((-1.0)*sj5*x5275)));
evalcond[1]=((((-1.0)*r12*x5269))+((r11*x5264))+x5271+(((-1.0)*x5277))+(((-1.0)*sj5*x5273)));
evalcond[2]=(((r02*x5267))+((r00*x5266))+((r01*x5268))+((r01*sj6*x5265))+(((-1.0)*x5265*x5275))+x5271+(((-1.0)*x5277)));
evalcond[3]=(((r12*x5267))+((r11*x5268))+(((-1.0)*x5265*x5273))+(((-1.0)*x5272))+(((-1.0)*x5274))+((r11*sj6*x5265))+((r10*x5266)));
evalcond[4]=((((0.0775)*x5271))+(((-1.0)*r01*x5263))+(((-1.0)*px))+(((-0.293)*cj0))+(((0.3425)*x5272))+(((0.3425)*x5274))+((r00*x5270))+(((-0.0775)*x5276))+(((0.0525)*sj0)));
evalcond[5]=((((-0.0525)*cj0))+(((-0.3425)*x5276))+(((-1.0)*r11*x5263))+((r10*x5270))+(((-1.0)*py))+(((0.3425)*x5271))+(((-0.0775)*x5272))+(((-0.0775)*x5274))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5278=(cj6*r20);
IkReal x5279=(cj5*r22);
IkReal x5280=(r21*sj6);
IkReal x5281=((4.41935483870968)*sj5);
if( IKabs((x5279+((sj5*x5278))+(((-1.0)*sj5*x5280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((12.9032258064516)*pz))+(((-1.0)*x5278*x5281))+((x5280*x5281))+(((-4.41935483870968)*x5279))+(((0.980645161290323)*x5280))+(((-0.980645161290323)*x5278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5279+((sj5*x5278))+(((-1.0)*sj5*x5280))))+IKsqr(((-0.67741935483871)+(((12.9032258064516)*pz))+(((-1.0)*x5278*x5281))+((x5280*x5281))+(((-4.41935483870968)*x5279))+(((0.980645161290323)*x5280))+(((-0.980645161290323)*x5278))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x5279+((sj5*x5278))+(((-1.0)*sj5*x5280))), ((-0.67741935483871)+(((12.9032258064516)*pz))+(((-1.0)*x5278*x5281))+((x5280*x5281))+(((-4.41935483870968)*x5279))+(((0.980645161290323)*x5280))+(((-0.980645161290323)*x5278))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5282=IKcos(j3);
IkReal x5283=IKsin(j3);
IkReal x5284=(sj5*sj6);
IkReal x5285=((1.0)*cj6);
IkReal x5286=(cj4*cj5);
IkReal x5287=((0.076)*sj6);
IkReal x5288=(cj6*sj4);
IkReal x5289=((1.0)*cj5);
IkReal x5290=(sj4*sj6);
IkReal x5291=(cj4*sj5);
IkReal x5292=((0.076)*cj6);
IkReal x5293=(sj0*x5282);
IkReal x5294=((0.0775)*x5283);
IkReal x5295=((1.0)*x5283);
IkReal x5296=(cj0*x5282);
evalcond[0]=((((-1.0)*r22*x5289))+(((-1.0)*r20*sj5*x5285))+((r21*x5284))+x5283);
evalcond[1]=(x5293+(((-1.0)*r12*x5289))+(((-1.0)*r10*sj5*x5285))+((r11*x5284)));
evalcond[2]=((((-1.0)*r00*sj5*x5285))+x5296+((r01*x5284))+(((-1.0)*r02*x5289)));
evalcond[3]=((0.0525)+(((0.0775)*x5282))+(((-1.0)*r21*x5287))+(((-1.0)*pz))+((r20*x5292))+(((0.3425)*x5283)));
evalcond[4]=(((r21*sj6*x5286))+(((-1.0)*r20*x5285*x5286))+((r22*x5291))+((r21*x5288))+x5282+((r20*x5290)));
evalcond[5]=((((-1.0)*r01*x5287))+(((-1.0)*px))+(((-0.293)*cj0))+((r00*x5292))+(((0.3425)*x5296))+(((-1.0)*cj0*x5294)));
evalcond[6]=((((-1.0)*sj0*x5294))+((r10*x5292))+(((-1.0)*r11*x5287))+(((-1.0)*py))+(((0.3425)*x5293))+(((-0.293)*sj0)));
evalcond[7]=(((r12*x5291))+(((-1.0)*r10*x5285*x5286))+(((-1.0)*sj0*x5295))+((r10*x5290))+((r11*sj6*x5286))+((r11*x5288)));
evalcond[8]=(((r02*x5291))+((r00*x5290))+((r01*x5288))+(((-1.0)*r00*x5285*x5286))+(((-1.0)*cj0*x5295))+((r01*sj6*x5286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5297=(r21*sj6);
IkReal x5298=(cj6*r20);
IkReal x5299=(cj5*r22);
IkReal x5300=((4.41935483870968)*sj5);
if( IKabs(((((-1.0)*sj5*x5298))+((sj5*x5297))+(((-1.0)*x5299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-1.0)*x5297*x5300))+(((-12.9032258064516)*pz))+(((4.41935483870968)*x5299))+(((0.980645161290323)*x5298))+((x5298*x5300))+(((-0.980645161290323)*x5297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x5298))+((sj5*x5297))+(((-1.0)*x5299))))+IKsqr(((-0.67741935483871)+(((-1.0)*x5297*x5300))+(((-12.9032258064516)*pz))+(((4.41935483870968)*x5299))+(((0.980645161290323)*x5298))+((x5298*x5300))+(((-0.980645161290323)*x5297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x5298))+((sj5*x5297))+(((-1.0)*x5299))), ((-0.67741935483871)+(((-1.0)*x5297*x5300))+(((-12.9032258064516)*pz))+(((4.41935483870968)*x5299))+(((0.980645161290323)*x5298))+((x5298*x5300))+(((-0.980645161290323)*x5297))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5301=IKcos(j3);
IkReal x5302=IKsin(j3);
IkReal x5303=(sj4*sj6);
IkReal x5304=(cj4*sj5);
IkReal x5305=((1.0)*cj6);
IkReal x5306=(cj4*cj5);
IkReal x5307=((0.076)*sj6);
IkReal x5308=(cj6*sj4);
IkReal x5309=(r11*sj6);
IkReal x5310=((1.0)*cj5);
IkReal x5311=(r21*sj6);
IkReal x5312=(r01*sj6);
IkReal x5313=((0.076)*cj6);
IkReal x5314=((1.0)*x5302);
IkReal x5315=(sj0*x5301);
IkReal x5316=((0.0775)*x5302);
IkReal x5317=(cj0*x5301);
evalcond[0]=((((-1.0)*x5314))+((sj5*x5311))+(((-1.0)*r20*sj5*x5305))+(((-1.0)*r22*x5310)));
evalcond[1]=(((sj5*x5309))+(((-1.0)*r12*x5310))+x5315+(((-1.0)*r10*sj5*x5305)));
evalcond[2]=((((-1.0)*r00*sj5*x5305))+((sj5*x5312))+x5317+(((-1.0)*r02*x5310)));
evalcond[3]=((-0.0525)+(((-0.3425)*x5302))+(((-0.0775)*x5301))+(((-1.0)*pz))+(((-1.0)*r21*x5307))+((r20*x5313)));
evalcond[4]=(((r00*x5313))+(((-1.0)*r01*x5307))+(((-1.0)*cj0*x5316))+(((-1.0)*px))+(((-0.293)*cj0))+(((0.3425)*x5317)));
evalcond[5]=((((-1.0)*sj0*x5316))+(((-1.0)*r11*x5307))+(((-1.0)*py))+((r10*x5313))+(((0.3425)*x5315))+(((-0.293)*sj0)));
evalcond[6]=(((r21*x5308))+((r22*x5304))+(((-1.0)*r20*x5305*x5306))+(((-1.0)*x5301))+((r20*x5303))+((x5306*x5311)));
evalcond[7]=(((x5306*x5309))+(((-1.0)*r10*x5305*x5306))+(((-1.0)*sj0*x5314))+((r12*x5304))+((r10*x5303))+((r11*x5308)));
evalcond[8]=((((-1.0)*cj0*x5314))+((r02*x5304))+(((-1.0)*r00*x5305*x5306))+((r01*x5308))+((x5306*x5312))+((r00*x5303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x5323=IKPowWithIntegerCheck(cj2,-1);
if(!x5323.valid){
continue;
}
IkReal x5318=x5323.value;
IkReal x5319=(sj0*sj2);
IkReal x5320=(cj6*sj5);
IkReal x5321=(cj5*r22);
IkReal x5322=((1.0)*sj5*sj6);
CheckValue<IkReal> x5324=IKPowWithIntegerCheck(cj0,-1);
if(!x5324.valid){
continue;
}
if( IKabs((x5318*((x5321+(((-1.0)*r21*x5322))+((r20*x5320)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5318*(x5324.value)*((((r20*x5319*x5320))+(((-1.0)*r21*x5319*x5322))+(((-1.0)*cj2*r01*x5322))+((cj2*cj5*r02))+((x5319*x5321))+((cj2*r00*x5320)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5318*((x5321+(((-1.0)*r21*x5322))+((r20*x5320))))))+IKsqr((x5318*(x5324.value)*((((r20*x5319*x5320))+(((-1.0)*r21*x5319*x5322))+(((-1.0)*cj2*r01*x5322))+((cj2*cj5*r02))+((x5319*x5321))+((cj2*r00*x5320))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x5318*((x5321+(((-1.0)*r21*x5322))+((r20*x5320))))), (x5318*(x5324.value)*((((r20*x5319*x5320))+(((-1.0)*r21*x5319*x5322))+(((-1.0)*cj2*r01*x5322))+((cj2*cj5*r02))+((x5319*x5321))+((cj2*r00*x5320))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5325=IKsin(j3);
IkReal x5326=IKcos(j3);
IkReal x5327=(sj4*sj6);
IkReal x5328=(cj0*sj2);
IkReal x5329=((1.0)*cj6);
IkReal x5330=(cj4*cj5);
IkReal x5331=((0.076)*sj6);
IkReal x5332=(sj0*sj2);
IkReal x5333=(sj5*sj6);
IkReal x5334=((1.0)*cj5);
IkReal x5335=(cj4*sj5);
IkReal x5336=(cj6*sj4);
IkReal x5337=((0.076)*cj6);
IkReal x5338=((0.0775)*x5326);
IkReal x5339=(sj0*x5326);
IkReal x5340=(cj0*x5326);
IkReal x5341=((1.0)*x5325);
IkReal x5342=((0.3425)*x5325);
IkReal x5343=((0.0775)*x5325);
evalcond[0]=((((-1.0)*r20*sj5*x5329))+(((-1.0)*r22*x5334))+((r21*x5333))+((cj2*x5325)));
evalcond[1]=(((x5325*x5328))+x5339+((r11*x5333))+(((-1.0)*r12*x5334))+(((-1.0)*r10*sj5*x5329)));
evalcond[2]=((((-1.0)*r02*x5334))+x5340+(((-1.0)*x5332*x5341))+((r01*x5333))+(((-1.0)*r00*sj5*x5329)));
evalcond[3]=((((0.0525)*cj2))+((cj2*x5342))+(((-1.0)*r21*x5331))+((r20*x5337))+(((-1.0)*pz))+((cj2*x5338)));
evalcond[4]=(((r21*sj6*x5330))+((r20*x5327))+((r21*x5336))+((r22*x5335))+((cj2*x5326))+(((-1.0)*r20*x5329*x5330)));
evalcond[5]=(((r11*x5336))+((r11*sj6*x5330))+((r12*x5335))+((r10*x5327))+((x5326*x5328))+(((-1.0)*sj0*x5341))+(((-1.0)*r10*x5329*x5330)));
evalcond[6]=(((r01*sj6*x5330))+(((-1.0)*cj0*x5341))+((r00*x5327))+((r01*x5336))+(((-1.0)*x5326*x5332))+((r02*x5335))+(((-1.0)*r00*x5329*x5330)));
evalcond[7]=((((-0.0525)*x5332))+(((0.3425)*x5340))+(((-1.0)*x5332*x5338))+(((-1.0)*x5332*x5342))+(((-1.0)*cj0*x5343))+(((-1.0)*px))+(((-0.293)*cj0))+((r00*x5337))+(((-1.0)*r01*x5331)));
evalcond[8]=(((x5328*x5342))+((x5328*x5338))+(((0.3425)*x5339))+((r10*x5337))+(((0.0525)*x5328))+(((-1.0)*r11*x5331))+(((-1.0)*py))+(((-1.0)*sj0*x5343))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(cj2,-1);
if(!x5349.valid){
continue;
}
IkReal x5344=x5349.value;
IkReal x5345=(r21*sj6);
IkReal x5346=((137.0)*sj5);
IkReal x5347=(cj5*r22);
IkReal x5348=(cj6*r20);
if( IKabs((x5344*((x5347+((sj5*x5348))+(((-1.0)*sj5*x5345)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x5344*(((((30.4)*x5345))+(((-1.0)*x5346*x5348))+(((-30.4)*x5348))+(((400.0)*pz))+(((-21.0)*cj2))+((x5345*x5346))+(((-137.0)*x5347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5344*((x5347+((sj5*x5348))+(((-1.0)*sj5*x5345))))))+IKsqr(((0.032258064516129)*x5344*(((((30.4)*x5345))+(((-1.0)*x5346*x5348))+(((-30.4)*x5348))+(((400.0)*pz))+(((-21.0)*cj2))+((x5345*x5346))+(((-137.0)*x5347))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x5344*((x5347+((sj5*x5348))+(((-1.0)*sj5*x5345))))), ((0.032258064516129)*x5344*(((((30.4)*x5345))+(((-1.0)*x5346*x5348))+(((-30.4)*x5348))+(((400.0)*pz))+(((-21.0)*cj2))+((x5345*x5346))+(((-137.0)*x5347))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5350=IKsin(j3);
IkReal x5351=IKcos(j3);
IkReal x5352=(sj4*sj6);
IkReal x5353=(cj0*sj2);
IkReal x5354=((1.0)*cj6);
IkReal x5355=(cj4*cj5);
IkReal x5356=((0.076)*sj6);
IkReal x5357=(sj0*sj2);
IkReal x5358=(sj5*sj6);
IkReal x5359=((1.0)*cj5);
IkReal x5360=(cj4*sj5);
IkReal x5361=(cj6*sj4);
IkReal x5362=((0.076)*cj6);
IkReal x5363=((0.0775)*x5351);
IkReal x5364=(sj0*x5351);
IkReal x5365=(cj0*x5351);
IkReal x5366=((1.0)*x5350);
IkReal x5367=((0.3425)*x5350);
IkReal x5368=((0.0775)*x5350);
evalcond[0]=(((cj2*x5350))+(((-1.0)*r20*sj5*x5354))+(((-1.0)*r22*x5359))+((r21*x5358)));
evalcond[1]=(x5364+((r11*x5358))+(((-1.0)*r12*x5359))+((x5350*x5353))+(((-1.0)*r10*sj5*x5354)));
evalcond[2]=((((-1.0)*r00*sj5*x5354))+(((-1.0)*r02*x5359))+x5365+((r01*x5358))+(((-1.0)*x5357*x5366)));
evalcond[3]=((((0.0525)*cj2))+(((-1.0)*r21*x5356))+(((-1.0)*pz))+((cj2*x5367))+((cj2*x5363))+((r20*x5362)));
evalcond[4]=(((r22*x5360))+((cj2*x5351))+((r20*x5352))+(((-1.0)*r20*x5354*x5355))+((r21*sj6*x5355))+((r21*x5361)));
evalcond[5]=(((r12*x5360))+((r10*x5352))+((x5351*x5353))+(((-1.0)*sj0*x5366))+(((-1.0)*r10*x5354*x5355))+((r11*sj6*x5355))+((r11*x5361)));
evalcond[6]=((((-1.0)*cj0*x5366))+((r02*x5360))+(((-1.0)*x5351*x5357))+((r00*x5352))+((r01*sj6*x5355))+(((-1.0)*r00*x5354*x5355))+((r01*x5361)));
evalcond[7]=((((-1.0)*cj0*x5368))+(((-1.0)*r01*x5356))+(((-1.0)*px))+(((-0.293)*cj0))+(((-0.0525)*x5357))+(((-1.0)*x5357*x5367))+(((-1.0)*x5357*x5363))+((r00*x5362))+(((0.3425)*x5365)));
evalcond[8]=(((x5353*x5367))+((x5353*x5363))+(((-1.0)*sj0*x5368))+(((-1.0)*r11*x5356))+(((-1.0)*py))+(((0.0525)*x5353))+((r10*x5362))+(((-0.293)*sj0))+(((0.3425)*x5364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5369=(cj0*cj5);
IkReal x5370=(sj0*sj5);
IkReal x5371=(cj6*r10);
IkReal x5372=(r01*sj6);
IkReal x5373=(cj0*sj5);
IkReal x5374=(cj6*r00);
IkReal x5375=(cj5*sj0);
IkReal x5376=((1.0)*r11*sj5*sj6);
CheckValue<IkReal> x5377=IKPowWithIntegerCheck(sj2,-1);
if(!x5377.valid){
continue;
}
if( IKabs(((x5377.value)*((((r12*x5369))+(((-1.0)*r11*sj6*x5373))+((x5371*x5373))+((x5370*x5372))+(((-1.0)*x5370*x5374))+(((-1.0)*r02*x5375)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x5369))+(((-1.0)*r11*sj6*x5370))+((x5370*x5371))+((r12*x5375))+((x5373*x5374))+(((-1.0)*x5372*x5373)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5377.value)*((((r12*x5369))+(((-1.0)*r11*sj6*x5373))+((x5371*x5373))+((x5370*x5372))+(((-1.0)*x5370*x5374))+(((-1.0)*r02*x5375))))))+IKsqr((((r02*x5369))+(((-1.0)*r11*sj6*x5370))+((x5370*x5371))+((r12*x5375))+((x5373*x5374))+(((-1.0)*x5372*x5373))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5377.value)*((((r12*x5369))+(((-1.0)*r11*sj6*x5373))+((x5371*x5373))+((x5370*x5372))+(((-1.0)*x5370*x5374))+(((-1.0)*r02*x5375))))), (((r02*x5369))+(((-1.0)*r11*sj6*x5370))+((x5370*x5371))+((r12*x5375))+((x5373*x5374))+(((-1.0)*x5372*x5373))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5378=IKsin(j3);
IkReal x5379=IKcos(j3);
IkReal x5380=(sj4*sj6);
IkReal x5381=(cj0*sj2);
IkReal x5382=((1.0)*cj6);
IkReal x5383=(cj4*cj5);
IkReal x5384=((0.076)*sj6);
IkReal x5385=(sj0*sj2);
IkReal x5386=(sj5*sj6);
IkReal x5387=((1.0)*cj5);
IkReal x5388=(cj4*sj5);
IkReal x5389=(cj6*sj4);
IkReal x5390=((0.076)*cj6);
IkReal x5391=((0.0775)*x5379);
IkReal x5392=(sj0*x5379);
IkReal x5393=(cj0*x5379);
IkReal x5394=((1.0)*x5378);
IkReal x5395=((0.3425)*x5378);
IkReal x5396=((0.0775)*x5378);
evalcond[0]=(((cj2*x5378))+(((-1.0)*r22*x5387))+(((-1.0)*r20*sj5*x5382))+((r21*x5386)));
evalcond[1]=(x5392+((x5378*x5381))+((r11*x5386))+(((-1.0)*r12*x5387))+(((-1.0)*r10*sj5*x5382)));
evalcond[2]=((((-1.0)*x5385*x5394))+x5393+(((-1.0)*r02*x5387))+(((-1.0)*r00*sj5*x5382))+((r01*x5386)));
evalcond[3]=((((0.0525)*cj2))+((r20*x5390))+(((-1.0)*pz))+((cj2*x5395))+((cj2*x5391))+(((-1.0)*r21*x5384)));
evalcond[4]=(((r21*sj6*x5383))+((cj2*x5379))+((r20*x5380))+(((-1.0)*r20*x5382*x5383))+((r21*x5389))+((r22*x5388)));
evalcond[5]=(((r10*x5380))+(((-1.0)*r10*x5382*x5383))+(((-1.0)*sj0*x5394))+((x5379*x5381))+((r11*x5389))+((r11*sj6*x5383))+((r12*x5388)));
evalcond[6]=((((-1.0)*cj0*x5394))+((r02*x5388))+(((-1.0)*r00*x5382*x5383))+(((-1.0)*x5379*x5385))+((r00*x5380))+((r01*x5389))+((r01*sj6*x5383)));
evalcond[7]=((((-0.0525)*x5385))+(((-1.0)*cj0*x5396))+(((-1.0)*x5385*x5395))+(((-1.0)*x5385*x5391))+(((-1.0)*px))+(((-0.293)*cj0))+((r00*x5390))+(((-1.0)*r01*x5384))+(((0.3425)*x5393)));
evalcond[8]=(((r10*x5390))+(((-1.0)*sj0*x5396))+((x5381*x5395))+((x5381*x5391))+(((0.0525)*x5381))+(((-1.0)*py))+(((-1.0)*r11*x5384))+(((0.3425)*x5392))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5397=(cj4*sj6);
IkReal x5398=(cj4*cj6);
IkReal x5399=((1.0)*sj4);
IkReal x5400=(cj5*sj6);
IkReal x5401=(cj5*cj6*sj4);
CheckValue<IkReal> x5402=IKPowWithIntegerCheck(sj0,-1);
if(!x5402.valid){
continue;
}
if( IKabs(((((-1.0)*r22*sj5*x5399))+((r20*x5397))+(((-1.0)*r21*x5399*x5400))+((r20*x5401))+((r21*x5398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5402.value)*(((((-1.0)*r01*x5399*x5400))+(((-1.0)*r02*sj5*x5399))+((r01*x5398))+((r00*x5397))+((r00*x5401)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*sj5*x5399))+((r20*x5397))+(((-1.0)*r21*x5399*x5400))+((r20*x5401))+((r21*x5398))))+IKsqr(((x5402.value)*(((((-1.0)*r01*x5399*x5400))+(((-1.0)*r02*sj5*x5399))+((r01*x5398))+((r00*x5397))+((r00*x5401))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*sj5*x5399))+((r20*x5397))+(((-1.0)*r21*x5399*x5400))+((r20*x5401))+((r21*x5398))), ((x5402.value)*(((((-1.0)*r01*x5399*x5400))+(((-1.0)*r02*sj5*x5399))+((r01*x5398))+((r00*x5397))+((r00*x5401))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x5403=IKcos(j2);
IkReal x5404=(sj4*sj5);
IkReal x5405=(cj5*sj4);
IkReal x5406=((1.0)*cj6);
IkReal x5407=((1.0)*cj4*sj6);
evalcond[0]=(((r22*x5404))+(((-1.0)*cj4*r21*x5406))+(((-1.0)*r20*x5407))+(IKsin(j2))+(((-1.0)*r20*x5405*x5406))+((r21*sj6*x5405)));
evalcond[1]=((((-1.0)*cj4*r01*x5406))+(((-1.0)*r00*x5407))+((sj0*x5403))+((r02*x5404))+(((-1.0)*r00*x5405*x5406))+((r01*sj6*x5405)));
evalcond[2]=(((r12*x5404))+(((-1.0)*cj0*x5403))+(((-1.0)*r10*x5405*x5406))+(((-1.0)*cj4*r11*x5406))+(((-1.0)*r10*x5407))+((r11*sj6*x5405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=cj0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5408=(cj0*cj5);
IkReal x5409=(sj0*sj5);
IkReal x5410=(cj6*r10);
IkReal x5411=(r01*sj6);
IkReal x5412=(cj0*sj5);
IkReal x5413=(cj6*r00);
IkReal x5414=(cj5*sj0);
IkReal x5415=((1.0)*r11*sj5*sj6);
if( IKabs((((r12*x5408))+((x5410*x5412))+(((-1.0)*r11*sj6*x5412))+((x5409*x5411))+(((-1.0)*x5409*x5413))+(((-1.0)*r02*x5414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x5408))+((x5412*x5413))+(((-1.0)*r11*sj6*x5409))+(((-1.0)*x5411*x5412))+((r12*x5414))+((x5409*x5410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x5408))+((x5410*x5412))+(((-1.0)*r11*sj6*x5412))+((x5409*x5411))+(((-1.0)*x5409*x5413))+(((-1.0)*r02*x5414))))+IKsqr((((r02*x5408))+((x5412*x5413))+(((-1.0)*r11*sj6*x5409))+(((-1.0)*x5411*x5412))+((r12*x5414))+((x5409*x5410))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r12*x5408))+((x5410*x5412))+(((-1.0)*r11*sj6*x5412))+((x5409*x5411))+(((-1.0)*x5409*x5413))+(((-1.0)*r02*x5414))), (((r02*x5408))+((x5412*x5413))+(((-1.0)*r11*sj6*x5409))+(((-1.0)*x5411*x5412))+((r12*x5414))+((x5409*x5410))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5416=IKcos(j3);
IkReal x5417=IKsin(j3);
IkReal x5418=((0.076)*sj6);
IkReal x5419=(sj5*sj6);
IkReal x5420=(cj4*cj5);
IkReal x5421=(sj4*sj6);
IkReal x5422=(cj4*sj5);
IkReal x5423=(cj6*sj4);
IkReal x5424=((1.0)*cj5);
IkReal x5425=((0.076)*cj6);
IkReal x5426=(cj0*x5416);
IkReal x5427=(sj0*x5416);
IkReal x5428=((1.0)*cj6*r10);
IkReal x5429=((1.0)*cj6*r00);
IkReal x5430=(cj0*x5417);
IkReal x5431=(sj0*x5417);
IkReal x5432=((1.0)*x5431);
evalcond[0]=(((r11*x5419))+x5427+x5430+(((-1.0)*sj5*x5428))+(((-1.0)*r12*x5424)));
evalcond[1]=(x5426+(((-1.0)*sj5*x5429))+(((-1.0)*x5432))+((r01*x5419))+(((-1.0)*r02*x5424)));
evalcond[2]=(((r12*x5422))+((r10*x5421))+x5426+(((-1.0)*x5432))+((r11*sj6*x5420))+((r11*x5423))+(((-1.0)*x5420*x5428)));
evalcond[3]=(((r00*x5421))+(((-1.0)*x5430))+((r01*x5423))+((r02*x5422))+((r01*sj6*x5420))+(((-1.0)*x5427))+(((-1.0)*x5420*x5429)));
evalcond[4]=(((r00*x5425))+(((-0.0775)*x5430))+(((-0.3425)*x5431))+(((-1.0)*px))+(((-0.293)*cj0))+(((-0.0525)*sj0))+(((-0.0775)*x5427))+(((0.3425)*x5426))+(((-1.0)*r01*x5418)));
evalcond[5]=((((0.0525)*cj0))+((r10*x5425))+(((-0.0775)*x5431))+(((0.0775)*x5426))+(((-1.0)*py))+(((-1.0)*r11*x5418))+(((0.3425)*x5427))+(((0.3425)*x5430))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5433=(cj5*r02);
IkReal x5434=((1.0)*sj0);
IkReal x5435=((1.0)*cj0);
IkReal x5436=(cj5*r12);
IkReal x5437=(r11*sj5*sj6);
IkReal x5438=(cj6*r10*sj5);
IkReal x5439=(cj6*r00*sj5);
IkReal x5440=(r01*sj5*sj6);
if( IKabs((((sj0*x5439))+((sj0*x5433))+(((-1.0)*x5434*x5440))+(((-1.0)*x5435*x5438))+(((-1.0)*x5435*x5436))+((cj0*x5437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5435*x5440))+((sj0*x5438))+((sj0*x5436))+(((-1.0)*x5434*x5437))+((cj0*x5433))+((cj0*x5439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x5439))+((sj0*x5433))+(((-1.0)*x5434*x5440))+(((-1.0)*x5435*x5438))+(((-1.0)*x5435*x5436))+((cj0*x5437))))+IKsqr(((((-1.0)*x5435*x5440))+((sj0*x5438))+((sj0*x5436))+(((-1.0)*x5434*x5437))+((cj0*x5433))+((cj0*x5439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x5439))+((sj0*x5433))+(((-1.0)*x5434*x5440))+(((-1.0)*x5435*x5438))+(((-1.0)*x5435*x5436))+((cj0*x5437))), ((((-1.0)*x5435*x5440))+((sj0*x5438))+((sj0*x5436))+(((-1.0)*x5434*x5437))+((cj0*x5433))+((cj0*x5439))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5441=IKcos(j3);
IkReal x5442=IKsin(j3);
IkReal x5443=((0.076)*sj6);
IkReal x5444=(sj5*sj6);
IkReal x5445=(cj4*cj5);
IkReal x5446=(sj4*sj6);
IkReal x5447=(cj4*sj5);
IkReal x5448=(cj6*sj4);
IkReal x5449=((1.0)*cj5);
IkReal x5450=((0.076)*cj6);
IkReal x5451=(sj0*x5441);
IkReal x5452=(sj0*x5442);
IkReal x5453=((1.0)*cj6*r10);
IkReal x5454=(cj0*x5441);
IkReal x5455=((1.0)*cj6*r00);
IkReal x5456=(cj0*x5442);
IkReal x5457=((1.0)*x5456);
evalcond[0]=(x5452+x5454+((r01*x5444))+(((-1.0)*sj5*x5455))+(((-1.0)*r02*x5449)));
evalcond[1]=(x5451+(((-1.0)*sj5*x5453))+(((-1.0)*r12*x5449))+((r11*x5444))+(((-1.0)*x5457)));
evalcond[2]=(x5451+((r01*x5448))+((r00*x5446))+((r01*sj6*x5445))+(((-1.0)*x5445*x5455))+((r02*x5447))+(((-1.0)*x5457)));
evalcond[3]=(((r11*sj6*x5445))+((r10*x5446))+((r12*x5447))+((r11*x5448))+(((-1.0)*x5445*x5453))+(((-1.0)*x5454))+(((-1.0)*x5452)));
evalcond[4]=(((r00*x5450))+(((0.0775)*x5451))+(((-1.0)*r01*x5443))+(((-1.0)*px))+(((-0.293)*cj0))+(((0.3425)*x5454))+(((0.3425)*x5452))+(((-0.0775)*x5456))+(((0.0525)*sj0)));
evalcond[5]=((((-0.0525)*cj0))+((r10*x5450))+(((-1.0)*r11*x5443))+(((-1.0)*py))+(((-0.3425)*x5456))+(((0.3425)*x5451))+(((-0.0775)*x5454))+(((-0.0775)*x5452))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5458=(cj6*r20);
IkReal x5459=(cj5*r22);
IkReal x5460=(r21*sj6);
IkReal x5461=((4.41935483870968)*sj5);
if( IKabs((x5459+(((-1.0)*sj5*x5460))+((sj5*x5458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((12.9032258064516)*pz))+(((-1.0)*x5458*x5461))+(((-0.980645161290323)*x5458))+(((-4.41935483870968)*x5459))+((x5460*x5461))+(((0.980645161290323)*x5460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5459+(((-1.0)*sj5*x5460))+((sj5*x5458))))+IKsqr(((-0.67741935483871)+(((12.9032258064516)*pz))+(((-1.0)*x5458*x5461))+(((-0.980645161290323)*x5458))+(((-4.41935483870968)*x5459))+((x5460*x5461))+(((0.980645161290323)*x5460))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x5459+(((-1.0)*sj5*x5460))+((sj5*x5458))), ((-0.67741935483871)+(((12.9032258064516)*pz))+(((-1.0)*x5458*x5461))+(((-0.980645161290323)*x5458))+(((-4.41935483870968)*x5459))+((x5460*x5461))+(((0.980645161290323)*x5460))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5462=IKcos(j3);
IkReal x5463=IKsin(j3);
IkReal x5464=(sj5*sj6);
IkReal x5465=((1.0)*cj6);
IkReal x5466=(cj4*cj5);
IkReal x5467=((0.076)*sj6);
IkReal x5468=(cj6*sj4);
IkReal x5469=((1.0)*cj5);
IkReal x5470=(sj4*sj6);
IkReal x5471=(cj4*sj5);
IkReal x5472=((0.076)*cj6);
IkReal x5473=(sj0*x5462);
IkReal x5474=((0.0775)*x5463);
IkReal x5475=((1.0)*x5463);
IkReal x5476=(cj0*x5462);
evalcond[0]=(x5463+(((-1.0)*r20*sj5*x5465))+((r21*x5464))+(((-1.0)*r22*x5469)));
evalcond[1]=(x5473+((r11*x5464))+(((-1.0)*r10*sj5*x5465))+(((-1.0)*r12*x5469)));
evalcond[2]=(((r01*x5464))+x5476+(((-1.0)*r00*sj5*x5465))+(((-1.0)*r02*x5469)));
evalcond[3]=((0.0525)+(((0.0775)*x5462))+((r20*x5472))+(((-1.0)*r21*x5467))+(((-1.0)*pz))+(((0.3425)*x5463)));
evalcond[4]=(x5462+(((-1.0)*r20*x5465*x5466))+((r20*x5470))+((r21*sj6*x5466))+((r21*x5468))+((r22*x5471)));
evalcond[5]=((((-1.0)*r01*x5467))+(((0.3425)*x5476))+((r00*x5472))+(((-1.0)*px))+(((-0.293)*cj0))+(((-1.0)*cj0*x5474)));
evalcond[6]=((((-1.0)*sj0*x5474))+(((0.3425)*x5473))+((r10*x5472))+(((-1.0)*py))+(((-1.0)*r11*x5467))+(((-0.293)*sj0)));
evalcond[7]=((((-1.0)*sj0*x5475))+((r11*x5468))+((r10*x5470))+((r11*sj6*x5466))+(((-1.0)*r10*x5465*x5466))+((r12*x5471)));
evalcond[8]=(((r01*x5468))+((r00*x5470))+((r01*sj6*x5466))+((r02*x5471))+(((-1.0)*r00*x5465*x5466))+(((-1.0)*cj0*x5475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5477=(r21*sj6);
IkReal x5478=(cj6*r20);
IkReal x5479=(cj5*r22);
IkReal x5480=((4.41935483870968)*sj5);
if( IKabs(((((-1.0)*x5479))+(((-1.0)*sj5*x5478))+((sj5*x5477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-12.9032258064516)*pz))+(((4.41935483870968)*x5479))+(((0.980645161290323)*x5478))+(((-1.0)*x5477*x5480))+((x5478*x5480))+(((-0.980645161290323)*x5477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5479))+(((-1.0)*sj5*x5478))+((sj5*x5477))))+IKsqr(((-0.67741935483871)+(((-12.9032258064516)*pz))+(((4.41935483870968)*x5479))+(((0.980645161290323)*x5478))+(((-1.0)*x5477*x5480))+((x5478*x5480))+(((-0.980645161290323)*x5477))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x5479))+(((-1.0)*sj5*x5478))+((sj5*x5477))), ((-0.67741935483871)+(((-12.9032258064516)*pz))+(((4.41935483870968)*x5479))+(((0.980645161290323)*x5478))+(((-1.0)*x5477*x5480))+((x5478*x5480))+(((-0.980645161290323)*x5477))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5481=IKcos(j3);
IkReal x5482=IKsin(j3);
IkReal x5483=(sj4*sj6);
IkReal x5484=(cj4*sj5);
IkReal x5485=((1.0)*cj6);
IkReal x5486=(cj4*cj5);
IkReal x5487=((0.076)*sj6);
IkReal x5488=(cj6*sj4);
IkReal x5489=(r11*sj6);
IkReal x5490=((1.0)*cj5);
IkReal x5491=(r21*sj6);
IkReal x5492=(r01*sj6);
IkReal x5493=((0.076)*cj6);
IkReal x5494=((1.0)*x5482);
IkReal x5495=(sj0*x5481);
IkReal x5496=((0.0775)*x5482);
IkReal x5497=(cj0*x5481);
evalcond[0]=((((-1.0)*r20*sj5*x5485))+(((-1.0)*x5494))+(((-1.0)*r22*x5490))+((sj5*x5491)));
evalcond[1]=(x5495+(((-1.0)*r12*x5490))+((sj5*x5489))+(((-1.0)*r10*sj5*x5485)));
evalcond[2]=(x5497+((sj5*x5492))+(((-1.0)*r02*x5490))+(((-1.0)*r00*sj5*x5485)));
evalcond[3]=((-0.0525)+((r20*x5493))+(((-1.0)*r21*x5487))+(((-1.0)*pz))+(((-0.0775)*x5481))+(((-0.3425)*x5482)));
evalcond[4]=((((-1.0)*cj0*x5496))+(((0.3425)*x5497))+((r00*x5493))+(((-1.0)*px))+(((-0.293)*cj0))+(((-1.0)*r01*x5487)));
evalcond[5]=((((-1.0)*sj0*x5496))+(((-1.0)*r11*x5487))+(((0.3425)*x5495))+(((-1.0)*py))+((r10*x5493))+(((-0.293)*sj0)));
evalcond[6]=(((r20*x5483))+(((-1.0)*r20*x5485*x5486))+((r21*x5488))+((x5486*x5491))+((r22*x5484))+(((-1.0)*x5481)));
evalcond[7]=((((-1.0)*sj0*x5494))+((r11*x5488))+((r12*x5484))+((x5486*x5489))+(((-1.0)*r10*x5485*x5486))+((r10*x5483)));
evalcond[8]=((((-1.0)*cj0*x5494))+((r00*x5483))+((r01*x5488))+((x5486*x5492))+(((-1.0)*r00*x5485*x5486))+((r02*x5484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x5503=IKPowWithIntegerCheck(cj2,-1);
if(!x5503.valid){
continue;
}
IkReal x5498=x5503.value;
IkReal x5499=(sj0*sj2);
IkReal x5500=(cj6*sj5);
IkReal x5501=(cj5*r22);
IkReal x5502=((1.0)*sj5*sj6);
CheckValue<IkReal> x5504=IKPowWithIntegerCheck(cj0,-1);
if(!x5504.valid){
continue;
}
if( IKabs((x5498*((x5501+((r20*x5500))+(((-1.0)*r21*x5502)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5498*(x5504.value)*((((r20*x5499*x5500))+(((-1.0)*cj2*r01*x5502))+(((-1.0)*r21*x5499*x5502))+((cj2*cj5*r02))+((x5499*x5501))+((cj2*r00*x5500)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5498*((x5501+((r20*x5500))+(((-1.0)*r21*x5502))))))+IKsqr((x5498*(x5504.value)*((((r20*x5499*x5500))+(((-1.0)*cj2*r01*x5502))+(((-1.0)*r21*x5499*x5502))+((cj2*cj5*r02))+((x5499*x5501))+((cj2*r00*x5500))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x5498*((x5501+((r20*x5500))+(((-1.0)*r21*x5502))))), (x5498*(x5504.value)*((((r20*x5499*x5500))+(((-1.0)*cj2*r01*x5502))+(((-1.0)*r21*x5499*x5502))+((cj2*cj5*r02))+((x5499*x5501))+((cj2*r00*x5500))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5505=IKsin(j3);
IkReal x5506=IKcos(j3);
IkReal x5507=(sj4*sj6);
IkReal x5508=(cj0*sj2);
IkReal x5509=((1.0)*cj6);
IkReal x5510=(cj4*cj5);
IkReal x5511=((0.076)*sj6);
IkReal x5512=(sj0*sj2);
IkReal x5513=(sj5*sj6);
IkReal x5514=((1.0)*cj5);
IkReal x5515=(cj4*sj5);
IkReal x5516=(cj6*sj4);
IkReal x5517=((0.076)*cj6);
IkReal x5518=((0.0775)*x5506);
IkReal x5519=(sj0*x5506);
IkReal x5520=(cj0*x5506);
IkReal x5521=((1.0)*x5505);
IkReal x5522=((0.3425)*x5505);
IkReal x5523=((0.0775)*x5505);
evalcond[0]=((((-1.0)*r22*x5514))+((r21*x5513))+((cj2*x5505))+(((-1.0)*r20*sj5*x5509)));
evalcond[1]=(x5519+(((-1.0)*r10*sj5*x5509))+(((-1.0)*r12*x5514))+((r11*x5513))+((x5505*x5508)));
evalcond[2]=(x5520+(((-1.0)*r02*x5514))+(((-1.0)*x5512*x5521))+((r01*x5513))+(((-1.0)*r00*sj5*x5509)));
evalcond[3]=((((0.0525)*cj2))+((r20*x5517))+((cj2*x5522))+((cj2*x5518))+(((-1.0)*pz))+(((-1.0)*r21*x5511)));
evalcond[4]=(((r21*sj6*x5510))+((r20*x5507))+((r21*x5516))+((cj2*x5506))+((r22*x5515))+(((-1.0)*r20*x5509*x5510)));
evalcond[5]=(((r10*x5507))+(((-1.0)*r10*x5509*x5510))+((r12*x5515))+((r11*sj6*x5510))+(((-1.0)*sj0*x5521))+((r11*x5516))+((x5506*x5508)));
evalcond[6]=((((-1.0)*cj0*x5521))+((r02*x5515))+((r01*sj6*x5510))+(((-1.0)*r00*x5509*x5510))+((r01*x5516))+((r00*x5507))+(((-1.0)*x5506*x5512)));
evalcond[7]=((((-1.0)*cj0*x5523))+(((-1.0)*x5512*x5518))+(((-1.0)*r01*x5511))+(((0.3425)*x5520))+(((-1.0)*px))+(((-0.293)*cj0))+(((-1.0)*x5512*x5522))+(((-0.0525)*x5512))+((r00*x5517)));
evalcond[8]=(((r10*x5517))+((x5508*x5522))+((x5508*x5518))+(((-1.0)*r11*x5511))+(((-1.0)*py))+(((-1.0)*sj0*x5523))+(((-0.293)*sj0))+(((0.3425)*x5519))+(((0.0525)*x5508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x5529=IKPowWithIntegerCheck(cj2,-1);
if(!x5529.valid){
continue;
}
IkReal x5524=x5529.value;
IkReal x5525=(r21*sj6);
IkReal x5526=((137.0)*sj5);
IkReal x5527=(cj5*r22);
IkReal x5528=(cj6*r20);
if( IKabs((x5524*((((sj5*x5528))+x5527+(((-1.0)*sj5*x5525)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x5524*(((((30.4)*x5525))+(((400.0)*pz))+(((-1.0)*x5526*x5528))+(((-30.4)*x5528))+(((-21.0)*cj2))+(((-137.0)*x5527))+((x5525*x5526)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5524*((((sj5*x5528))+x5527+(((-1.0)*sj5*x5525))))))+IKsqr(((0.032258064516129)*x5524*(((((30.4)*x5525))+(((400.0)*pz))+(((-1.0)*x5526*x5528))+(((-30.4)*x5528))+(((-21.0)*cj2))+(((-137.0)*x5527))+((x5525*x5526))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x5524*((((sj5*x5528))+x5527+(((-1.0)*sj5*x5525))))), ((0.032258064516129)*x5524*(((((30.4)*x5525))+(((400.0)*pz))+(((-1.0)*x5526*x5528))+(((-30.4)*x5528))+(((-21.0)*cj2))+(((-137.0)*x5527))+((x5525*x5526))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5530=IKsin(j3);
IkReal x5531=IKcos(j3);
IkReal x5532=(sj4*sj6);
IkReal x5533=(cj0*sj2);
IkReal x5534=((1.0)*cj6);
IkReal x5535=(cj4*cj5);
IkReal x5536=((0.076)*sj6);
IkReal x5537=(sj0*sj2);
IkReal x5538=(sj5*sj6);
IkReal x5539=((1.0)*cj5);
IkReal x5540=(cj4*sj5);
IkReal x5541=(cj6*sj4);
IkReal x5542=((0.076)*cj6);
IkReal x5543=((0.0775)*x5531);
IkReal x5544=(sj0*x5531);
IkReal x5545=(cj0*x5531);
IkReal x5546=((1.0)*x5530);
IkReal x5547=((0.3425)*x5530);
IkReal x5548=((0.0775)*x5530);
evalcond[0]=((((-1.0)*r22*x5539))+(((-1.0)*r20*sj5*x5534))+((cj2*x5530))+((r21*x5538)));
evalcond[1]=(x5544+((x5530*x5533))+(((-1.0)*r10*sj5*x5534))+((r11*x5538))+(((-1.0)*r12*x5539)));
evalcond[2]=((((-1.0)*r02*x5539))+x5545+(((-1.0)*r00*sj5*x5534))+(((-1.0)*x5537*x5546))+((r01*x5538)));
evalcond[3]=(((cj2*x5543))+((cj2*x5547))+(((0.0525)*cj2))+((r20*x5542))+(((-1.0)*r21*x5536))+(((-1.0)*pz)));
evalcond[4]=(((cj2*x5531))+((r21*sj6*x5535))+(((-1.0)*r20*x5534*x5535))+((r20*x5532))+((r22*x5540))+((r21*x5541)));
evalcond[5]=(((r12*x5540))+((r11*x5541))+(((-1.0)*r10*x5534*x5535))+(((-1.0)*sj0*x5546))+((x5531*x5533))+((r10*x5532))+((r11*sj6*x5535)));
evalcond[6]=((((-1.0)*cj0*x5546))+(((-1.0)*r00*x5534*x5535))+((r02*x5540))+((r00*x5532))+((r01*sj6*x5535))+(((-1.0)*x5531*x5537))+((r01*x5541)));
evalcond[7]=(((r00*x5542))+(((-1.0)*x5537*x5547))+(((-1.0)*x5537*x5543))+(((-1.0)*cj0*x5548))+(((-1.0)*px))+(((-0.293)*cj0))+(((0.3425)*x5545))+(((-1.0)*r01*x5536))+(((-0.0525)*x5537)));
evalcond[8]=(((r10*x5542))+((x5533*x5547))+((x5533*x5543))+(((-1.0)*py))+(((0.0525)*x5533))+(((0.3425)*x5544))+(((-1.0)*sj0*x5548))+(((-1.0)*r11*x5536))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5549=(cj0*cj5);
IkReal x5550=(sj0*sj5);
IkReal x5551=(cj6*r10);
IkReal x5552=(r01*sj6);
IkReal x5553=(cj0*sj5);
IkReal x5554=(cj6*r00);
IkReal x5555=(cj5*sj0);
IkReal x5556=((1.0)*r11*sj5*sj6);
CheckValue<IkReal> x5557=IKPowWithIntegerCheck(sj2,-1);
if(!x5557.valid){
continue;
}
if( IKabs(((x5557.value)*((((r12*x5549))+((x5551*x5553))+(((-1.0)*x5550*x5554))+(((-1.0)*r11*sj6*x5553))+((x5550*x5552))+(((-1.0)*r02*x5555)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x5555))+((r02*x5549))+((x5553*x5554))+(((-1.0)*x5552*x5553))+(((-1.0)*r11*sj6*x5550))+((x5550*x5551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5557.value)*((((r12*x5549))+((x5551*x5553))+(((-1.0)*x5550*x5554))+(((-1.0)*r11*sj6*x5553))+((x5550*x5552))+(((-1.0)*r02*x5555))))))+IKsqr((((r12*x5555))+((r02*x5549))+((x5553*x5554))+(((-1.0)*x5552*x5553))+(((-1.0)*r11*sj6*x5550))+((x5550*x5551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5557.value)*((((r12*x5549))+((x5551*x5553))+(((-1.0)*x5550*x5554))+(((-1.0)*r11*sj6*x5553))+((x5550*x5552))+(((-1.0)*r02*x5555))))), (((r12*x5555))+((r02*x5549))+((x5553*x5554))+(((-1.0)*x5552*x5553))+(((-1.0)*r11*sj6*x5550))+((x5550*x5551))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5558=IKsin(j3);
IkReal x5559=IKcos(j3);
IkReal x5560=(sj4*sj6);
IkReal x5561=(cj0*sj2);
IkReal x5562=((1.0)*cj6);
IkReal x5563=(cj4*cj5);
IkReal x5564=((0.076)*sj6);
IkReal x5565=(sj0*sj2);
IkReal x5566=(sj5*sj6);
IkReal x5567=((1.0)*cj5);
IkReal x5568=(cj4*sj5);
IkReal x5569=(cj6*sj4);
IkReal x5570=((0.076)*cj6);
IkReal x5571=((0.0775)*x5559);
IkReal x5572=(sj0*x5559);
IkReal x5573=(cj0*x5559);
IkReal x5574=((1.0)*x5558);
IkReal x5575=((0.3425)*x5558);
IkReal x5576=((0.0775)*x5558);
evalcond[0]=(((cj2*x5558))+(((-1.0)*r22*x5567))+((r21*x5566))+(((-1.0)*r20*sj5*x5562)));
evalcond[1]=(x5572+(((-1.0)*r12*x5567))+(((-1.0)*r10*sj5*x5562))+((r11*x5566))+((x5558*x5561)));
evalcond[2]=(x5573+(((-1.0)*r02*x5567))+(((-1.0)*r00*sj5*x5562))+(((-1.0)*x5565*x5574))+((r01*x5566)));
evalcond[3]=((((0.0525)*cj2))+((cj2*x5575))+((cj2*x5571))+(((-1.0)*pz))+(((-1.0)*r21*x5564))+((r20*x5570)));
evalcond[4]=(((cj2*x5559))+((r20*x5560))+((r22*x5568))+((r21*sj6*x5563))+(((-1.0)*r20*x5562*x5563))+((r21*x5569)));
evalcond[5]=((((-1.0)*r10*x5562*x5563))+((r10*x5560))+(((-1.0)*sj0*x5574))+((r11*sj6*x5563))+((r11*x5569))+((r12*x5568))+((x5559*x5561)));
evalcond[6]=(((r01*sj6*x5563))+((r02*x5568))+(((-1.0)*cj0*x5574))+(((-1.0)*x5559*x5565))+((r00*x5560))+(((-1.0)*r00*x5562*x5563))+((r01*x5569)));
evalcond[7]=((((0.3425)*x5573))+(((-1.0)*cj0*x5576))+(((-1.0)*r01*x5564))+(((-1.0)*px))+(((-0.293)*cj0))+(((-0.0525)*x5565))+(((-1.0)*x5565*x5571))+(((-1.0)*x5565*x5575))+((r00*x5570)));
evalcond[8]=((((0.3425)*x5572))+((x5561*x5571))+((x5561*x5575))+(((0.0525)*x5561))+(((-1.0)*sj0*x5576))+((r10*x5570))+(((-1.0)*r11*x5564))+(((-1.0)*py))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x5588=IKPowWithIntegerCheck(sj1,-1);
if(!x5588.valid){
continue;
}
IkReal x5577=x5588.value;
IkReal x5578=(cj1*sj0);
IkReal x5579=(sj4*sj5);
IkReal x5580=(cj5*sj4);
IkReal x5581=((1.0)*cj4);
IkReal x5582=(cj6*r21);
IkReal x5583=(sj1*sj6);
IkReal x5584=(r21*sj6);
IkReal x5585=((1.0)*cj6*sj1);
IkReal x5586=((1.0)*cj6*r20);
IkReal x5587=(r20*sj6*x5581);
CheckValue<IkReal> x5589=IKPowWithIntegerCheck(cj0,-1);
if(!x5589.valid){
continue;
}
if( IKabs((x5577*((((r22*x5579))+(((-1.0)*x5587))+((x5580*x5584))+(((-1.0)*x5580*x5586))+(((-1.0)*x5581*x5582)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5577*(x5589.value)*(((((-1.0)*r10*x5581*x5583))+(((-1.0)*x5578*x5587))+(((-1.0)*x5578*x5581*x5582))+(((-1.0)*r10*x5580*x5585))+(((-1.0)*cj6*r11*sj1*x5581))+(((-1.0)*x5578*x5580*x5586))+((r12*sj1*x5579))+((r11*x5580*x5583))+((x5578*x5580*x5584))+((r22*x5578*x5579)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5577*((((r22*x5579))+(((-1.0)*x5587))+((x5580*x5584))+(((-1.0)*x5580*x5586))+(((-1.0)*x5581*x5582))))))+IKsqr((x5577*(x5589.value)*(((((-1.0)*r10*x5581*x5583))+(((-1.0)*x5578*x5587))+(((-1.0)*x5578*x5581*x5582))+(((-1.0)*r10*x5580*x5585))+(((-1.0)*cj6*r11*sj1*x5581))+(((-1.0)*x5578*x5580*x5586))+((r12*sj1*x5579))+((r11*x5580*x5583))+((x5578*x5580*x5584))+((r22*x5578*x5579))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x5577*((((r22*x5579))+(((-1.0)*x5587))+((x5580*x5584))+(((-1.0)*x5580*x5586))+(((-1.0)*x5581*x5582))))), (x5577*(x5589.value)*(((((-1.0)*r10*x5581*x5583))+(((-1.0)*x5578*x5587))+(((-1.0)*x5578*x5581*x5582))+(((-1.0)*r10*x5580*x5585))+(((-1.0)*cj6*r11*sj1*x5581))+(((-1.0)*x5578*x5580*x5586))+((r12*sj1*x5579))+((r11*x5580*x5583))+((x5578*x5580*x5584))+((r22*x5578*x5579))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x5590=IKsin(j2);
IkReal x5591=IKcos(j2);
IkReal x5592=(sj4*sj5);
IkReal x5593=((1.0)*cj6);
IkReal x5594=(cj5*sj4);
IkReal x5595=(sj6*x5594);
IkReal x5596=((1.0)*cj4*sj6);
IkReal x5597=(cj1*x5590);
evalcond[0]=(((r21*x5595))+(((-1.0)*r20*x5596))+(((-1.0)*sj1*x5590))+(((-1.0)*r20*x5593*x5594))+(((-1.0)*cj4*r21*x5593))+((r22*x5592)));
evalcond[1]=((((-1.0)*r00*x5593*x5594))+((sj0*x5591))+((cj0*x5597))+((r02*x5592))+(((-1.0)*cj4*r01*x5593))+(((-1.0)*r00*x5596))+((r01*x5595)));
evalcond[2]=((((-1.0)*cj0*x5591))+((sj0*x5597))+((r11*x5595))+(((-1.0)*r10*x5596))+((r12*x5592))+(((-1.0)*r10*x5593*x5594))+(((-1.0)*cj4*r11*x5593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x5598=(((cj2*sj0))+((cj0*cj1*sj2)));
j3eval[0]=x5598;
j3eval[1]=IKsign(x5598);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x5599=(((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)));
j3eval[0]=x5599;
j3eval[1]=IKsign(x5599);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x5600=cj1*cj1;
IkReal x5601=cj2*cj2;
IkReal x5602=(x5601+x5600+(((-1.0)*x5600*x5601)));
j3eval[0]=x5602;
j3eval[1]=IKsign(x5602);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5603=((1.0)*sj5);
IkReal x5604=(r11*sj6);
IkReal x5605=(cj6*r10);
IkReal x5606=(cj6*r00);
IkReal x5607=(sj0*sj5);
IkReal x5608=((1.0)*cj5);
IkReal x5609=(r01*sj6);
IkReal x5610=(cj0*sj5);
if( IKabs(((((-1.0)*r02*sj0*x5608))+((x5607*x5609))+((cj0*cj5*r12))+((x5605*x5610))+(((-1.0)*cj0*x5603*x5604))+(((-1.0)*sj0*x5603*x5606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5609*x5610))+((x5604*x5607))+(((-1.0)*cj0*x5603*x5606))+(((-1.0)*r12*sj0*x5608))+(((-1.0)*cj0*r02*x5608))+(((-1.0)*sj0*x5603*x5605)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj0*x5608))+((x5607*x5609))+((cj0*cj5*r12))+((x5605*x5610))+(((-1.0)*cj0*x5603*x5604))+(((-1.0)*sj0*x5603*x5606))))+IKsqr((((x5609*x5610))+((x5604*x5607))+(((-1.0)*cj0*x5603*x5606))+(((-1.0)*r12*sj0*x5608))+(((-1.0)*cj0*r02*x5608))+(((-1.0)*sj0*x5603*x5605))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r02*sj0*x5608))+((x5607*x5609))+((cj0*cj5*r12))+((x5605*x5610))+(((-1.0)*cj0*x5603*x5604))+(((-1.0)*sj0*x5603*x5606))), (((x5609*x5610))+((x5604*x5607))+(((-1.0)*cj0*x5603*x5606))+(((-1.0)*r12*sj0*x5608))+(((-1.0)*cj0*r02*x5608))+(((-1.0)*sj0*x5603*x5605))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5611=IKsin(j3);
IkReal x5612=IKcos(j3);
IkReal x5613=((1.0)*cj5);
IkReal x5614=((0.076)*sj6);
IkReal x5615=(cj6*r10);
IkReal x5616=((1.0)*sj5);
IkReal x5617=(sj5*sj6);
IkReal x5618=(sj4*sj6);
IkReal x5619=(cj6*r00);
IkReal x5620=(cj4*sj5);
IkReal x5621=(cj6*sj4);
IkReal x5622=(cj0*x5611);
IkReal x5623=(sj0*x5612);
IkReal x5624=(sj0*x5611);
IkReal x5625=(cj0*x5612);
IkReal x5626=(cj4*cj5*sj6);
IkReal x5627=((1.0)*x5623);
evalcond[0]=(x5622+(((-1.0)*r12*x5613))+((r11*x5617))+(((-1.0)*x5615*x5616))+(((-1.0)*x5627)));
evalcond[1]=(((r01*x5617))+(((-1.0)*r02*x5613))+(((-1.0)*x5616*x5619))+(((-1.0)*x5625))+(((-1.0)*x5624)));
evalcond[2]=(x5625+x5624+(((-1.0)*cj4*x5613*x5615))+((r12*x5620))+((r11*x5621))+((r11*x5626))+((r10*x5618)));
evalcond[3]=(x5622+((r02*x5620))+(((-1.0)*cj4*x5613*x5619))+((r00*x5618))+((r01*x5621))+((r01*x5626))+(((-1.0)*x5627)));
evalcond[4]=((((-0.3425)*x5624))+(((-0.3425)*x5625))+(((-1.0)*r01*x5614))+(((-1.0)*px))+(((0.293)*cj0))+(((-0.0525)*sj0))+(((0.0775)*x5622))+(((-0.0775)*x5623))+(((0.076)*x5619)));
evalcond[5]=((((-0.3425)*x5623))+(((0.0525)*cj0))+(((-1.0)*r11*x5614))+(((-1.0)*py))+(((0.293)*sj0))+(((0.3425)*x5622))+(((0.0775)*x5624))+(((0.0775)*x5625))+(((0.076)*x5615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5628=(cj0*sj5);
IkReal x5629=(r11*sj6);
IkReal x5630=((1.0)*cj6);
IkReal x5631=(sj0*sj5);
IkReal x5632=((1.0)*cj5);
IkReal x5633=(r01*sj6);
if( IKabs(((((-1.0)*x5631*x5633))+(((-1.0)*r10*x5628*x5630))+((cj6*r00*x5631))+((cj5*r02*sj0))+((x5628*x5629))+(((-1.0)*cj0*r12*x5632)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*sj0*x5632))+(((-1.0)*cj0*r02*x5632))+(((-1.0)*r00*x5628*x5630))+((x5629*x5631))+((x5628*x5633))+(((-1.0)*r10*x5630*x5631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5631*x5633))+(((-1.0)*r10*x5628*x5630))+((cj6*r00*x5631))+((cj5*r02*sj0))+((x5628*x5629))+(((-1.0)*cj0*r12*x5632))))+IKsqr(((((-1.0)*r12*sj0*x5632))+(((-1.0)*cj0*r02*x5632))+(((-1.0)*r00*x5628*x5630))+((x5629*x5631))+((x5628*x5633))+(((-1.0)*r10*x5630*x5631))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x5631*x5633))+(((-1.0)*r10*x5628*x5630))+((cj6*r00*x5631))+((cj5*r02*sj0))+((x5628*x5629))+(((-1.0)*cj0*r12*x5632))), ((((-1.0)*r12*sj0*x5632))+(((-1.0)*cj0*r02*x5632))+(((-1.0)*r00*x5628*x5630))+((x5629*x5631))+((x5628*x5633))+(((-1.0)*r10*x5630*x5631))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5634=IKcos(j3);
IkReal x5635=IKsin(j3);
IkReal x5636=((0.076)*sj6);
IkReal x5637=(sj5*sj6);
IkReal x5638=(cj4*cj5);
IkReal x5639=(sj4*sj6);
IkReal x5640=(cj4*sj5);
IkReal x5641=(cj6*sj4);
IkReal x5642=((1.0)*cj5);
IkReal x5643=((0.076)*cj6);
IkReal x5644=(sj0*x5635);
IkReal x5645=((1.0)*x5634);
IkReal x5646=(sj0*x5634);
IkReal x5647=((1.0)*cj6*r10);
IkReal x5648=((1.0)*cj6*r00);
IkReal x5649=(cj0*x5635);
IkReal x5650=(cj0*x5634);
IkReal x5651=(cj0*x5645);
evalcond[0]=(x5644+((r01*x5637))+(((-1.0)*r02*x5642))+(((-1.0)*sj5*x5648))+(((-1.0)*x5651)));
evalcond[1]=(((r11*x5637))+(((-1.0)*sj0*x5645))+(((-1.0)*r12*x5642))+(((-1.0)*sj5*x5647))+(((-1.0)*x5649)));
evalcond[2]=(x5649+x5646+((r01*x5641))+(((-1.0)*x5638*x5648))+((r02*x5640))+((r00*x5639))+((r01*sj6*x5638)));
evalcond[3]=(x5644+(((-1.0)*x5638*x5647))+((r10*x5639))+((r12*x5640))+(((-1.0)*x5651))+((r11*x5641))+((r11*sj6*x5638)));
evalcond[4]=(((r00*x5643))+(((0.0775)*x5649))+(((0.0775)*x5646))+(((0.3425)*x5644))+(((-0.3425)*x5650))+(((-1.0)*px))+(((0.293)*cj0))+(((-1.0)*r01*x5636))+(((0.0525)*sj0)));
evalcond[5]=((((-0.0525)*cj0))+(((-1.0)*r11*x5636))+(((0.0775)*x5644))+(((-0.3425)*x5649))+(((-0.3425)*x5646))+(((-1.0)*py))+(((-0.0775)*x5650))+(((0.293)*sj0))+((r10*x5643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5652=(cj0*cj5);
IkReal x5653=(sj0*sj5);
IkReal x5654=(cj6*r10);
IkReal x5655=(r01*sj6);
IkReal x5656=(cj0*sj5);
IkReal x5657=(cj6*r00);
IkReal x5658=(cj5*sj0);
IkReal x5659=((1.0)*r11*sj5*sj6);
if( IKabs((((x5654*x5656))+(((-1.0)*r02*x5658))+((r12*x5652))+((x5653*x5655))+(((-1.0)*r11*sj6*x5656))+(((-1.0)*x5653*x5657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5656*x5657))+((r12*x5658))+((x5653*x5654))+((r02*x5652))+(((-1.0)*r11*sj6*x5653))+(((-1.0)*x5655*x5656)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5654*x5656))+(((-1.0)*r02*x5658))+((r12*x5652))+((x5653*x5655))+(((-1.0)*r11*sj6*x5656))+(((-1.0)*x5653*x5657))))+IKsqr((((x5656*x5657))+((r12*x5658))+((x5653*x5654))+((r02*x5652))+(((-1.0)*r11*sj6*x5653))+(((-1.0)*x5655*x5656))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x5654*x5656))+(((-1.0)*r02*x5658))+((r12*x5652))+((x5653*x5655))+(((-1.0)*r11*sj6*x5656))+(((-1.0)*x5653*x5657))), (((x5656*x5657))+((r12*x5658))+((x5653*x5654))+((r02*x5652))+(((-1.0)*r11*sj6*x5653))+(((-1.0)*x5655*x5656))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5660=IKcos(j3);
IkReal x5661=IKsin(j3);
IkReal x5662=((0.076)*sj6);
IkReal x5663=(sj5*sj6);
IkReal x5664=(cj4*cj5);
IkReal x5665=(sj4*sj6);
IkReal x5666=(cj4*sj5);
IkReal x5667=(cj6*sj4);
IkReal x5668=((1.0)*cj5);
IkReal x5669=((0.076)*cj6);
IkReal x5670=(cj0*x5660);
IkReal x5671=(sj0*x5660);
IkReal x5672=((1.0)*cj6*r10);
IkReal x5673=((1.0)*cj6*r00);
IkReal x5674=(cj0*x5661);
IkReal x5675=(sj0*x5661);
IkReal x5676=((1.0)*x5675);
evalcond[0]=(x5671+x5674+(((-1.0)*sj5*x5672))+((r11*x5663))+(((-1.0)*r12*x5668)));
evalcond[1]=(((r01*x5663))+x5670+(((-1.0)*r02*x5668))+(((-1.0)*sj5*x5673))+(((-1.0)*x5676)));
evalcond[2]=((((-1.0)*x5664*x5672))+x5670+((r11*sj6*x5664))+((r11*x5667))+((r12*x5666))+(((-1.0)*x5676))+((r10*x5665)));
evalcond[3]=(((r01*x5667))+(((-1.0)*x5664*x5673))+((r00*x5665))+((r01*sj6*x5664))+(((-1.0)*x5674))+(((-1.0)*x5671))+((r02*x5666)));
evalcond[4]=((((-1.0)*r01*x5662))+((r00*x5669))+(((-1.0)*px))+(((-0.293)*cj0))+(((-0.0525)*sj0))+(((-0.3425)*x5675))+(((0.3425)*x5670))+(((-0.0775)*x5671))+(((-0.0775)*x5674)));
evalcond[5]=((((0.0775)*x5670))+(((0.0525)*cj0))+(((-1.0)*py))+(((-1.0)*r11*x5662))+((r10*x5669))+(((0.3425)*x5674))+(((0.3425)*x5671))+(((-0.0775)*x5675))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5677=(cj5*r02);
IkReal x5678=((1.0)*sj0);
IkReal x5679=((1.0)*cj0);
IkReal x5680=(cj5*r12);
IkReal x5681=(r11*sj5*sj6);
IkReal x5682=(cj6*r10*sj5);
IkReal x5683=(cj6*r00*sj5);
IkReal x5684=(r01*sj5*sj6);
if( IKabs((((sj0*x5677))+(((-1.0)*x5678*x5684))+(((-1.0)*x5679*x5680))+(((-1.0)*x5679*x5682))+((sj0*x5683))+((cj0*x5681)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x5677))+(((-1.0)*x5678*x5681))+(((-1.0)*x5679*x5684))+((sj0*x5680))+((sj0*x5682))+((cj0*x5683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x5677))+(((-1.0)*x5678*x5684))+(((-1.0)*x5679*x5680))+(((-1.0)*x5679*x5682))+((sj0*x5683))+((cj0*x5681))))+IKsqr((((cj0*x5677))+(((-1.0)*x5678*x5681))+(((-1.0)*x5679*x5684))+((sj0*x5680))+((sj0*x5682))+((cj0*x5683))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x5677))+(((-1.0)*x5678*x5684))+(((-1.0)*x5679*x5680))+(((-1.0)*x5679*x5682))+((sj0*x5683))+((cj0*x5681))), (((cj0*x5677))+(((-1.0)*x5678*x5681))+(((-1.0)*x5679*x5684))+((sj0*x5680))+((sj0*x5682))+((cj0*x5683))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5685=IKcos(j3);
IkReal x5686=IKsin(j3);
IkReal x5687=((0.076)*sj6);
IkReal x5688=(sj5*sj6);
IkReal x5689=(cj4*cj5);
IkReal x5690=(sj4*sj6);
IkReal x5691=(cj4*sj5);
IkReal x5692=(cj6*sj4);
IkReal x5693=((1.0)*cj5);
IkReal x5694=((0.076)*cj6);
IkReal x5695=(sj0*x5685);
IkReal x5696=(sj0*x5686);
IkReal x5697=((1.0)*cj6*r10);
IkReal x5698=(cj0*x5685);
IkReal x5699=((1.0)*cj6*r00);
IkReal x5700=(cj0*x5686);
IkReal x5701=((1.0)*x5700);
evalcond[0]=(x5696+x5698+(((-1.0)*r02*x5693))+(((-1.0)*sj5*x5699))+((r01*x5688)));
evalcond[1]=(x5695+(((-1.0)*sj5*x5697))+(((-1.0)*r12*x5693))+((r11*x5688))+(((-1.0)*x5701)));
evalcond[2]=(x5695+((r01*sj6*x5689))+((r02*x5691))+(((-1.0)*x5689*x5699))+((r00*x5690))+((r01*x5692))+(((-1.0)*x5701)));
evalcond[3]=(((r11*sj6*x5689))+(((-1.0)*x5696))+(((-1.0)*x5698))+((r10*x5690))+(((-1.0)*x5689*x5697))+((r12*x5691))+((r11*x5692)));
evalcond[4]=((((0.0775)*x5695))+(((-0.0775)*x5700))+(((-1.0)*px))+(((-0.293)*cj0))+(((0.3425)*x5696))+(((0.3425)*x5698))+(((0.0525)*sj0))+((r00*x5694))+(((-1.0)*r01*x5687)));
evalcond[5]=((((-0.0525)*cj0))+(((-0.0775)*x5698))+(((-0.0775)*x5696))+(((-0.3425)*x5700))+(((-1.0)*py))+((r10*x5694))+(((0.3425)*x5695))+(((-1.0)*r11*x5687))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5702=(cj6*r00);
IkReal x5703=(cj5*r02);
IkReal x5704=((4.41935483870968)*sj5);
IkReal x5705=(r01*sj6);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*px))+(((-1.0)*x5702*x5704))+(((-4.41935483870968)*x5703))+(((-0.980645161290323)*x5702))+(((0.980645161290323)*x5705))+((x5704*x5705)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5703))+(((-1.0)*sj5*x5702))+((sj5*x5705)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*px))+(((-1.0)*x5702*x5704))+(((-4.41935483870968)*x5703))+(((-0.980645161290323)*x5702))+(((0.980645161290323)*x5705))+((x5704*x5705))))+IKsqr(((((-1.0)*x5703))+(((-1.0)*sj5*x5702))+((sj5*x5705))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*px))+(((-1.0)*x5702*x5704))+(((-4.41935483870968)*x5703))+(((-0.980645161290323)*x5702))+(((0.980645161290323)*x5705))+((x5704*x5705))), ((((-1.0)*x5703))+(((-1.0)*sj5*x5702))+((sj5*x5705))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5706=IKsin(j3);
IkReal x5707=IKcos(j3);
IkReal x5708=((0.076)*sj6);
IkReal x5709=(sj4*sj6);
IkReal x5710=(r11*sj6);
IkReal x5711=(cj4*cj5);
IkReal x5712=((1.0)*cj5);
IkReal x5713=(r21*sj6);
IkReal x5714=(cj4*sj5);
IkReal x5715=(r01*sj6);
IkReal x5716=(cj6*sj4);
IkReal x5717=((0.076)*cj6);
IkReal x5718=((0.0775)*x5707);
IkReal x5719=((1.0)*cj6*sj5);
IkReal x5720=(cj2*x5706);
IkReal x5721=(sj2*x5706);
IkReal x5722=((1.0)*x5707);
IkReal x5723=((1.0)*cj6*x5711);
evalcond[0]=((((-1.0)*r10*x5719))+(((-1.0)*r12*x5712))+((sj5*x5710))+x5721);
evalcond[1]=((((-1.0)*r00*x5719))+(((-1.0)*x5722))+((sj5*x5715))+(((-1.0)*r02*x5712)));
evalcond[2]=((((-1.0)*r22*x5712))+(((-1.0)*r20*x5719))+((sj5*x5713))+(((-1.0)*x5720)));
evalcond[3]=((0.293)+(((-0.3425)*x5707))+(((-1.0)*px))+(((0.0775)*x5706))+((r00*x5717))+(((-1.0)*r01*x5708)));
evalcond[4]=((((-0.0525)*cj2))+(((-1.0)*pz))+(((-1.0)*r21*x5708))+(((-1.0)*cj2*x5718))+(((-0.3425)*x5720))+((r20*x5717)));
evalcond[5]=(((r02*x5714))+((x5711*x5715))+((r00*x5709))+(((-1.0)*r00*x5723))+((r01*x5716))+x5706);
evalcond[6]=(((r10*x5717))+(((-1.0)*py))+((sj2*x5718))+(((0.3425)*x5721))+(((0.0525)*sj2))+(((-1.0)*r11*x5708)));
evalcond[7]=(((r10*x5709))+((x5710*x5711))+((r11*x5716))+(((-1.0)*r10*x5723))+((r12*x5714))+((sj2*x5707)));
evalcond[8]=(((r20*x5709))+(((-1.0)*r20*x5723))+((r22*x5714))+((x5711*x5713))+((r21*x5716))+(((-1.0)*cj2*x5722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5724=(cj6*r00);
IkReal x5725=(cj5*r02);
IkReal x5726=(r01*sj6);
IkReal x5727=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((4.41935483870968)*x5725))+(((-12.9032258064516)*px))+((x5724*x5727))+(((0.980645161290323)*x5724))+(((-0.980645161290323)*x5726))+(((-1.0)*x5726*x5727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x5724))+(((-1.0)*sj5*x5726))+x5725)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((4.41935483870968)*x5725))+(((-12.9032258064516)*px))+((x5724*x5727))+(((0.980645161290323)*x5724))+(((-0.980645161290323)*x5726))+(((-1.0)*x5726*x5727))))+IKsqr((((sj5*x5724))+(((-1.0)*sj5*x5726))+x5725))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((4.41935483870968)*x5725))+(((-12.9032258064516)*px))+((x5724*x5727))+(((0.980645161290323)*x5724))+(((-0.980645161290323)*x5726))+(((-1.0)*x5726*x5727))), (((sj5*x5724))+(((-1.0)*sj5*x5726))+x5725));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5728=IKsin(j3);
IkReal x5729=IKcos(j3);
IkReal x5730=(sj4*sj6);
IkReal x5731=((1.0)*cj6);
IkReal x5732=(cj4*cj5);
IkReal x5733=((0.076)*sj6);
IkReal x5734=(r11*sj6);
IkReal x5735=((1.0)*cj5);
IkReal x5736=(r21*sj6);
IkReal x5737=(cj4*sj5);
IkReal x5738=(r01*sj6);
IkReal x5739=(cj6*sj4);
IkReal x5740=((0.076)*cj6);
IkReal x5741=((0.0775)*x5729);
IkReal x5742=((1.0)*x5728);
IkReal x5743=((1.0)*x5729);
IkReal x5744=((0.3425)*x5728);
evalcond[0]=(((sj5*x5738))+(((-1.0)*r02*x5735))+(((-1.0)*r00*sj5*x5731))+x5729);
evalcond[1]=(((sj5*x5736))+(((-1.0)*r22*x5735))+(((-1.0)*r20*sj5*x5731))+(((-1.0)*cj2*x5742)));
evalcond[2]=(((sj5*x5734))+(((-1.0)*r12*x5735))+(((-1.0)*r10*sj5*x5731))+(((-1.0)*sj2*x5742)));
evalcond[3]=((-0.293)+((r00*x5740))+(((-1.0)*px))+(((-0.0775)*x5728))+(((-1.0)*r01*x5733))+(((0.3425)*x5729)));
evalcond[4]=((((-1.0)*r21*x5733))+(((-0.0525)*cj2))+(((-1.0)*pz))+((r20*x5740))+(((-1.0)*cj2*x5744))+(((-1.0)*cj2*x5741)));
evalcond[5]=((((-1.0)*r11*x5733))+(((-1.0)*py))+(((-0.0525)*sj2))+((r10*x5740))+(((-1.0)*sj2*x5741))+(((-1.0)*sj2*x5744)));
evalcond[6]=((((-1.0)*r00*x5731*x5732))+((x5732*x5738))+((r01*x5739))+((r00*x5730))+((r02*x5737))+(((-1.0)*x5742)));
evalcond[7]=(((x5732*x5736))+((r21*x5739))+((r20*x5730))+(((-1.0)*r20*x5731*x5732))+(((-1.0)*cj2*x5743))+((r22*x5737)));
evalcond[8]=(((x5732*x5734))+((r11*x5739))+((r12*x5737))+((r10*x5730))+(((-1.0)*sj2*x5743))+(((-1.0)*r10*x5731*x5732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5745=(cj6*r00);
IkReal x5746=(cj5*r02);
IkReal x5747=(r01*sj6);
IkReal x5748=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-0.980645161290323)*x5747))+(((-12.9032258064516)*px))+(((4.41935483870968)*x5746))+(((0.980645161290323)*x5745))+(((-1.0)*x5747*x5748))+((x5745*x5748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x5747))+((sj5*x5745))+x5746)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-0.980645161290323)*x5747))+(((-12.9032258064516)*px))+(((4.41935483870968)*x5746))+(((0.980645161290323)*x5745))+(((-1.0)*x5747*x5748))+((x5745*x5748))))+IKsqr(((((-1.0)*sj5*x5747))+((sj5*x5745))+x5746))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-0.980645161290323)*x5747))+(((-12.9032258064516)*px))+(((4.41935483870968)*x5746))+(((0.980645161290323)*x5745))+(((-1.0)*x5747*x5748))+((x5745*x5748))), ((((-1.0)*sj5*x5747))+((sj5*x5745))+x5746));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5749=IKsin(j3);
IkReal x5750=IKcos(j3);
IkReal x5751=(sj4*sj6);
IkReal x5752=((1.0)*cj6);
IkReal x5753=(cj4*cj5);
IkReal x5754=((0.076)*sj6);
IkReal x5755=(r11*sj6);
IkReal x5756=((1.0)*cj5);
IkReal x5757=(r21*sj6);
IkReal x5758=(cj4*sj5);
IkReal x5759=(r01*sj6);
IkReal x5760=(cj6*sj4);
IkReal x5761=((0.076)*cj6);
IkReal x5762=((0.0775)*x5750);
IkReal x5763=(cj2*x5749);
IkReal x5764=(sj2*x5749);
evalcond[0]=(((sj5*x5759))+(((-1.0)*r00*sj5*x5752))+(((-1.0)*r02*x5756))+x5750);
evalcond[1]=((((-1.0)*r20*sj5*x5752))+((sj5*x5757))+(((-1.0)*r22*x5756))+x5763);
evalcond[2]=((((-1.0)*r10*sj5*x5752))+((sj5*x5755))+(((-1.0)*r12*x5756))+x5764);
evalcond[3]=((-0.293)+((r00*x5761))+(((-1.0)*r01*x5754))+(((-1.0)*px))+(((0.3425)*x5750))+(((-0.0775)*x5749)));
evalcond[4]=((((0.0525)*cj2))+((cj2*x5762))+(((-1.0)*r21*x5754))+(((0.3425)*x5763))+(((-1.0)*pz))+((r20*x5761)));
evalcond[5]=(((sj2*x5762))+(((0.3425)*x5764))+(((-1.0)*py))+(((-1.0)*r11*x5754))+((r10*x5761))+(((0.0525)*sj2)));
evalcond[6]=((((-1.0)*r20*x5752*x5753))+((cj2*x5750))+((r21*x5760))+((r20*x5751))+((x5753*x5757))+((r22*x5758)));
evalcond[7]=((((-1.0)*r10*x5752*x5753))+((sj2*x5750))+((r11*x5760))+((x5753*x5755))+((r12*x5758))+((r10*x5751)));
evalcond[8]=((((-1.0)*r00*x5752*x5753))+((r01*x5760))+((r00*x5751))+((x5753*x5759))+((r02*x5758))+(((-1.0)*x5749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5765=(cj6*r00);
IkReal x5766=(cj5*r02);
IkReal x5767=((4.41935483870968)*sj5);
IkReal x5768=(r01*sj6);
if( IKabs(((-3.78064516129032)+((x5767*x5768))+(((-4.41935483870968)*x5766))+(((12.9032258064516)*px))+(((-0.980645161290323)*x5765))+(((0.980645161290323)*x5768))+(((-1.0)*x5765*x5767)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x5765))+((sj5*x5768))+(((-1.0)*x5766)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+((x5767*x5768))+(((-4.41935483870968)*x5766))+(((12.9032258064516)*px))+(((-0.980645161290323)*x5765))+(((0.980645161290323)*x5768))+(((-1.0)*x5765*x5767))))+IKsqr(((((-1.0)*sj5*x5765))+((sj5*x5768))+(((-1.0)*x5766))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+((x5767*x5768))+(((-4.41935483870968)*x5766))+(((12.9032258064516)*px))+(((-0.980645161290323)*x5765))+(((0.980645161290323)*x5768))+(((-1.0)*x5765*x5767))), ((((-1.0)*sj5*x5765))+((sj5*x5768))+(((-1.0)*x5766))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5769=IKsin(j3);
IkReal x5770=IKcos(j3);
IkReal x5771=(sj4*sj6);
IkReal x5772=((1.0)*cj6);
IkReal x5773=(cj4*cj5);
IkReal x5774=((0.076)*sj6);
IkReal x5775=((1.0)*sj2);
IkReal x5776=(r11*sj6);
IkReal x5777=((1.0)*cj5);
IkReal x5778=(r21*sj6);
IkReal x5779=(cj4*sj5);
IkReal x5780=(r01*sj6);
IkReal x5781=(cj6*sj4);
IkReal x5782=((0.076)*cj6);
IkReal x5783=((0.0775)*x5770);
IkReal x5784=(cj2*x5769);
evalcond[0]=(((sj5*x5778))+(((-1.0)*r20*sj5*x5772))+(((-1.0)*r22*x5777))+x5784);
evalcond[1]=((((-1.0)*r00*sj5*x5772))+((sj5*x5780))+(((-1.0)*r02*x5777))+(((-1.0)*x5770)));
evalcond[2]=((((-1.0)*r10*sj5*x5772))+(((-1.0)*x5769*x5775))+((sj5*x5776))+(((-1.0)*r12*x5777)));
evalcond[3]=((0.293)+((r00*x5782))+(((-1.0)*px))+(((0.0775)*x5769))+(((-0.3425)*x5770))+(((-1.0)*r01*x5774)));
evalcond[4]=((((-1.0)*r21*x5774))+(((0.0525)*cj2))+(((0.3425)*x5784))+((r20*x5782))+((cj2*x5783))+(((-1.0)*pz)));
evalcond[5]=(((r00*x5771))+((r01*x5781))+(((-1.0)*r00*x5772*x5773))+((r02*x5779))+((x5773*x5780))+x5769);
evalcond[6]=((((-1.0)*r11*x5774))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-1.0)*sj2*x5783))+(((-0.3425)*sj2*x5769))+((r10*x5782)));
evalcond[7]=(((cj2*x5770))+((r21*x5781))+((r22*x5779))+(((-1.0)*r20*x5772*x5773))+((r20*x5771))+((x5773*x5778)));
evalcond[8]=((((-1.0)*x5770*x5775))+((r11*x5781))+(((-1.0)*r10*x5772*x5773))+((r10*x5771))+((r12*x5779))+((x5773*x5776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5785=(sj1*sj5);
IkReal x5786=(r21*sj6);
IkReal x5787=((1.0)*cj6);
IkReal x5788=(r01*sj6);
IkReal x5789=(cj1*sj5);
IkReal x5790=(cj1*cj5);
IkReal x5791=((1.0)*cj5*sj1);
if( IKabs(((((-1.0)*r20*x5785*x5787))+(((-1.0)*x5788*x5789))+((x5785*x5786))+(((-1.0)*r22*x5791))+((cj6*r00*x5789))+((r02*x5790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5785*x5788))+(((-1.0)*r00*x5785*x5787))+(((-1.0)*r22*x5790))+(((-1.0)*r02*x5791))+((x5786*x5789))+(((-1.0)*r20*x5787*x5789)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x5785*x5787))+(((-1.0)*x5788*x5789))+((x5785*x5786))+(((-1.0)*r22*x5791))+((cj6*r00*x5789))+((r02*x5790))))+IKsqr((((x5785*x5788))+(((-1.0)*r00*x5785*x5787))+(((-1.0)*r22*x5790))+(((-1.0)*r02*x5791))+((x5786*x5789))+(((-1.0)*r20*x5787*x5789))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r20*x5785*x5787))+(((-1.0)*x5788*x5789))+((x5785*x5786))+(((-1.0)*r22*x5791))+((cj6*r00*x5789))+((r02*x5790))), (((x5785*x5788))+(((-1.0)*r00*x5785*x5787))+(((-1.0)*r22*x5790))+(((-1.0)*r02*x5791))+((x5786*x5789))+(((-1.0)*r20*x5787*x5789))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5792=IKcos(j3);
IkReal x5793=IKsin(j3);
IkReal x5794=(r21*sj6);
IkReal x5795=(r01*sj6);
IkReal x5796=((1.0)*cj5);
IkReal x5797=(cj6*r20);
IkReal x5798=((1.0)*sj5);
IkReal x5799=(sj4*sj6);
IkReal x5800=(cj6*r00);
IkReal x5801=(cj6*sj4);
IkReal x5802=(cj4*cj5);
IkReal x5803=(cj4*sj5);
IkReal x5804=(cj1*x5793);
IkReal x5805=(sj1*x5793);
IkReal x5806=(sj1*x5792);
IkReal x5807=(cj1*x5792);
IkReal x5808=((1.0)*x5806);
evalcond[0]=((((-1.0)*x5798*x5800))+((sj5*x5795))+(((-1.0)*x5808))+(((-1.0)*r02*x5796))+x5804);
evalcond[1]=(((sj5*x5794))+(((-1.0)*x5797*x5798))+(((-1.0)*r22*x5796))+(((-1.0)*x5807))+(((-1.0)*x5805)));
evalcond[2]=(((x5795*x5802))+((r01*x5801))+((r00*x5799))+((r02*x5803))+(((-1.0)*cj4*x5796*x5800))+x5807+x5805);
evalcond[3]=(((x5794*x5802))+((r20*x5799))+((r21*x5801))+((r22*x5803))+(((-1.0)*x5808))+x5804+(((-1.0)*cj4*x5796*x5797)));
evalcond[4]=((((0.0775)*x5804))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.3425)*x5807))+(((-0.3425)*x5805))+(((-0.0525)*sj1))+(((-0.076)*x5794))+(((-0.0775)*x5806))+(((0.076)*x5797)));
evalcond[5]=((((0.0525)*cj1))+(((0.0775)*x5807))+(((0.0775)*x5805))+(((0.3425)*x5804))+(((0.076)*x5800))+(((-1.0)*px))+(((-0.3425)*x5806))+(((0.293)*sj1))+(((-0.076)*x5795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5809=(sj5*sj6);
IkReal x5810=((1.0)*sj1);
IkReal x5811=(cj5*r22);
IkReal x5812=(cj6*sj5);
IkReal x5813=(cj5*r02);
IkReal x5814=((1.0)*cj1);
if( IKabs((((r20*sj1*x5812))+(((-1.0)*r00*x5812*x5814))+(((-1.0)*r21*x5809*x5810))+(((-1.0)*x5813*x5814))+((sj1*x5811))+((cj1*r01*x5809)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x5809))+(((-1.0)*x5811*x5814))+(((-1.0)*x5810*x5813))+((r01*sj1*x5809))+(((-1.0)*r00*x5810*x5812))+(((-1.0)*r20*x5812*x5814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x5812))+(((-1.0)*r00*x5812*x5814))+(((-1.0)*r21*x5809*x5810))+(((-1.0)*x5813*x5814))+((sj1*x5811))+((cj1*r01*x5809))))+IKsqr((((cj1*r21*x5809))+(((-1.0)*x5811*x5814))+(((-1.0)*x5810*x5813))+((r01*sj1*x5809))+(((-1.0)*r00*x5810*x5812))+(((-1.0)*r20*x5812*x5814))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r20*sj1*x5812))+(((-1.0)*r00*x5812*x5814))+(((-1.0)*r21*x5809*x5810))+(((-1.0)*x5813*x5814))+((sj1*x5811))+((cj1*r01*x5809))), (((cj1*r21*x5809))+(((-1.0)*x5811*x5814))+(((-1.0)*x5810*x5813))+((r01*sj1*x5809))+(((-1.0)*r00*x5810*x5812))+(((-1.0)*r20*x5812*x5814))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5815=IKsin(j3);
IkReal x5816=IKcos(j3);
IkReal x5817=(r21*sj6);
IkReal x5818=(r01*sj6);
IkReal x5819=((1.0)*cj5);
IkReal x5820=(cj6*r20);
IkReal x5821=(sj4*sj6);
IkReal x5822=((1.0)*sj5);
IkReal x5823=(cj6*r00);
IkReal x5824=(cj6*sj4);
IkReal x5825=(cj4*cj5);
IkReal x5826=(cj4*sj5);
IkReal x5827=(sj1*x5815);
IkReal x5828=(cj1*x5815);
IkReal x5829=(sj1*x5816);
IkReal x5830=(cj1*x5816);
IkReal x5831=((1.0)*x5830);
evalcond[0]=((((-1.0)*x5831))+((sj5*x5817))+(((-1.0)*x5820*x5822))+x5827+(((-1.0)*r22*x5819)));
evalcond[1]=(((sj5*x5818))+(((-1.0)*r02*x5819))+(((-1.0)*x5822*x5823))+(((-1.0)*x5828))+(((-1.0)*x5829)));
evalcond[2]=(((r21*x5824))+((r20*x5821))+(((-1.0)*cj4*x5819*x5820))+((r22*x5826))+((x5817*x5825))+x5829+x5828);
evalcond[3]=(((r02*x5826))+(((-1.0)*x5831))+((r00*x5821))+((r01*x5824))+(((-1.0)*cj4*x5819*x5823))+((x5818*x5825))+x5827);
evalcond[4]=((((0.0775)*x5829))+(((0.0775)*x5828))+(((-1.0)*pz))+(((-0.076)*x5817))+(((0.293)*cj1))+(((0.076)*x5820))+(((0.0525)*sj1))+(((0.3425)*x5827))+(((-0.3425)*x5830)));
evalcond[5]=((((-0.0525)*cj1))+(((0.0775)*x5827))+(((-1.0)*px))+(((-0.076)*x5818))+(((0.293)*sj1))+(((0.076)*x5823))+(((-0.3425)*x5829))+(((-0.3425)*x5828))+(((-0.0775)*x5830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5832=(cj6*r00);
IkReal x5833=(cj5*r02);
IkReal x5834=((4.41935483870968)*sj5);
IkReal x5835=(r01*sj6);
if( IKabs(((((-1.0)*sj5*x5832))+((sj5*x5835))+(((-1.0)*x5833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-12.9032258064516)*px))+((x5832*x5834))+(((4.41935483870968)*x5833))+(((-0.980645161290323)*x5835))+(((-1.0)*x5834*x5835))+(((0.980645161290323)*x5832)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x5832))+((sj5*x5835))+(((-1.0)*x5833))))+IKsqr(((-0.67741935483871)+(((-12.9032258064516)*px))+((x5832*x5834))+(((4.41935483870968)*x5833))+(((-0.980645161290323)*x5835))+(((-1.0)*x5834*x5835))+(((0.980645161290323)*x5832))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x5832))+((sj5*x5835))+(((-1.0)*x5833))), ((-0.67741935483871)+(((-12.9032258064516)*px))+((x5832*x5834))+(((4.41935483870968)*x5833))+(((-0.980645161290323)*x5835))+(((-1.0)*x5834*x5835))+(((0.980645161290323)*x5832))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5836=IKcos(j3);
IkReal x5837=IKsin(j3);
IkReal x5838=(sj4*sj6);
IkReal x5839=(cj4*sj5);
IkReal x5840=((0.076)*sj6);
IkReal x5841=(cj4*cj5);
IkReal x5842=(r11*sj6);
IkReal x5843=((1.0)*cj5);
IkReal x5844=(r21*sj6);
IkReal x5845=(r01*sj6);
IkReal x5846=(cj6*sj4);
IkReal x5847=((0.076)*cj6);
IkReal x5848=(cj1*x5837);
IkReal x5849=((1.0)*cj6*r10);
IkReal x5850=((0.3425)*x5836);
IkReal x5851=((1.0)*cj6*r20);
IkReal x5852=((1.0)*x5836);
IkReal x5853=((1.0)*cj6*r00);
IkReal x5854=(sj1*x5837);
evalcond[0]=((((-1.0)*sj5*x5853))+(((-1.0)*r02*x5843))+((sj5*x5845))+(((-1.0)*x5837)));
evalcond[1]=((((-1.0)*sj5*x5851))+(((-1.0)*cj1*x5852))+((sj5*x5844))+(((-1.0)*r22*x5843)));
evalcond[2]=(((sj5*x5842))+(((-1.0)*r12*x5843))+(((-1.0)*sj5*x5849))+(((-1.0)*sj1*x5852)));
evalcond[3]=((-0.0525)+(((-1.0)*r01*x5840))+(((-1.0)*px))+((r00*x5847))+(((-0.3425)*x5837))+(((-0.0775)*x5836)));
evalcond[4]=(((r20*x5847))+(((-1.0)*r21*x5840))+(((-1.0)*cj1*x5850))+(((-1.0)*pz))+(((0.0775)*x5848))+(((0.293)*cj1)));
evalcond[5]=(((r10*x5847))+(((0.0775)*x5854))+(((-1.0)*py))+(((0.293)*sj1))+(((-1.0)*r11*x5840))+(((-1.0)*sj1*x5850)));
evalcond[6]=(((r21*x5846))+((x5841*x5844))+((r20*x5838))+(((-1.0)*x5841*x5851))+((r22*x5839))+x5848);
evalcond[7]=(((r11*x5846))+((x5841*x5842))+((r12*x5839))+(((-1.0)*x5841*x5849))+((r10*x5838))+x5854);
evalcond[8]=(((r02*x5839))+((x5841*x5845))+((r00*x5838))+(((-1.0)*x5852))+((r01*x5846))+(((-1.0)*x5841*x5853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5855=(cj6*r00);
IkReal x5856=(cj5*r02);
IkReal x5857=(r01*sj6);
IkReal x5858=((4.41935483870968)*sj5);
if( IKabs((((sj5*x5855))+(((-1.0)*sj5*x5857))+x5856)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((0.980645161290323)*x5857))+(((-0.980645161290323)*x5855))+((x5857*x5858))+(((12.9032258064516)*px))+(((-1.0)*x5855*x5858))+(((-4.41935483870968)*x5856)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x5855))+(((-1.0)*sj5*x5857))+x5856))+IKsqr(((-0.67741935483871)+(((0.980645161290323)*x5857))+(((-0.980645161290323)*x5855))+((x5857*x5858))+(((12.9032258064516)*px))+(((-1.0)*x5855*x5858))+(((-4.41935483870968)*x5856))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj5*x5855))+(((-1.0)*sj5*x5857))+x5856), ((-0.67741935483871)+(((0.980645161290323)*x5857))+(((-0.980645161290323)*x5855))+((x5857*x5858))+(((12.9032258064516)*px))+(((-1.0)*x5855*x5858))+(((-4.41935483870968)*x5856))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5859=IKcos(j3);
IkReal x5860=IKsin(j3);
IkReal x5861=(sj4*sj6);
IkReal x5862=((0.076)*sj6);
IkReal x5863=(cj4*cj5);
IkReal x5864=(r11*sj6);
IkReal x5865=((1.0)*cj5);
IkReal x5866=(r21*sj6);
IkReal x5867=(cj4*sj5);
IkReal x5868=(r01*sj6);
IkReal x5869=(cj6*sj4);
IkReal x5870=((0.076)*cj6);
IkReal x5871=(cj1*x5860);
IkReal x5872=((0.3425)*x5859);
IkReal x5873=((1.0)*cj6*r10);
IkReal x5874=((1.0)*cj6*r20);
IkReal x5875=((1.0)*x5859);
IkReal x5876=((1.0)*cj6*r00);
IkReal x5877=(sj1*x5860);
evalcond[0]=(((sj5*x5868))+(((-1.0)*r02*x5865))+(((-1.0)*sj5*x5876))+x5860);
evalcond[1]=((((-1.0)*r22*x5865))+((sj5*x5866))+(((-1.0)*sj5*x5874))+(((-1.0)*cj1*x5875)));
evalcond[2]=(((sj5*x5864))+(((-1.0)*sj5*x5873))+(((-1.0)*sj1*x5875))+(((-1.0)*r12*x5865)));
evalcond[3]=((0.0525)+(((0.0775)*x5859))+(((0.3425)*x5860))+(((-1.0)*px))+((r00*x5870))+(((-1.0)*r01*x5862)));
evalcond[4]=((((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*cj1*x5872))+((r20*x5870))+(((-1.0)*r21*x5862))+(((0.0775)*x5871)));
evalcond[5]=(((r02*x5867))+(((-1.0)*x5863*x5876))+((r00*x5861))+((x5863*x5868))+x5859+((r01*x5869)));
evalcond[6]=((((-1.0)*r11*x5862))+(((-1.0)*py))+(((0.293)*sj1))+(((-1.0)*sj1*x5872))+((r10*x5870))+(((0.0775)*x5877)));
evalcond[7]=(((r21*x5869))+((r22*x5867))+(((-1.0)*x5863*x5874))+((r20*x5861))+((x5863*x5866))+x5871);
evalcond[8]=(((r11*x5869))+(((-1.0)*x5863*x5873))+((r12*x5867))+((r10*x5861))+((x5863*x5864))+x5877);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5878=(sj5*sj6);
IkReal x5879=((1.0)*sj1);
IkReal x5880=(cj6*sj5);
IkReal x5881=((1.0)*cj1);
IkReal x5882=(cj5*r02);
IkReal x5883=(cj5*r22);
if( IKabs(((((-1.0)*x5879*x5883))+(((-1.0)*r00*x5880*x5881))+((cj1*r01*x5878))+((r21*sj1*x5878))+(((-1.0)*x5881*x5882))+(((-1.0)*r20*x5879*x5880)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x5878))+(((-1.0)*r20*x5880*x5881))+((r00*sj1*x5880))+(((-1.0)*r01*x5878*x5879))+(((-1.0)*x5881*x5883))+((sj1*x5882)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5879*x5883))+(((-1.0)*r00*x5880*x5881))+((cj1*r01*x5878))+((r21*sj1*x5878))+(((-1.0)*x5881*x5882))+(((-1.0)*r20*x5879*x5880))))+IKsqr((((cj1*r21*x5878))+(((-1.0)*r20*x5880*x5881))+((r00*sj1*x5880))+(((-1.0)*r01*x5878*x5879))+(((-1.0)*x5881*x5883))+((sj1*x5882))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x5879*x5883))+(((-1.0)*r00*x5880*x5881))+((cj1*r01*x5878))+((r21*sj1*x5878))+(((-1.0)*x5881*x5882))+(((-1.0)*r20*x5879*x5880))), (((cj1*r21*x5878))+(((-1.0)*r20*x5880*x5881))+((r00*sj1*x5880))+(((-1.0)*r01*x5878*x5879))+(((-1.0)*x5881*x5883))+((sj1*x5882))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5884=IKcos(j3);
IkReal x5885=IKsin(j3);
IkReal x5886=(r21*sj6);
IkReal x5887=(r01*sj6);
IkReal x5888=((1.0)*cj5);
IkReal x5889=(cj6*r20);
IkReal x5890=(sj4*sj6);
IkReal x5891=((1.0)*sj5);
IkReal x5892=(cj6*r00);
IkReal x5893=(cj6*sj4);
IkReal x5894=(cj4*cj5);
IkReal x5895=(cj4*sj5);
IkReal x5896=(sj1*x5884);
IkReal x5897=(cj1*x5884);
IkReal x5898=(cj1*x5885);
IkReal x5899=(sj1*x5885);
IkReal x5900=((1.0)*x5897);
IkReal x5901=((1.0)*x5899);
IkReal x5902=(x5900+x5901);
evalcond[0]=((((-1.0)*x5898))+((sj5*x5887))+(((-1.0)*x5891*x5892))+(((-1.0)*r02*x5888))+x5896);
evalcond[1]=((((-1.0)*x5889*x5891))+((sj5*x5886))+(((-1.0)*r22*x5888))+(((-1.0)*x5902)));
evalcond[2]=(((r22*x5895))+((r21*x5893))+(((-1.0)*cj4*x5888*x5889))+(((-1.0)*x5896))+((r20*x5890))+((x5886*x5894))+x5898);
evalcond[3]=(((r02*x5895))+((x5887*x5894))+(((-1.0)*cj4*x5888*x5892))+((r00*x5890))+((r01*x5893))+(((-1.0)*x5902)));
evalcond[4]=((((-0.0775)*x5896))+(((-0.3425)*x5897))+(((-0.3425)*x5899))+(((-1.0)*pz))+(((0.076)*x5889))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((0.0775)*x5898))+(((-0.076)*x5886)));
evalcond[5]=((((-0.0525)*cj1))+(((-0.0775)*x5897))+(((-0.0775)*x5899))+(((-0.3425)*x5898))+(((-1.0)*px))+(((0.076)*x5892))+(((0.3425)*x5896))+(((-0.293)*sj1))+(((-0.076)*x5887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5903=(cj6*sj5);
IkReal x5904=((1.0)*cj1);
IkReal x5905=(cj5*sj1);
IkReal x5906=(sj5*sj6);
IkReal x5907=((1.0)*sj1*x5906);
if( IKabs((((r22*x5905))+((cj1*cj5*r02))+(((-1.0)*r21*x5907))+((cj1*r00*x5903))+((r20*sj1*x5903))+(((-1.0)*r01*x5904*x5906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5907))+((cj1*r21*x5906))+(((-1.0)*r20*x5903*x5904))+(((-1.0)*cj5*r22*x5904))+((r02*x5905))+((r00*sj1*x5903)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x5905))+((cj1*cj5*r02))+(((-1.0)*r21*x5907))+((cj1*r00*x5903))+((r20*sj1*x5903))+(((-1.0)*r01*x5904*x5906))))+IKsqr(((((-1.0)*r01*x5907))+((cj1*r21*x5906))+(((-1.0)*r20*x5903*x5904))+(((-1.0)*cj5*r22*x5904))+((r02*x5905))+((r00*sj1*x5903))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r22*x5905))+((cj1*cj5*r02))+(((-1.0)*r21*x5907))+((cj1*r00*x5903))+((r20*sj1*x5903))+(((-1.0)*r01*x5904*x5906))), ((((-1.0)*r01*x5907))+((cj1*r21*x5906))+(((-1.0)*r20*x5903*x5904))+(((-1.0)*cj5*r22*x5904))+((r02*x5905))+((r00*sj1*x5903))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x5908=IKsin(j3);
IkReal x5909=IKcos(j3);
IkReal x5910=(r21*sj6);
IkReal x5911=((1.0)*cj5);
IkReal x5912=(r01*sj6);
IkReal x5913=(cj6*r20);
IkReal x5914=(sj4*sj6);
IkReal x5915=((1.0)*sj5);
IkReal x5916=(cj6*r00);
IkReal x5917=(cj6*sj4);
IkReal x5918=(cj4*cj5);
IkReal x5919=(cj4*sj5);
IkReal x5920=(sj1*x5909);
IkReal x5921=(cj1*x5908);
IkReal x5922=(cj1*x5909);
IkReal x5923=(sj1*x5908);
IkReal x5924=(x5920+x5921);
evalcond[0]=((((-1.0)*r02*x5911))+((sj5*x5912))+x5924+(((-1.0)*x5915*x5916)));
evalcond[1]=((((-1.0)*x5922))+(((-1.0)*r22*x5911))+(((-1.0)*x5913*x5915))+((sj5*x5910))+x5923);
evalcond[2]=(((r22*x5919))+(((-1.0)*cj4*x5911*x5913))+((r20*x5914))+((x5910*x5918))+((r21*x5917))+x5924);
evalcond[3]=(((r01*x5917))+((r00*x5914))+(((-1.0)*cj4*x5911*x5916))+(((-1.0)*x5923))+((x5912*x5918))+((r02*x5919))+x5922);
evalcond[4]=((((0.076)*x5913))+(((0.0775)*x5920))+(((0.0775)*x5921))+(((-0.076)*x5910))+(((0.3425)*x5923))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0525)*sj1))+(((-0.3425)*x5922)));
evalcond[5]=((((0.076)*x5916))+(((0.0525)*cj1))+(((0.0775)*x5922))+(((-0.076)*x5912))+(((0.3425)*x5920))+(((0.3425)*x5921))+(((-1.0)*px))+(((-0.0775)*x5923))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5925=(cj6*r00);
IkReal x5926=(cj5*r02);
IkReal x5927=(r01*sj6);
IkReal x5928=((4.41935483870968)*sj5);
if( IKabs((((sj5*x5925))+(((-1.0)*sj5*x5927))+x5926)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-0.980645161290323)*x5925))+(((12.9032258064516)*px))+(((-1.0)*x5925*x5928))+((x5927*x5928))+(((0.980645161290323)*x5927))+(((-4.41935483870968)*x5926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x5925))+(((-1.0)*sj5*x5927))+x5926))+IKsqr(((-0.67741935483871)+(((-0.980645161290323)*x5925))+(((12.9032258064516)*px))+(((-1.0)*x5925*x5928))+((x5927*x5928))+(((0.980645161290323)*x5927))+(((-4.41935483870968)*x5926))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj5*x5925))+(((-1.0)*sj5*x5927))+x5926), ((-0.67741935483871)+(((-0.980645161290323)*x5925))+(((12.9032258064516)*px))+(((-1.0)*x5925*x5928))+((x5927*x5928))+(((0.980645161290323)*x5927))+(((-4.41935483870968)*x5926))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5929=IKcos(j3);
IkReal x5930=IKsin(j3);
IkReal x5931=(sj4*sj6);
IkReal x5932=((0.076)*sj6);
IkReal x5933=(cj4*cj5);
IkReal x5934=(r11*sj6);
IkReal x5935=((1.0)*cj5);
IkReal x5936=(r21*sj6);
IkReal x5937=(cj4*sj5);
IkReal x5938=(r01*sj6);
IkReal x5939=(cj6*sj4);
IkReal x5940=((0.076)*cj6);
IkReal x5941=(cj1*x5930);
IkReal x5942=((0.3425)*x5929);
IkReal x5943=((1.0)*cj6*r10);
IkReal x5944=((1.0)*cj6*r20);
IkReal x5945=((1.0)*cj6*r00);
IkReal x5946=(sj1*x5930);
evalcond[0]=((((-1.0)*r02*x5935))+((sj5*x5938))+(((-1.0)*sj5*x5945))+x5930);
evalcond[1]=(((sj5*x5934))+(((-1.0)*sj5*x5943))+((sj1*x5929))+(((-1.0)*r12*x5935)));
evalcond[2]=((((-1.0)*cj1*x5929))+((sj5*x5936))+(((-1.0)*sj5*x5944))+(((-1.0)*r22*x5935)));
evalcond[3]=((0.0525)+(((0.0775)*x5929))+(((0.3425)*x5930))+(((-1.0)*r01*x5932))+((r00*x5940))+(((-1.0)*px)));
evalcond[4]=((((-1.0)*pz))+(((0.293)*cj1))+((r20*x5940))+(((-1.0)*r21*x5932))+(((-1.0)*cj1*x5942))+(((0.0775)*x5941)));
evalcond[5]=(((x5933*x5938))+(((-1.0)*x5933*x5945))+((r01*x5939))+((r00*x5931))+x5929+((r02*x5937)));
evalcond[6]=((((-0.0775)*x5946))+(((-1.0)*py))+(((-1.0)*r11*x5932))+((r10*x5940))+((sj1*x5942))+(((-0.293)*sj1)));
evalcond[7]=(((r20*x5931))+((x5933*x5936))+((r21*x5939))+((r22*x5937))+(((-1.0)*x5933*x5944))+x5941);
evalcond[8]=(((r10*x5931))+(((-1.0)*x5946))+((x5933*x5934))+((r11*x5939))+((r12*x5937))+(((-1.0)*x5933*x5943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5947=(cj6*r00);
IkReal x5948=(cj5*r02);
IkReal x5949=((4.41935483870968)*sj5);
IkReal x5950=(r01*sj6);
if( IKabs(((((-1.0)*x5948))+(((-1.0)*sj5*x5947))+((sj5*x5950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-12.9032258064516)*px))+(((-0.980645161290323)*x5950))+(((0.980645161290323)*x5947))+((x5947*x5949))+(((-1.0)*x5949*x5950))+(((4.41935483870968)*x5948)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5948))+(((-1.0)*sj5*x5947))+((sj5*x5950))))+IKsqr(((-0.67741935483871)+(((-12.9032258064516)*px))+(((-0.980645161290323)*x5950))+(((0.980645161290323)*x5947))+((x5947*x5949))+(((-1.0)*x5949*x5950))+(((4.41935483870968)*x5948))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x5948))+(((-1.0)*sj5*x5947))+((sj5*x5950))), ((-0.67741935483871)+(((-12.9032258064516)*px))+(((-0.980645161290323)*x5950))+(((0.980645161290323)*x5947))+((x5947*x5949))+(((-1.0)*x5949*x5950))+(((4.41935483870968)*x5948))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5951=IKcos(j3);
IkReal x5952=IKsin(j3);
IkReal x5953=(sj4*sj6);
IkReal x5954=(cj4*sj5);
IkReal x5955=((0.076)*sj6);
IkReal x5956=(cj4*cj5);
IkReal x5957=(r11*sj6);
IkReal x5958=((1.0)*cj5);
IkReal x5959=(r21*sj6);
IkReal x5960=(r01*sj6);
IkReal x5961=(cj6*sj4);
IkReal x5962=((0.076)*cj6);
IkReal x5963=(cj1*x5952);
IkReal x5964=((1.0)*cj6*r10);
IkReal x5965=(sj1*x5951);
IkReal x5966=((1.0)*cj6*r20);
IkReal x5967=(cj1*x5951);
IkReal x5968=((1.0)*cj6*r00);
IkReal x5969=(sj1*x5952);
evalcond[0]=(((sj5*x5957))+(((-1.0)*sj5*x5964))+(((-1.0)*r12*x5958))+x5965);
evalcond[1]=(((sj5*x5960))+(((-1.0)*r02*x5958))+(((-1.0)*sj5*x5968))+(((-1.0)*x5952)));
evalcond[2]=((((-1.0)*x5967))+(((-1.0)*r22*x5958))+((sj5*x5959))+(((-1.0)*sj5*x5966)));
evalcond[3]=((-0.0525)+(((-1.0)*r01*x5955))+((r00*x5962))+(((-0.3425)*x5952))+(((-1.0)*px))+(((-0.0775)*x5951)));
evalcond[4]=((((-0.3425)*x5967))+(((-1.0)*pz))+(((0.293)*cj1))+((r20*x5962))+(((-1.0)*r21*x5955))+(((0.0775)*x5963)));
evalcond[5]=((((-0.0775)*x5969))+(((0.3425)*x5965))+(((-1.0)*py))+((r10*x5962))+(((-1.0)*r11*x5955))+(((-0.293)*sj1)));
evalcond[6]=(((x5956*x5959))+((r20*x5953))+(((-1.0)*x5956*x5966))+((r21*x5961))+((r22*x5954))+x5963);
evalcond[7]=(((r01*x5961))+((r02*x5954))+(((-1.0)*x5956*x5968))+(((-1.0)*x5951))+((x5956*x5960))+((r00*x5953)));
evalcond[8]=((((-1.0)*x5969))+((x5956*x5957))+(((-1.0)*x5956*x5964))+((r10*x5953))+((r12*x5954))+((r11*x5961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5970=cj1*cj1;
IkReal x5971=cj2*cj2;
IkReal x5972=(cj1*r20);
IkReal x5973=(sj4*sj6);
IkReal x5974=(cj4*cj5);
IkReal x5975=(cj4*sj5);
IkReal x5976=((1.0)*cj6);
IkReal x5977=(cj1*r21);
IkReal x5978=((1.0)*cj1*r22);
IkReal x5979=(cj2*r20*sj1);
IkReal x5980=(cj2*r22*sj1);
IkReal x5981=(cj2*r21*sj1*sj6);
CheckValue<IkReal> x5982=IKPowWithIntegerCheck(IKsign((x5971+x5970+(((-1.0)*x5970*x5971)))),-1);
if(!x5982.valid){
continue;
}
CheckValue<IkReal> x5983 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x5976*x5979))+((cj6*x5972*x5974))+(((-1.0)*x5975*x5978))+((sj5*x5981))+(((-1.0)*sj4*x5976*x5977))+(((-1.0)*x5972*x5973))+(((-1.0)*sj6*x5974*x5977))+(((-1.0)*cj5*x5980)))),IkReal((((cj2*cj6*r21*sj1*sj4))+((x5975*x5980))+(((-1.0)*cj5*x5978))+((x5974*x5981))+(((-1.0)*sj5*x5972*x5976))+((sj5*sj6*x5977))+(((-1.0)*x5974*x5976*x5979))+((x5973*x5979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5983.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5982.value)))+(x5983.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x5984=IKsin(j3);
IkReal x5985=IKcos(j3);
IkReal x5986=(sj5*sj6);
IkReal x5987=(cj0*sj2);
IkReal x5988=((0.076)*sj6);
IkReal x5989=(sj0*sj2);
IkReal x5990=(cj4*cj5);
IkReal x5991=(cj2*sj1);
IkReal x5992=(sj4*sj6);
IkReal x5993=((1.0)*cj5);
IkReal x5994=(cj4*sj5);
IkReal x5995=((0.076)*cj6);
IkReal x5996=(cj6*sj4);
IkReal x5997=((0.293)*sj1);
IkReal x5998=(cj0*sj1);
IkReal x5999=(sj0*sj1);
IkReal x6000=((0.0775)*x5985);
IkReal x6001=(cj1*cj2*sj0);
IkReal x6002=((0.3425)*x5984);
IkReal x6003=(cj1*x5984);
IkReal x6004=(cj0*cj1*cj2);
IkReal x6005=(cj1*x5985);
IkReal x6006=((1.0)*cj6*r10);
IkReal x6007=((1.0)*x5984);
IkReal x6008=((1.0)*cj6*r20);
IkReal x6009=((1.0)*cj6*r00);
IkReal x6010=((1.0)*x5985);
IkReal x6011=(sj1*x5984);
IkReal x6012=((0.3425)*x5985);
IkReal x6013=((0.0775)*x6011);
evalcond[0]=(((r21*x5986))+(((-1.0)*sj5*x6008))+(((-1.0)*r22*x5993))+(((-1.0)*x6005))+(((-1.0)*x5991*x6007)));
evalcond[1]=((((-1.0)*r12*x5993))+((r11*x5986))+(((-1.0)*sj5*x6006))+(((-1.0)*x5999*x6010))+((x5984*x6001))+((x5984*x5987)));
evalcond[2]=((((-1.0)*x5998*x6010))+(((-1.0)*r02*x5993))+(((-1.0)*sj5*x6009))+((cj0*cj2*x6003))+(((-1.0)*x5989*x6007))+((r01*x5986)));
evalcond[3]=(((r21*x5996))+(((-1.0)*x5991*x6010))+x6003+((r20*x5992))+(((-1.0)*x5990*x6008))+((r22*x5994))+((r21*sj6*x5990)));
evalcond[4]=(((r11*sj6*x5990))+((x5984*x5999))+((r12*x5994))+((x5985*x5987))+((r10*x5992))+((r11*x5996))+((x5985*x6001))+(((-1.0)*x5990*x6006)));
evalcond[5]=(((x5984*x5998))+((r02*x5994))+(((-1.0)*x5989*x6010))+((x5985*x6004))+(((-1.0)*x5990*x6009))+((r01*x5996))+((r01*sj6*x5990))+((r00*x5992)));
evalcond[6]=((((0.0775)*x6003))+(((-0.0525)*x5991))+((r20*x5995))+(((-0.3425)*x6005))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*x5991*x6000))+(((-1.0)*x5991*x6002))+(((-1.0)*r21*x5988)));
evalcond[7]=((((-1.0)*x5998*x6012))+(((-1.0)*px))+(((-0.0525)*x5989))+((x6002*x6004))+((cj0*x5997))+((x6000*x6004))+(((-1.0)*x5989*x6002))+(((-1.0)*x5989*x6000))+(((0.0525)*x6004))+(((0.0775)*x5984*x5998))+(((-1.0)*r01*x5988))+((r00*x5995)));
evalcond[8]=((((-1.0)*r11*x5988))+((sj0*x5997))+((r10*x5995))+(((0.0525)*x5987))+((x6001*x6002))+(((-1.0)*py))+(((-1.0)*x5999*x6012))+((x6000*x6001))+(((0.0525)*x6001))+(((0.0775)*x5984*x5999))+((x5987*x6002))+((x5987*x6000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6014=(sj5*sj6);
IkReal x6015=(cj2*sj1);
IkReal x6016=((1.0)*cj5);
IkReal x6017=(cj0*sj1);
IkReal x6018=(sj0*sj2);
IkReal x6019=(cj6*sj5);
IkReal x6020=((1.0)*x6018);
IkReal x6021=((1.0)*x6019);
IkReal x6022=(cj0*cj1*cj2);
CheckValue<IkReal> x6023=IKPowWithIntegerCheck(IKsign((((cj0*cj2))+(((-1.0)*cj1*x6020)))),-1);
if(!x6023.valid){
continue;
}
CheckValue<IkReal> x6024 = IKatan2WithCheck(IkReal((((cj1*r00*x6019))+((cj1*cj5*r02))+(((-1.0)*r20*x6017*x6021))+((r21*x6014*x6017))+(((-1.0)*r22*x6016*x6017))+(((-1.0)*cj1*r01*x6014)))),IkReal((((r20*x6018*x6019))+(((-1.0)*r22*x6016*x6022))+(((-1.0)*r20*x6021*x6022))+(((-1.0)*r00*x6015*x6021))+((r01*x6014*x6015))+(((-1.0)*r21*x6014*x6020))+((r21*x6014*x6022))+(((-1.0)*r02*x6015*x6016))+((cj5*r22*x6018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6024.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6023.value)))+(x6024.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6025=IKsin(j3);
IkReal x6026=IKcos(j3);
IkReal x6027=(sj5*sj6);
IkReal x6028=(cj0*sj2);
IkReal x6029=((0.076)*sj6);
IkReal x6030=(sj0*sj2);
IkReal x6031=(cj4*cj5);
IkReal x6032=(cj2*sj1);
IkReal x6033=(sj4*sj6);
IkReal x6034=((1.0)*cj5);
IkReal x6035=(cj4*sj5);
IkReal x6036=((0.076)*cj6);
IkReal x6037=(cj6*sj4);
IkReal x6038=((0.293)*sj1);
IkReal x6039=(cj0*sj1);
IkReal x6040=(sj0*sj1);
IkReal x6041=((0.0775)*x6026);
IkReal x6042=(cj1*cj2*sj0);
IkReal x6043=((0.3425)*x6025);
IkReal x6044=(cj1*x6025);
IkReal x6045=(cj0*cj1*cj2);
IkReal x6046=(cj1*x6026);
IkReal x6047=((1.0)*cj6*r10);
IkReal x6048=((1.0)*x6025);
IkReal x6049=((1.0)*cj6*r20);
IkReal x6050=((1.0)*cj6*r00);
IkReal x6051=((1.0)*x6026);
IkReal x6052=(sj1*x6025);
IkReal x6053=((0.3425)*x6026);
IkReal x6054=((0.0775)*x6052);
evalcond[0]=((((-1.0)*x6046))+((r21*x6027))+(((-1.0)*sj5*x6049))+(((-1.0)*r22*x6034))+(((-1.0)*x6032*x6048)));
evalcond[1]=(((x6025*x6042))+((x6025*x6028))+(((-1.0)*r12*x6034))+(((-1.0)*sj5*x6047))+((r11*x6027))+(((-1.0)*x6040*x6051)));
evalcond[2]=(((r01*x6027))+(((-1.0)*x6039*x6051))+(((-1.0)*x6030*x6048))+((cj0*cj2*x6044))+(((-1.0)*sj5*x6050))+(((-1.0)*r02*x6034)));
evalcond[3]=((((-1.0)*x6032*x6051))+((r22*x6035))+((r21*x6037))+x6044+((r21*sj6*x6031))+((r20*x6033))+(((-1.0)*x6031*x6049)));
evalcond[4]=(((x6025*x6040))+((x6026*x6028))+((r12*x6035))+((r11*x6037))+((r10*x6033))+((r11*sj6*x6031))+((x6026*x6042))+(((-1.0)*x6031*x6047)));
evalcond[5]=((((-1.0)*x6031*x6050))+(((-1.0)*x6030*x6051))+((r02*x6035))+((x6025*x6039))+((x6026*x6045))+((r01*sj6*x6031))+((r00*x6033))+((r01*x6037)));
evalcond[6]=((((-1.0)*r21*x6029))+(((0.0775)*x6044))+(((-1.0)*pz))+((r20*x6036))+(((0.293)*cj1))+(((-0.3425)*x6046))+(((-0.0525)*x6032))+(((-1.0)*x6032*x6043))+(((-1.0)*x6032*x6041)));
evalcond[7]=(((cj0*x6038))+((x6041*x6045))+(((-1.0)*r01*x6029))+((x6043*x6045))+(((0.0775)*x6025*x6039))+(((-1.0)*px))+(((0.0525)*x6045))+(((-1.0)*x6039*x6053))+(((-1.0)*x6030*x6043))+(((-1.0)*x6030*x6041))+((r00*x6036))+(((-0.0525)*x6030)));
evalcond[8]=((((-1.0)*r11*x6029))+(((0.0775)*x6025*x6040))+((x6041*x6042))+(((0.0525)*x6028))+((x6028*x6043))+((x6028*x6041))+((x6042*x6043))+((r10*x6036))+(((-1.0)*py))+(((0.0525)*x6042))+((sj0*x6038))+(((-1.0)*x6040*x6053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6055=(cj5*r12);
IkReal x6056=(cj6*sj5);
IkReal x6057=((1.0)*sj1);
IkReal x6058=(r20*sj0);
IkReal x6059=(cj0*sj2);
IkReal x6060=(cj2*sj0);
IkReal x6061=(r21*sj5*sj6);
IkReal x6062=(cj5*r22*sj0);
IkReal x6063=((1.0)*cj1*cj2);
IkReal x6064=(r11*sj5*sj6);
CheckValue<IkReal> x6065=IKPowWithIntegerCheck(IKsign((x6060+((cj1*x6059)))),-1);
if(!x6065.valid){
continue;
}
CheckValue<IkReal> x6066 = IKatan2WithCheck(IkReal(((((-1.0)*x6057*x6062))+(((-1.0)*x6056*x6057*x6058))+((sj0*sj1*x6061))+(((-1.0)*cj1*x6064))+((cj1*r10*x6056))+((cj1*x6055)))),IkReal((((cj1*x6060*x6061))+(((-1.0)*cj5*r22*x6059))+((x6059*x6061))+(((-1.0)*cj1*cj5*r22*x6060))+((cj2*sj1*x6064))+(((-1.0)*cj2*r10*x6056*x6057))+(((-1.0)*cj2*x6055*x6057))+(((-1.0)*r20*x6056*x6059))+(((-1.0)*x6056*x6058*x6063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6066.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6065.value)))+(x6066.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6067=IKsin(j3);
IkReal x6068=IKcos(j3);
IkReal x6069=(sj5*sj6);
IkReal x6070=(cj0*sj2);
IkReal x6071=((0.076)*sj6);
IkReal x6072=(sj0*sj2);
IkReal x6073=(cj4*cj5);
IkReal x6074=(cj2*sj1);
IkReal x6075=(sj4*sj6);
IkReal x6076=((1.0)*cj5);
IkReal x6077=(cj4*sj5);
IkReal x6078=((0.076)*cj6);
IkReal x6079=(cj6*sj4);
IkReal x6080=((0.293)*sj1);
IkReal x6081=(cj0*sj1);
IkReal x6082=(sj0*sj1);
IkReal x6083=((0.0775)*x6068);
IkReal x6084=(cj1*cj2*sj0);
IkReal x6085=((0.3425)*x6067);
IkReal x6086=(cj1*x6067);
IkReal x6087=(cj0*cj1*cj2);
IkReal x6088=(cj1*x6068);
IkReal x6089=((1.0)*cj6*r10);
IkReal x6090=((1.0)*x6067);
IkReal x6091=((1.0)*cj6*r20);
IkReal x6092=((1.0)*cj6*r00);
IkReal x6093=((1.0)*x6068);
IkReal x6094=(sj1*x6067);
IkReal x6095=((0.3425)*x6068);
IkReal x6096=((0.0775)*x6094);
evalcond[0]=((((-1.0)*x6074*x6090))+(((-1.0)*x6088))+((r21*x6069))+(((-1.0)*r22*x6076))+(((-1.0)*sj5*x6091)));
evalcond[1]=((((-1.0)*x6082*x6093))+((x6067*x6084))+((r11*x6069))+(((-1.0)*r12*x6076))+((x6067*x6070))+(((-1.0)*sj5*x6089)));
evalcond[2]=(((cj0*cj2*x6086))+(((-1.0)*x6081*x6093))+(((-1.0)*r02*x6076))+((r01*x6069))+(((-1.0)*x6072*x6090))+(((-1.0)*sj5*x6092)));
evalcond[3]=((((-1.0)*x6074*x6093))+x6086+((r21*sj6*x6073))+((r22*x6077))+((r20*x6075))+((r21*x6079))+(((-1.0)*x6073*x6091)));
evalcond[4]=(((r11*x6079))+((x6068*x6084))+(((-1.0)*x6073*x6089))+((x6068*x6070))+((x6067*x6082))+((r10*x6075))+((r11*sj6*x6073))+((r12*x6077)));
evalcond[5]=(((r01*x6079))+((x6068*x6087))+((x6067*x6081))+((r01*sj6*x6073))+((r02*x6077))+((r00*x6075))+(((-1.0)*x6072*x6093))+(((-1.0)*x6073*x6092)));
evalcond[6]=((((-1.0)*r21*x6071))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*x6074))+((r20*x6078))+(((0.0775)*x6086))+(((-0.3425)*x6088))+(((-1.0)*x6074*x6083))+(((-1.0)*x6074*x6085)));
evalcond[7]=((((-1.0)*x6081*x6095))+(((0.0525)*x6087))+(((0.0775)*x6067*x6081))+(((-1.0)*r01*x6071))+((cj0*x6080))+((x6085*x6087))+(((-1.0)*px))+(((-0.0525)*x6072))+((x6083*x6087))+(((-1.0)*x6072*x6083))+(((-1.0)*x6072*x6085))+((r00*x6078)));
evalcond[8]=(((sj0*x6080))+(((0.0525)*x6084))+(((0.0775)*x6067*x6082))+(((-1.0)*x6082*x6095))+((x6070*x6085))+((x6070*x6083))+(((0.0525)*x6070))+(((-1.0)*py))+((x6084*x6085))+((x6083*x6084))+((r10*x6078))+(((-1.0)*r11*x6071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x6107=IKPowWithIntegerCheck(sj1,-1);
if(!x6107.valid){
continue;
}
IkReal x6097=x6107.value;
IkReal x6098=((1.0)*sj6);
IkReal x6099=(cj4*r20);
IkReal x6100=(sj4*sj5);
IkReal x6101=(cj4*sj1);
IkReal x6102=(cj0*cj1);
IkReal x6103=(cj5*sj4);
IkReal x6104=(cj6*r20);
IkReal x6105=(sj1*x6103);
IkReal x6106=(cj4*cj6*r21);
CheckValue<IkReal> x6108=IKPowWithIntegerCheck(sj0,-1);
if(!x6108.valid){
continue;
}
if( IKabs((x6097*((((r22*x6100))+(((-1.0)*x6098*x6099))+(((-1.0)*x6103*x6104))+(((-1.0)*x6106))+((r21*sj6*x6103)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6097*(x6108.value)*((((x6102*x6106))+(((-1.0)*r22*x6100*x6102))+(((-1.0)*r21*x6098*x6102*x6103))+((cj6*r01*x6101))+(((-1.0)*r02*sj1*x6100))+((cj6*r00*x6105))+(((-1.0)*r01*x6098*x6105))+((sj6*x6099*x6102))+((x6102*x6103*x6104))+((r00*sj6*x6101)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6097*((((r22*x6100))+(((-1.0)*x6098*x6099))+(((-1.0)*x6103*x6104))+(((-1.0)*x6106))+((r21*sj6*x6103))))))+IKsqr((x6097*(x6108.value)*((((x6102*x6106))+(((-1.0)*r22*x6100*x6102))+(((-1.0)*r21*x6098*x6102*x6103))+((cj6*r01*x6101))+(((-1.0)*r02*sj1*x6100))+((cj6*r00*x6105))+(((-1.0)*r01*x6098*x6105))+((sj6*x6099*x6102))+((x6102*x6103*x6104))+((r00*sj6*x6101))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x6097*((((r22*x6100))+(((-1.0)*x6098*x6099))+(((-1.0)*x6103*x6104))+(((-1.0)*x6106))+((r21*sj6*x6103))))), (x6097*(x6108.value)*((((x6102*x6106))+(((-1.0)*r22*x6100*x6102))+(((-1.0)*r21*x6098*x6102*x6103))+((cj6*r01*x6101))+(((-1.0)*r02*sj1*x6100))+((cj6*r00*x6105))+(((-1.0)*r01*x6098*x6105))+((sj6*x6099*x6102))+((x6102*x6103*x6104))+((r00*sj6*x6101))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x6109=IKsin(j2);
IkReal x6110=IKcos(j2);
IkReal x6111=(sj4*sj5);
IkReal x6112=((1.0)*cj6);
IkReal x6113=(cj5*sj4);
IkReal x6114=(sj6*x6113);
IkReal x6115=((1.0)*cj4*sj6);
IkReal x6116=(cj1*x6109);
evalcond[0]=((((-1.0)*r20*x6112*x6113))+(((-1.0)*r20*x6115))+((r22*x6111))+(((-1.0)*cj4*r21*x6112))+(((-1.0)*sj1*x6109))+((r21*x6114)));
evalcond[1]=(((r02*x6111))+(((-1.0)*r00*x6112*x6113))+(((-1.0)*cj4*r01*x6112))+((sj0*x6110))+((r01*x6114))+(((-1.0)*r00*x6115))+((cj0*x6116)));
evalcond[2]=((((-1.0)*cj4*r11*x6112))+(((-1.0)*r10*x6115))+((r12*x6111))+(((-1.0)*r10*x6112*x6113))+((r11*x6114))+((sj0*x6116))+(((-1.0)*cj0*x6110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x6117=(((cj2*sj0))+((cj0*cj1*sj2)));
j3eval[0]=x6117;
j3eval[1]=IKsign(x6117);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x6118=(((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)));
j3eval[0]=x6118;
j3eval[1]=IKsign(x6118);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x6119=cj1*cj1;
IkReal x6120=cj2*cj2;
IkReal x6121=(x6120+x6119+(((-1.0)*x6119*x6120)));
j3eval[0]=x6121;
j3eval[1]=IKsign(x6121);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6122=((1.0)*sj5);
IkReal x6123=(r11*sj6);
IkReal x6124=(cj6*r10);
IkReal x6125=(cj6*r00);
IkReal x6126=(sj0*sj5);
IkReal x6127=((1.0)*cj5);
IkReal x6128=(r01*sj6);
IkReal x6129=(cj0*sj5);
if( IKabs((((x6124*x6129))+(((-1.0)*sj0*x6122*x6125))+((x6126*x6128))+((cj0*cj5*r12))+(((-1.0)*cj0*x6122*x6123))+(((-1.0)*r02*sj0*x6127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x6122*x6124))+((x6128*x6129))+(((-1.0)*r12*sj0*x6127))+((x6123*x6126))+(((-1.0)*cj0*r02*x6127))+(((-1.0)*cj0*x6122*x6125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6124*x6129))+(((-1.0)*sj0*x6122*x6125))+((x6126*x6128))+((cj0*cj5*r12))+(((-1.0)*cj0*x6122*x6123))+(((-1.0)*r02*sj0*x6127))))+IKsqr(((((-1.0)*sj0*x6122*x6124))+((x6128*x6129))+(((-1.0)*r12*sj0*x6127))+((x6123*x6126))+(((-1.0)*cj0*r02*x6127))+(((-1.0)*cj0*x6122*x6125))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x6124*x6129))+(((-1.0)*sj0*x6122*x6125))+((x6126*x6128))+((cj0*cj5*r12))+(((-1.0)*cj0*x6122*x6123))+(((-1.0)*r02*sj0*x6127))), ((((-1.0)*sj0*x6122*x6124))+((x6128*x6129))+(((-1.0)*r12*sj0*x6127))+((x6123*x6126))+(((-1.0)*cj0*r02*x6127))+(((-1.0)*cj0*x6122*x6125))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6130=IKsin(j3);
IkReal x6131=IKcos(j3);
IkReal x6132=((1.0)*cj5);
IkReal x6133=((0.076)*sj6);
IkReal x6134=(cj6*r10);
IkReal x6135=((1.0)*sj5);
IkReal x6136=(sj5*sj6);
IkReal x6137=(sj4*sj6);
IkReal x6138=(cj6*r00);
IkReal x6139=(cj4*sj5);
IkReal x6140=(cj6*sj4);
IkReal x6141=(cj0*x6130);
IkReal x6142=(sj0*x6131);
IkReal x6143=(sj0*x6130);
IkReal x6144=(cj0*x6131);
IkReal x6145=(cj4*cj5*sj6);
IkReal x6146=((1.0)*x6142);
evalcond[0]=((((-1.0)*x6146))+((r11*x6136))+x6141+(((-1.0)*x6134*x6135))+(((-1.0)*r12*x6132)));
evalcond[1]=((((-1.0)*x6144))+(((-1.0)*x6143))+((r01*x6136))+(((-1.0)*r02*x6132))+(((-1.0)*x6135*x6138)));
evalcond[2]=(x6143+x6144+((r10*x6137))+(((-1.0)*cj4*x6132*x6134))+((r11*x6145))+((r11*x6140))+((r12*x6139)));
evalcond[3]=((((-1.0)*x6146))+x6141+(((-1.0)*cj4*x6132*x6138))+((r01*x6145))+((r01*x6140))+((r02*x6139))+((r00*x6137)));
evalcond[4]=((((-0.3425)*x6143))+(((-0.3425)*x6144))+(((-1.0)*r01*x6133))+(((-1.0)*px))+(((-0.0775)*x6142))+(((0.293)*cj0))+(((-0.0525)*sj0))+(((0.0775)*x6141))+(((0.076)*x6138)));
evalcond[5]=((((0.0525)*cj0))+(((-0.3425)*x6142))+(((0.3425)*x6141))+(((-1.0)*py))+(((-1.0)*r11*x6133))+(((0.293)*sj0))+(((0.0775)*x6143))+(((0.0775)*x6144))+(((0.076)*x6134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6147=(cj0*sj5);
IkReal x6148=(r11*sj6);
IkReal x6149=((1.0)*cj6);
IkReal x6150=(sj0*sj5);
IkReal x6151=((1.0)*cj5);
IkReal x6152=(r01*sj6);
if( IKabs(((((-1.0)*cj0*r12*x6151))+((cj6*r00*x6150))+(((-1.0)*r10*x6147*x6149))+(((-1.0)*x6150*x6152))+((cj5*r02*sj0))+((x6147*x6148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x6148*x6150))+(((-1.0)*r00*x6147*x6149))+((x6147*x6152))+(((-1.0)*r12*sj0*x6151))+(((-1.0)*r10*x6149*x6150))+(((-1.0)*cj0*r02*x6151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r12*x6151))+((cj6*r00*x6150))+(((-1.0)*r10*x6147*x6149))+(((-1.0)*x6150*x6152))+((cj5*r02*sj0))+((x6147*x6148))))+IKsqr((((x6148*x6150))+(((-1.0)*r00*x6147*x6149))+((x6147*x6152))+(((-1.0)*r12*sj0*x6151))+(((-1.0)*r10*x6149*x6150))+(((-1.0)*cj0*r02*x6151))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r12*x6151))+((cj6*r00*x6150))+(((-1.0)*r10*x6147*x6149))+(((-1.0)*x6150*x6152))+((cj5*r02*sj0))+((x6147*x6148))), (((x6148*x6150))+(((-1.0)*r00*x6147*x6149))+((x6147*x6152))+(((-1.0)*r12*sj0*x6151))+(((-1.0)*r10*x6149*x6150))+(((-1.0)*cj0*r02*x6151))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6153=IKcos(j3);
IkReal x6154=IKsin(j3);
IkReal x6155=((0.076)*sj6);
IkReal x6156=(sj5*sj6);
IkReal x6157=(cj4*cj5);
IkReal x6158=(sj4*sj6);
IkReal x6159=(cj4*sj5);
IkReal x6160=(cj6*sj4);
IkReal x6161=((1.0)*cj5);
IkReal x6162=((0.076)*cj6);
IkReal x6163=(sj0*x6154);
IkReal x6164=((1.0)*x6153);
IkReal x6165=(sj0*x6153);
IkReal x6166=((1.0)*cj6*r10);
IkReal x6167=((1.0)*cj6*r00);
IkReal x6168=(cj0*x6154);
IkReal x6169=(cj0*x6153);
IkReal x6170=(cj0*x6164);
evalcond[0]=(x6163+(((-1.0)*x6170))+(((-1.0)*r02*x6161))+(((-1.0)*sj5*x6167))+((r01*x6156)));
evalcond[1]=((((-1.0)*sj0*x6164))+(((-1.0)*r12*x6161))+(((-1.0)*x6168))+(((-1.0)*sj5*x6166))+((r11*x6156)));
evalcond[2]=(((r00*x6158))+x6168+x6165+(((-1.0)*x6157*x6167))+((r02*x6159))+((r01*x6160))+((r01*sj6*x6157)));
evalcond[3]=(((r12*x6159))+x6163+(((-1.0)*x6170))+((r11*x6160))+(((-1.0)*x6157*x6166))+((r10*x6158))+((r11*sj6*x6157)));
evalcond[4]=((((-0.3425)*x6169))+(((-1.0)*px))+(((-1.0)*r01*x6155))+(((0.293)*cj0))+((r00*x6162))+(((0.0525)*sj0))+(((0.3425)*x6163))+(((0.0775)*x6168))+(((0.0775)*x6165)));
evalcond[5]=((((-0.0525)*cj0))+((r10*x6162))+(((-0.3425)*x6165))+(((-0.3425)*x6168))+(((-1.0)*r11*x6155))+(((-1.0)*py))+(((0.293)*sj0))+(((-0.0775)*x6169))+(((0.0775)*x6163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6171=(cj0*cj5);
IkReal x6172=(sj0*sj5);
IkReal x6173=(cj6*r10);
IkReal x6174=(r01*sj6);
IkReal x6175=(cj0*sj5);
IkReal x6176=(cj6*r00);
IkReal x6177=(cj5*sj0);
IkReal x6178=((1.0)*r11*sj5*sj6);
if( IKabs((((x6172*x6174))+((x6173*x6175))+((r12*x6171))+(((-1.0)*r02*x6177))+(((-1.0)*r11*sj6*x6175))+(((-1.0)*x6172*x6176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6174*x6175))+((x6175*x6176))+((x6172*x6173))+((r12*x6177))+((r02*x6171))+(((-1.0)*r11*sj6*x6172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6172*x6174))+((x6173*x6175))+((r12*x6171))+(((-1.0)*r02*x6177))+(((-1.0)*r11*sj6*x6175))+(((-1.0)*x6172*x6176))))+IKsqr(((((-1.0)*x6174*x6175))+((x6175*x6176))+((x6172*x6173))+((r12*x6177))+((r02*x6171))+(((-1.0)*r11*sj6*x6172))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x6172*x6174))+((x6173*x6175))+((r12*x6171))+(((-1.0)*r02*x6177))+(((-1.0)*r11*sj6*x6175))+(((-1.0)*x6172*x6176))), ((((-1.0)*x6174*x6175))+((x6175*x6176))+((x6172*x6173))+((r12*x6177))+((r02*x6171))+(((-1.0)*r11*sj6*x6172))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6179=IKcos(j3);
IkReal x6180=IKsin(j3);
IkReal x6181=((0.076)*sj6);
IkReal x6182=(sj5*sj6);
IkReal x6183=(cj4*cj5);
IkReal x6184=(sj4*sj6);
IkReal x6185=(cj4*sj5);
IkReal x6186=(cj6*sj4);
IkReal x6187=((1.0)*cj5);
IkReal x6188=((0.076)*cj6);
IkReal x6189=(cj0*x6179);
IkReal x6190=(sj0*x6179);
IkReal x6191=((1.0)*cj6*r10);
IkReal x6192=((1.0)*cj6*r00);
IkReal x6193=(cj0*x6180);
IkReal x6194=(sj0*x6180);
IkReal x6195=((1.0)*x6194);
evalcond[0]=((((-1.0)*sj5*x6191))+x6190+x6193+(((-1.0)*r12*x6187))+((r11*x6182)));
evalcond[1]=((((-1.0)*sj5*x6192))+(((-1.0)*x6195))+(((-1.0)*r02*x6187))+x6189+((r01*x6182)));
evalcond[2]=((((-1.0)*x6183*x6191))+(((-1.0)*x6195))+x6189+((r11*x6186))+((r10*x6184))+((r11*sj6*x6183))+((r12*x6185)));
evalcond[3]=((((-1.0)*x6183*x6192))+((r00*x6184))+((r01*x6186))+((r01*sj6*x6183))+(((-1.0)*x6190))+(((-1.0)*x6193))+((r02*x6185)));
evalcond[4]=(((r00*x6188))+(((-0.3425)*x6194))+(((-1.0)*r01*x6181))+(((-1.0)*px))+(((-0.293)*cj0))+(((0.3425)*x6189))+(((-0.0525)*sj0))+(((-0.0775)*x6190))+(((-0.0775)*x6193)));
evalcond[5]=((((0.0525)*cj0))+(((0.3425)*x6193))+(((0.3425)*x6190))+(((-1.0)*py))+(((-1.0)*r11*x6181))+(((0.0775)*x6189))+(((-0.0775)*x6194))+((r10*x6188))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6196=(cj5*r02);
IkReal x6197=((1.0)*sj0);
IkReal x6198=((1.0)*cj0);
IkReal x6199=(cj5*r12);
IkReal x6200=(r11*sj5*sj6);
IkReal x6201=(cj6*r10*sj5);
IkReal x6202=(cj6*r00*sj5);
IkReal x6203=(r01*sj5*sj6);
if( IKabs(((((-1.0)*x6197*x6203))+(((-1.0)*x6198*x6201))+((sj0*x6202))+((sj0*x6196))+(((-1.0)*x6198*x6199))+((cj0*x6200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6197*x6200))+(((-1.0)*x6198*x6203))+((sj0*x6201))+((sj0*x6199))+((cj0*x6202))+((cj0*x6196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6197*x6203))+(((-1.0)*x6198*x6201))+((sj0*x6202))+((sj0*x6196))+(((-1.0)*x6198*x6199))+((cj0*x6200))))+IKsqr(((((-1.0)*x6197*x6200))+(((-1.0)*x6198*x6203))+((sj0*x6201))+((sj0*x6199))+((cj0*x6202))+((cj0*x6196))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x6197*x6203))+(((-1.0)*x6198*x6201))+((sj0*x6202))+((sj0*x6196))+(((-1.0)*x6198*x6199))+((cj0*x6200))), ((((-1.0)*x6197*x6200))+(((-1.0)*x6198*x6203))+((sj0*x6201))+((sj0*x6199))+((cj0*x6202))+((cj0*x6196))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6204=IKcos(j3);
IkReal x6205=IKsin(j3);
IkReal x6206=((0.076)*sj6);
IkReal x6207=(sj5*sj6);
IkReal x6208=(cj4*cj5);
IkReal x6209=(sj4*sj6);
IkReal x6210=(cj4*sj5);
IkReal x6211=(cj6*sj4);
IkReal x6212=((1.0)*cj5);
IkReal x6213=((0.076)*cj6);
IkReal x6214=(sj0*x6204);
IkReal x6215=(sj0*x6205);
IkReal x6216=((1.0)*cj6*r10);
IkReal x6217=(cj0*x6204);
IkReal x6218=((1.0)*cj6*r00);
IkReal x6219=(cj0*x6205);
IkReal x6220=((1.0)*x6219);
evalcond[0]=(x6217+x6215+(((-1.0)*sj5*x6218))+((r01*x6207))+(((-1.0)*r02*x6212)));
evalcond[1]=(x6214+(((-1.0)*sj5*x6216))+(((-1.0)*x6220))+(((-1.0)*r12*x6212))+((r11*x6207)));
evalcond[2]=(x6214+(((-1.0)*x6220))+((r02*x6210))+((r00*x6209))+((r01*sj6*x6208))+(((-1.0)*x6208*x6218))+((r01*x6211)));
evalcond[3]=(((r12*x6210))+((r11*x6211))+(((-1.0)*x6208*x6216))+(((-1.0)*x6217))+(((-1.0)*x6215))+((r10*x6209))+((r11*sj6*x6208)));
evalcond[4]=((((0.3425)*x6215))+(((0.3425)*x6217))+(((0.0775)*x6214))+(((-0.0775)*x6219))+((r00*x6213))+(((-1.0)*px))+(((-0.293)*cj0))+(((0.0525)*sj0))+(((-1.0)*r01*x6206)));
evalcond[5]=((((-0.0525)*cj0))+(((0.3425)*x6214))+(((-0.3425)*x6219))+(((-0.0775)*x6217))+(((-0.0775)*x6215))+((r10*x6213))+(((-1.0)*py))+(((-1.0)*r11*x6206))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6221=(cj6*r00);
IkReal x6222=(cj5*r02);
IkReal x6223=((4.41935483870968)*sj5);
IkReal x6224=(r01*sj6);
if( IKabs(((-3.78064516129032)+(((-0.980645161290323)*x6221))+(((12.9032258064516)*px))+(((0.980645161290323)*x6224))+(((-4.41935483870968)*x6222))+((x6223*x6224))+(((-1.0)*x6221*x6223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6222))+((sj5*x6224))+(((-1.0)*sj5*x6221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-0.980645161290323)*x6221))+(((12.9032258064516)*px))+(((0.980645161290323)*x6224))+(((-4.41935483870968)*x6222))+((x6223*x6224))+(((-1.0)*x6221*x6223))))+IKsqr(((((-1.0)*x6222))+((sj5*x6224))+(((-1.0)*sj5*x6221))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-0.980645161290323)*x6221))+(((12.9032258064516)*px))+(((0.980645161290323)*x6224))+(((-4.41935483870968)*x6222))+((x6223*x6224))+(((-1.0)*x6221*x6223))), ((((-1.0)*x6222))+((sj5*x6224))+(((-1.0)*sj5*x6221))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6225=IKsin(j3);
IkReal x6226=IKcos(j3);
IkReal x6227=((0.076)*sj6);
IkReal x6228=(sj4*sj6);
IkReal x6229=(r11*sj6);
IkReal x6230=(cj4*cj5);
IkReal x6231=((1.0)*cj5);
IkReal x6232=(r21*sj6);
IkReal x6233=(cj4*sj5);
IkReal x6234=(r01*sj6);
IkReal x6235=(cj6*sj4);
IkReal x6236=((0.076)*cj6);
IkReal x6237=((0.0775)*x6226);
IkReal x6238=((1.0)*cj6*sj5);
IkReal x6239=(cj2*x6225);
IkReal x6240=(sj2*x6225);
IkReal x6241=((1.0)*x6226);
IkReal x6242=((1.0)*cj6*x6230);
evalcond[0]=((((-1.0)*r12*x6231))+x6240+(((-1.0)*r10*x6238))+((sj5*x6229)));
evalcond[1]=((((-1.0)*x6241))+(((-1.0)*r00*x6238))+(((-1.0)*r02*x6231))+((sj5*x6234)));
evalcond[2]=((((-1.0)*x6239))+(((-1.0)*r20*x6238))+(((-1.0)*r22*x6231))+((sj5*x6232)));
evalcond[3]=((0.293)+(((0.0775)*x6225))+(((-0.3425)*x6226))+(((-1.0)*r01*x6227))+(((-1.0)*px))+((r00*x6236)));
evalcond[4]=(((r20*x6236))+(((-0.0525)*cj2))+(((-1.0)*cj2*x6237))+(((-1.0)*r21*x6227))+(((-1.0)*pz))+(((-0.3425)*x6239)));
evalcond[5]=(((x6230*x6234))+((r02*x6233))+x6225+(((-1.0)*r00*x6242))+((r00*x6228))+((r01*x6235)));
evalcond[6]=((((0.3425)*x6240))+(((-1.0)*r11*x6227))+(((-1.0)*py))+((r10*x6236))+((sj2*x6237))+(((0.0525)*sj2)));
evalcond[7]=(((r12*x6233))+(((-1.0)*r10*x6242))+((x6229*x6230))+((r10*x6228))+((sj2*x6226))+((r11*x6235)));
evalcond[8]=(((x6230*x6232))+((r20*x6228))+(((-1.0)*cj2*x6241))+((r21*x6235))+((r22*x6233))+(((-1.0)*r20*x6242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6243=(cj6*r00);
IkReal x6244=(cj5*r02);
IkReal x6245=(r01*sj6);
IkReal x6246=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-12.9032258064516)*px))+(((-0.980645161290323)*x6245))+((x6243*x6246))+(((0.980645161290323)*x6243))+(((-1.0)*x6245*x6246))+(((4.41935483870968)*x6244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6244+((sj5*x6243))+(((-1.0)*sj5*x6245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-12.9032258064516)*px))+(((-0.980645161290323)*x6245))+((x6243*x6246))+(((0.980645161290323)*x6243))+(((-1.0)*x6245*x6246))+(((4.41935483870968)*x6244))))+IKsqr((x6244+((sj5*x6243))+(((-1.0)*sj5*x6245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-12.9032258064516)*px))+(((-0.980645161290323)*x6245))+((x6243*x6246))+(((0.980645161290323)*x6243))+(((-1.0)*x6245*x6246))+(((4.41935483870968)*x6244))), (x6244+((sj5*x6243))+(((-1.0)*sj5*x6245))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6247=IKsin(j3);
IkReal x6248=IKcos(j3);
IkReal x6249=(sj4*sj6);
IkReal x6250=((1.0)*cj6);
IkReal x6251=(cj4*cj5);
IkReal x6252=((0.076)*sj6);
IkReal x6253=(r11*sj6);
IkReal x6254=((1.0)*cj5);
IkReal x6255=(r21*sj6);
IkReal x6256=(cj4*sj5);
IkReal x6257=(r01*sj6);
IkReal x6258=(cj6*sj4);
IkReal x6259=((0.076)*cj6);
IkReal x6260=((0.0775)*x6248);
IkReal x6261=((1.0)*x6247);
IkReal x6262=((1.0)*x6248);
IkReal x6263=((0.3425)*x6247);
evalcond[0]=(x6248+(((-1.0)*r02*x6254))+((sj5*x6257))+(((-1.0)*r00*sj5*x6250)));
evalcond[1]=((((-1.0)*cj2*x6261))+((sj5*x6255))+(((-1.0)*r22*x6254))+(((-1.0)*r20*sj5*x6250)));
evalcond[2]=((((-1.0)*sj2*x6261))+((sj5*x6253))+(((-1.0)*r10*sj5*x6250))+(((-1.0)*r12*x6254)));
evalcond[3]=((-0.293)+(((-0.0775)*x6247))+(((0.3425)*x6248))+((r00*x6259))+(((-1.0)*px))+(((-1.0)*r01*x6252)));
evalcond[4]=((((-0.0525)*cj2))+(((-1.0)*cj2*x6263))+(((-1.0)*cj2*x6260))+(((-1.0)*pz))+((r20*x6259))+(((-1.0)*r21*x6252)));
evalcond[5]=((((-1.0)*sj2*x6263))+(((-1.0)*sj2*x6260))+((r10*x6259))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-1.0)*r11*x6252)));
evalcond[6]=(((r01*x6258))+((x6251*x6257))+((r02*x6256))+(((-1.0)*x6261))+(((-1.0)*r00*x6250*x6251))+((r00*x6249)));
evalcond[7]=((((-1.0)*r20*x6250*x6251))+((r22*x6256))+((x6251*x6255))+(((-1.0)*cj2*x6262))+((r20*x6249))+((r21*x6258)));
evalcond[8]=(((x6251*x6253))+((r10*x6249))+(((-1.0)*r10*x6250*x6251))+(((-1.0)*sj2*x6262))+((r12*x6256))+((r11*x6258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6264=(cj6*r00);
IkReal x6265=(cj5*r02);
IkReal x6266=(r01*sj6);
IkReal x6267=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((4.41935483870968)*x6265))+(((-1.0)*x6266*x6267))+(((0.980645161290323)*x6264))+(((-12.9032258064516)*px))+((x6264*x6267))+(((-0.980645161290323)*x6266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x6266))+x6265+((sj5*x6264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((4.41935483870968)*x6265))+(((-1.0)*x6266*x6267))+(((0.980645161290323)*x6264))+(((-12.9032258064516)*px))+((x6264*x6267))+(((-0.980645161290323)*x6266))))+IKsqr(((((-1.0)*sj5*x6266))+x6265+((sj5*x6264))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((4.41935483870968)*x6265))+(((-1.0)*x6266*x6267))+(((0.980645161290323)*x6264))+(((-12.9032258064516)*px))+((x6264*x6267))+(((-0.980645161290323)*x6266))), ((((-1.0)*sj5*x6266))+x6265+((sj5*x6264))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6268=IKsin(j3);
IkReal x6269=IKcos(j3);
IkReal x6270=(sj4*sj6);
IkReal x6271=((1.0)*cj6);
IkReal x6272=(cj4*cj5);
IkReal x6273=((0.076)*sj6);
IkReal x6274=(r11*sj6);
IkReal x6275=((1.0)*cj5);
IkReal x6276=(r21*sj6);
IkReal x6277=(cj4*sj5);
IkReal x6278=(r01*sj6);
IkReal x6279=(cj6*sj4);
IkReal x6280=((0.076)*cj6);
IkReal x6281=((0.0775)*x6269);
IkReal x6282=(cj2*x6268);
IkReal x6283=(sj2*x6268);
evalcond[0]=(x6269+(((-1.0)*r02*x6275))+((sj5*x6278))+(((-1.0)*r00*sj5*x6271)));
evalcond[1]=(x6282+(((-1.0)*r20*sj5*x6271))+((sj5*x6276))+(((-1.0)*r22*x6275)));
evalcond[2]=((((-1.0)*r10*sj5*x6271))+x6283+((sj5*x6274))+(((-1.0)*r12*x6275)));
evalcond[3]=((-0.293)+(((-1.0)*r01*x6273))+(((-0.0775)*x6268))+(((-1.0)*px))+(((0.3425)*x6269))+((r00*x6280)));
evalcond[4]=((((-1.0)*r21*x6273))+(((0.0525)*cj2))+(((-1.0)*pz))+((r20*x6280))+((cj2*x6281))+(((0.3425)*x6282)));
evalcond[5]=(((sj2*x6281))+(((-1.0)*py))+(((0.3425)*x6283))+(((-1.0)*r11*x6273))+((r10*x6280))+(((0.0525)*sj2)));
evalcond[6]=(((r22*x6277))+(((-1.0)*r20*x6271*x6272))+((r21*x6279))+((cj2*x6269))+((r20*x6270))+((x6272*x6276)));
evalcond[7]=(((r12*x6277))+(((-1.0)*r10*x6271*x6272))+((sj2*x6269))+((r10*x6270))+((r11*x6279))+((x6272*x6274)));
evalcond[8]=((((-1.0)*r00*x6271*x6272))+((r00*x6270))+((r01*x6279))+(((-1.0)*x6268))+((r02*x6277))+((x6272*x6278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6284=(cj6*r00);
IkReal x6285=(cj5*r02);
IkReal x6286=((4.41935483870968)*sj5);
IkReal x6287=(r01*sj6);
if( IKabs(((-3.78064516129032)+(((-4.41935483870968)*x6285))+(((-1.0)*x6284*x6286))+(((12.9032258064516)*px))+(((-0.980645161290323)*x6284))+((x6286*x6287))+(((0.980645161290323)*x6287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x6287))+(((-1.0)*sj5*x6284))+(((-1.0)*x6285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-4.41935483870968)*x6285))+(((-1.0)*x6284*x6286))+(((12.9032258064516)*px))+(((-0.980645161290323)*x6284))+((x6286*x6287))+(((0.980645161290323)*x6287))))+IKsqr((((sj5*x6287))+(((-1.0)*sj5*x6284))+(((-1.0)*x6285))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-4.41935483870968)*x6285))+(((-1.0)*x6284*x6286))+(((12.9032258064516)*px))+(((-0.980645161290323)*x6284))+((x6286*x6287))+(((0.980645161290323)*x6287))), (((sj5*x6287))+(((-1.0)*sj5*x6284))+(((-1.0)*x6285))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6288=IKsin(j3);
IkReal x6289=IKcos(j3);
IkReal x6290=(sj4*sj6);
IkReal x6291=((1.0)*cj6);
IkReal x6292=(cj4*cj5);
IkReal x6293=((0.076)*sj6);
IkReal x6294=((1.0)*sj2);
IkReal x6295=(r11*sj6);
IkReal x6296=((1.0)*cj5);
IkReal x6297=(r21*sj6);
IkReal x6298=(cj4*sj5);
IkReal x6299=(r01*sj6);
IkReal x6300=(cj6*sj4);
IkReal x6301=((0.076)*cj6);
IkReal x6302=((0.0775)*x6289);
IkReal x6303=(cj2*x6288);
evalcond[0]=(x6303+(((-1.0)*r20*sj5*x6291))+(((-1.0)*r22*x6296))+((sj5*x6297)));
evalcond[1]=((((-1.0)*r02*x6296))+((sj5*x6299))+(((-1.0)*r00*sj5*x6291))+(((-1.0)*x6289)));
evalcond[2]=((((-1.0)*x6288*x6294))+((sj5*x6295))+(((-1.0)*r10*sj5*x6291))+(((-1.0)*r12*x6296)));
evalcond[3]=((0.293)+(((-1.0)*r01*x6293))+((r00*x6301))+(((-1.0)*px))+(((-0.3425)*x6289))+(((0.0775)*x6288)));
evalcond[4]=((((0.0525)*cj2))+(((-1.0)*r21*x6293))+(((-1.0)*pz))+((cj2*x6302))+((r20*x6301))+(((0.3425)*x6303)));
evalcond[5]=(((r00*x6290))+x6288+((r01*x6300))+(((-1.0)*r00*x6291*x6292))+((x6292*x6299))+((r02*x6298)));
evalcond[6]=((((-1.0)*sj2*x6302))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-1.0)*r11*x6293))+((r10*x6301))+(((-0.3425)*sj2*x6288)));
evalcond[7]=(((r22*x6298))+(((-1.0)*r20*x6291*x6292))+((r21*x6300))+((x6292*x6297))+((r20*x6290))+((cj2*x6289)));
evalcond[8]=((((-1.0)*r10*x6291*x6292))+((x6292*x6295))+(((-1.0)*x6289*x6294))+((r11*x6300))+((r12*x6298))+((r10*x6290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6304=(sj1*sj5);
IkReal x6305=(r21*sj6);
IkReal x6306=((1.0)*cj6);
IkReal x6307=(r01*sj6);
IkReal x6308=(cj1*sj5);
IkReal x6309=(cj1*cj5);
IkReal x6310=((1.0)*cj5*sj1);
if( IKabs(((((-1.0)*r22*x6310))+(((-1.0)*r20*x6304*x6306))+((cj6*r00*x6308))+((r02*x6309))+((x6304*x6305))+(((-1.0)*x6307*x6308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x6309))+(((-1.0)*r02*x6310))+(((-1.0)*r00*x6304*x6306))+(((-1.0)*r20*x6306*x6308))+((x6304*x6307))+((x6305*x6308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x6310))+(((-1.0)*r20*x6304*x6306))+((cj6*r00*x6308))+((r02*x6309))+((x6304*x6305))+(((-1.0)*x6307*x6308))))+IKsqr(((((-1.0)*r22*x6309))+(((-1.0)*r02*x6310))+(((-1.0)*r00*x6304*x6306))+(((-1.0)*r20*x6306*x6308))+((x6304*x6307))+((x6305*x6308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r22*x6310))+(((-1.0)*r20*x6304*x6306))+((cj6*r00*x6308))+((r02*x6309))+((x6304*x6305))+(((-1.0)*x6307*x6308))), ((((-1.0)*r22*x6309))+(((-1.0)*r02*x6310))+(((-1.0)*r00*x6304*x6306))+(((-1.0)*r20*x6306*x6308))+((x6304*x6307))+((x6305*x6308))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6311=IKcos(j3);
IkReal x6312=IKsin(j3);
IkReal x6313=(r21*sj6);
IkReal x6314=(r01*sj6);
IkReal x6315=((1.0)*cj5);
IkReal x6316=(cj6*r20);
IkReal x6317=((1.0)*sj5);
IkReal x6318=(sj4*sj6);
IkReal x6319=(cj6*r00);
IkReal x6320=(cj6*sj4);
IkReal x6321=(cj4*cj5);
IkReal x6322=(cj4*sj5);
IkReal x6323=(cj1*x6312);
IkReal x6324=(sj1*x6312);
IkReal x6325=(sj1*x6311);
IkReal x6326=(cj1*x6311);
IkReal x6327=((1.0)*x6325);
evalcond[0]=(x6323+(((-1.0)*r02*x6315))+((sj5*x6314))+(((-1.0)*x6327))+(((-1.0)*x6317*x6319)));
evalcond[1]=((((-1.0)*x6324))+(((-1.0)*x6326))+(((-1.0)*r22*x6315))+((sj5*x6313))+(((-1.0)*x6316*x6317)));
evalcond[2]=(((r02*x6322))+x6326+x6324+((r00*x6318))+((x6314*x6321))+((r01*x6320))+(((-1.0)*cj4*x6315*x6319)));
evalcond[3]=(((r20*x6318))+x6323+((x6313*x6321))+(((-1.0)*x6327))+(((-1.0)*cj4*x6315*x6316))+((r22*x6322))+((r21*x6320)));
evalcond[4]=((((-0.076)*x6313))+(((0.0775)*x6323))+(((0.076)*x6316))+(((-0.0775)*x6325))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((-0.3425)*x6326))+(((-0.3425)*x6324)));
evalcond[5]=((((0.0525)*cj1))+(((-0.076)*x6314))+(((0.0775)*x6326))+(((0.0775)*x6324))+(((0.076)*x6319))+(((-1.0)*px))+(((0.293)*sj1))+(((0.3425)*x6323))+(((-0.3425)*x6325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6328=(sj5*sj6);
IkReal x6329=((1.0)*sj1);
IkReal x6330=(cj5*r22);
IkReal x6331=(cj6*sj5);
IkReal x6332=(cj5*r02);
IkReal x6333=((1.0)*cj1);
if( IKabs((((cj1*r01*x6328))+((sj1*x6330))+(((-1.0)*r21*x6328*x6329))+((r20*sj1*x6331))+(((-1.0)*r00*x6331*x6333))+(((-1.0)*x6332*x6333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x6328))+(((-1.0)*x6330*x6333))+((cj1*r21*x6328))+(((-1.0)*r00*x6329*x6331))+(((-1.0)*r20*x6331*x6333))+(((-1.0)*x6329*x6332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x6328))+((sj1*x6330))+(((-1.0)*r21*x6328*x6329))+((r20*sj1*x6331))+(((-1.0)*r00*x6331*x6333))+(((-1.0)*x6332*x6333))))+IKsqr((((r01*sj1*x6328))+(((-1.0)*x6330*x6333))+((cj1*r21*x6328))+(((-1.0)*r00*x6329*x6331))+(((-1.0)*r20*x6331*x6333))+(((-1.0)*x6329*x6332))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r01*x6328))+((sj1*x6330))+(((-1.0)*r21*x6328*x6329))+((r20*sj1*x6331))+(((-1.0)*r00*x6331*x6333))+(((-1.0)*x6332*x6333))), (((r01*sj1*x6328))+(((-1.0)*x6330*x6333))+((cj1*r21*x6328))+(((-1.0)*r00*x6329*x6331))+(((-1.0)*r20*x6331*x6333))+(((-1.0)*x6329*x6332))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6334=IKsin(j3);
IkReal x6335=IKcos(j3);
IkReal x6336=(r21*sj6);
IkReal x6337=(r01*sj6);
IkReal x6338=((1.0)*cj5);
IkReal x6339=(cj6*r20);
IkReal x6340=(sj4*sj6);
IkReal x6341=((1.0)*sj5);
IkReal x6342=(cj6*r00);
IkReal x6343=(cj6*sj4);
IkReal x6344=(cj4*cj5);
IkReal x6345=(cj4*sj5);
IkReal x6346=(sj1*x6334);
IkReal x6347=(cj1*x6334);
IkReal x6348=(sj1*x6335);
IkReal x6349=(cj1*x6335);
IkReal x6350=((1.0)*x6349);
evalcond[0]=(((sj5*x6336))+x6346+(((-1.0)*x6339*x6341))+(((-1.0)*x6350))+(((-1.0)*r22*x6338)));
evalcond[1]=(((sj5*x6337))+(((-1.0)*x6341*x6342))+(((-1.0)*x6347))+(((-1.0)*x6348))+(((-1.0)*r02*x6338)));
evalcond[2]=(x6347+x6348+((r22*x6345))+(((-1.0)*cj4*x6338*x6339))+((x6336*x6344))+((r21*x6343))+((r20*x6340)));
evalcond[3]=(((x6337*x6344))+x6346+((r02*x6345))+(((-1.0)*x6350))+(((-1.0)*cj4*x6338*x6342))+((r00*x6340))+((r01*x6343)));
evalcond[4]=((((0.076)*x6339))+(((-0.3425)*x6349))+(((0.3425)*x6346))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x6347))+(((0.0775)*x6348))+(((-0.076)*x6336))+(((0.0525)*sj1)));
evalcond[5]=((((0.076)*x6342))+(((-0.0525)*cj1))+(((-0.3425)*x6348))+(((-0.3425)*x6347))+(((-1.0)*px))+(((0.293)*sj1))+(((-0.0775)*x6349))+(((0.0775)*x6346))+(((-0.076)*x6337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6351=(cj6*r00);
IkReal x6352=(cj5*r02);
IkReal x6353=((4.41935483870968)*sj5);
IkReal x6354=(r01*sj6);
if( IKabs(((((-1.0)*x6352))+(((-1.0)*sj5*x6351))+((sj5*x6354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((0.980645161290323)*x6351))+(((-12.9032258064516)*px))+(((-0.980645161290323)*x6354))+(((-1.0)*x6353*x6354))+(((4.41935483870968)*x6352))+((x6351*x6353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6352))+(((-1.0)*sj5*x6351))+((sj5*x6354))))+IKsqr(((-0.67741935483871)+(((0.980645161290323)*x6351))+(((-12.9032258064516)*px))+(((-0.980645161290323)*x6354))+(((-1.0)*x6353*x6354))+(((4.41935483870968)*x6352))+((x6351*x6353))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x6352))+(((-1.0)*sj5*x6351))+((sj5*x6354))), ((-0.67741935483871)+(((0.980645161290323)*x6351))+(((-12.9032258064516)*px))+(((-0.980645161290323)*x6354))+(((-1.0)*x6353*x6354))+(((4.41935483870968)*x6352))+((x6351*x6353))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6355=IKcos(j3);
IkReal x6356=IKsin(j3);
IkReal x6357=(sj4*sj6);
IkReal x6358=(cj4*sj5);
IkReal x6359=((0.076)*sj6);
IkReal x6360=(cj4*cj5);
IkReal x6361=(r11*sj6);
IkReal x6362=((1.0)*cj5);
IkReal x6363=(r21*sj6);
IkReal x6364=(r01*sj6);
IkReal x6365=(cj6*sj4);
IkReal x6366=((0.076)*cj6);
IkReal x6367=(cj1*x6356);
IkReal x6368=((1.0)*cj6*r10);
IkReal x6369=((0.3425)*x6355);
IkReal x6370=((1.0)*cj6*r20);
IkReal x6371=((1.0)*x6355);
IkReal x6372=((1.0)*cj6*r00);
IkReal x6373=(sj1*x6356);
evalcond[0]=((((-1.0)*r02*x6362))+(((-1.0)*sj5*x6372))+(((-1.0)*x6356))+((sj5*x6364)));
evalcond[1]=((((-1.0)*sj5*x6370))+(((-1.0)*cj1*x6371))+((sj5*x6363))+(((-1.0)*r22*x6362)));
evalcond[2]=((((-1.0)*sj5*x6368))+(((-1.0)*sj1*x6371))+((sj5*x6361))+(((-1.0)*r12*x6362)));
evalcond[3]=((-0.0525)+(((-1.0)*r01*x6359))+(((-0.0775)*x6355))+((r00*x6366))+(((-1.0)*px))+(((-0.3425)*x6356)));
evalcond[4]=((((-1.0)*r21*x6359))+((r20*x6366))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*cj1*x6369))+(((0.0775)*x6367)));
evalcond[5]=((((-1.0)*py))+(((0.293)*sj1))+(((-1.0)*r11*x6359))+(((-1.0)*sj1*x6369))+(((0.0775)*x6373))+((r10*x6366)));
evalcond[6]=(x6367+((r20*x6357))+((x6360*x6363))+(((-1.0)*x6360*x6370))+((r22*x6358))+((r21*x6365)));
evalcond[7]=(((r10*x6357))+x6373+(((-1.0)*x6360*x6368))+((x6360*x6361))+((r11*x6365))+((r12*x6358)));
evalcond[8]=(((r01*x6365))+((r00*x6357))+((x6360*x6364))+(((-1.0)*x6360*x6372))+(((-1.0)*x6371))+((r02*x6358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6374=(cj6*r00);
IkReal x6375=(cj5*r02);
IkReal x6376=(r01*sj6);
IkReal x6377=((4.41935483870968)*sj5);
if( IKabs((x6375+(((-1.0)*sj5*x6376))+((sj5*x6374)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((12.9032258064516)*px))+(((0.980645161290323)*x6376))+(((-0.980645161290323)*x6374))+(((-1.0)*x6374*x6377))+(((-4.41935483870968)*x6375))+((x6376*x6377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6375+(((-1.0)*sj5*x6376))+((sj5*x6374))))+IKsqr(((-0.67741935483871)+(((12.9032258064516)*px))+(((0.980645161290323)*x6376))+(((-0.980645161290323)*x6374))+(((-1.0)*x6374*x6377))+(((-4.41935483870968)*x6375))+((x6376*x6377))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x6375+(((-1.0)*sj5*x6376))+((sj5*x6374))), ((-0.67741935483871)+(((12.9032258064516)*px))+(((0.980645161290323)*x6376))+(((-0.980645161290323)*x6374))+(((-1.0)*x6374*x6377))+(((-4.41935483870968)*x6375))+((x6376*x6377))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6378=IKcos(j3);
IkReal x6379=IKsin(j3);
IkReal x6380=(sj4*sj6);
IkReal x6381=((0.076)*sj6);
IkReal x6382=(cj4*cj5);
IkReal x6383=(r11*sj6);
IkReal x6384=((1.0)*cj5);
IkReal x6385=(r21*sj6);
IkReal x6386=(cj4*sj5);
IkReal x6387=(r01*sj6);
IkReal x6388=(cj6*sj4);
IkReal x6389=((0.076)*cj6);
IkReal x6390=(cj1*x6379);
IkReal x6391=((0.3425)*x6378);
IkReal x6392=((1.0)*cj6*r10);
IkReal x6393=((1.0)*cj6*r20);
IkReal x6394=((1.0)*x6378);
IkReal x6395=((1.0)*cj6*r00);
IkReal x6396=(sj1*x6379);
evalcond[0]=(x6379+((sj5*x6387))+(((-1.0)*sj5*x6395))+(((-1.0)*r02*x6384)));
evalcond[1]=(((sj5*x6385))+(((-1.0)*r22*x6384))+(((-1.0)*sj5*x6393))+(((-1.0)*cj1*x6394)));
evalcond[2]=((((-1.0)*r12*x6384))+((sj5*x6383))+(((-1.0)*sj1*x6394))+(((-1.0)*sj5*x6392)));
evalcond[3]=((0.0525)+(((-1.0)*px))+(((-1.0)*r01*x6381))+(((0.3425)*x6379))+((r00*x6389))+(((0.0775)*x6378)));
evalcond[4]=((((0.0775)*x6390))+(((-1.0)*pz))+(((-1.0)*r21*x6381))+(((0.293)*cj1))+(((-1.0)*cj1*x6391))+((r20*x6389)));
evalcond[5]=((((-1.0)*x6382*x6395))+x6378+((r02*x6386))+((r00*x6380))+((r01*x6388))+((x6382*x6387)));
evalcond[6]=((((0.0775)*x6396))+((r10*x6389))+(((-1.0)*r11*x6381))+(((-1.0)*py))+(((-1.0)*sj1*x6391))+(((0.293)*sj1)));
evalcond[7]=((((-1.0)*x6382*x6393))+x6390+((r22*x6386))+((r21*x6388))+((r20*x6380))+((x6382*x6385)));
evalcond[8]=((((-1.0)*x6382*x6392))+x6396+((r10*x6380))+((r12*x6386))+((r11*x6388))+((x6382*x6383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6397=(sj5*sj6);
IkReal x6398=((1.0)*sj1);
IkReal x6399=(cj6*sj5);
IkReal x6400=((1.0)*cj1);
IkReal x6401=(cj5*r02);
IkReal x6402=(cj5*r22);
if( IKabs(((((-1.0)*x6400*x6401))+((cj1*r01*x6397))+(((-1.0)*r00*x6399*x6400))+(((-1.0)*r20*x6398*x6399))+((r21*sj1*x6397))+(((-1.0)*x6398*x6402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x6401))+(((-1.0)*x6400*x6402))+((cj1*r21*x6397))+(((-1.0)*r01*x6397*x6398))+(((-1.0)*r20*x6399*x6400))+((r00*sj1*x6399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6400*x6401))+((cj1*r01*x6397))+(((-1.0)*r00*x6399*x6400))+(((-1.0)*r20*x6398*x6399))+((r21*sj1*x6397))+(((-1.0)*x6398*x6402))))+IKsqr((((sj1*x6401))+(((-1.0)*x6400*x6402))+((cj1*r21*x6397))+(((-1.0)*r01*x6397*x6398))+(((-1.0)*r20*x6399*x6400))+((r00*sj1*x6399))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x6400*x6401))+((cj1*r01*x6397))+(((-1.0)*r00*x6399*x6400))+(((-1.0)*r20*x6398*x6399))+((r21*sj1*x6397))+(((-1.0)*x6398*x6402))), (((sj1*x6401))+(((-1.0)*x6400*x6402))+((cj1*r21*x6397))+(((-1.0)*r01*x6397*x6398))+(((-1.0)*r20*x6399*x6400))+((r00*sj1*x6399))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6403=IKcos(j3);
IkReal x6404=IKsin(j3);
IkReal x6405=(r21*sj6);
IkReal x6406=(r01*sj6);
IkReal x6407=((1.0)*cj5);
IkReal x6408=(cj6*r20);
IkReal x6409=(sj4*sj6);
IkReal x6410=((1.0)*sj5);
IkReal x6411=(cj6*r00);
IkReal x6412=(cj6*sj4);
IkReal x6413=(cj4*cj5);
IkReal x6414=(cj4*sj5);
IkReal x6415=(sj1*x6403);
IkReal x6416=(cj1*x6403);
IkReal x6417=(cj1*x6404);
IkReal x6418=(sj1*x6404);
IkReal x6419=((1.0)*x6416);
IkReal x6420=((1.0)*x6418);
IkReal x6421=(x6419+x6420);
evalcond[0]=(x6415+(((-1.0)*r02*x6407))+(((-1.0)*x6417))+(((-1.0)*x6410*x6411))+((sj5*x6406)));
evalcond[1]=((((-1.0)*x6408*x6410))+(((-1.0)*x6421))+(((-1.0)*r22*x6407))+((sj5*x6405)));
evalcond[2]=(((r20*x6409))+((r21*x6412))+(((-1.0)*cj4*x6407*x6408))+x6417+((x6405*x6413))+(((-1.0)*x6415))+((r22*x6414)));
evalcond[3]=(((r02*x6414))+(((-1.0)*cj4*x6407*x6411))+((r00*x6409))+((r01*x6412))+((x6406*x6413))+(((-1.0)*x6421)));
evalcond[4]=((((-0.3425)*x6418))+(((-0.3425)*x6416))+(((-0.076)*x6405))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x6417))+(((-0.0525)*sj1))+(((-0.0775)*x6415))+(((0.076)*x6408)));
evalcond[5]=((((0.3425)*x6415))+(((-0.0525)*cj1))+(((-0.3425)*x6417))+(((-0.076)*x6406))+(((-1.0)*px))+(((-0.0775)*x6418))+(((-0.0775)*x6416))+(((0.076)*x6411))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6422=(cj6*sj5);
IkReal x6423=((1.0)*cj1);
IkReal x6424=(cj5*sj1);
IkReal x6425=(sj5*sj6);
IkReal x6426=((1.0)*sj1*x6425);
if( IKabs((((cj1*r00*x6422))+((cj1*cj5*r02))+((r20*sj1*x6422))+(((-1.0)*r01*x6423*x6425))+(((-1.0)*r21*x6426))+((r22*x6424)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x6424))+((r00*sj1*x6422))+(((-1.0)*cj5*r22*x6423))+(((-1.0)*r20*x6422*x6423))+(((-1.0)*r01*x6426))+((cj1*r21*x6425)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r00*x6422))+((cj1*cj5*r02))+((r20*sj1*x6422))+(((-1.0)*r01*x6423*x6425))+(((-1.0)*r21*x6426))+((r22*x6424))))+IKsqr((((r02*x6424))+((r00*sj1*x6422))+(((-1.0)*cj5*r22*x6423))+(((-1.0)*r20*x6422*x6423))+(((-1.0)*r01*x6426))+((cj1*r21*x6425))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r00*x6422))+((cj1*cj5*r02))+((r20*sj1*x6422))+(((-1.0)*r01*x6423*x6425))+(((-1.0)*r21*x6426))+((r22*x6424))), (((r02*x6424))+((r00*sj1*x6422))+(((-1.0)*cj5*r22*x6423))+(((-1.0)*r20*x6422*x6423))+(((-1.0)*r01*x6426))+((cj1*r21*x6425))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6427=IKsin(j3);
IkReal x6428=IKcos(j3);
IkReal x6429=(r21*sj6);
IkReal x6430=((1.0)*cj5);
IkReal x6431=(r01*sj6);
IkReal x6432=(cj6*r20);
IkReal x6433=(sj4*sj6);
IkReal x6434=((1.0)*sj5);
IkReal x6435=(cj6*r00);
IkReal x6436=(cj6*sj4);
IkReal x6437=(cj4*cj5);
IkReal x6438=(cj4*sj5);
IkReal x6439=(sj1*x6428);
IkReal x6440=(cj1*x6427);
IkReal x6441=(cj1*x6428);
IkReal x6442=(sj1*x6427);
IkReal x6443=(x6440+x6439);
evalcond[0]=((((-1.0)*r02*x6430))+(((-1.0)*x6434*x6435))+x6443+((sj5*x6431)));
evalcond[1]=(((sj5*x6429))+(((-1.0)*x6441))+(((-1.0)*r22*x6430))+x6442+(((-1.0)*x6432*x6434)));
evalcond[2]=(((r22*x6438))+((x6429*x6437))+x6443+((r20*x6433))+((r21*x6436))+(((-1.0)*cj4*x6430*x6432)));
evalcond[3]=(((r01*x6436))+(((-1.0)*x6442))+x6441+((r02*x6438))+((x6431*x6437))+(((-1.0)*cj4*x6430*x6435))+((r00*x6433)));
evalcond[4]=((((0.3425)*x6442))+(((0.0775)*x6440))+(((0.076)*x6432))+(((-1.0)*pz))+(((-0.076)*x6429))+(((0.293)*cj1))+(((0.0525)*sj1))+(((0.0775)*x6439))+(((-0.3425)*x6441)));
evalcond[5]=((((-0.076)*x6431))+(((0.0525)*cj1))+(((0.3425)*x6440))+(((0.0775)*x6441))+(((0.076)*x6435))+(((-0.0775)*x6442))+(((-1.0)*px))+(((0.3425)*x6439))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6444=(cj6*r00);
IkReal x6445=(cj5*r02);
IkReal x6446=(r01*sj6);
IkReal x6447=((4.41935483870968)*sj5);
if( IKabs((x6445+((sj5*x6444))+(((-1.0)*sj5*x6446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((12.9032258064516)*px))+(((-0.980645161290323)*x6444))+((x6446*x6447))+(((-4.41935483870968)*x6445))+(((-1.0)*x6444*x6447))+(((0.980645161290323)*x6446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6445+((sj5*x6444))+(((-1.0)*sj5*x6446))))+IKsqr(((-0.67741935483871)+(((12.9032258064516)*px))+(((-0.980645161290323)*x6444))+((x6446*x6447))+(((-4.41935483870968)*x6445))+(((-1.0)*x6444*x6447))+(((0.980645161290323)*x6446))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x6445+((sj5*x6444))+(((-1.0)*sj5*x6446))), ((-0.67741935483871)+(((12.9032258064516)*px))+(((-0.980645161290323)*x6444))+((x6446*x6447))+(((-4.41935483870968)*x6445))+(((-1.0)*x6444*x6447))+(((0.980645161290323)*x6446))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6448=IKcos(j3);
IkReal x6449=IKsin(j3);
IkReal x6450=(sj4*sj6);
IkReal x6451=((0.076)*sj6);
IkReal x6452=(cj4*cj5);
IkReal x6453=(r11*sj6);
IkReal x6454=((1.0)*cj5);
IkReal x6455=(r21*sj6);
IkReal x6456=(cj4*sj5);
IkReal x6457=(r01*sj6);
IkReal x6458=(cj6*sj4);
IkReal x6459=((0.076)*cj6);
IkReal x6460=(cj1*x6449);
IkReal x6461=((0.3425)*x6448);
IkReal x6462=((1.0)*cj6*r10);
IkReal x6463=((1.0)*cj6*r20);
IkReal x6464=((1.0)*cj6*r00);
IkReal x6465=(sj1*x6449);
evalcond[0]=((((-1.0)*r02*x6454))+x6449+(((-1.0)*sj5*x6464))+((sj5*x6457)));
evalcond[1]=(((sj1*x6448))+(((-1.0)*r12*x6454))+(((-1.0)*sj5*x6462))+((sj5*x6453)));
evalcond[2]=((((-1.0)*cj1*x6448))+(((-1.0)*sj5*x6463))+((sj5*x6455))+(((-1.0)*r22*x6454)));
evalcond[3]=((0.0525)+((r00*x6459))+(((0.3425)*x6449))+(((0.0775)*x6448))+(((-1.0)*px))+(((-1.0)*r01*x6451)));
evalcond[4]=((((-1.0)*cj1*x6461))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x6460))+((r20*x6459))+(((-1.0)*r21*x6451)));
evalcond[5]=(((r01*x6458))+((r00*x6450))+x6448+((x6452*x6457))+(((-1.0)*x6452*x6464))+((r02*x6456)));
evalcond[6]=(((sj1*x6461))+(((-1.0)*r11*x6451))+(((-1.0)*py))+(((-0.0775)*x6465))+(((-0.293)*sj1))+((r10*x6459)));
evalcond[7]=(x6460+((r21*x6458))+((x6452*x6455))+((r22*x6456))+(((-1.0)*x6452*x6463))+((r20*x6450)));
evalcond[8]=(((r11*x6458))+((x6452*x6453))+(((-1.0)*x6452*x6462))+(((-1.0)*x6465))+((r10*x6450))+((r12*x6456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6466=(cj6*r00);
IkReal x6467=(cj5*r02);
IkReal x6468=((4.41935483870968)*sj5);
IkReal x6469=(r01*sj6);
if( IKabs(((((-1.0)*sj5*x6466))+(((-1.0)*x6467))+((sj5*x6469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((4.41935483870968)*x6467))+(((-1.0)*x6468*x6469))+(((-12.9032258064516)*px))+(((-0.980645161290323)*x6469))+((x6466*x6468))+(((0.980645161290323)*x6466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x6466))+(((-1.0)*x6467))+((sj5*x6469))))+IKsqr(((-0.67741935483871)+(((4.41935483870968)*x6467))+(((-1.0)*x6468*x6469))+(((-12.9032258064516)*px))+(((-0.980645161290323)*x6469))+((x6466*x6468))+(((0.980645161290323)*x6466))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x6466))+(((-1.0)*x6467))+((sj5*x6469))), ((-0.67741935483871)+(((4.41935483870968)*x6467))+(((-1.0)*x6468*x6469))+(((-12.9032258064516)*px))+(((-0.980645161290323)*x6469))+((x6466*x6468))+(((0.980645161290323)*x6466))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6470=IKcos(j3);
IkReal x6471=IKsin(j3);
IkReal x6472=(sj4*sj6);
IkReal x6473=(cj4*sj5);
IkReal x6474=((0.076)*sj6);
IkReal x6475=(cj4*cj5);
IkReal x6476=(r11*sj6);
IkReal x6477=((1.0)*cj5);
IkReal x6478=(r21*sj6);
IkReal x6479=(r01*sj6);
IkReal x6480=(cj6*sj4);
IkReal x6481=((0.076)*cj6);
IkReal x6482=(cj1*x6471);
IkReal x6483=((1.0)*cj6*r10);
IkReal x6484=(sj1*x6470);
IkReal x6485=((1.0)*cj6*r20);
IkReal x6486=(cj1*x6470);
IkReal x6487=((1.0)*cj6*r00);
IkReal x6488=(sj1*x6471);
evalcond[0]=((((-1.0)*r12*x6477))+(((-1.0)*sj5*x6483))+((sj5*x6476))+x6484);
evalcond[1]=((((-1.0)*sj5*x6487))+((sj5*x6479))+(((-1.0)*r02*x6477))+(((-1.0)*x6471)));
evalcond[2]=((((-1.0)*x6486))+(((-1.0)*sj5*x6485))+((sj5*x6478))+(((-1.0)*r22*x6477)));
evalcond[3]=((-0.0525)+(((-0.0775)*x6470))+((r00*x6481))+(((-0.3425)*x6471))+(((-1.0)*px))+(((-1.0)*r01*x6474)));
evalcond[4]=((((0.0775)*x6482))+(((-0.3425)*x6486))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*r21*x6474))+((r20*x6481)));
evalcond[5]=((((-1.0)*r11*x6474))+(((-0.0775)*x6488))+(((-1.0)*py))+(((0.3425)*x6484))+((r10*x6481))+(((-0.293)*sj1)));
evalcond[6]=(((r22*x6473))+((r21*x6480))+((r20*x6472))+x6482+((x6475*x6478))+(((-1.0)*x6475*x6485)));
evalcond[7]=(((r01*x6480))+((r02*x6473))+((r00*x6472))+((x6475*x6479))+(((-1.0)*x6475*x6487))+(((-1.0)*x6470)));
evalcond[8]=((((-1.0)*x6488))+((r11*x6480))+((r10*x6472))+((r12*x6473))+((x6475*x6476))+(((-1.0)*x6475*x6483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6489=cj1*cj1;
IkReal x6490=cj2*cj2;
IkReal x6491=(cj1*r20);
IkReal x6492=(sj4*sj6);
IkReal x6493=(cj4*cj5);
IkReal x6494=(cj4*sj5);
IkReal x6495=((1.0)*cj6);
IkReal x6496=(cj1*r21);
IkReal x6497=((1.0)*cj1*r22);
IkReal x6498=(cj2*r20*sj1);
IkReal x6499=(cj2*r22*sj1);
IkReal x6500=(cj2*r21*sj1*sj6);
CheckValue<IkReal> x6501 = IKatan2WithCheck(IkReal(((((-1.0)*sj6*x6493*x6496))+(((-1.0)*sj4*x6495*x6496))+((cj6*x6491*x6493))+(((-1.0)*sj5*x6495*x6498))+(((-1.0)*x6494*x6497))+(((-1.0)*x6491*x6492))+((sj5*x6500))+(((-1.0)*cj5*x6499)))),IkReal((((cj2*cj6*r21*sj1*sj4))+((x6492*x6498))+((x6494*x6499))+(((-1.0)*cj5*x6497))+((sj5*sj6*x6496))+(((-1.0)*sj5*x6491*x6495))+((x6493*x6500))+(((-1.0)*x6493*x6495*x6498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6501.valid){
continue;
}
CheckValue<IkReal> x6502=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6489*x6490))+x6489+x6490)),-1);
if(!x6502.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x6501.value)+(((1.5707963267949)*(x6502.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6503=IKsin(j3);
IkReal x6504=IKcos(j3);
IkReal x6505=(sj5*sj6);
IkReal x6506=(cj0*sj2);
IkReal x6507=((0.076)*sj6);
IkReal x6508=(sj0*sj2);
IkReal x6509=(cj4*cj5);
IkReal x6510=(cj2*sj1);
IkReal x6511=(sj4*sj6);
IkReal x6512=((1.0)*cj5);
IkReal x6513=(cj4*sj5);
IkReal x6514=((0.076)*cj6);
IkReal x6515=(cj6*sj4);
IkReal x6516=((0.293)*sj1);
IkReal x6517=(cj0*sj1);
IkReal x6518=(sj0*sj1);
IkReal x6519=((0.0775)*x6504);
IkReal x6520=(cj1*cj2*sj0);
IkReal x6521=((0.3425)*x6503);
IkReal x6522=(cj1*x6503);
IkReal x6523=(cj0*cj1*cj2);
IkReal x6524=(cj1*x6504);
IkReal x6525=((1.0)*cj6*r10);
IkReal x6526=((1.0)*x6503);
IkReal x6527=((1.0)*cj6*r20);
IkReal x6528=((1.0)*cj6*r00);
IkReal x6529=((1.0)*x6504);
IkReal x6530=(sj1*x6503);
IkReal x6531=((0.3425)*x6504);
IkReal x6532=((0.0775)*x6530);
evalcond[0]=((((-1.0)*x6510*x6526))+(((-1.0)*r22*x6512))+(((-1.0)*sj5*x6527))+((r21*x6505))+(((-1.0)*x6524)));
evalcond[1]=((((-1.0)*sj5*x6525))+(((-1.0)*x6518*x6529))+((x6503*x6520))+((x6503*x6506))+(((-1.0)*r12*x6512))+((r11*x6505)));
evalcond[2]=((((-1.0)*r02*x6512))+(((-1.0)*sj5*x6528))+((cj0*cj2*x6522))+(((-1.0)*x6517*x6529))+(((-1.0)*x6508*x6526))+((r01*x6505)));
evalcond[3]=((((-1.0)*x6510*x6529))+((r20*x6511))+((r21*sj6*x6509))+x6522+(((-1.0)*x6509*x6527))+((r21*x6515))+((r22*x6513)));
evalcond[4]=(((x6504*x6520))+((x6503*x6518))+((r11*x6515))+((r11*sj6*x6509))+((r12*x6513))+(((-1.0)*x6509*x6525))+((x6504*x6506))+((r10*x6511)));
evalcond[5]=(((x6504*x6523))+((r00*x6511))+((x6503*x6517))+((r01*x6515))+(((-1.0)*x6508*x6529))+(((-1.0)*x6509*x6528))+((r02*x6513))+((r01*sj6*x6509)));
evalcond[6]=((((-1.0)*x6510*x6521))+((r20*x6514))+(((-1.0)*r21*x6507))+(((-1.0)*pz))+(((0.0775)*x6522))+(((-0.3425)*x6524))+(((0.293)*cj1))+(((-1.0)*x6510*x6519))+(((-0.0525)*x6510)));
evalcond[7]=((((0.0775)*x6503*x6517))+(((0.0525)*x6523))+((r00*x6514))+((x6521*x6523))+((cj0*x6516))+(((-1.0)*r01*x6507))+(((-0.0525)*x6508))+(((-1.0)*px))+(((-1.0)*x6508*x6521))+(((-1.0)*x6517*x6531))+(((-1.0)*x6508*x6519))+((x6519*x6523)));
evalcond[8]=((((0.0775)*x6503*x6518))+(((0.0525)*x6520))+(((-1.0)*r11*x6507))+((x6506*x6519))+((x6520*x6521))+(((0.0525)*x6506))+(((-1.0)*py))+((x6506*x6521))+((sj0*x6516))+(((-1.0)*x6518*x6531))+((r10*x6514))+((x6519*x6520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6533=(sj5*sj6);
IkReal x6534=(cj2*sj1);
IkReal x6535=((1.0)*cj5);
IkReal x6536=(cj0*sj1);
IkReal x6537=(sj0*sj2);
IkReal x6538=(cj6*sj5);
IkReal x6539=((1.0)*x6537);
IkReal x6540=((1.0)*x6538);
IkReal x6541=(cj0*cj1*cj2);
CheckValue<IkReal> x6542 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6535*x6536))+((cj1*cj5*r02))+(((-1.0)*cj1*r01*x6533))+((r21*x6533*x6536))+((cj1*r00*x6538))+(((-1.0)*r20*x6536*x6540)))),IkReal((((r21*x6533*x6541))+((r20*x6537*x6538))+(((-1.0)*r22*x6535*x6541))+(((-1.0)*r02*x6534*x6535))+((cj5*r22*x6537))+(((-1.0)*r21*x6533*x6539))+(((-1.0)*r00*x6534*x6540))+(((-1.0)*r20*x6540*x6541))+((r01*x6533*x6534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6542.valid){
continue;
}
CheckValue<IkReal> x6543=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*x6539))+((cj0*cj2)))),-1);
if(!x6543.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x6542.value)+(((1.5707963267949)*(x6543.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6544=IKsin(j3);
IkReal x6545=IKcos(j3);
IkReal x6546=(sj5*sj6);
IkReal x6547=(cj0*sj2);
IkReal x6548=((0.076)*sj6);
IkReal x6549=(sj0*sj2);
IkReal x6550=(cj4*cj5);
IkReal x6551=(cj2*sj1);
IkReal x6552=(sj4*sj6);
IkReal x6553=((1.0)*cj5);
IkReal x6554=(cj4*sj5);
IkReal x6555=((0.076)*cj6);
IkReal x6556=(cj6*sj4);
IkReal x6557=((0.293)*sj1);
IkReal x6558=(cj0*sj1);
IkReal x6559=(sj0*sj1);
IkReal x6560=((0.0775)*x6545);
IkReal x6561=(cj1*cj2*sj0);
IkReal x6562=((0.3425)*x6544);
IkReal x6563=(cj1*x6544);
IkReal x6564=(cj0*cj1*cj2);
IkReal x6565=(cj1*x6545);
IkReal x6566=((1.0)*cj6*r10);
IkReal x6567=((1.0)*x6544);
IkReal x6568=((1.0)*cj6*r20);
IkReal x6569=((1.0)*cj6*r00);
IkReal x6570=((1.0)*x6545);
IkReal x6571=(sj1*x6544);
IkReal x6572=((0.3425)*x6545);
IkReal x6573=((0.0775)*x6571);
evalcond[0]=((((-1.0)*x6551*x6567))+(((-1.0)*r22*x6553))+(((-1.0)*sj5*x6568))+((r21*x6546))+(((-1.0)*x6565)));
evalcond[1]=(((x6544*x6547))+(((-1.0)*sj5*x6566))+((x6544*x6561))+(((-1.0)*r12*x6553))+((r11*x6546))+(((-1.0)*x6559*x6570)));
evalcond[2]=((((-1.0)*sj5*x6569))+(((-1.0)*x6549*x6567))+(((-1.0)*r02*x6553))+(((-1.0)*x6558*x6570))+((cj0*cj2*x6563))+((r01*x6546)));
evalcond[3]=(((r20*x6552))+x6563+((r22*x6554))+(((-1.0)*x6550*x6568))+((r21*x6556))+(((-1.0)*x6551*x6570))+((r21*sj6*x6550)));
evalcond[4]=(((x6545*x6561))+((x6544*x6559))+((x6545*x6547))+((r11*x6556))+((r10*x6552))+((r12*x6554))+((r11*sj6*x6550))+(((-1.0)*x6550*x6566)));
evalcond[5]=(((x6545*x6564))+((x6544*x6558))+((r02*x6554))+(((-1.0)*x6549*x6570))+((r01*sj6*x6550))+(((-1.0)*x6550*x6569))+((r01*x6556))+((r00*x6552)));
evalcond[6]=((((-1.0)*x6551*x6560))+(((-1.0)*x6551*x6562))+(((-0.0525)*x6551))+((r20*x6555))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*r21*x6548))+(((-0.3425)*x6565))+(((0.0775)*x6563)));
evalcond[7]=((((-0.0525)*x6549))+((x6560*x6564))+((x6562*x6564))+(((-1.0)*x6549*x6562))+(((-1.0)*x6549*x6560))+(((-1.0)*px))+(((-1.0)*x6558*x6572))+(((0.0525)*x6564))+(((0.0775)*x6544*x6558))+((cj0*x6557))+(((-1.0)*r01*x6548))+((r00*x6555)));
evalcond[8]=(((x6561*x6562))+(((0.0525)*x6547))+((x6560*x6561))+((x6547*x6560))+((x6547*x6562))+(((-1.0)*r11*x6548))+(((-1.0)*py))+(((-1.0)*x6559*x6572))+((r10*x6555))+(((0.0525)*x6561))+((sj0*x6557))+(((0.0775)*x6544*x6559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6574=(cj5*r12);
IkReal x6575=(cj6*sj5);
IkReal x6576=((1.0)*sj1);
IkReal x6577=(r20*sj0);
IkReal x6578=(cj0*sj2);
IkReal x6579=(cj2*sj0);
IkReal x6580=(r21*sj5*sj6);
IkReal x6581=(cj5*r22*sj0);
IkReal x6582=((1.0)*cj1*cj2);
IkReal x6583=(r11*sj5*sj6);
CheckValue<IkReal> x6584 = IKatan2WithCheck(IkReal(((((-1.0)*x6576*x6581))+((cj1*r10*x6575))+(((-1.0)*cj1*x6583))+(((-1.0)*x6575*x6576*x6577))+((cj1*x6574))+((sj0*sj1*x6580)))),IkReal(((((-1.0)*x6575*x6577*x6582))+(((-1.0)*cj2*x6574*x6576))+(((-1.0)*cj5*r22*x6578))+((x6578*x6580))+((cj2*sj1*x6583))+(((-1.0)*r20*x6575*x6578))+(((-1.0)*cj2*r10*x6575*x6576))+((cj1*x6579*x6580))+(((-1.0)*cj1*cj5*r22*x6579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6584.valid){
continue;
}
CheckValue<IkReal> x6585=IKPowWithIntegerCheck(IKsign((x6579+((cj1*x6578)))),-1);
if(!x6585.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x6584.value)+(((1.5707963267949)*(x6585.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6586=IKsin(j3);
IkReal x6587=IKcos(j3);
IkReal x6588=(sj5*sj6);
IkReal x6589=(cj0*sj2);
IkReal x6590=((0.076)*sj6);
IkReal x6591=(sj0*sj2);
IkReal x6592=(cj4*cj5);
IkReal x6593=(cj2*sj1);
IkReal x6594=(sj4*sj6);
IkReal x6595=((1.0)*cj5);
IkReal x6596=(cj4*sj5);
IkReal x6597=((0.076)*cj6);
IkReal x6598=(cj6*sj4);
IkReal x6599=((0.293)*sj1);
IkReal x6600=(cj0*sj1);
IkReal x6601=(sj0*sj1);
IkReal x6602=((0.0775)*x6587);
IkReal x6603=(cj1*cj2*sj0);
IkReal x6604=((0.3425)*x6586);
IkReal x6605=(cj1*x6586);
IkReal x6606=(cj0*cj1*cj2);
IkReal x6607=(cj1*x6587);
IkReal x6608=((1.0)*cj6*r10);
IkReal x6609=((1.0)*x6586);
IkReal x6610=((1.0)*cj6*r20);
IkReal x6611=((1.0)*cj6*r00);
IkReal x6612=((1.0)*x6587);
IkReal x6613=(sj1*x6586);
IkReal x6614=((0.3425)*x6587);
IkReal x6615=((0.0775)*x6613);
evalcond[0]=((((-1.0)*x6593*x6609))+((r21*x6588))+(((-1.0)*sj5*x6610))+(((-1.0)*r22*x6595))+(((-1.0)*x6607)));
evalcond[1]=(((x6586*x6603))+((r11*x6588))+(((-1.0)*r12*x6595))+(((-1.0)*sj5*x6608))+((x6586*x6589))+(((-1.0)*x6601*x6612)));
evalcond[2]=(((r01*x6588))+(((-1.0)*r02*x6595))+(((-1.0)*sj5*x6611))+(((-1.0)*x6591*x6609))+(((-1.0)*x6600*x6612))+((cj0*cj2*x6605)));
evalcond[3]=((((-1.0)*x6592*x6610))+((r21*sj6*x6592))+((r22*x6596))+x6605+((r21*x6598))+((r20*x6594))+(((-1.0)*x6593*x6612)));
evalcond[4]=(((r12*x6596))+((x6587*x6603))+((r11*x6598))+((x6586*x6601))+((r11*sj6*x6592))+(((-1.0)*x6592*x6608))+((x6587*x6589))+((r10*x6594)));
evalcond[5]=((((-1.0)*x6592*x6611))+((x6587*x6606))+((r02*x6596))+((x6586*x6600))+((r00*x6594))+((r01*x6598))+(((-1.0)*x6591*x6612))+((r01*sj6*x6592)));
evalcond[6]=((((-1.0)*x6593*x6602))+(((-1.0)*x6593*x6604))+(((-0.3425)*x6607))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*x6593))+((r20*x6597))+(((0.0775)*x6605))+(((-1.0)*r21*x6590)));
evalcond[7]=((((-1.0)*r01*x6590))+(((0.0525)*x6606))+((cj0*x6599))+((r00*x6597))+(((-1.0)*px))+((x6604*x6606))+(((-1.0)*x6591*x6604))+(((-1.0)*x6591*x6602))+(((-0.0525)*x6591))+(((-1.0)*x6600*x6614))+((x6602*x6606))+(((0.0775)*x6586*x6600)));
evalcond[8]=((((0.0525)*x6603))+((sj0*x6599))+((x6589*x6602))+((x6589*x6604))+(((-1.0)*r11*x6590))+(((0.0525)*x6589))+(((-1.0)*py))+((x6602*x6603))+(((-1.0)*x6601*x6614))+(((0.0775)*x6586*x6601))+((x6603*x6604))+((r10*x6597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6616=(cj0*sj4);
IkReal x6617=(r12*sj5);
IkReal x6618=((1.0)*cj0);
IkReal x6619=(cj4*cj6);
IkReal x6620=(r02*sj5);
IkReal x6621=(sj0*sj4);
IkReal x6622=(cj5*r11*sj6);
IkReal x6623=(cj4*r10*sj6);
IkReal x6624=((1.0)*x6621);
IkReal x6625=(cj5*r01*sj6);
IkReal x6626=(cj5*cj6*r10);
IkReal x6627=(cj4*r00*sj6);
IkReal x6628=(cj5*cj6*r00);
CheckValue<IkReal> x6629=IKPowWithIntegerCheck(cj1,-1);
if(!x6629.valid){
continue;
}
if( IKabs(((x6629.value)*(((((-1.0)*x6616*x6625))+(((-1.0)*x6616*x6620))+(((-1.0)*x6617*x6624))+((x6621*x6626))+((cj0*x6627))+((sj0*x6623))+(((-1.0)*x6622*x6624))+((x6616*x6628))+((cj0*r01*x6619))+((r11*sj0*x6619)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6620*x6624))+(((-1.0)*x6618*x6623))+((r01*sj0*x6619))+(((-1.0)*x6616*x6626))+((x6621*x6628))+((sj0*x6627))+(((-1.0)*x6624*x6625))+((x6616*x6617))+((x6616*x6622))+(((-1.0)*r11*x6618*x6619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6629.value)*(((((-1.0)*x6616*x6625))+(((-1.0)*x6616*x6620))+(((-1.0)*x6617*x6624))+((x6621*x6626))+((cj0*x6627))+((sj0*x6623))+(((-1.0)*x6622*x6624))+((x6616*x6628))+((cj0*r01*x6619))+((r11*sj0*x6619))))))+IKsqr(((((-1.0)*x6620*x6624))+(((-1.0)*x6618*x6623))+((r01*sj0*x6619))+(((-1.0)*x6616*x6626))+((x6621*x6628))+((sj0*x6627))+(((-1.0)*x6624*x6625))+((x6616*x6617))+((x6616*x6622))+(((-1.0)*r11*x6618*x6619))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x6629.value)*(((((-1.0)*x6616*x6625))+(((-1.0)*x6616*x6620))+(((-1.0)*x6617*x6624))+((x6621*x6626))+((cj0*x6627))+((sj0*x6623))+(((-1.0)*x6622*x6624))+((x6616*x6628))+((cj0*r01*x6619))+((r11*sj0*x6619))))), ((((-1.0)*x6620*x6624))+(((-1.0)*x6618*x6623))+((r01*sj0*x6619))+(((-1.0)*x6616*x6626))+((x6621*x6628))+((sj0*x6627))+(((-1.0)*x6624*x6625))+((x6616*x6617))+((x6616*x6622))+(((-1.0)*r11*x6618*x6619))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x6630=IKsin(j2);
IkReal x6631=IKcos(j2);
IkReal x6632=(sj4*sj5);
IkReal x6633=((1.0)*cj6);
IkReal x6634=(cj5*sj4);
IkReal x6635=(sj6*x6634);
IkReal x6636=((1.0)*cj4*sj6);
IkReal x6637=(cj1*x6630);
evalcond[0]=(((r21*x6635))+(((-1.0)*r20*x6633*x6634))+(((-1.0)*cj4*r21*x6633))+((r22*x6632))+(((-1.0)*sj1*x6630))+(((-1.0)*r20*x6636)));
evalcond[1]=(((r01*x6635))+(((-1.0)*r00*x6633*x6634))+(((-1.0)*cj4*r01*x6633))+(((-1.0)*r00*x6636))+((cj0*x6637))+((r02*x6632))+((sj0*x6631)));
evalcond[2]=((((-1.0)*cj4*r11*x6633))+(((-1.0)*cj0*x6631))+((r11*x6635))+((r12*x6632))+(((-1.0)*r10*x6633*x6634))+(((-1.0)*r10*x6636))+((sj0*x6637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x6638=(((cj2*sj0))+((cj0*cj1*sj2)));
j3eval[0]=x6638;
j3eval[1]=IKsign(x6638);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x6639=(((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)));
j3eval[0]=x6639;
j3eval[1]=IKsign(x6639);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x6640=cj1*cj1;
IkReal x6641=cj2*cj2;
IkReal x6642=(x6640+x6641+(((-1.0)*x6640*x6641)));
j3eval[0]=x6642;
j3eval[1]=IKsign(x6642);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6643=((1.0)*sj5);
IkReal x6644=(r11*sj6);
IkReal x6645=(cj6*r10);
IkReal x6646=(cj6*r00);
IkReal x6647=(sj0*sj5);
IkReal x6648=((1.0)*cj5);
IkReal x6649=(r01*sj6);
IkReal x6650=(cj0*sj5);
if( IKabs((((x6645*x6650))+(((-1.0)*cj0*x6643*x6644))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x6648))+((x6647*x6649))+(((-1.0)*sj0*x6643*x6646)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x6643*x6646))+(((-1.0)*cj0*r02*x6648))+((x6644*x6647))+(((-1.0)*sj0*x6643*x6645))+(((-1.0)*r12*sj0*x6648))+((x6649*x6650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6645*x6650))+(((-1.0)*cj0*x6643*x6644))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x6648))+((x6647*x6649))+(((-1.0)*sj0*x6643*x6646))))+IKsqr(((((-1.0)*cj0*x6643*x6646))+(((-1.0)*cj0*r02*x6648))+((x6644*x6647))+(((-1.0)*sj0*x6643*x6645))+(((-1.0)*r12*sj0*x6648))+((x6649*x6650))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x6645*x6650))+(((-1.0)*cj0*x6643*x6644))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x6648))+((x6647*x6649))+(((-1.0)*sj0*x6643*x6646))), ((((-1.0)*cj0*x6643*x6646))+(((-1.0)*cj0*r02*x6648))+((x6644*x6647))+(((-1.0)*sj0*x6643*x6645))+(((-1.0)*r12*sj0*x6648))+((x6649*x6650))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6651=IKsin(j3);
IkReal x6652=IKcos(j3);
IkReal x6653=((1.0)*cj5);
IkReal x6654=((0.076)*sj6);
IkReal x6655=(cj6*r10);
IkReal x6656=((1.0)*sj5);
IkReal x6657=(sj5*sj6);
IkReal x6658=(sj4*sj6);
IkReal x6659=(cj6*r00);
IkReal x6660=(cj4*sj5);
IkReal x6661=(cj6*sj4);
IkReal x6662=(cj0*x6651);
IkReal x6663=(sj0*x6652);
IkReal x6664=(sj0*x6651);
IkReal x6665=(cj0*x6652);
IkReal x6666=(cj4*cj5*sj6);
IkReal x6667=((1.0)*x6663);
evalcond[0]=(x6662+(((-1.0)*x6667))+((r11*x6657))+(((-1.0)*r12*x6653))+(((-1.0)*x6655*x6656)));
evalcond[1]=((((-1.0)*x6665))+(((-1.0)*x6664))+((r01*x6657))+(((-1.0)*r02*x6653))+(((-1.0)*x6656*x6659)));
evalcond[2]=(((r12*x6660))+x6664+x6665+((r11*x6666))+((r11*x6661))+(((-1.0)*cj4*x6653*x6655))+((r10*x6658)));
evalcond[3]=(x6662+((r02*x6660))+(((-1.0)*x6667))+((r00*x6658))+((r01*x6661))+((r01*x6666))+(((-1.0)*cj4*x6653*x6659)));
evalcond[4]=((((-0.3425)*x6664))+(((-0.3425)*x6665))+(((-1.0)*r01*x6654))+(((0.076)*x6659))+(((-1.0)*px))+(((0.293)*cj0))+(((-0.0525)*sj0))+(((-0.0775)*x6663))+(((0.0775)*x6662)));
evalcond[5]=((((-0.3425)*x6663))+(((0.0525)*cj0))+(((0.3425)*x6662))+(((0.076)*x6655))+(((-1.0)*r11*x6654))+(((-1.0)*py))+(((0.293)*sj0))+(((0.0775)*x6664))+(((0.0775)*x6665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6668=(cj0*sj5);
IkReal x6669=(r11*sj6);
IkReal x6670=((1.0)*cj6);
IkReal x6671=(sj0*sj5);
IkReal x6672=((1.0)*cj5);
IkReal x6673=(r01*sj6);
if( IKabs((((x6668*x6669))+(((-1.0)*cj0*r12*x6672))+(((-1.0)*x6671*x6673))+((cj5*r02*sj0))+((cj6*r00*x6671))+(((-1.0)*r10*x6668*x6670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6668*x6670))+((x6669*x6671))+(((-1.0)*r12*sj0*x6672))+(((-1.0)*r10*x6670*x6671))+((x6668*x6673))+(((-1.0)*cj0*r02*x6672)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6668*x6669))+(((-1.0)*cj0*r12*x6672))+(((-1.0)*x6671*x6673))+((cj5*r02*sj0))+((cj6*r00*x6671))+(((-1.0)*r10*x6668*x6670))))+IKsqr(((((-1.0)*r00*x6668*x6670))+((x6669*x6671))+(((-1.0)*r12*sj0*x6672))+(((-1.0)*r10*x6670*x6671))+((x6668*x6673))+(((-1.0)*cj0*r02*x6672))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x6668*x6669))+(((-1.0)*cj0*r12*x6672))+(((-1.0)*x6671*x6673))+((cj5*r02*sj0))+((cj6*r00*x6671))+(((-1.0)*r10*x6668*x6670))), ((((-1.0)*r00*x6668*x6670))+((x6669*x6671))+(((-1.0)*r12*sj0*x6672))+(((-1.0)*r10*x6670*x6671))+((x6668*x6673))+(((-1.0)*cj0*r02*x6672))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6674=IKcos(j3);
IkReal x6675=IKsin(j3);
IkReal x6676=((0.076)*sj6);
IkReal x6677=(sj5*sj6);
IkReal x6678=(cj4*cj5);
IkReal x6679=(sj4*sj6);
IkReal x6680=(cj4*sj5);
IkReal x6681=(cj6*sj4);
IkReal x6682=((1.0)*cj5);
IkReal x6683=((0.076)*cj6);
IkReal x6684=(sj0*x6675);
IkReal x6685=((1.0)*x6674);
IkReal x6686=(sj0*x6674);
IkReal x6687=((1.0)*cj6*r10);
IkReal x6688=((1.0)*cj6*r00);
IkReal x6689=(cj0*x6675);
IkReal x6690=(cj0*x6674);
IkReal x6691=(cj0*x6685);
evalcond[0]=((((-1.0)*r02*x6682))+x6684+(((-1.0)*sj5*x6688))+(((-1.0)*x6691))+((r01*x6677)));
evalcond[1]=((((-1.0)*sj0*x6685))+((r11*x6677))+(((-1.0)*sj5*x6687))+(((-1.0)*r12*x6682))+(((-1.0)*x6689)));
evalcond[2]=(((r02*x6680))+(((-1.0)*x6678*x6688))+x6689+x6686+((r01*sj6*x6678))+((r01*x6681))+((r00*x6679)));
evalcond[3]=(((r12*x6680))+(((-1.0)*x6678*x6687))+x6684+((r11*x6681))+((r11*sj6*x6678))+(((-1.0)*x6691))+((r10*x6679)));
evalcond[4]=((((0.3425)*x6684))+(((-1.0)*r01*x6676))+(((-1.0)*px))+((r00*x6683))+(((0.293)*cj0))+(((-0.3425)*x6690))+(((0.0525)*sj0))+(((0.0775)*x6689))+(((0.0775)*x6686)));
evalcond[5]=((((-0.0525)*cj0))+(((-0.0775)*x6690))+(((-1.0)*r11*x6676))+((r10*x6683))+(((-1.0)*py))+(((0.293)*sj0))+(((-0.3425)*x6686))+(((-0.3425)*x6689))+(((0.0775)*x6684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6692=(cj0*cj5);
IkReal x6693=(sj0*sj5);
IkReal x6694=(cj6*r10);
IkReal x6695=(r01*sj6);
IkReal x6696=(cj0*sj5);
IkReal x6697=(cj6*r00);
IkReal x6698=(cj5*sj0);
IkReal x6699=((1.0)*r11*sj5*sj6);
if( IKabs(((((-1.0)*r02*x6698))+((r12*x6692))+(((-1.0)*x6693*x6697))+((x6693*x6695))+(((-1.0)*r11*sj6*x6696))+((x6694*x6696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x6696*x6697))+((r12*x6698))+((x6693*x6694))+(((-1.0)*r11*sj6*x6693))+(((-1.0)*x6695*x6696))+((r02*x6692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x6698))+((r12*x6692))+(((-1.0)*x6693*x6697))+((x6693*x6695))+(((-1.0)*r11*sj6*x6696))+((x6694*x6696))))+IKsqr((((x6696*x6697))+((r12*x6698))+((x6693*x6694))+(((-1.0)*r11*sj6*x6693))+(((-1.0)*x6695*x6696))+((r02*x6692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r02*x6698))+((r12*x6692))+(((-1.0)*x6693*x6697))+((x6693*x6695))+(((-1.0)*r11*sj6*x6696))+((x6694*x6696))), (((x6696*x6697))+((r12*x6698))+((x6693*x6694))+(((-1.0)*r11*sj6*x6693))+(((-1.0)*x6695*x6696))+((r02*x6692))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6700=IKcos(j3);
IkReal x6701=IKsin(j3);
IkReal x6702=((0.076)*sj6);
IkReal x6703=(sj5*sj6);
IkReal x6704=(cj4*cj5);
IkReal x6705=(sj4*sj6);
IkReal x6706=(cj4*sj5);
IkReal x6707=(cj6*sj4);
IkReal x6708=((1.0)*cj5);
IkReal x6709=((0.076)*cj6);
IkReal x6710=(cj0*x6700);
IkReal x6711=(sj0*x6700);
IkReal x6712=((1.0)*cj6*r10);
IkReal x6713=((1.0)*cj6*r00);
IkReal x6714=(cj0*x6701);
IkReal x6715=(sj0*x6701);
IkReal x6716=((1.0)*x6715);
evalcond[0]=(x6714+x6711+(((-1.0)*sj5*x6712))+((r11*x6703))+(((-1.0)*r12*x6708)));
evalcond[1]=((((-1.0)*x6716))+(((-1.0)*r02*x6708))+x6710+(((-1.0)*sj5*x6713))+((r01*x6703)));
evalcond[2]=(((r10*x6705))+(((-1.0)*x6716))+x6710+((r11*x6707))+(((-1.0)*x6704*x6712))+((r12*x6706))+((r11*sj6*x6704)));
evalcond[3]=((((-1.0)*x6711))+(((-1.0)*x6714))+((r01*sj6*x6704))+((r00*x6705))+((r01*x6707))+(((-1.0)*x6704*x6713))+((r02*x6706)));
evalcond[4]=((((-0.0775)*x6711))+(((-0.0775)*x6714))+((r00*x6709))+(((-0.3425)*x6715))+(((-1.0)*px))+(((-0.293)*cj0))+(((0.3425)*x6710))+(((-0.0525)*sj0))+(((-1.0)*r01*x6702)));
evalcond[5]=(((r10*x6709))+(((0.0525)*cj0))+(((-0.0775)*x6715))+(((-1.0)*py))+(((0.3425)*x6711))+(((0.3425)*x6714))+(((0.0775)*x6710))+(((-1.0)*r11*x6702))+(((-0.293)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6717=(cj5*r02);
IkReal x6718=((1.0)*sj0);
IkReal x6719=((1.0)*cj0);
IkReal x6720=(cj5*r12);
IkReal x6721=(r11*sj5*sj6);
IkReal x6722=(cj6*r10*sj5);
IkReal x6723=(cj6*r00*sj5);
IkReal x6724=(r01*sj5*sj6);
if( IKabs(((((-1.0)*x6718*x6724))+((cj0*x6721))+(((-1.0)*x6719*x6722))+(((-1.0)*x6719*x6720))+((sj0*x6717))+((sj0*x6723)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x6717))+(((-1.0)*x6718*x6721))+((cj0*x6723))+(((-1.0)*x6719*x6724))+((sj0*x6720))+((sj0*x6722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6718*x6724))+((cj0*x6721))+(((-1.0)*x6719*x6722))+(((-1.0)*x6719*x6720))+((sj0*x6717))+((sj0*x6723))))+IKsqr((((cj0*x6717))+(((-1.0)*x6718*x6721))+((cj0*x6723))+(((-1.0)*x6719*x6724))+((sj0*x6720))+((sj0*x6722))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x6718*x6724))+((cj0*x6721))+(((-1.0)*x6719*x6722))+(((-1.0)*x6719*x6720))+((sj0*x6717))+((sj0*x6723))), (((cj0*x6717))+(((-1.0)*x6718*x6721))+((cj0*x6723))+(((-1.0)*x6719*x6724))+((sj0*x6720))+((sj0*x6722))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6725=IKcos(j3);
IkReal x6726=IKsin(j3);
IkReal x6727=((0.076)*sj6);
IkReal x6728=(sj5*sj6);
IkReal x6729=(cj4*cj5);
IkReal x6730=(sj4*sj6);
IkReal x6731=(cj4*sj5);
IkReal x6732=(cj6*sj4);
IkReal x6733=((1.0)*cj5);
IkReal x6734=((0.076)*cj6);
IkReal x6735=(sj0*x6725);
IkReal x6736=(sj0*x6726);
IkReal x6737=((1.0)*cj6*r10);
IkReal x6738=(cj0*x6725);
IkReal x6739=((1.0)*cj6*r00);
IkReal x6740=(cj0*x6726);
IkReal x6741=((1.0)*x6740);
evalcond[0]=((((-1.0)*sj5*x6739))+x6736+x6738+(((-1.0)*r02*x6733))+((r01*x6728)));
evalcond[1]=(((r11*x6728))+(((-1.0)*sj5*x6737))+(((-1.0)*r12*x6733))+x6735+(((-1.0)*x6741)));
evalcond[2]=(x6735+((r01*sj6*x6729))+((r01*x6732))+(((-1.0)*x6741))+((r00*x6730))+(((-1.0)*x6729*x6739))+((r02*x6731)));
evalcond[3]=((((-1.0)*x6738))+(((-1.0)*x6736))+((r11*x6732))+((r12*x6731))+((r10*x6730))+(((-1.0)*x6729*x6737))+((r11*sj6*x6729)));
evalcond[4]=((((-0.0775)*x6740))+(((0.0775)*x6735))+(((-1.0)*px))+(((-0.293)*cj0))+(((-1.0)*r01*x6727))+(((0.0525)*sj0))+((r00*x6734))+(((0.3425)*x6736))+(((0.3425)*x6738)));
evalcond[5]=((((-0.0775)*x6738))+(((-0.0775)*x6736))+(((-0.0525)*cj0))+(((-1.0)*py))+((r10*x6734))+(((-1.0)*r11*x6727))+(((-0.293)*sj0))+(((0.3425)*x6735))+(((-0.3425)*x6740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6742=(cj6*r00);
IkReal x6743=(cj5*r02);
IkReal x6744=((4.41935483870968)*sj5);
IkReal x6745=(r01*sj6);
if( IKabs(((-3.78064516129032)+(((-1.0)*x6742*x6744))+(((12.9032258064516)*px))+((x6744*x6745))+(((-4.41935483870968)*x6743))+(((-0.980645161290323)*x6742))+(((0.980645161290323)*x6745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6743))+((sj5*x6745))+(((-1.0)*sj5*x6742)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-1.0)*x6742*x6744))+(((12.9032258064516)*px))+((x6744*x6745))+(((-4.41935483870968)*x6743))+(((-0.980645161290323)*x6742))+(((0.980645161290323)*x6745))))+IKsqr(((((-1.0)*x6743))+((sj5*x6745))+(((-1.0)*sj5*x6742))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-1.0)*x6742*x6744))+(((12.9032258064516)*px))+((x6744*x6745))+(((-4.41935483870968)*x6743))+(((-0.980645161290323)*x6742))+(((0.980645161290323)*x6745))), ((((-1.0)*x6743))+((sj5*x6745))+(((-1.0)*sj5*x6742))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6746=IKsin(j3);
IkReal x6747=IKcos(j3);
IkReal x6748=((0.076)*sj6);
IkReal x6749=(sj4*sj6);
IkReal x6750=(r11*sj6);
IkReal x6751=(cj4*cj5);
IkReal x6752=((1.0)*cj5);
IkReal x6753=(r21*sj6);
IkReal x6754=(cj4*sj5);
IkReal x6755=(r01*sj6);
IkReal x6756=(cj6*sj4);
IkReal x6757=((0.076)*cj6);
IkReal x6758=((0.0775)*x6747);
IkReal x6759=((1.0)*cj6*sj5);
IkReal x6760=(cj2*x6746);
IkReal x6761=(sj2*x6746);
IkReal x6762=((1.0)*x6747);
IkReal x6763=((1.0)*cj6*x6751);
evalcond[0]=(x6761+(((-1.0)*r10*x6759))+((sj5*x6750))+(((-1.0)*r12*x6752)));
evalcond[1]=((((-1.0)*x6762))+((sj5*x6755))+(((-1.0)*r00*x6759))+(((-1.0)*r02*x6752)));
evalcond[2]=((((-1.0)*r20*x6759))+(((-1.0)*x6760))+(((-1.0)*r22*x6752))+((sj5*x6753)));
evalcond[3]=((0.293)+(((-1.0)*r01*x6748))+((r00*x6757))+(((-1.0)*px))+(((0.0775)*x6746))+(((-0.3425)*x6747)));
evalcond[4]=((((-1.0)*r21*x6748))+(((-0.0525)*cj2))+(((-1.0)*cj2*x6758))+((r20*x6757))+(((-1.0)*pz))+(((-0.3425)*x6760)));
evalcond[5]=(((x6751*x6755))+((r01*x6756))+x6746+(((-1.0)*r00*x6763))+((r00*x6749))+((r02*x6754)));
evalcond[6]=((((0.3425)*x6761))+(((-1.0)*r11*x6748))+(((-1.0)*py))+((r10*x6757))+((sj2*x6758))+(((0.0525)*sj2)));
evalcond[7]=(((r12*x6754))+((r11*x6756))+(((-1.0)*r10*x6763))+((r10*x6749))+((x6750*x6751))+((sj2*x6747)));
evalcond[8]=((((-1.0)*r20*x6763))+((r22*x6754))+((x6751*x6753))+(((-1.0)*cj2*x6762))+((r21*x6756))+((r20*x6749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6764=(cj6*r00);
IkReal x6765=(cj5*r02);
IkReal x6766=(r01*sj6);
IkReal x6767=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-12.9032258064516)*px))+(((-1.0)*x6766*x6767))+(((0.980645161290323)*x6764))+(((4.41935483870968)*x6765))+(((-0.980645161290323)*x6766))+((x6764*x6767)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6765+(((-1.0)*sj5*x6766))+((sj5*x6764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-12.9032258064516)*px))+(((-1.0)*x6766*x6767))+(((0.980645161290323)*x6764))+(((4.41935483870968)*x6765))+(((-0.980645161290323)*x6766))+((x6764*x6767))))+IKsqr((x6765+(((-1.0)*sj5*x6766))+((sj5*x6764))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-12.9032258064516)*px))+(((-1.0)*x6766*x6767))+(((0.980645161290323)*x6764))+(((4.41935483870968)*x6765))+(((-0.980645161290323)*x6766))+((x6764*x6767))), (x6765+(((-1.0)*sj5*x6766))+((sj5*x6764))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6768=IKsin(j3);
IkReal x6769=IKcos(j3);
IkReal x6770=(sj4*sj6);
IkReal x6771=((1.0)*cj6);
IkReal x6772=(cj4*cj5);
IkReal x6773=((0.076)*sj6);
IkReal x6774=(r11*sj6);
IkReal x6775=((1.0)*cj5);
IkReal x6776=(r21*sj6);
IkReal x6777=(cj4*sj5);
IkReal x6778=(r01*sj6);
IkReal x6779=(cj6*sj4);
IkReal x6780=((0.076)*cj6);
IkReal x6781=((0.0775)*x6769);
IkReal x6782=((1.0)*x6768);
IkReal x6783=((1.0)*x6769);
IkReal x6784=((0.3425)*x6768);
evalcond[0]=(x6769+((sj5*x6778))+(((-1.0)*r02*x6775))+(((-1.0)*r00*sj5*x6771)));
evalcond[1]=((((-1.0)*r22*x6775))+(((-1.0)*cj2*x6782))+((sj5*x6776))+(((-1.0)*r20*sj5*x6771)));
evalcond[2]=((((-1.0)*r10*sj5*x6771))+(((-1.0)*r12*x6775))+((sj5*x6774))+(((-1.0)*sj2*x6782)));
evalcond[3]=((-0.293)+(((0.3425)*x6769))+(((-1.0)*r01*x6773))+(((-1.0)*px))+(((-0.0775)*x6768))+((r00*x6780)));
evalcond[4]=(((r20*x6780))+(((-0.0525)*cj2))+(((-1.0)*cj2*x6781))+(((-1.0)*cj2*x6784))+(((-1.0)*pz))+(((-1.0)*r21*x6773)));
evalcond[5]=((((-1.0)*r11*x6773))+((r10*x6780))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-1.0)*sj2*x6784))+(((-1.0)*sj2*x6781)));
evalcond[6]=((((-1.0)*x6782))+((r02*x6777))+((x6772*x6778))+(((-1.0)*r00*x6771*x6772))+((r01*x6779))+((r00*x6770)));
evalcond[7]=((((-1.0)*cj2*x6783))+(((-1.0)*r20*x6771*x6772))+((r22*x6777))+((x6772*x6776))+((r21*x6779))+((r20*x6770)));
evalcond[8]=(((r11*x6779))+((r12*x6777))+((x6772*x6774))+(((-1.0)*sj2*x6783))+(((-1.0)*r10*x6771*x6772))+((r10*x6770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6785=(cj6*r00);
IkReal x6786=(cj5*r02);
IkReal x6787=(r01*sj6);
IkReal x6788=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((-0.980645161290323)*x6787))+(((-1.0)*x6787*x6788))+(((-12.9032258064516)*px))+(((0.980645161290323)*x6785))+(((4.41935483870968)*x6786))+((x6785*x6788)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x6785))+(((-1.0)*sj5*x6787))+x6786)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-0.980645161290323)*x6787))+(((-1.0)*x6787*x6788))+(((-12.9032258064516)*px))+(((0.980645161290323)*x6785))+(((4.41935483870968)*x6786))+((x6785*x6788))))+IKsqr((((sj5*x6785))+(((-1.0)*sj5*x6787))+x6786))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-0.980645161290323)*x6787))+(((-1.0)*x6787*x6788))+(((-12.9032258064516)*px))+(((0.980645161290323)*x6785))+(((4.41935483870968)*x6786))+((x6785*x6788))), (((sj5*x6785))+(((-1.0)*sj5*x6787))+x6786));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6789=IKsin(j3);
IkReal x6790=IKcos(j3);
IkReal x6791=(sj4*sj6);
IkReal x6792=((1.0)*cj6);
IkReal x6793=(cj4*cj5);
IkReal x6794=((0.076)*sj6);
IkReal x6795=(r11*sj6);
IkReal x6796=((1.0)*cj5);
IkReal x6797=(r21*sj6);
IkReal x6798=(cj4*sj5);
IkReal x6799=(r01*sj6);
IkReal x6800=(cj6*sj4);
IkReal x6801=((0.076)*cj6);
IkReal x6802=((0.0775)*x6790);
IkReal x6803=(cj2*x6789);
IkReal x6804=(sj2*x6789);
evalcond[0]=((((-1.0)*r00*sj5*x6792))+x6790+((sj5*x6799))+(((-1.0)*r02*x6796)));
evalcond[1]=((((-1.0)*r20*sj5*x6792))+(((-1.0)*r22*x6796))+x6803+((sj5*x6797)));
evalcond[2]=((((-1.0)*r10*sj5*x6792))+x6804+((sj5*x6795))+(((-1.0)*r12*x6796)));
evalcond[3]=((-0.293)+(((-0.0775)*x6789))+(((0.3425)*x6790))+((r00*x6801))+(((-1.0)*px))+(((-1.0)*r01*x6794)));
evalcond[4]=((((0.3425)*x6803))+(((0.0525)*cj2))+((r20*x6801))+((cj2*x6802))+(((-1.0)*pz))+(((-1.0)*r21*x6794)));
evalcond[5]=((((-1.0)*r11*x6794))+(((0.3425)*x6804))+((sj2*x6802))+(((-1.0)*py))+((r10*x6801))+(((0.0525)*sj2)));
evalcond[6]=(((r22*x6798))+((x6793*x6797))+((r21*x6800))+((cj2*x6790))+(((-1.0)*r20*x6792*x6793))+((r20*x6791)));
evalcond[7]=(((x6793*x6795))+((r11*x6800))+((r12*x6798))+((sj2*x6790))+((r10*x6791))+(((-1.0)*r10*x6792*x6793)));
evalcond[8]=((((-1.0)*r00*x6792*x6793))+((r02*x6798))+((x6793*x6799))+((r00*x6791))+(((-1.0)*x6789))+((r01*x6800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6805=(cj6*r00);
IkReal x6806=(cj5*r02);
IkReal x6807=((4.41935483870968)*sj5);
IkReal x6808=(r01*sj6);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*px))+(((-0.980645161290323)*x6805))+(((-1.0)*x6805*x6807))+((x6807*x6808))+(((-4.41935483870968)*x6806))+(((0.980645161290323)*x6808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x6805))+((sj5*x6808))+(((-1.0)*x6806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*px))+(((-0.980645161290323)*x6805))+(((-1.0)*x6805*x6807))+((x6807*x6808))+(((-4.41935483870968)*x6806))+(((0.980645161290323)*x6808))))+IKsqr(((((-1.0)*sj5*x6805))+((sj5*x6808))+(((-1.0)*x6806))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*px))+(((-0.980645161290323)*x6805))+(((-1.0)*x6805*x6807))+((x6807*x6808))+(((-4.41935483870968)*x6806))+(((0.980645161290323)*x6808))), ((((-1.0)*sj5*x6805))+((sj5*x6808))+(((-1.0)*x6806))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6809=IKsin(j3);
IkReal x6810=IKcos(j3);
IkReal x6811=(sj4*sj6);
IkReal x6812=((1.0)*cj6);
IkReal x6813=(cj4*cj5);
IkReal x6814=((0.076)*sj6);
IkReal x6815=((1.0)*sj2);
IkReal x6816=(r11*sj6);
IkReal x6817=((1.0)*cj5);
IkReal x6818=(r21*sj6);
IkReal x6819=(cj4*sj5);
IkReal x6820=(r01*sj6);
IkReal x6821=(cj6*sj4);
IkReal x6822=((0.076)*cj6);
IkReal x6823=((0.0775)*x6810);
IkReal x6824=(cj2*x6809);
evalcond[0]=(x6824+(((-1.0)*r22*x6817))+(((-1.0)*r20*sj5*x6812))+((sj5*x6818)));
evalcond[1]=((((-1.0)*x6810))+((sj5*x6820))+(((-1.0)*r02*x6817))+(((-1.0)*r00*sj5*x6812)));
evalcond[2]=((((-1.0)*r10*sj5*x6812))+(((-1.0)*x6809*x6815))+(((-1.0)*r12*x6817))+((sj5*x6816)));
evalcond[3]=((0.293)+((r00*x6822))+(((0.0775)*x6809))+(((-1.0)*px))+(((-0.3425)*x6810))+(((-1.0)*r01*x6814)));
evalcond[4]=((((0.0525)*cj2))+(((-1.0)*r21*x6814))+(((-1.0)*pz))+((r20*x6822))+((cj2*x6823))+(((0.3425)*x6824)));
evalcond[5]=((((-1.0)*r00*x6812*x6813))+((r01*x6821))+((r02*x6819))+x6809+((x6813*x6820))+((r00*x6811)));
evalcond[6]=((((-0.3425)*sj2*x6809))+((r10*x6822))+(((-1.0)*sj2*x6823))+(((-1.0)*py))+(((-0.0525)*sj2))+(((-1.0)*r11*x6814)));
evalcond[7]=(((r21*x6821))+(((-1.0)*r20*x6812*x6813))+((r22*x6819))+((x6813*x6818))+((r20*x6811))+((cj2*x6810)));
evalcond[8]=((((-1.0)*r10*x6812*x6813))+((r12*x6819))+((r10*x6811))+(((-1.0)*x6810*x6815))+((r11*x6821))+((x6813*x6816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6825=(sj1*sj5);
IkReal x6826=(r21*sj6);
IkReal x6827=((1.0)*cj6);
IkReal x6828=(r01*sj6);
IkReal x6829=(cj1*sj5);
IkReal x6830=(cj1*cj5);
IkReal x6831=((1.0)*cj5*sj1);
if( IKabs((((r02*x6830))+((x6825*x6826))+(((-1.0)*r22*x6831))+((cj6*r00*x6829))+(((-1.0)*r20*x6825*x6827))+(((-1.0)*x6828*x6829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x6825*x6828))+(((-1.0)*r02*x6831))+((x6826*x6829))+(((-1.0)*r22*x6830))+(((-1.0)*r00*x6825*x6827))+(((-1.0)*r20*x6827*x6829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x6830))+((x6825*x6826))+(((-1.0)*r22*x6831))+((cj6*r00*x6829))+(((-1.0)*r20*x6825*x6827))+(((-1.0)*x6828*x6829))))+IKsqr((((x6825*x6828))+(((-1.0)*r02*x6831))+((x6826*x6829))+(((-1.0)*r22*x6830))+(((-1.0)*r00*x6825*x6827))+(((-1.0)*r20*x6827*x6829))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r02*x6830))+((x6825*x6826))+(((-1.0)*r22*x6831))+((cj6*r00*x6829))+(((-1.0)*r20*x6825*x6827))+(((-1.0)*x6828*x6829))), (((x6825*x6828))+(((-1.0)*r02*x6831))+((x6826*x6829))+(((-1.0)*r22*x6830))+(((-1.0)*r00*x6825*x6827))+(((-1.0)*r20*x6827*x6829))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6832=IKcos(j3);
IkReal x6833=IKsin(j3);
IkReal x6834=(r21*sj6);
IkReal x6835=(r01*sj6);
IkReal x6836=((1.0)*cj5);
IkReal x6837=(cj6*r20);
IkReal x6838=((1.0)*sj5);
IkReal x6839=(sj4*sj6);
IkReal x6840=(cj6*r00);
IkReal x6841=(cj6*sj4);
IkReal x6842=(cj4*cj5);
IkReal x6843=(cj4*sj5);
IkReal x6844=(cj1*x6833);
IkReal x6845=(sj1*x6833);
IkReal x6846=(sj1*x6832);
IkReal x6847=(cj1*x6832);
IkReal x6848=((1.0)*x6846);
evalcond[0]=((((-1.0)*r02*x6836))+(((-1.0)*x6848))+((sj5*x6835))+x6844+(((-1.0)*x6838*x6840)));
evalcond[1]=(((sj5*x6834))+(((-1.0)*r22*x6836))+(((-1.0)*x6847))+(((-1.0)*x6845))+(((-1.0)*x6837*x6838)));
evalcond[2]=(((r00*x6839))+x6847+x6845+((x6835*x6842))+(((-1.0)*cj4*x6836*x6840))+((r01*x6841))+((r02*x6843)));
evalcond[3]=(((r22*x6843))+((r21*x6841))+(((-1.0)*x6848))+((r20*x6839))+((x6834*x6842))+x6844+(((-1.0)*cj4*x6836*x6837)));
evalcond[4]=((((-0.076)*x6834))+(((-0.3425)*x6847))+(((-0.3425)*x6845))+(((0.0775)*x6844))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((-0.0775)*x6846))+(((0.076)*x6837)));
evalcond[5]=((((-0.076)*x6835))+(((0.0525)*cj1))+(((0.076)*x6840))+(((-0.3425)*x6846))+(((0.0775)*x6847))+(((0.0775)*x6845))+(((-1.0)*px))+(((0.293)*sj1))+(((0.3425)*x6844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6849=(sj5*sj6);
IkReal x6850=((1.0)*sj1);
IkReal x6851=(cj5*r22);
IkReal x6852=(cj6*sj5);
IkReal x6853=(cj5*r02);
IkReal x6854=((1.0)*cj1);
if( IKabs((((cj1*r01*x6849))+(((-1.0)*r21*x6849*x6850))+((r20*sj1*x6852))+(((-1.0)*r00*x6852*x6854))+(((-1.0)*x6853*x6854))+((sj1*x6851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x6852*x6854))+((r01*sj1*x6849))+((cj1*r21*x6849))+(((-1.0)*x6851*x6854))+(((-1.0)*x6850*x6853))+(((-1.0)*r00*x6850*x6852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x6849))+(((-1.0)*r21*x6849*x6850))+((r20*sj1*x6852))+(((-1.0)*r00*x6852*x6854))+(((-1.0)*x6853*x6854))+((sj1*x6851))))+IKsqr(((((-1.0)*r20*x6852*x6854))+((r01*sj1*x6849))+((cj1*r21*x6849))+(((-1.0)*x6851*x6854))+(((-1.0)*x6850*x6853))+(((-1.0)*r00*x6850*x6852))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r01*x6849))+(((-1.0)*r21*x6849*x6850))+((r20*sj1*x6852))+(((-1.0)*r00*x6852*x6854))+(((-1.0)*x6853*x6854))+((sj1*x6851))), ((((-1.0)*r20*x6852*x6854))+((r01*sj1*x6849))+((cj1*r21*x6849))+(((-1.0)*x6851*x6854))+(((-1.0)*x6850*x6853))+(((-1.0)*r00*x6850*x6852))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6855=IKsin(j3);
IkReal x6856=IKcos(j3);
IkReal x6857=(r21*sj6);
IkReal x6858=(r01*sj6);
IkReal x6859=((1.0)*cj5);
IkReal x6860=(cj6*r20);
IkReal x6861=(sj4*sj6);
IkReal x6862=((1.0)*sj5);
IkReal x6863=(cj6*r00);
IkReal x6864=(cj6*sj4);
IkReal x6865=(cj4*cj5);
IkReal x6866=(cj4*sj5);
IkReal x6867=(sj1*x6855);
IkReal x6868=(cj1*x6855);
IkReal x6869=(sj1*x6856);
IkReal x6870=(cj1*x6856);
IkReal x6871=((1.0)*x6870);
evalcond[0]=((((-1.0)*x6860*x6862))+((sj5*x6857))+(((-1.0)*x6871))+x6867+(((-1.0)*r22*x6859)));
evalcond[1]=((((-1.0)*r02*x6859))+((sj5*x6858))+(((-1.0)*x6862*x6863))+(((-1.0)*x6868))+(((-1.0)*x6869)));
evalcond[2]=(((r22*x6866))+(((-1.0)*cj4*x6859*x6860))+((r21*x6864))+((x6857*x6865))+x6868+x6869+((r20*x6861)));
evalcond[3]=(((r02*x6866))+(((-1.0)*cj4*x6859*x6863))+(((-1.0)*x6871))+x6867+((r00*x6861))+((x6858*x6865))+((r01*x6864)));
evalcond[4]=((((-0.076)*x6857))+(((0.076)*x6860))+(((-0.3425)*x6870))+(((0.0775)*x6869))+(((0.0775)*x6868))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0525)*sj1))+(((0.3425)*x6867)));
evalcond[5]=((((-0.0525)*cj1))+(((-0.076)*x6858))+(((0.076)*x6863))+(((-0.3425)*x6869))+(((-0.3425)*x6868))+(((0.0775)*x6867))+(((-1.0)*px))+(((0.293)*sj1))+(((-0.0775)*x6870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6872=(cj6*r00);
IkReal x6873=(cj5*r02);
IkReal x6874=((4.41935483870968)*sj5);
IkReal x6875=(r01*sj6);
if( IKabs(((((-1.0)*sj5*x6872))+(((-1.0)*x6873))+((sj5*x6875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((0.980645161290323)*x6872))+(((4.41935483870968)*x6873))+(((-12.9032258064516)*px))+((x6872*x6874))+(((-1.0)*x6874*x6875))+(((-0.980645161290323)*x6875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x6872))+(((-1.0)*x6873))+((sj5*x6875))))+IKsqr(((-0.67741935483871)+(((0.980645161290323)*x6872))+(((4.41935483870968)*x6873))+(((-12.9032258064516)*px))+((x6872*x6874))+(((-1.0)*x6874*x6875))+(((-0.980645161290323)*x6875))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x6872))+(((-1.0)*x6873))+((sj5*x6875))), ((-0.67741935483871)+(((0.980645161290323)*x6872))+(((4.41935483870968)*x6873))+(((-12.9032258064516)*px))+((x6872*x6874))+(((-1.0)*x6874*x6875))+(((-0.980645161290323)*x6875))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6876=IKcos(j3);
IkReal x6877=IKsin(j3);
IkReal x6878=(sj4*sj6);
IkReal x6879=(cj4*sj5);
IkReal x6880=((0.076)*sj6);
IkReal x6881=(cj4*cj5);
IkReal x6882=(r11*sj6);
IkReal x6883=((1.0)*cj5);
IkReal x6884=(r21*sj6);
IkReal x6885=(r01*sj6);
IkReal x6886=(cj6*sj4);
IkReal x6887=((0.076)*cj6);
IkReal x6888=(cj1*x6877);
IkReal x6889=((1.0)*cj6*r10);
IkReal x6890=((0.3425)*x6876);
IkReal x6891=((1.0)*cj6*r20);
IkReal x6892=((1.0)*x6876);
IkReal x6893=((1.0)*cj6*r00);
IkReal x6894=(sj1*x6877);
evalcond[0]=((((-1.0)*sj5*x6893))+(((-1.0)*r02*x6883))+(((-1.0)*x6877))+((sj5*x6885)));
evalcond[1]=((((-1.0)*sj5*x6891))+(((-1.0)*cj1*x6892))+((sj5*x6884))+(((-1.0)*r22*x6883)));
evalcond[2]=(((sj5*x6882))+(((-1.0)*sj5*x6889))+(((-1.0)*r12*x6883))+(((-1.0)*sj1*x6892)));
evalcond[3]=((-0.0525)+(((-0.3425)*x6877))+(((-1.0)*px))+(((-0.0775)*x6876))+(((-1.0)*r01*x6880))+((r00*x6887)));
evalcond[4]=(((r20*x6887))+(((-1.0)*r21*x6880))+(((-1.0)*pz))+(((-1.0)*cj1*x6890))+(((0.293)*cj1))+(((0.0775)*x6888)));
evalcond[5]=((((-1.0)*py))+(((0.293)*sj1))+(((-1.0)*r11*x6880))+(((0.0775)*x6894))+(((-1.0)*sj1*x6890))+((r10*x6887)));
evalcond[6]=(((r22*x6879))+x6888+((r21*x6886))+((r20*x6878))+(((-1.0)*x6881*x6891))+((x6881*x6884)));
evalcond[7]=((((-1.0)*x6881*x6889))+((r11*x6886))+((r12*x6879))+x6894+((r10*x6878))+((x6881*x6882)));
evalcond[8]=(((r02*x6879))+(((-1.0)*x6892))+((r01*x6886))+((r00*x6878))+(((-1.0)*x6881*x6893))+((x6881*x6885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6895=(cj6*r00);
IkReal x6896=(cj5*r02);
IkReal x6897=(r01*sj6);
IkReal x6898=((4.41935483870968)*sj5);
if( IKabs((x6896+(((-1.0)*sj5*x6897))+((sj5*x6895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((12.9032258064516)*px))+(((-1.0)*x6895*x6898))+(((-4.41935483870968)*x6896))+(((0.980645161290323)*x6897))+((x6897*x6898))+(((-0.980645161290323)*x6895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6896+(((-1.0)*sj5*x6897))+((sj5*x6895))))+IKsqr(((-0.67741935483871)+(((12.9032258064516)*px))+(((-1.0)*x6895*x6898))+(((-4.41935483870968)*x6896))+(((0.980645161290323)*x6897))+((x6897*x6898))+(((-0.980645161290323)*x6895))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x6896+(((-1.0)*sj5*x6897))+((sj5*x6895))), ((-0.67741935483871)+(((12.9032258064516)*px))+(((-1.0)*x6895*x6898))+(((-4.41935483870968)*x6896))+(((0.980645161290323)*x6897))+((x6897*x6898))+(((-0.980645161290323)*x6895))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6899=IKcos(j3);
IkReal x6900=IKsin(j3);
IkReal x6901=(sj4*sj6);
IkReal x6902=((0.076)*sj6);
IkReal x6903=(cj4*cj5);
IkReal x6904=(r11*sj6);
IkReal x6905=((1.0)*cj5);
IkReal x6906=(r21*sj6);
IkReal x6907=(cj4*sj5);
IkReal x6908=(r01*sj6);
IkReal x6909=(cj6*sj4);
IkReal x6910=((0.076)*cj6);
IkReal x6911=(cj1*x6900);
IkReal x6912=((0.3425)*x6899);
IkReal x6913=((1.0)*cj6*r10);
IkReal x6914=((1.0)*cj6*r20);
IkReal x6915=((1.0)*x6899);
IkReal x6916=((1.0)*cj6*r00);
IkReal x6917=(sj1*x6900);
evalcond[0]=((((-1.0)*r02*x6905))+((sj5*x6908))+x6900+(((-1.0)*sj5*x6916)));
evalcond[1]=((((-1.0)*cj1*x6915))+((sj5*x6906))+(((-1.0)*r22*x6905))+(((-1.0)*sj5*x6914)));
evalcond[2]=((((-1.0)*sj1*x6915))+((sj5*x6904))+(((-1.0)*r12*x6905))+(((-1.0)*sj5*x6913)));
evalcond[3]=((0.0525)+((r00*x6910))+(((-1.0)*px))+(((-1.0)*r01*x6902))+(((0.0775)*x6899))+(((0.3425)*x6900)));
evalcond[4]=((((-1.0)*cj1*x6912))+(((-1.0)*pz))+(((0.293)*cj1))+(((-1.0)*r21*x6902))+(((0.0775)*x6911))+((r20*x6910)));
evalcond[5]=((((-1.0)*x6903*x6916))+((r00*x6901))+((r01*x6909))+((r02*x6907))+x6899+((x6903*x6908)));
evalcond[6]=((((-1.0)*sj1*x6912))+(((-1.0)*r11*x6902))+((r10*x6910))+(((-1.0)*py))+(((0.293)*sj1))+(((0.0775)*x6917)));
evalcond[7]=((((-1.0)*x6903*x6914))+((r22*x6907))+((r21*x6909))+x6911+((x6903*x6906))+((r20*x6901)));
evalcond[8]=((((-1.0)*x6903*x6913))+((r11*x6909))+((r10*x6901))+((r12*x6907))+x6917+((x6903*x6904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6918=(sj5*sj6);
IkReal x6919=((1.0)*sj1);
IkReal x6920=(cj6*sj5);
IkReal x6921=((1.0)*cj1);
IkReal x6922=(cj5*r02);
IkReal x6923=(cj5*r22);
if( IKabs((((r21*sj1*x6918))+(((-1.0)*x6919*x6923))+((cj1*r01*x6918))+(((-1.0)*x6921*x6922))+(((-1.0)*r20*x6919*x6920))+(((-1.0)*r00*x6920*x6921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x6922))+(((-1.0)*r01*x6918*x6919))+((r00*sj1*x6920))+(((-1.0)*r20*x6920*x6921))+(((-1.0)*x6921*x6923))+((cj1*r21*x6918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x6918))+(((-1.0)*x6919*x6923))+((cj1*r01*x6918))+(((-1.0)*x6921*x6922))+(((-1.0)*r20*x6919*x6920))+(((-1.0)*r00*x6920*x6921))))+IKsqr((((sj1*x6922))+(((-1.0)*r01*x6918*x6919))+((r00*sj1*x6920))+(((-1.0)*r20*x6920*x6921))+(((-1.0)*x6921*x6923))+((cj1*r21*x6918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj1*x6918))+(((-1.0)*x6919*x6923))+((cj1*r01*x6918))+(((-1.0)*x6921*x6922))+(((-1.0)*r20*x6919*x6920))+(((-1.0)*r00*x6920*x6921))), (((sj1*x6922))+(((-1.0)*r01*x6918*x6919))+((r00*sj1*x6920))+(((-1.0)*r20*x6920*x6921))+(((-1.0)*x6921*x6923))+((cj1*r21*x6918))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6924=IKcos(j3);
IkReal x6925=IKsin(j3);
IkReal x6926=(r21*sj6);
IkReal x6927=(r01*sj6);
IkReal x6928=((1.0)*cj5);
IkReal x6929=(cj6*r20);
IkReal x6930=(sj4*sj6);
IkReal x6931=((1.0)*sj5);
IkReal x6932=(cj6*r00);
IkReal x6933=(cj6*sj4);
IkReal x6934=(cj4*cj5);
IkReal x6935=(cj4*sj5);
IkReal x6936=(sj1*x6924);
IkReal x6937=(cj1*x6924);
IkReal x6938=(cj1*x6925);
IkReal x6939=(sj1*x6925);
IkReal x6940=((1.0)*x6937);
IkReal x6941=((1.0)*x6939);
IkReal x6942=(x6941+x6940);
evalcond[0]=((((-1.0)*x6938))+(((-1.0)*r02*x6928))+((sj5*x6927))+x6936+(((-1.0)*x6931*x6932)));
evalcond[1]=((((-1.0)*r22*x6928))+(((-1.0)*x6942))+((sj5*x6926))+(((-1.0)*x6929*x6931)));
evalcond[2]=(((r20*x6930))+((x6926*x6934))+(((-1.0)*x6936))+((r22*x6935))+x6938+(((-1.0)*cj4*x6928*x6929))+((r21*x6933)));
evalcond[3]=(((x6927*x6934))+(((-1.0)*x6942))+((r00*x6930))+((r01*x6933))+(((-1.0)*cj4*x6928*x6932))+((r02*x6935)));
evalcond[4]=((((0.0775)*x6938))+(((-0.076)*x6926))+(((-1.0)*pz))+(((0.293)*cj1))+(((-0.0525)*sj1))+(((-0.3425)*x6937))+(((-0.3425)*x6939))+(((0.076)*x6929))+(((-0.0775)*x6936)));
evalcond[5]=((((-0.0525)*cj1))+(((-0.076)*x6927))+(((-1.0)*px))+(((-0.3425)*x6938))+(((0.076)*x6932))+(((0.3425)*x6936))+(((-0.293)*sj1))+(((-0.0775)*x6937))+(((-0.0775)*x6939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6943=(cj6*sj5);
IkReal x6944=((1.0)*cj1);
IkReal x6945=(cj5*sj1);
IkReal x6946=(sj5*sj6);
IkReal x6947=((1.0)*sj1*x6946);
if( IKabs((((cj1*r00*x6943))+((r22*x6945))+((cj1*cj5*r02))+(((-1.0)*r21*x6947))+((r20*sj1*x6943))+(((-1.0)*r01*x6944*x6946)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x6946))+((r02*x6945))+(((-1.0)*cj5*r22*x6944))+(((-1.0)*r20*x6943*x6944))+(((-1.0)*r01*x6947))+((r00*sj1*x6943)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r00*x6943))+((r22*x6945))+((cj1*cj5*r02))+(((-1.0)*r21*x6947))+((r20*sj1*x6943))+(((-1.0)*r01*x6944*x6946))))+IKsqr((((cj1*r21*x6946))+((r02*x6945))+(((-1.0)*cj5*r22*x6944))+(((-1.0)*r20*x6943*x6944))+(((-1.0)*r01*x6947))+((r00*sj1*x6943))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r00*x6943))+((r22*x6945))+((cj1*cj5*r02))+(((-1.0)*r21*x6947))+((r20*sj1*x6943))+(((-1.0)*r01*x6944*x6946))), (((cj1*r21*x6946))+((r02*x6945))+(((-1.0)*cj5*r22*x6944))+(((-1.0)*r20*x6943*x6944))+(((-1.0)*r01*x6947))+((r00*sj1*x6943))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x6948=IKsin(j3);
IkReal x6949=IKcos(j3);
IkReal x6950=(r21*sj6);
IkReal x6951=((1.0)*cj5);
IkReal x6952=(r01*sj6);
IkReal x6953=(cj6*r20);
IkReal x6954=(sj4*sj6);
IkReal x6955=((1.0)*sj5);
IkReal x6956=(cj6*r00);
IkReal x6957=(cj6*sj4);
IkReal x6958=(cj4*cj5);
IkReal x6959=(cj4*sj5);
IkReal x6960=(sj1*x6949);
IkReal x6961=(cj1*x6948);
IkReal x6962=(cj1*x6949);
IkReal x6963=(sj1*x6948);
IkReal x6964=(x6961+x6960);
evalcond[0]=((((-1.0)*x6955*x6956))+(((-1.0)*r02*x6951))+((sj5*x6952))+x6964);
evalcond[1]=((((-1.0)*x6962))+((sj5*x6950))+(((-1.0)*r22*x6951))+x6963+(((-1.0)*x6953*x6955)));
evalcond[2]=(((r22*x6959))+((x6950*x6958))+((r20*x6954))+((r21*x6957))+x6964+(((-1.0)*cj4*x6951*x6953)));
evalcond[3]=((((-1.0)*x6963))+((x6952*x6958))+((r02*x6959))+((r01*x6957))+x6962+((r00*x6954))+(((-1.0)*cj4*x6951*x6956)));
evalcond[4]=((((0.3425)*x6963))+(((-0.076)*x6950))+(((0.076)*x6953))+(((-0.3425)*x6962))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x6961))+(((0.0775)*x6960))+(((0.0525)*sj1)));
evalcond[5]=((((0.3425)*x6961))+(((0.3425)*x6960))+(((0.0525)*cj1))+(((-0.076)*x6952))+(((0.076)*x6956))+(((-1.0)*px))+(((-0.0775)*x6963))+(((0.0775)*x6962))+(((-0.293)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6965=(cj6*r00);
IkReal x6966=(cj5*r02);
IkReal x6967=(r01*sj6);
IkReal x6968=((4.41935483870968)*sj5);
if( IKabs(((((-1.0)*sj5*x6967))+((sj5*x6965))+x6966)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-1.0)*x6965*x6968))+(((12.9032258064516)*px))+((x6967*x6968))+(((-0.980645161290323)*x6965))+(((0.980645161290323)*x6967))+(((-4.41935483870968)*x6966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x6967))+((sj5*x6965))+x6966))+IKsqr(((-0.67741935483871)+(((-1.0)*x6965*x6968))+(((12.9032258064516)*px))+((x6967*x6968))+(((-0.980645161290323)*x6965))+(((0.980645161290323)*x6967))+(((-4.41935483870968)*x6966))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x6967))+((sj5*x6965))+x6966), ((-0.67741935483871)+(((-1.0)*x6965*x6968))+(((12.9032258064516)*px))+((x6967*x6968))+(((-0.980645161290323)*x6965))+(((0.980645161290323)*x6967))+(((-4.41935483870968)*x6966))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6969=IKcos(j3);
IkReal x6970=IKsin(j3);
IkReal x6971=(sj4*sj6);
IkReal x6972=((0.076)*sj6);
IkReal x6973=(cj4*cj5);
IkReal x6974=(r11*sj6);
IkReal x6975=((1.0)*cj5);
IkReal x6976=(r21*sj6);
IkReal x6977=(cj4*sj5);
IkReal x6978=(r01*sj6);
IkReal x6979=(cj6*sj4);
IkReal x6980=((0.076)*cj6);
IkReal x6981=(cj1*x6970);
IkReal x6982=((0.3425)*x6969);
IkReal x6983=((1.0)*cj6*r10);
IkReal x6984=((1.0)*cj6*r20);
IkReal x6985=((1.0)*cj6*r00);
IkReal x6986=(sj1*x6970);
evalcond[0]=((((-1.0)*r02*x6975))+((sj5*x6978))+x6970+(((-1.0)*sj5*x6985)));
evalcond[1]=(((sj5*x6974))+(((-1.0)*r12*x6975))+((sj1*x6969))+(((-1.0)*sj5*x6983)));
evalcond[2]=(((sj5*x6976))+(((-1.0)*r22*x6975))+(((-1.0)*sj5*x6984))+(((-1.0)*cj1*x6969)));
evalcond[3]=((0.0525)+(((0.3425)*x6970))+(((-1.0)*px))+((r00*x6980))+(((0.0775)*x6969))+(((-1.0)*r01*x6972)));
evalcond[4]=(((r20*x6980))+(((-1.0)*pz))+(((-1.0)*r21*x6972))+(((0.293)*cj1))+(((-1.0)*cj1*x6982))+(((0.0775)*x6981)));
evalcond[5]=(((r00*x6971))+((r01*x6979))+((r02*x6977))+(((-1.0)*x6973*x6985))+x6969+((x6973*x6978)));
evalcond[6]=(((r10*x6980))+(((-1.0)*r11*x6972))+(((-1.0)*py))+((sj1*x6982))+(((-0.293)*sj1))+(((-0.0775)*x6986)));
evalcond[7]=(((r21*x6979))+((r22*x6977))+(((-1.0)*x6973*x6984))+x6981+((r20*x6971))+((x6973*x6976)));
evalcond[8]=(((r12*x6977))+(((-1.0)*x6986))+(((-1.0)*x6973*x6983))+((r11*x6979))+((r10*x6971))+((x6973*x6974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6987=(cj6*r00);
IkReal x6988=(cj5*r02);
IkReal x6989=((4.41935483870968)*sj5);
IkReal x6990=(r01*sj6);
if( IKabs(((((-1.0)*x6988))+(((-1.0)*sj5*x6987))+((sj5*x6990)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-12.9032258064516)*px))+((x6987*x6989))+(((4.41935483870968)*x6988))+(((-0.980645161290323)*x6990))+(((-1.0)*x6989*x6990))+(((0.980645161290323)*x6987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6988))+(((-1.0)*sj5*x6987))+((sj5*x6990))))+IKsqr(((-0.67741935483871)+(((-12.9032258064516)*px))+((x6987*x6989))+(((4.41935483870968)*x6988))+(((-0.980645161290323)*x6990))+(((-1.0)*x6989*x6990))+(((0.980645161290323)*x6987))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x6988))+(((-1.0)*sj5*x6987))+((sj5*x6990))), ((-0.67741935483871)+(((-12.9032258064516)*px))+((x6987*x6989))+(((4.41935483870968)*x6988))+(((-0.980645161290323)*x6990))+(((-1.0)*x6989*x6990))+(((0.980645161290323)*x6987))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x6991=IKcos(j3);
IkReal x6992=IKsin(j3);
IkReal x6993=(sj4*sj6);
IkReal x6994=(cj4*sj5);
IkReal x6995=((0.076)*sj6);
IkReal x6996=(cj4*cj5);
IkReal x6997=(r11*sj6);
IkReal x6998=((1.0)*cj5);
IkReal x6999=(r21*sj6);
IkReal x7000=(r01*sj6);
IkReal x7001=(cj6*sj4);
IkReal x7002=((0.076)*cj6);
IkReal x7003=(cj1*x6992);
IkReal x7004=((1.0)*cj6*r10);
IkReal x7005=(sj1*x6991);
IkReal x7006=((1.0)*cj6*r20);
IkReal x7007=(cj1*x6991);
IkReal x7008=((1.0)*cj6*r00);
IkReal x7009=(sj1*x6992);
evalcond[0]=(x7005+(((-1.0)*r12*x6998))+((sj5*x6997))+(((-1.0)*sj5*x7004)));
evalcond[1]=((((-1.0)*x6992))+(((-1.0)*sj5*x7008))+((sj5*x7000))+(((-1.0)*r02*x6998)));
evalcond[2]=((((-1.0)*x7007))+(((-1.0)*r22*x6998))+((sj5*x6999))+(((-1.0)*sj5*x7006)));
evalcond[3]=((-0.0525)+(((-0.3425)*x6992))+(((-1.0)*px))+((r00*x7002))+(((-0.0775)*x6991))+(((-1.0)*r01*x6995)));
evalcond[4]=(((r20*x7002))+(((-0.3425)*x7007))+(((-1.0)*pz))+(((0.0775)*x7003))+(((0.293)*cj1))+(((-1.0)*r21*x6995)));
evalcond[5]=((((-1.0)*r11*x6995))+(((-0.0775)*x7009))+(((0.3425)*x7005))+(((-1.0)*py))+((r10*x7002))+(((-0.293)*sj1)));
evalcond[6]=(x7003+((r20*x6993))+((r22*x6994))+(((-1.0)*x6996*x7006))+((r21*x7001))+((x6996*x6999)));
evalcond[7]=(((r02*x6994))+(((-1.0)*x6991))+((x6996*x7000))+((r00*x6993))+(((-1.0)*x6996*x7008))+((r01*x7001)));
evalcond[8]=((((-1.0)*x7009))+((r12*x6994))+((r10*x6993))+((r11*x7001))+(((-1.0)*x6996*x7004))+((x6996*x6997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x7010=cj1*cj1;
IkReal x7011=cj2*cj2;
IkReal x7012=(cj1*r20);
IkReal x7013=(sj4*sj6);
IkReal x7014=(cj4*cj5);
IkReal x7015=(cj4*sj5);
IkReal x7016=((1.0)*cj6);
IkReal x7017=(cj1*r21);
IkReal x7018=((1.0)*cj1*r22);
IkReal x7019=(cj2*r20*sj1);
IkReal x7020=(cj2*r22*sj1);
IkReal x7021=(cj2*r21*sj1*sj6);
CheckValue<IkReal> x7022=IKPowWithIntegerCheck(IKsign((x7010+x7011+(((-1.0)*x7010*x7011)))),-1);
if(!x7022.valid){
continue;
}
CheckValue<IkReal> x7023 = IKatan2WithCheck(IkReal((((sj5*x7021))+(((-1.0)*x7015*x7018))+(((-1.0)*sj4*x7016*x7017))+((cj6*x7012*x7014))+(((-1.0)*sj6*x7014*x7017))+(((-1.0)*sj5*x7016*x7019))+(((-1.0)*x7012*x7013))+(((-1.0)*cj5*x7020)))),IkReal((((cj2*cj6*r21*sj1*sj4))+((x7014*x7021))+((x7013*x7019))+(((-1.0)*cj5*x7018))+(((-1.0)*x7014*x7016*x7019))+((sj5*sj6*x7017))+(((-1.0)*sj5*x7012*x7016))+((x7015*x7020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7023.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7022.value)))+(x7023.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x7024=IKsin(j3);
IkReal x7025=IKcos(j3);
IkReal x7026=(sj5*sj6);
IkReal x7027=(cj0*sj2);
IkReal x7028=((0.076)*sj6);
IkReal x7029=(sj0*sj2);
IkReal x7030=(cj4*cj5);
IkReal x7031=(cj2*sj1);
IkReal x7032=(sj4*sj6);
IkReal x7033=((1.0)*cj5);
IkReal x7034=(cj4*sj5);
IkReal x7035=((0.076)*cj6);
IkReal x7036=(cj6*sj4);
IkReal x7037=((0.293)*sj1);
IkReal x7038=(cj0*sj1);
IkReal x7039=(sj0*sj1);
IkReal x7040=((0.0775)*x7025);
IkReal x7041=(cj1*cj2*sj0);
IkReal x7042=((0.3425)*x7024);
IkReal x7043=(cj1*x7024);
IkReal x7044=(cj0*cj1*cj2);
IkReal x7045=(cj1*x7025);
IkReal x7046=((1.0)*cj6*r10);
IkReal x7047=((1.0)*x7024);
IkReal x7048=((1.0)*cj6*r20);
IkReal x7049=((1.0)*cj6*r00);
IkReal x7050=((1.0)*x7025);
IkReal x7051=(sj1*x7024);
IkReal x7052=((0.3425)*x7025);
IkReal x7053=((0.0775)*x7051);
evalcond[0]=((((-1.0)*r22*x7033))+(((-1.0)*x7031*x7047))+(((-1.0)*x7045))+(((-1.0)*sj5*x7048))+((r21*x7026)));
evalcond[1]=((((-1.0)*x7039*x7050))+((x7024*x7041))+((r11*x7026))+((x7024*x7027))+(((-1.0)*r12*x7033))+(((-1.0)*sj5*x7046)));
evalcond[2]=((((-1.0)*x7038*x7050))+(((-1.0)*r02*x7033))+(((-1.0)*sj5*x7049))+((r01*x7026))+(((-1.0)*x7029*x7047))+((cj0*cj2*x7043)));
evalcond[3]=(x7043+((r20*x7032))+((r21*x7036))+(((-1.0)*x7030*x7048))+((r21*sj6*x7030))+((r22*x7034))+(((-1.0)*x7031*x7050)));
evalcond[4]=(((r12*x7034))+((x7024*x7039))+((r10*x7032))+((r11*x7036))+((x7025*x7027))+((r11*sj6*x7030))+(((-1.0)*x7030*x7046))+((x7025*x7041)));
evalcond[5]=(((r01*x7036))+((r01*sj6*x7030))+((x7024*x7038))+((r00*x7032))+((r02*x7034))+(((-1.0)*x7030*x7049))+((x7025*x7044))+(((-1.0)*x7029*x7050)));
evalcond[6]=((((-1.0)*x7031*x7040))+(((-1.0)*x7031*x7042))+(((-0.3425)*x7045))+(((-1.0)*pz))+((r20*x7035))+(((-0.0525)*x7031))+(((0.293)*cj1))+(((0.0775)*x7043))+(((-1.0)*r21*x7028)));
evalcond[7]=((((0.0775)*x7024*x7038))+(((-1.0)*x7038*x7052))+(((0.0525)*x7044))+((r00*x7035))+(((-0.0525)*x7029))+(((-1.0)*px))+(((-1.0)*x7029*x7042))+(((-1.0)*x7029*x7040))+(((-1.0)*r01*x7028))+((x7040*x7044))+((cj0*x7037))+((x7042*x7044)));
evalcond[8]=((((-1.0)*x7039*x7052))+(((0.0775)*x7024*x7039))+((x7027*x7040))+((x7027*x7042))+(((-1.0)*r11*x7028))+((sj0*x7037))+(((0.0525)*x7041))+((x7041*x7042))+((r10*x7035))+(((0.0525)*x7027))+(((-1.0)*py))+((x7040*x7041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x7054=(sj5*sj6);
IkReal x7055=(cj2*sj1);
IkReal x7056=((1.0)*cj5);
IkReal x7057=(cj0*sj1);
IkReal x7058=(sj0*sj2);
IkReal x7059=(cj6*sj5);
IkReal x7060=((1.0)*x7058);
IkReal x7061=((1.0)*x7059);
IkReal x7062=(cj0*cj1*cj2);
CheckValue<IkReal> x7063=IKPowWithIntegerCheck(IKsign((((cj0*cj2))+(((-1.0)*cj1*x7060)))),-1);
if(!x7063.valid){
continue;
}
CheckValue<IkReal> x7064 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x7057*x7061))+((cj1*cj5*r02))+((r21*x7054*x7057))+(((-1.0)*r22*x7056*x7057))+(((-1.0)*cj1*r01*x7054))+((cj1*r00*x7059)))),IkReal(((((-1.0)*r20*x7061*x7062))+(((-1.0)*r21*x7054*x7060))+(((-1.0)*r22*x7056*x7062))+((r01*x7054*x7055))+((cj5*r22*x7058))+((r20*x7058*x7059))+((r21*x7054*x7062))+(((-1.0)*r00*x7055*x7061))+(((-1.0)*r02*x7055*x7056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7064.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7063.value)))+(x7064.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x7065=IKsin(j3);
IkReal x7066=IKcos(j3);
IkReal x7067=(sj5*sj6);
IkReal x7068=(cj0*sj2);
IkReal x7069=((0.076)*sj6);
IkReal x7070=(sj0*sj2);
IkReal x7071=(cj4*cj5);
IkReal x7072=(cj2*sj1);
IkReal x7073=(sj4*sj6);
IkReal x7074=((1.0)*cj5);
IkReal x7075=(cj4*sj5);
IkReal x7076=((0.076)*cj6);
IkReal x7077=(cj6*sj4);
IkReal x7078=((0.293)*sj1);
IkReal x7079=(cj0*sj1);
IkReal x7080=(sj0*sj1);
IkReal x7081=((0.0775)*x7066);
IkReal x7082=(cj1*cj2*sj0);
IkReal x7083=((0.3425)*x7065);
IkReal x7084=(cj1*x7065);
IkReal x7085=(cj0*cj1*cj2);
IkReal x7086=(cj1*x7066);
IkReal x7087=((1.0)*cj6*r10);
IkReal x7088=((1.0)*x7065);
IkReal x7089=((1.0)*cj6*r20);
IkReal x7090=((1.0)*cj6*r00);
IkReal x7091=((1.0)*x7066);
IkReal x7092=(sj1*x7065);
IkReal x7093=((0.3425)*x7066);
IkReal x7094=((0.0775)*x7092);
evalcond[0]=((((-1.0)*x7086))+(((-1.0)*x7072*x7088))+(((-1.0)*sj5*x7089))+((r21*x7067))+(((-1.0)*r22*x7074)));
evalcond[1]=((((-1.0)*sj5*x7087))+(((-1.0)*r12*x7074))+((x7065*x7082))+(((-1.0)*x7080*x7091))+((x7065*x7068))+((r11*x7067)));
evalcond[2]=((((-1.0)*x7079*x7091))+(((-1.0)*r02*x7074))+((r01*x7067))+((cj0*cj2*x7084))+(((-1.0)*x7070*x7088))+(((-1.0)*sj5*x7090)));
evalcond[3]=(x7084+((r22*x7075))+((r21*x7077))+(((-1.0)*x7072*x7091))+(((-1.0)*x7071*x7089))+((r21*sj6*x7071))+((r20*x7073)));
evalcond[4]=(((r11*sj6*x7071))+((r11*x7077))+(((-1.0)*x7071*x7087))+((r10*x7073))+((x7065*x7080))+((x7066*x7082))+((r12*x7075))+((x7066*x7068)));
evalcond[5]=((((-1.0)*x7071*x7090))+((r01*x7077))+((r00*x7073))+(((-1.0)*x7070*x7091))+((x7065*x7079))+((x7066*x7085))+((r01*sj6*x7071))+((r02*x7075)));
evalcond[6]=((((-0.3425)*x7086))+(((-1.0)*r21*x7069))+(((-0.0525)*x7072))+(((-1.0)*x7072*x7083))+(((-1.0)*x7072*x7081))+(((-1.0)*pz))+(((0.293)*cj1))+(((0.0775)*x7084))+((r20*x7076)));
evalcond[7]=(((cj0*x7078))+(((-1.0)*x7079*x7093))+(((-1.0)*r01*x7069))+(((-0.0525)*x7070))+((x7081*x7085))+((r00*x7076))+(((0.0525)*x7085))+(((-1.0)*px))+(((-1.0)*x7070*x7081))+(((-1.0)*x7070*x7083))+(((0.0775)*x7065*x7079))+((x7083*x7085)));
evalcond[8]=((((0.0525)*x7068))+((x7081*x7082))+(((-1.0)*r11*x7069))+(((0.0775)*x7065*x7080))+((x7068*x7083))+((x7068*x7081))+(((0.0525)*x7082))+(((-1.0)*py))+((r10*x7076))+(((-1.0)*x7080*x7093))+((sj0*x7078))+((x7082*x7083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x7095=(cj5*r12);
IkReal x7096=(cj6*sj5);
IkReal x7097=((1.0)*sj1);
IkReal x7098=(r20*sj0);
IkReal x7099=(cj0*sj2);
IkReal x7100=(cj2*sj0);
IkReal x7101=(r21*sj5*sj6);
IkReal x7102=(cj5*r22*sj0);
IkReal x7103=((1.0)*cj1*cj2);
IkReal x7104=(r11*sj5*sj6);
CheckValue<IkReal> x7105 = IKatan2WithCheck(IkReal((((cj1*x7095))+(((-1.0)*cj1*x7104))+(((-1.0)*x7096*x7097*x7098))+((cj1*r10*x7096))+((sj0*sj1*x7101))+(((-1.0)*x7097*x7102)))),IkReal(((((-1.0)*cj2*x7095*x7097))+(((-1.0)*cj1*cj5*r22*x7100))+((x7099*x7101))+(((-1.0)*r20*x7096*x7099))+((cj1*x7100*x7101))+(((-1.0)*cj2*r10*x7096*x7097))+(((-1.0)*cj5*r22*x7099))+(((-1.0)*x7096*x7098*x7103))+((cj2*sj1*x7104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7105.valid){
continue;
}
CheckValue<IkReal> x7106=IKPowWithIntegerCheck(IKsign((x7100+((cj1*x7099)))),-1);
if(!x7106.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x7105.value)+(((1.5707963267949)*(x7106.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x7107=IKsin(j3);
IkReal x7108=IKcos(j3);
IkReal x7109=(sj5*sj6);
IkReal x7110=(cj0*sj2);
IkReal x7111=((0.076)*sj6);
IkReal x7112=(sj0*sj2);
IkReal x7113=(cj4*cj5);
IkReal x7114=(cj2*sj1);
IkReal x7115=(sj4*sj6);
IkReal x7116=((1.0)*cj5);
IkReal x7117=(cj4*sj5);
IkReal x7118=((0.076)*cj6);
IkReal x7119=(cj6*sj4);
IkReal x7120=((0.293)*sj1);
IkReal x7121=(cj0*sj1);
IkReal x7122=(sj0*sj1);
IkReal x7123=((0.0775)*x7108);
IkReal x7124=(cj1*cj2*sj0);
IkReal x7125=((0.3425)*x7107);
IkReal x7126=(cj1*x7107);
IkReal x7127=(cj0*cj1*cj2);
IkReal x7128=(cj1*x7108);
IkReal x7129=((1.0)*cj6*r10);
IkReal x7130=((1.0)*x7107);
IkReal x7131=((1.0)*cj6*r20);
IkReal x7132=((1.0)*cj6*r00);
IkReal x7133=((1.0)*x7108);
IkReal x7134=(sj1*x7107);
IkReal x7135=((0.3425)*x7108);
IkReal x7136=((0.0775)*x7134);
evalcond[0]=((((-1.0)*x7128))+((r21*x7109))+(((-1.0)*r22*x7116))+(((-1.0)*sj5*x7131))+(((-1.0)*x7114*x7130)));
evalcond[1]=(((x7107*x7124))+(((-1.0)*r12*x7116))+((x7107*x7110))+(((-1.0)*sj5*x7129))+(((-1.0)*x7122*x7133))+((r11*x7109)));
evalcond[2]=(((cj0*cj2*x7126))+(((-1.0)*x7121*x7133))+(((-1.0)*x7112*x7130))+(((-1.0)*r02*x7116))+(((-1.0)*sj5*x7132))+((r01*x7109)));
evalcond[3]=(x7126+((r21*x7119))+((r22*x7117))+(((-1.0)*x7114*x7133))+(((-1.0)*x7113*x7131))+((r20*x7115))+((r21*sj6*x7113)));
evalcond[4]=(((r11*x7119))+((r12*x7117))+((x7107*x7122))+((x7108*x7124))+((x7108*x7110))+((r10*x7115))+(((-1.0)*x7113*x7129))+((r11*sj6*x7113)));
evalcond[5]=(((x7107*x7121))+((x7108*x7127))+((r02*x7117))+(((-1.0)*x7112*x7133))+((r01*sj6*x7113))+(((-1.0)*x7113*x7132))+((r01*x7119))+((r00*x7115)));
evalcond[6]=((((-1.0)*x7114*x7123))+(((-1.0)*x7114*x7125))+(((-1.0)*r21*x7111))+(((-0.0525)*x7114))+(((-1.0)*pz))+(((0.293)*cj1))+((r20*x7118))+(((-0.3425)*x7128))+(((0.0775)*x7126)));
evalcond[7]=((((0.0775)*x7107*x7121))+((x7123*x7127))+((cj0*x7120))+(((-1.0)*x7121*x7135))+(((-0.0525)*x7112))+(((-1.0)*x7112*x7123))+(((-1.0)*x7112*x7125))+(((0.0525)*x7127))+(((-1.0)*px))+(((-1.0)*r01*x7111))+((x7125*x7127))+((r00*x7118)));
evalcond[8]=((((0.0775)*x7107*x7122))+(((-1.0)*r11*x7111))+((x7123*x7124))+((x7110*x7125))+((x7110*x7123))+(((0.0525)*x7124))+(((-1.0)*py))+((r10*x7118))+(((-1.0)*x7122*x7135))+((x7124*x7125))+((sj0*x7120))+(((0.0525)*x7110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - xarm7_with_gripper (b0c22985b5978e1acf2a611482b6a182)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
