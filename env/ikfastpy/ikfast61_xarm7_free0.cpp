/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-08-10 16:36:09.452952
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66;
x0=IKcos(j[1]);
x1=IKsin(j[1]);
x2=IKsin(j[3]);
x3=IKcos(j[2]);
x4=IKcos(j[3]);
x5=IKcos(j[4]);
x6=IKsin(j[2]);
x7=IKsin(j[4]);
x8=IKsin(j[6]);
x9=IKcos(j[6]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((0.0525)*x6);
x15=((0.076)*x0);
x16=((1.0)*x7);
x17=((1.0)*x1);
x18=((0.0775)*x2);
x19=((0.0775)*x3);
x20=((0.097)*x0);
x21=((1.0)*x11);
x22=((1.0)*x5);
x23=((1.0)*x8);
x24=((0.097)*x5);
x25=((0.0525)*x3);
x26=((1.0)*x9);
x27=((1.0)*x10);
x28=(x2*x6);
x29=(x4*x6);
x30=(x2*x3);
x31=(x1*x4);
x32=(x3*x7);
x33=(x0*x6);
x34=(x0*x4);
x35=(x16*x3);
x36=((0.3425)*x28);
x37=((0.0775)*x29);
x38=((1.0)*x0*x2);
x39=(x1*x6*x7);
x40=((0.076)*x10*x28);
x41=((0.097)*x11*x28);
x42=(((x29*x5))+(((-1.0)*x35)));
x43=((((-1.0)*x17*x4))+((x0*x30)));
x44=(((x1*x2))+((x3*x34)));
x45=(x34+((x1*x30)));
x46=((((-1.0)*x38))+((x3*x31)));
x47=(x35+(((-1.0)*x22*x29)));
x48=((((-1.0)*x24*x29))+(((0.097)*x32)));
x49=((((0.076)*x29*x5))+(((-0.076)*x32)));
x50=((((-1.0)*x16*x29))+(((-1.0)*x22*x3)));
x51=(x10*x43);
x52=(x44*x5);
x53=(x46*x5);
x54=(((x33*x7))+x52);
x55=(((x11*x42))+((x10*x28)));
x56=(x39+x53);
x57=(((x33*x5))+((x7*(((((-1.0)*x3*x34))+(((-1.0)*x17*x2)))))));
x58=((((-1.0)*x27*x28))+(((-1.0)*x21*x42)));
x59=(x55*x9);
x60=((((-1.0)*x17*x5*x6))+((x16*(((((-1.0)*x38))+((x17*x3*x4)))))));
x61=(x58*x8);
x62=(x37+x36+x40+x41+x14);
x63=(((x11*x43))+((x10*(((((-1.0)*x16*x33))+(((-1.0)*x22*x44)))))));
x64=(((x9*((((x11*x54))+x51))))+((x57*x8)));
x65=(((x57*x9))+((x8*(((((-1.0)*x27*x43))+(((-1.0)*x21*x54)))))));
IkReal x67=(x6*x7);
x66=(((x19*x34))+((x10*(((((-1.0)*x20*x67))+((x15*x30))+(((-1.0)*x24*x44))+(((-0.076)*x31))))))+((x11*(((((0.076)*x52))+((x20*x30))+((x15*x67))+(((-0.097)*x31))))))+(((-0.3425)*x31))+((x0*(((((0.3425)*x30))+x25))))+((x1*(((0.293)+x18)))));
eerot[0]=(((x13*x64))+((x12*(((((-1.0)*x26*x55))+(((-1.0)*x23*x50)))))));
eerot[1]=(((x13*x65))+((x12*(((((-1.0)*x26*x50))+(((-1.0)*x23*x58)))))));
eerot[2]=(((x12*(((((-1.0)*x21*x28))+(((-1.0)*x27*x47))))))+((x13*x63)));
eetrans[0]=(((x13*x66))+((x12*(((((-1.0)*x27*x48))+(((-1.0)*x21*x49))+(((-1.0)*x62)))))));
eerot[3]=(((x12*x64))+((x13*((((x50*x8))+x59)))));
eerot[4]=(((x12*x65))+((x13*((((x50*x9))+x61)))));
eerot[5]=(((x12*x63))+((x13*((((x10*x47))+((x11*x28)))))));
eetrans[1]=(((x12*x66))+((x13*((((x10*x48))+((x11*x49))+x62)))));
eerot[6]=(((x9*(((((-1.0)*x27*x45))+(((-1.0)*x21*x56))))))+((x60*x8)));
eerot[7]=(((x60*x9))+((x8*((((x10*x45))+((x11*x56)))))));
eerot[8]=(((x11*(((((-1.0)*x34))+(((-1.0)*x17*x30))))))+((x10*x56)));
IkReal x68=(x1*x30);
IkReal x69=((1.0)*x4);
eetrans[2]=((0.267)+((x11*(((((-0.076)*x53))+(((-0.076)*x39))))))+((x0*x18))+(((-1.0)*x1*x25))+((x10*(((((-1.0)*x15*x69))+(((-0.076)*x68))))))+(((-0.3425)*x68))+(((-1.0)*x19*x31))+(((-0.3425)*x34))+((x10*(((((0.097)*x39))+((x24*x46))))))+(((0.293)*x0))+((x11*(((((-0.097)*x68))+(((-1.0)*x20*x69)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=(((r00*(IKcos(j0))))+((r10*(IKsin(j0)))));
new_r01=(((r01*(IKcos(j0))))+((r11*(IKsin(j0)))));
new_r02=(((r12*(IKsin(j0))))+((r02*(IKcos(j0)))));
IkReal x70=IKcos(j0);
IkReal x71=IKsin(j0);
new_px=(((py*x71))+(((-0.097)*r02*x70))+(((-0.097)*r12*x71))+((px*x70)));
new_r10=((-1.0)*r20);
new_r11=((-1.0)*r21);
new_r12=((-1.0)*r22);
new_py=((0.267)+(((0.097)*r22))+(((-1.0)*pz)));
new_r20=((((-1.0)*r00*(IKsin(j0))))+((r10*(IKcos(j0)))));
new_r21=((((-1.0)*r01*(IKsin(j0))))+((r11*(IKcos(j0)))));
new_r22=((((-1.0)*r02*(IKsin(j0))))+((r12*(IKcos(j0)))));
IkReal x72=IKsin(j0);
IkReal x73=IKcos(j0);
new_pz=(((py*x73))+(((-1.0)*px*x72))+(((0.097)*r02*x72))+(((-0.097)*r12*x73)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x74=((1.0)*px);
IkReal x75=((1.0)*pz);
IkReal x76=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x76))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x75)));
rxp0_2=((((-1.0)*r10*x74))+((py*r00)));
rxp1_0=((((-1.0)*r21*x76))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x75)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x74)));
rxp2_0=((((-1.0)*r22*x76))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x75)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x74)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x77=((0.044536)*r01);
IkReal x78=((0.586)*rxp2_0);
IkReal x79=((0.152)*rxp1_2);
IkReal x80=((0.02893125)*r22);
IkReal x81=((0.685)*pz);
IkReal x82=((0.05206)*r20);
IkReal x83=((0.044536)*r11);
IkReal x84=((0.586)*rxp2_1);
IkReal x85=((0.089072)*r00);
IkReal x86=((0.10412)*r21);
IkReal x87=((0.304)*rxp0_2);
IkReal x88=((0.02893125)*r02);
IkReal x89=((0.152)*rxp1_0);
IkReal x90=((0.685)*px);
IkReal x91=((0.586)*rxp2_2);
IkReal x92=((0.044536)*r21);
IkReal x93=((0.05206)*r00);
IkReal x94=((0.02893125)*r12);
IkReal x95=((0.152)*rxp1_1);
IkReal x96=((0.464032258064516)*npz);
IkReal x97=((0.685)*py);
IkReal x98=((0.102967741935484)*npx);
IkReal x99=((0.67741935483871)*pp);
IkReal x100=((0.05206)*r10);
IkReal x101=((0.205935483870968)*npy);
IkReal x102=((0.10412)*r11);
IkReal x103=((0.304)*rxp0_1);
IkReal x104=((0.089072)*r20);
IkReal x105=((0.10412)*r01);
IkReal x106=((0.304)*rxp0_0);
IkReal x107=(pp*r02);
IkReal x108=((0.304)*pz);
IkReal x109=((1.172)*rxp0_0);
IkReal x110=((0.0809665)*r20);
IkReal x111=((1.172)*rxp0_1);
IkReal x112=((2.344)*rxp1_0);
IkReal x113=((0.161933)*r21);
IkReal x114=((1.172)*rxp0_2);
IkReal x115=((0.304)*px);
IkReal x116=((0.0809665)*r00);
IkReal x117=((0.0809665)*r10);
IkReal x118=((0.304)*py);
IkReal x119=((0.928064516129032)*npx);
IkReal x120=((1.85612903225806)*npy);
IkReal x121=((0.161933)*r11);
IkReal x122=((0.161933)*r01);
IkReal x123=((2.344)*rxp1_2);
IkReal x124=(pp*r22);
IkReal x125=((0.089072)*r10);
IkReal x126=(pp*r12);
IkReal x127=((2.0)*pp);
IkReal x128=((2.0)*npz);
IkReal x129=((4.0)*npx);
IkReal x130=((8.0)*npy);
IkReal x131=((4.0)*pp);
IkReal x132=(pz*x128);
IkReal x133=((1.0)*x124);
IkReal x134=(x84+(((-1.0)*x83)));
IkReal x135=((-0.089072)*r10);
IkReal x136=(px*x128);
IkReal x137=((1.0)*x107);
IkReal x138=(py*x128);
IkReal x139=((1.0)*x126);
IkReal x140=(r20*x127);
IkReal x141=(pz*x129);
IkReal x142=((-2.344)*rxp1_1);
IkReal x143=(r21*x131);
IkReal x144=(pz*x130);
IkReal x145=((-1.172)*rxp0_1);
IkReal x146=(r00*x127);
IkReal x147=(px*x129);
IkReal x148=(r10*x127);
IkReal x149=(py*x129);
IkReal x150=(r11*x131);
IkReal x151=(py*x130);
IkReal x152=(px*x130);
IkReal x153=(r01*x131);
IkReal x154=(x83+(((-1.0)*x84)));
IkReal x155=((0.0274241370967742)+x126);
IkReal x156=((0.0274241370967742)+x99);
IkReal x157=((-0.0274241370967742)+x126);
IkReal x158=(x83+x84);
IkReal x159=((-1.0)*x158);
IkReal x160=(x78+x82);
IkReal x161=(x101+x102);
IkReal x162=(x77+x81);
IkReal x163=(x98+x97);
IkReal x164=(x91+x90);
IkReal x165=(x77+x82);
IkReal x166=(x124+x79);
IkReal x167=(x93+x92);
IkReal x168=(x99+x96);
IkReal x169=(x107+x93);
IkReal x170=(x78+x81);
IkReal x171=(x77+x78);
IkReal x172=(x91+x92);
IkReal x173=(x98+x95);
IkReal x174=(x104+x105);
IkReal x175=(x86+x85);
IkReal x176=(x100+x96);
IkReal x177=(x82+x81);
IkReal x178=(x89+x90);
IkReal x179=(x132+x80);
IkReal x180=(x152+x122);
IkReal x181=(x138+x94);
IkReal x182=(x137+x89);
IkReal x183=(x139+x95);
IkReal x184=(x144+x113);
IkReal x185=(x133+x79);
IkReal x186=(x151+x121);
IkReal x187=(x140+x108);
IkReal x188=(x149+x117);
IkReal x189=(x146+x115);
IkReal x190=(x136+x88);
IkReal x191=(x147+x116);
IkReal x192=(x148+x118);
IkReal x193=(x141+x110);
IkReal x194=(x114+x191);
IkReal x195=(x108+x193);
IkReal x196=(x168+x100+x95);
op[0]=((((-1.0)*x162))+(((-1.0)*x185))+x179+x160);
op[1]=x134;
op[2]=((((-1.0)*x175))+(((-1.0)*x87)));
op[3]=x135;
op[4]=((((-1.0)*x177))+x179+x171+(((-1.0)*x133))+x79);
op[5]=x158;
op[6]=x134;
op[7]=((((-1.0)*x170))+(((-1.0)*x185))+x179+x165);
op[8]=x135;
op[9]=(x85+(((-1.0)*x87))+(((-1.0)*x86)));
op[10]=x158;
op[11]=((((-1.0)*x162))+(((-1.0)*x160))+x179+(((-1.0)*x133))+x79);
op[12]=((((-1.0)*x164))+(((-1.0)*x182))+x167+x190);
op[13]=((-0.0274241370967742)+(((-1.0)*x183))+x176+x181+x98+(((-1.0)*x97))+(((-1.0)*x99)));
op[14]=((((-1.0)*x106))+(((-1.0)*x105))+x104);
op[15]=((((-1.0)*x161))+(((-1.0)*x103)));
op[16]=((((-1.0)*x164))+(((-1.0)*x167))+x190+(((-1.0)*x137))+x89);
op[17]=((-0.0274241370967742)+(((-1.0)*x163))+(((-1.0)*x100))+x181+(((-1.0)*x139))+x95+x96+(((-1.0)*x99)));
op[18]=((((-1.0)*x163))+(((-1.0)*x183))+x156+x100+x181+(((-1.0)*x96)));
op[19]=((((-1.0)*x190))+x178+x107+x92+(((-1.0)*x93))+(((-1.0)*x91)));
op[20]=((((-1.0)*x103))+(((-1.0)*x102))+x101);
op[21]=(x174+x106);
op[22]=((((-1.0)*x176))+x173+x156+x181+(((-1.0)*x139))+(((-1.0)*x97)));
op[23]=((((-1.0)*x172))+(((-1.0)*x190))+x169+x90+(((-1.0)*x89)));
op[24]=((((-1.0)*x187))+x109+x193);
op[25]=x111;
op[26]=((((-1.0)*x184))+(((-1.0)*x112))+x143);
op[27]=x142;
op[28]=((((-1.0)*x109))+(((-1.0)*x195))+x140);
op[29]=x145;
op[30]=x111;
op[31]=((((-1.0)*x187))+(((-1.0)*x109))+x193);
op[32]=x142;
op[33]=((((-1.0)*x184))+x143+x112);
op[34]=x145;
op[35]=((((-1.0)*x195))+x140+x109);
op[36]=((((-1.0)*x189))+(((-1.0)*x114))+x191);
op[37]=((-0.0705329032258065)+(((-1.0)*x192))+x119+x188);
op[38]=((((-1.0)*x180))+x153+x123);
op[39]=((((-1.0)*x186))+(((-1.0)*x120))+x150);
op[40]=((((-1.0)*x191))+(((-1.0)*x115))+x146+x114);
op[41]=((-0.0705329032258065)+(((-1.0)*x188))+(((-1.0)*x118))+(((-1.0)*x119))+x148);
op[42]=((0.0705329032258065)+(((-1.0)*x192))+(((-1.0)*x119))+x188);
op[43]=((((-1.0)*x194))+x189);
op[44]=((((-1.0)*x186))+x150+x120);
op[45]=((((-1.0)*x153))+x123+x180);
op[46]=((0.0705329032258065)+(((-1.0)*x188))+(((-1.0)*x118))+x148+x119);
op[47]=((((-1.0)*x146))+x115+x194);
op[48]=((((-1.0)*x179))+(((-1.0)*x170))+x166+x165);
op[49]=x154;
op[50]=(x87+x85+(((-1.0)*x86)));
op[51]=x125;
op[52]=((((-1.0)*x162))+(((-1.0)*x160))+(((-1.0)*x79))+(((-1.0)*x179))+x124);
op[53]=x159;
op[54]=x154;
op[55]=((((-1.0)*x162))+(((-1.0)*x179))+x160+x166);
op[56]=x125;
op[57]=((((-1.0)*x175))+x87);
op[58]=x159;
op[59]=((((-1.0)*x79))+(((-1.0)*x179))+(((-1.0)*x177))+x171+x124);
op[60]=((((-1.0)*x190))+x169+x89+x91+(((-1.0)*x90))+(((-1.0)*x92)));
op[61]=((((-1.0)*x168))+(((-1.0)*x181))+x173+x157+x100+(((-1.0)*x97)));
op[62]=((((-1.0)*x174))+x106);
op[63]=((((-1.0)*x161))+x103);
op[64]=((((-1.0)*x178))+(((-1.0)*x190))+x172+x107+(((-1.0)*x93)));
op[65]=((((-1.0)*x163))+(((-1.0)*x181))+(((-1.0)*x196))+x157);
op[66]=((((-1.0)*x163))+(((-1.0)*x181))+x155+x196);
op[67]=((((-1.0)*x167))+(((-1.0)*x182))+x164+x190);
op[68]=((((-1.0)*x102))+x101+x103);
op[69]=((((-1.0)*x106))+(((-1.0)*x104))+x105);
op[70]=((((-1.0)*x181))+(((-1.0)*x100))+x168+x155+x98+(((-1.0)*x97))+(((-1.0)*x95)));
op[71]=(x167+x164+x190+(((-1.0)*x137))+x89);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j5array[16], cj5array[16], sj5array[16], j6array[16], cj6array[16], sj6array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ij5 += 3)
{
IkReal htj5 = zeror[ij5+0], htj6 = zeror[ij5+1], htj1 = zeror[ij5+2];
if(isnan(htj5)||isnan(htj6)||isnan(htj1)){
continue;
}
j5array[numsolutions]=((2.0)*(atan(htj5)));
j6array[numsolutions]=((2.0)*(atan(htj6)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x197=htj5*htj5;
CheckValue<IkReal> x198=IKPowWithIntegerCheck(((1.0)+x197),-1);
if(!x198.valid){
continue;
}
cj5array[numsolutions]=((x198.value)*(((1.0)+(((-1.0)*x197)))));
CheckValue<IkReal> x199=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x199.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x199.value));
}
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x200=htj6*htj6;
CheckValue<IkReal> x201=IKPowWithIntegerCheck(((1.0)+x200),-1);
if(!x201.valid){
continue;
}
cj6array[numsolutions]=((x201.value)*(((1.0)+(((-1.0)*x200)))));
CheckValue<IkReal> x202=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x202.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x202.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x203=htj1*htj1;
CheckValue<IkReal> x204=IKPowWithIntegerCheck(((1.0)+x203),-1);
if(!x204.valid){
continue;
}
cj1array[numsolutions]=((x204.value)*(((1.0)+(((-1.0)*x203)))));
CheckValue<IkReal> x205=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x205.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x205.value));
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j5valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj5 = 16;
_nj6 = 1;
_nj1 = 1;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( !j5valid[iij5] ) { continue; }
if( IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij5]-cj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij5]-sj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij5]-cj1array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij5]-sj1array[iij5]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j5valid[iij5]=false; _ij5[1] = iij5; _ij6[1] = 0; _ij1[1] = 0;  break; 
}
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

    j6 = j6array[ij5]; cj6 = cj6array[ij5]; sj6 = sj6array[ij5];

    j1 = j1array[ij5]; cj1 = cj1array[ij5]; sj1 = sj1array[ij5];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j4eval[1];
IkReal x206=(cj6*sj1);
IkReal x207=(cj5*r00);
IkReal x208=(cj1*r10);
IkReal x209=((4.0)*sj6);
IkReal x210=((16.0)*cj5);
IkReal x211=((8.0)*cj1);
IkReal x212=(cj5*sj6);
IkReal x213=(r12*sj5);
IkReal x214=(cj1*r11);
IkReal x215=(r01*sj1);
IkReal x216=(r02*sj1*sj5);
IkReal x217=((((4.0)*cj6*x214))+((x208*x209)));
IkReal x218=(((r00*sj1*x209))+(((4.0)*r01*x206)));
j4eval[0]=((((0.5)*(IKabs(((((-16.0)*x206*x207))+(((-1.0)*sj6*x210*x214))+((cj6*x208*x210))+((sj6*x210*x215))+(((16.0)*x216))+(((-16.0)*cj1*x213)))))))+(IKabs((x218+(((-1.0)*x217)))))+(IKabs(((((8.0)*x212*x215))+(((8.0)*x216))+(((-1.0)*x211*x213))+(((-8.0)*x206*x207))+(((8.0)*cj5*cj6*x208))+(((-1.0)*r11*x211*x212)))))+(((0.5)*(IKabs((x217+(((-1.0)*x218))))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j2, j3, j4]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x219=(cj6*sj1);
IkReal x220=(cj5*r00);
IkReal x221=(cj1*r10);
IkReal x222=((4.0)*sj6);
IkReal x223=((16.0)*cj5);
IkReal x224=((8.0)*cj1);
IkReal x225=(cj5*sj6);
IkReal x226=(r12*sj5);
IkReal x227=(cj1*r11);
IkReal x228=(r01*sj1);
IkReal x229=(r02*sj1*sj5);
IkReal x230=((((4.0)*cj6*x227))+((x221*x222)));
IkReal x231=(((r00*sj1*x222))+(((4.0)*r01*x219)));
IkReal x232=((((-1.0)*x230))+x231);
IkReal x233=((((-1.0)*x231))+x230);
IkReal x234=((((8.0)*cj5*cj6*x221))+(((-1.0)*x224*x226))+(((-1.0)*r11*x224*x225))+(((8.0)*x225*x228))+(((8.0)*x229))+(((-8.0)*x219*x220)));
op[0]=x232;
op[1]=x234;
op[2]=x232;
op[3]=((((-16.0)*cj1*x226))+((sj6*x223*x228))+(((16.0)*x229))+(((-1.0)*sj6*x223*x227))+((cj6*x221*x223))+(((-16.0)*x219*x220)));
op[4]=x233;
op[5]=x234;
op[6]=x233;
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j2eval[1];
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x235=(cj4*cj5);
IkReal x236=(r11*sj6);
IkReal x237=(cj6*r10);
if( IKabs((((r10*sj4*sj6))+(((-1.0)*x235*x237))+((x235*x236))+((cj6*r11*sj4))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*sj5*x236))+((sj5*x237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj4*sj6))+(((-1.0)*x235*x237))+((x235*x236))+((cj6*r11*sj4))+((cj4*r12*sj5))))+IKsqr((((cj5*r12))+(((-1.0)*sj5*x236))+((sj5*x237))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*sj4*sj6))+(((-1.0)*x235*x237))+((x235*x236))+((cj6*r11*sj4))+((cj4*r12*sj5))), (((cj5*r12))+(((-1.0)*sj5*x236))+((sj5*x237))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x238=IKcos(j3);
IkReal x239=IKsin(j3);
IkReal x240=(r11*sj6);
IkReal x241=(cj4*cj5);
IkReal x242=(cj6*r10);
evalcond[0]=((((-1.0)*cj5*r12))+(((-1.0)*sj5*x242))+((sj5*x240))+x238);
evalcond[1]=((-0.293)+(((-0.076)*x240))+(((-0.0775)*x239))+(((0.3425)*x238))+(((0.076)*x242))+(((-1.0)*py)));
evalcond[2]=(((x240*x241))+((r10*sj4*sj6))+(((-1.0)*x241*x242))+((cj6*r11*sj4))+(((-1.0)*x239))+((cj4*r12*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x243=(cj6*sj5);
IkReal x244=((1.0)*sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj5*r22))+(((-1.0)*r21*x244))+((r20*x243)))))+(IKabs(((((-1.0)*r01*x244))+((r00*x243))+((cj5*r02))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=((1.0)+(((6.52380952380952)*sj3))+(((1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x245=((0.584615384615385)*cj6);
IkReal x246=((0.584615384615385)*sj6);
if( IKabs((((r21*x246))+(((7.69230769230769)*pz))+(((-1.0)*r20*x245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x245))+((r01*x246))+(((7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x246))+(((7.69230769230769)*pz))+(((-1.0)*r20*x245))))+IKsqr(((((-1.0)*r00*x245))+((r01*x246))+(((7.69230769230769)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x246))+(((7.69230769230769)*pz))+(((-1.0)*r20*x245))), ((((-1.0)*r00*x245))+((r01*x246))+(((7.69230769230769)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x247=IKsin(j2);
IkReal x248=IKcos(j2);
IkReal x249=(sj4*sj5);
IkReal x250=(r21*sj6);
IkReal x251=(cj5*sj4);
IkReal x252=(cj5*cj6);
IkReal x253=(r01*sj6);
IkReal x254=(cj6*r20);
IkReal x255=(sj4*sj6);
IkReal x256=((1.0)*cj4);
IkReal x257=(cj6*sj4);
IkReal x258=(cj4*cj5);
IkReal x259=(cj4*sj5);
IkReal x260=(cj6*r00);
IkReal x261=(r20*x256);
evalcond[0]=((((-0.076)*x250))+(((0.076)*x254))+(((-1.0)*pz))+(((0.13)*x247)));
evalcond[1]=((((0.076)*x260))+(((-0.076)*x253))+(((-1.0)*px))+(((0.13)*x248)));
evalcond[2]=(((r21*x257))+((r20*x255))+((x250*x258))+x247+((r22*x259))+(((-1.0)*x252*x261)));
evalcond[3]=(((r00*x255))+((r01*x257))+(((-1.0)*r00*x252*x256))+x248+((x253*x258))+((r02*x259)));
evalcond[4]=((((-1.0)*r00*sj6*x256))+((r02*x249))+((x251*x253))+x247+(((-1.0)*x251*x260))+(((-1.0)*cj6*r01*x256)));
evalcond[5]=((((-1.0)*sj6*x261))+(((-1.0)*x248))+(((-1.0)*cj6*r21*x256))+((r22*x249))+(((-1.0)*x251*x254))+((x250*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x262=((3.04)*cj6);
IkReal x263=((3.04)*sj6);
if( IKabs(((((-1.0)*r21*x263))+(((-40.0)*pz))+((r20*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x263))+((r00*x262))+(((-40.0)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x263))+(((-40.0)*pz))+((r20*x262))))+IKsqr(((((-1.0)*r01*x263))+((r00*x262))+(((-40.0)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x263))+(((-40.0)*pz))+((r20*x262))), ((((-1.0)*r01*x263))+((r00*x262))+(((-40.0)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x264=IKsin(j2);
IkReal x265=IKcos(j2);
IkReal x266=(sj4*sj5);
IkReal x267=(r21*sj6);
IkReal x268=(cj5*sj4);
IkReal x269=(cj5*cj6);
IkReal x270=(r01*sj6);
IkReal x271=(cj6*r20);
IkReal x272=(sj4*sj6);
IkReal x273=((1.0)*cj4);
IkReal x274=(cj6*sj4);
IkReal x275=(cj4*cj5);
IkReal x276=(cj4*sj5);
IkReal x277=(cj6*r00);
IkReal x278=((1.0)*x265);
IkReal x279=(r20*x273);
evalcond[0]=((((-0.025)*x264))+(((-0.076)*x267))+(((0.076)*x271))+(((-1.0)*pz)));
evalcond[1]=((((-0.076)*x270))+(((-0.025)*x265))+(((0.076)*x277))+(((-1.0)*px)));
evalcond[2]=((((-1.0)*x264))+((r22*x276))+(((-1.0)*x269*x279))+((r21*x274))+((r20*x272))+((x267*x275)));
evalcond[3]=(((r02*x266))+(((-1.0)*r00*sj6*x273))+x264+(((-1.0)*x268*x277))+(((-1.0)*cj6*r01*x273))+((x268*x270)));
evalcond[4]=(((r02*x276))+((x270*x275))+(((-1.0)*r00*x269*x273))+((r01*x274))+(((-1.0)*x278))+((r00*x272)));
evalcond[5]=(((x267*x268))+(((-1.0)*sj6*x279))+((r22*x266))+(((-1.0)*cj6*r21*x273))+(((-1.0)*x268*x271))+(((-1.0)*x278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.53164556962025)*px))+(((-0.192405063291139)*cj6*r00))+(((0.192405063291139)*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))+IKsqr(((((2.53164556962025)*px))+(((-0.192405063291139)*cj6*r00))+(((0.192405063291139)*r01*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))), ((((2.53164556962025)*px))+(((-0.192405063291139)*cj6*r00))+(((0.192405063291139)*r01*sj6))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x280=IKsin(j2);
IkReal x281=IKcos(j2);
IkReal x282=(sj4*sj5);
IkReal x283=(r21*sj6);
IkReal x284=(cj5*sj4);
IkReal x285=(r01*sj6);
IkReal x286=((1.0)*cj5);
IkReal x287=((1.0)*r20);
IkReal x288=(cj4*sj6);
IkReal x289=(cj6*sj5);
IkReal x290=((1.0)*r00);
IkReal x291=((0.076)*cj6);
IkReal x292=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*x287*x289))+(((-1.0)*r22*x286))+x280+((sj5*x283)));
evalcond[1]=((((-0.076)*x283))+((r20*x291))+(((-1.0)*pz))+(((0.395)*x280)));
evalcond[2]=((((-1.0)*r02*x286))+(((-1.0)*x289*x290))+x281+((sj5*x285)));
evalcond[3]=((((-0.076)*x285))+(((-1.0)*px))+((r00*x291))+(((0.395)*x281)));
evalcond[4]=(((x284*x285))+((r02*x282))+x280+(((-1.0)*x288*x290))+(((-1.0)*cj6*x284*x290))+(((-1.0)*r01*x292)));
evalcond[5]=((((-1.0)*x287*x288))+(((-1.0)*cj6*x284*x287))+((r22*x282))+(((-1.0)*x281))+(((-1.0)*r21*x292))+((x283*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x293=((0.262068965517241)*sj6);
IkReal x294=((0.262068965517241)*cj6);
if( IKabs(((((-3.44827586206897)*pz))+((r20*x294))+(((-1.0)*r21*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.44827586206897)*px))+((r00*x294))+(((-1.0)*r01*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.44827586206897)*pz))+((r20*x294))+(((-1.0)*r21*x293))))+IKsqr(((((-3.44827586206897)*px))+((r00*x294))+(((-1.0)*r01*x293))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-3.44827586206897)*pz))+((r20*x294))+(((-1.0)*r21*x293))), ((((-3.44827586206897)*px))+((r00*x294))+(((-1.0)*r01*x293))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x295=IKsin(j2);
IkReal x296=IKcos(j2);
IkReal x297=(sj4*sj5);
IkReal x298=(r21*sj6);
IkReal x299=(cj5*sj4);
IkReal x300=(r01*sj6);
IkReal x301=((1.0)*cj5);
IkReal x302=((1.0)*r20);
IkReal x303=(cj4*sj6);
IkReal x304=(cj6*sj5);
IkReal x305=((1.0)*r00);
IkReal x306=((0.076)*cj6);
IkReal x307=((1.0)*x296);
IkReal x308=((1.0)*cj4*cj6);
evalcond[0]=((((-0.29)*x295))+(((-1.0)*pz))+((r20*x306))+(((-0.076)*x298)));
evalcond[1]=((((-0.29)*x296))+(((-1.0)*px))+(((-0.076)*x300))+((r00*x306)));
evalcond[2]=(((sj5*x298))+(((-1.0)*x295))+(((-1.0)*r22*x301))+(((-1.0)*x302*x304)));
evalcond[3]=(((sj5*x300))+(((-1.0)*r02*x301))+(((-1.0)*x304*x305))+(((-1.0)*x307)));
evalcond[4]=((((-1.0)*r01*x308))+(((-1.0)*x303*x305))+((x299*x300))+x295+((r02*x297))+(((-1.0)*cj6*x299*x305)));
evalcond[5]=((((-1.0)*r21*x308))+(((-1.0)*x302*x303))+((x298*x299))+(((-1.0)*x307))+((r22*x297))+(((-1.0)*cj6*x299*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.372597569911564)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x309=((57213427.3137081)*sj6);
IkReal x310=((57213427.3137081)*cj6);
if( IKabs(((((-1.0)*r20*x310))+((r21*x309))+(((752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x310))+(((752808254.127739)*px))+((r01*x309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x310))+((r21*x309))+(((752808254.127739)*pz))))+IKsqr(((((-1.0)*r00*x310))+(((752808254.127739)*px))+((r01*x309))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x310))+((r21*x309))+(((752808254.127739)*pz))), ((((-1.0)*r00*x310))+(((752808254.127739)*px))+((r01*x309))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x311=IKsin(j2);
IkReal x312=IKcos(j2);
IkReal x313=(sj4*sj6);
IkReal x314=(sj4*sj5);
IkReal x315=(cj5*r21);
IkReal x316=((1.0)*cj5);
IkReal x317=(cj4*r20);
IkReal x318=((0.076)*sj6);
IkReal x319=(cj5*r01);
IkReal x320=((1.0)*sj6);
IkReal x321=(cj6*r20);
IkReal x322=((1.0)*sj5);
IkReal x323=(sj5*sj6);
IkReal x324=(cj6*r00);
IkReal x325=(cj6*sj4);
IkReal x326=(cj4*sj6);
IkReal x327=(cj4*sj5);
IkReal x328=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*r21*x318))+(((1.32835950524835e-9)*x311))+(((-1.0)*pz))+(((0.076)*x321)));
evalcond[1]=((((-1.0)*r01*x318))+(((1.32835950524835e-9)*x312))+(((-1.0)*px))+(((0.076)*x324)));
evalcond[2]=(((r21*x323))+(((-1.0)*x321*x322))+(((-0.36403599)*x311))+(((-1.0)*r22*x316)));
evalcond[3]=((((-1.0)*r02*x316))+((r01*x323))+(((-1.0)*x322*x324))+(((-0.36403599)*x312)));
evalcond[4]=(((r21*x325))+((r20*x313))+((r22*x327))+((x315*x326))+(((0.931384876172381)*x311))+(((-1.0)*cj6*x316*x317)));
evalcond[5]=((((-1.0)*cj4*r00*x320))+((r02*x314))+(((-1.0)*sj4*x316*x324))+x311+(((-1.0)*r01*x328))+((x313*x319)));
evalcond[6]=(((r02*x327))+(((-1.0)*cj4*x316*x324))+((r01*x325))+((r00*x313))+(((0.931384876172381)*x312))+((x319*x326)));
evalcond[7]=((((-1.0)*x317*x320))+(((-1.0)*sj4*x316*x321))+(((-1.0)*x312))+(((-1.0)*r21*x328))+((r22*x314))+((x313*x315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x329=((64920240.9929408)*cj6);
IkReal x330=((64920240.9929408)*sj6);
if( IKabs((((r20*x329))+(((-854213697.275536)*pz))+(((-1.0)*r21*x330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-854213697.275536)*px))+((r00*x329))+(((-1.0)*r01*x330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x329))+(((-854213697.275536)*pz))+(((-1.0)*r21*x330))))+IKsqr(((((-854213697.275536)*px))+((r00*x329))+(((-1.0)*r01*x330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x329))+(((-854213697.275536)*pz))+(((-1.0)*r21*x330))), ((((-854213697.275536)*px))+((r00*x329))+(((-1.0)*r01*x330))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x331=IKsin(j2);
IkReal x332=IKcos(j2);
IkReal x333=(r21*sj6);
IkReal x334=(sj4*sj5);
IkReal x335=(cj5*sj4);
IkReal x336=((1.0)*cj5);
IkReal x337=(cj4*r20);
IkReal x338=(r01*sj6);
IkReal x339=((1.0)*sj6);
IkReal x340=(sj4*sj6);
IkReal x341=(cj6*r00);
IkReal x342=(cj6*sj4);
IkReal x343=(cj4*cj5);
IkReal x344=(cj4*sj5);
IkReal x345=((1.0)*cj6*r20);
IkReal x346=((1.0)*cj4*cj6);
evalcond[0]=((((0.076)*cj6*r20))+(((-1.17066725011486e-9)*x331))+(((-1.0)*pz))+(((-0.076)*x333)));
evalcond[1]=((((-1.17066725011486e-9)*x332))+(((0.076)*x341))+(((-1.0)*px))+(((-0.076)*x338)));
evalcond[2]=((((-1.0)*sj5*x345))+((sj5*x333))+(((0.07239889)*x331))+(((-1.0)*r22*x336)));
evalcond[3]=(((sj5*x338))+(((0.07239889)*x332))+(((-1.0)*r02*x336))+(((-1.0)*sj5*x341)));
evalcond[4]=(((r21*x342))+((r22*x344))+(((-0.997375754782803)*x331))+(((-1.0)*cj6*x336*x337))+((x333*x343))+((r20*x340)));
evalcond[5]=(((x335*x338))+(((-1.0)*x335*x341))+((r02*x334))+x331+(((-1.0)*r01*x346))+(((-1.0)*cj4*r00*x339)));
evalcond[6]=(((r01*x342))+((r00*x340))+(((-1.0)*cj4*x336*x341))+(((-0.997375754782803)*x332))+((r02*x344))+((x338*x343)));
evalcond[7]=(((r22*x334))+(((-1.0)*x337*x339))+(((-1.0)*x335*x345))+(((-1.0)*x332))+((x333*x335))+(((-1.0)*r21*x346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x347=((1.0)*sj6);
IkReal x348=(cj4*cj5);
CheckValue<IkReal> x349=IKPowWithIntegerCheck(sj3,-1);
if(!x349.valid){
continue;
}
CheckValue<IkReal> x350=IKPowWithIntegerCheck(cj3,-1);
if(!x350.valid){
continue;
}
if( IKabs(((x349.value)*((((cj5*r22))+((cj6*r20*sj5))+(((-1.0)*r21*sj5*x347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x350.value)*((((cj6*r00*x348))+(((-1.0)*cj4*r02*sj5))+(((-1.0)*r00*sj4*x347))+(((-1.0)*r01*x347*x348))+(((-1.0)*cj6*r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x349.value)*((((cj5*r22))+((cj6*r20*sj5))+(((-1.0)*r21*sj5*x347))))))+IKsqr(((x350.value)*((((cj6*r00*x348))+(((-1.0)*cj4*r02*sj5))+(((-1.0)*r00*sj4*x347))+(((-1.0)*r01*x347*x348))+(((-1.0)*cj6*r01*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x349.value)*((((cj5*r22))+((cj6*r20*sj5))+(((-1.0)*r21*sj5*x347))))), ((x350.value)*((((cj6*r00*x348))+(((-1.0)*cj4*r02*sj5))+(((-1.0)*r00*sj4*x347))+(((-1.0)*r01*x347*x348))+(((-1.0)*cj6*r01*sj4))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x351=IKsin(j2);
IkReal x352=IKcos(j2);
IkReal x353=(r21*sj6);
IkReal x354=(sj4*sj5);
IkReal x355=(cj5*sj4);
IkReal x356=((1.0)*cj5);
IkReal x357=(cj4*r20);
IkReal x358=(r01*sj6);
IkReal x359=((0.3425)*sj3);
IkReal x360=((1.0)*sj6);
IkReal x361=(sj4*sj6);
IkReal x362=(cj6*r00);
IkReal x363=(cj6*sj4);
IkReal x364=(cj4*cj5);
IkReal x365=(cj4*sj5);
IkReal x366=(cj3*x351);
IkReal x367=(cj3*x352);
IkReal x368=((1.0)*cj6*r20);
IkReal x369=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*r22*x356))+(((-1.0)*sj5*x368))+((sj5*x353))+((sj3*x351)));
evalcond[1]=(((sj5*x358))+((sj3*x352))+(((-1.0)*sj5*x362))+(((-1.0)*r02*x356)));
evalcond[2]=((((0.076)*cj6*r20))+((x351*x359))+(((-1.0)*pz))+(((-0.076)*x353))+(((0.0775)*x366))+(((0.0525)*x351)));
evalcond[3]=(((r20*x361))+((x353*x364))+x366+(((-1.0)*cj6*x356*x357))+((r21*x363))+((r22*x365)));
evalcond[4]=((((-1.0)*r01*x369))+((x355*x358))+(((-1.0)*cj4*r00*x360))+x351+(((-1.0)*x355*x362))+((r02*x354)));
evalcond[5]=(((x358*x364))+((r01*x363))+((r00*x361))+x367+(((-1.0)*cj4*x356*x362))+((r02*x365)));
evalcond[6]=(((x352*x359))+(((-1.0)*px))+(((0.076)*x362))+(((-0.076)*x358))+(((0.0775)*x367))+(((0.0525)*x352)));
evalcond[7]=((((-1.0)*r21*x369))+(((-1.0)*x355*x368))+((x353*x355))+(((-1.0)*x352))+((r22*x354))+(((-1.0)*x357*x360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x370=IKPowWithIntegerCheck(sj3,-1);
if(!x370.valid){
continue;
}
CheckValue<IkReal> x371=IKPowWithIntegerCheck(((0.0525)+(((0.3425)*sj3))+(((0.0775)*cj3))),-1);
if(!x371.valid){
continue;
}
if( IKabs(((x370.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x371.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x370.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))+IKsqr(((x371.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x370.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))), ((x371.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x372=IKsin(j2);
IkReal x373=IKcos(j2);
IkReal x374=(r21*sj6);
IkReal x375=(sj4*sj5);
IkReal x376=(cj5*sj4);
IkReal x377=((1.0)*cj5);
IkReal x378=(cj4*r20);
IkReal x379=(r01*sj6);
IkReal x380=((0.3425)*sj3);
IkReal x381=((1.0)*sj6);
IkReal x382=(sj4*sj6);
IkReal x383=(cj6*r00);
IkReal x384=(cj6*sj4);
IkReal x385=(cj4*cj5);
IkReal x386=(cj4*sj5);
IkReal x387=(cj3*x372);
IkReal x388=(cj3*x373);
IkReal x389=((1.0)*cj6*r20);
IkReal x390=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*sj5*x389))+((sj5*x374))+((sj3*x372))+(((-1.0)*r22*x377)));
evalcond[1]=((((-1.0)*r02*x377))+((sj5*x379))+(((-1.0)*sj5*x383))+((sj3*x373)));
evalcond[2]=((((0.076)*cj6*r20))+((x372*x380))+(((-0.076)*x374))+(((0.0775)*x387))+(((-1.0)*pz))+(((0.0525)*x372)));
evalcond[3]=(((r22*x386))+(((-1.0)*cj6*x377*x378))+((x374*x385))+((r21*x384))+x387+((r20*x382)));
evalcond[4]=(((r02*x375))+(((-1.0)*r01*x390))+x372+(((-1.0)*x376*x383))+((x376*x379))+(((-1.0)*cj4*r00*x381)));
evalcond[5]=(((r02*x386))+x388+((x379*x385))+(((-1.0)*cj4*x377*x383))+((r00*x382))+((r01*x384)));
evalcond[6]=(((x373*x380))+(((-0.076)*x379))+(((0.0775)*x388))+(((-1.0)*px))+(((0.0525)*x373))+(((0.076)*x383)));
evalcond[7]=((((-1.0)*x373))+(((-1.0)*x376*x389))+(((-1.0)*r21*x390))+((r22*x375))+(((-1.0)*x378*x381))+((x374*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x391=(cj6*sj5);
IkReal x392=((1.0)*sj5*sj6);
CheckValue<IkReal> x393=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x393.valid){
continue;
}
CheckValue<IkReal> x394 = IKatan2WithCheck(IkReal((((r20*x391))+((cj5*r22))+(((-1.0)*r21*x392)))),IkReal((((r00*x391))+(((-1.0)*r01*x392))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x394.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x393.value)))+(x394.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x395=IKsin(j2);
IkReal x396=IKcos(j2);
IkReal x397=(r21*sj6);
IkReal x398=(sj4*sj5);
IkReal x399=(cj5*sj4);
IkReal x400=((1.0)*cj5);
IkReal x401=(cj4*r20);
IkReal x402=(r01*sj6);
IkReal x403=((0.3425)*sj3);
IkReal x404=((1.0)*sj6);
IkReal x405=(sj4*sj6);
IkReal x406=(cj6*r00);
IkReal x407=(cj6*sj4);
IkReal x408=(cj4*cj5);
IkReal x409=(cj4*sj5);
IkReal x410=(cj3*x395);
IkReal x411=(cj3*x396);
IkReal x412=((1.0)*cj6*r20);
IkReal x413=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*sj5*x412))+((sj3*x395))+((sj5*x397))+(((-1.0)*r22*x400)));
evalcond[1]=((((-1.0)*r02*x400))+((sj5*x402))+((sj3*x396))+(((-1.0)*sj5*x406)));
evalcond[2]=((((0.076)*cj6*r20))+(((-0.076)*x397))+(((0.0775)*x410))+(((-1.0)*pz))+((x395*x403))+(((0.0525)*x395)));
evalcond[3]=(((x397*x408))+((r22*x409))+(((-1.0)*cj6*x400*x401))+x410+((r21*x407))+((r20*x405)));
evalcond[4]=((((-1.0)*cj4*r00*x404))+x395+(((-1.0)*x399*x406))+((x399*x402))+(((-1.0)*r01*x413))+((r02*x398)));
evalcond[5]=((((-1.0)*cj4*x400*x406))+((r00*x405))+((r01*x407))+x411+((x402*x408))+((r02*x409)));
evalcond[6]=((((-0.076)*x402))+(((0.076)*x406))+(((0.0775)*x411))+(((-1.0)*px))+((x396*x403))+(((0.0525)*x396)));
evalcond[7]=((((-1.0)*x396))+(((-1.0)*r21*x413))+(((-1.0)*x401*x404))+(((-1.0)*x399*x412))+((r22*x398))+((x397*x399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x414=(cj5*r12);
IkReal x415=(r11*sj6);
IkReal x416=(cj6*r10*sj5);
if( IKabs(((-3.78064516129032)+(((-4.41935483870968)*x416))+(((-4.41935483870968)*x414))+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((0.980645161290323)*x415))+(((4.41935483870968)*sj5*x415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x415))+(((-1.0)*x414))+(((-1.0)*x416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((-4.41935483870968)*x416))+(((-4.41935483870968)*x414))+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((0.980645161290323)*x415))+(((4.41935483870968)*sj5*x415))))+IKsqr((((sj5*x415))+(((-1.0)*x414))+(((-1.0)*x416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((-4.41935483870968)*x416))+(((-4.41935483870968)*x414))+(((12.9032258064516)*py))+(((-0.980645161290323)*cj6*r10))+(((0.980645161290323)*x415))+(((4.41935483870968)*sj5*x415))), (((sj5*x415))+(((-1.0)*x414))+(((-1.0)*x416))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x417=IKcos(j3);
IkReal x418=IKsin(j3);
IkReal x419=(r11*sj6);
IkReal x420=(cj4*cj5);
IkReal x421=(cj6*r10);
evalcond[0]=((((-1.0)*cj5*r12))+((sj5*x419))+(((-1.0)*sj5*x421))+(((-1.0)*x417)));
evalcond[1]=((0.293)+(((-0.076)*x419))+(((-0.3425)*x417))+(((0.0775)*x418))+(((-1.0)*py))+(((0.076)*x421)));
evalcond[2]=(((r10*sj4*sj6))+(((-1.0)*x420*x421))+((x419*x420))+x418+((cj6*r11*sj4))+((cj4*r12*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x422=(cj6*sj5);
IkReal x423=(sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*r21*x423))+((r20*x422))+((cj5*r22)))))+(IKabs(((((-1.0)*r00*x422))+((r01*x423))+(((-1.0)*cj5*r02))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
j2eval[1]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x424=((0.584615384615385)*cj6);
IkReal x425=((0.584615384615385)*sj6);
if( IKabs((((r21*x425))+(((-1.0)*r20*x424))+(((7.69230769230769)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x424))+(((-1.0)*r01*x425))+(((-7.69230769230769)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x425))+(((-1.0)*r20*x424))+(((7.69230769230769)*pz))))+IKsqr((((r00*x424))+(((-1.0)*r01*x425))+(((-7.69230769230769)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x425))+(((-1.0)*r20*x424))+(((7.69230769230769)*pz))), (((r00*x424))+(((-1.0)*r01*x425))+(((-7.69230769230769)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x426=IKsin(j2);
IkReal x427=IKcos(j2);
IkReal x428=(sj4*sj5);
IkReal x429=(cj5*cj6);
IkReal x430=((0.076)*sj6);
IkReal x431=(r20*sj4);
IkReal x432=(r00*sj6);
IkReal x433=((1.0)*cj4);
IkReal x434=(cj6*sj4);
IkReal x435=((0.076)*cj6);
IkReal x436=(cj4*sj5);
IkReal x437=((1.0)*x427);
IkReal x438=(cj5*sj4*sj6);
IkReal x439=(r20*x433);
IkReal x440=(cj4*cj5*sj6);
evalcond[0]=((((0.13)*x426))+(((-1.0)*pz))+(((-1.0)*r21*x430))+((r20*x435)));
evalcond[1]=((((-0.13)*x427))+(((-1.0)*px))+((r00*x435))+(((-1.0)*r01*x430)));
evalcond[2]=(((sj6*x431))+((r21*x440))+((r21*x434))+(((-1.0)*x429*x439))+((r22*x436))+x426);
evalcond[3]=(((sj4*x432))+(((-1.0)*r00*x429*x433))+(((-1.0)*x437))+((r02*x436))+((r01*x440))+((r01*x434)));
evalcond[4]=((((-1.0)*cj6*r21*x433))+(((-1.0)*x437))+(((-1.0)*x429*x431))+((r21*x438))+((r22*x428))+(((-1.0)*sj6*x439)));
evalcond[5]=((((-1.0)*x426))+(((-1.0)*r00*sj4*x429))+(((-1.0)*x432*x433))+((r02*x428))+((r01*x438))+(((-1.0)*cj6*r01*x433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x441=((3.04)*cj6);
IkReal x442=((3.04)*sj6);
if( IKabs(((((-1.0)*r21*x442))+((r20*x441))+(((-40.0)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((40.0)*px))+((r01*x442))+(((-1.0)*r00*x441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x442))+((r20*x441))+(((-40.0)*pz))))+IKsqr(((((40.0)*px))+((r01*x442))+(((-1.0)*r00*x441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x442))+((r20*x441))+(((-40.0)*pz))), ((((40.0)*px))+((r01*x442))+(((-1.0)*r00*x441))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x443=IKcos(j2);
IkReal x444=IKsin(j2);
IkReal x445=(sj4*sj5);
IkReal x446=(cj5*cj6);
IkReal x447=((0.076)*sj6);
IkReal x448=(r20*sj4);
IkReal x449=(r00*sj6);
IkReal x450=((1.0)*cj4);
IkReal x451=(cj6*sj4);
IkReal x452=((0.076)*cj6);
IkReal x453=(cj4*sj5);
IkReal x454=((1.0)*x444);
IkReal x455=(cj5*sj4*sj6);
IkReal x456=(r20*x450);
IkReal x457=(cj4*cj5*sj6);
evalcond[0]=((((-0.025)*x444))+((r20*x452))+(((-1.0)*pz))+(((-1.0)*r21*x447)));
evalcond[1]=((((0.025)*x443))+(((-1.0)*px))+(((-1.0)*r01*x447))+((r00*x452)));
evalcond[2]=(((sj4*x449))+(((-1.0)*r00*x446*x450))+x443+((r02*x453))+((r01*x457))+((r01*x451)));
evalcond[3]=((((-1.0)*x446*x456))+((sj6*x448))+(((-1.0)*x454))+((r21*x451))+((r21*x457))+((r22*x453)));
evalcond[4]=((((-1.0)*x443))+(((-1.0)*cj6*r21*x450))+(((-1.0)*x446*x448))+((r22*x445))+(((-1.0)*sj6*x456))+((r21*x455)));
evalcond[5]=(((r02*x445))+(((-1.0)*r00*sj4*x446))+(((-1.0)*x454))+(((-1.0)*cj6*r01*x450))+((r01*x455))+(((-1.0)*x449*x450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x458=((0.192405063291139)*sj6);
IkReal x459=((0.192405063291139)*cj6);
if( IKabs(((((2.53164556962025)*pz))+(((-1.0)*r20*x459))+((r21*x458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.53164556962025)*px))+(((-1.0)*r01*x458))+((r00*x459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.53164556962025)*pz))+(((-1.0)*r20*x459))+((r21*x458))))+IKsqr(((((-2.53164556962025)*px))+(((-1.0)*r01*x458))+((r00*x459))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((2.53164556962025)*pz))+(((-1.0)*r20*x459))+((r21*x458))), ((((-2.53164556962025)*px))+(((-1.0)*r01*x458))+((r00*x459))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x460=IKsin(j2);
IkReal x461=IKcos(j2);
IkReal x462=(sj4*sj5);
IkReal x463=(r21*sj6);
IkReal x464=(cj5*sj4);
IkReal x465=(r01*sj6);
IkReal x466=((1.0)*cj5);
IkReal x467=((1.0)*r20);
IkReal x468=(cj4*sj6);
IkReal x469=(cj6*sj5);
IkReal x470=((1.0)*r00);
IkReal x471=((0.076)*cj6);
IkReal x472=((1.0)*x461);
IkReal x473=((1.0)*cj4*cj6);
evalcond[0]=(x460+(((-1.0)*r22*x466))+(((-1.0)*x467*x469))+((sj5*x463)));
evalcond[1]=((((-0.076)*x463))+(((0.395)*x460))+((r20*x471))+(((-1.0)*pz)));
evalcond[2]=((((-0.076)*x465))+(((-0.395)*x461))+(((-1.0)*px))+((r00*x471)));
evalcond[3]=((((-1.0)*x469*x470))+(((-1.0)*x472))+(((-1.0)*r02*x466))+((sj5*x465)));
evalcond[4]=(((r22*x462))+(((-1.0)*r21*x473))+((x463*x464))+(((-1.0)*x472))+(((-1.0)*cj6*x464*x467))+(((-1.0)*x467*x468)));
evalcond[5]=((((-1.0)*x468*x470))+(((-1.0)*x460))+(((-1.0)*r01*x473))+((r02*x462))+(((-1.0)*cj6*x464*x470))+((x464*x465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x474=((0.262068965517241)*sj6);
IkReal x475=((0.262068965517241)*cj6);
if( IKabs(((((-1.0)*r21*x474))+(((-3.44827586206897)*pz))+((r20*x475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x475))+(((3.44827586206897)*px))+((r01*x474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x474))+(((-3.44827586206897)*pz))+((r20*x475))))+IKsqr(((((-1.0)*r00*x475))+(((3.44827586206897)*px))+((r01*x474))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x474))+(((-3.44827586206897)*pz))+((r20*x475))), ((((-1.0)*r00*x475))+(((3.44827586206897)*px))+((r01*x474))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x476=IKcos(j2);
IkReal x477=IKsin(j2);
IkReal x478=(sj4*sj5);
IkReal x479=(r21*sj6);
IkReal x480=(cj5*sj4);
IkReal x481=(r01*sj6);
IkReal x482=((1.0)*cj5);
IkReal x483=((1.0)*r20);
IkReal x484=(cj4*sj6);
IkReal x485=(cj6*sj5);
IkReal x486=((1.0)*r00);
IkReal x487=((0.076)*cj6);
IkReal x488=((1.0)*x477);
IkReal x489=((1.0)*cj4*cj6);
evalcond[0]=(((r20*x487))+(((-0.29)*x477))+(((-1.0)*pz))+(((-0.076)*x479)));
evalcond[1]=(x476+((sj5*x481))+(((-1.0)*x485*x486))+(((-1.0)*r02*x482)));
evalcond[2]=((((0.29)*x476))+(((-1.0)*px))+(((-0.076)*x481))+((r00*x487)));
evalcond[3]=(((sj5*x479))+(((-1.0)*x483*x485))+(((-1.0)*x488))+(((-1.0)*r22*x482)));
evalcond[4]=((((-1.0)*x483*x484))+(((-1.0)*cj6*x480*x483))+(((-1.0)*x476))+((r22*x478))+((x479*x480))+(((-1.0)*r21*x489)));
evalcond[5]=((((-1.0)*x484*x486))+(((-1.0)*cj6*x480*x486))+(((-1.0)*x488))+((r02*x478))+((x480*x481))+(((-1.0)*r01*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x490=((64920240.9929408)*cj6);
IkReal x491=((64920240.9929408)*sj6);
if( IKabs(((((-1.0)*r21*x491))+(((-854213697.275536)*pz))+((r20*x490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x490))+(((854213697.275536)*px))+((r01*x491)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x491))+(((-854213697.275536)*pz))+((r20*x490))))+IKsqr(((((-1.0)*r00*x490))+(((854213697.275536)*px))+((r01*x491))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x491))+(((-854213697.275536)*pz))+((r20*x490))), ((((-1.0)*r00*x490))+(((854213697.275536)*px))+((r01*x491))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x492=IKsin(j2);
IkReal x493=IKcos(j2);
IkReal x494=(r21*sj6);
IkReal x495=(sj4*sj5);
IkReal x496=(cj5*sj4);
IkReal x497=((1.0)*cj5);
IkReal x498=(cj4*r20);
IkReal x499=(r01*sj6);
IkReal x500=((1.0)*sj6);
IkReal x501=(sj4*sj6);
IkReal x502=(cj6*r00);
IkReal x503=(cj6*sj4);
IkReal x504=(cj4*cj5);
IkReal x505=(cj4*sj5);
IkReal x506=((1.0)*cj6*r20);
IkReal x507=((1.0)*cj4*cj6);
evalcond[0]=((((0.076)*cj6*r20))+(((-0.076)*x494))+(((-1.0)*pz))+(((-1.17066725011486e-9)*x492)));
evalcond[1]=((((1.17066725011486e-9)*x493))+(((-0.076)*x499))+(((-1.0)*px))+(((0.076)*x502)));
evalcond[2]=((((0.07239889)*x492))+(((-1.0)*r22*x497))+(((-1.0)*sj5*x506))+((sj5*x494)));
evalcond[3]=((((-1.0)*r02*x497))+(((-0.07239889)*x493))+(((-1.0)*sj5*x502))+((sj5*x499)));
evalcond[4]=(((r20*x501))+(((-0.997375754782803)*x492))+((r21*x503))+((x494*x504))+((r22*x505))+(((-1.0)*cj6*x497*x498)));
evalcond[5]=((((0.997375754782803)*x493))+(((-1.0)*cj4*x497*x502))+((r01*x503))+((r00*x501))+((x499*x504))+((r02*x505)));
evalcond[6]=(((r22*x495))+((x494*x496))+(((-1.0)*x496*x506))+(((-1.0)*x493))+(((-1.0)*x498*x500))+(((-1.0)*r21*x507)));
evalcond[7]=((((-1.0)*x496*x502))+((r02*x495))+((x496*x499))+(((-1.0)*x492))+(((-1.0)*r01*x507))+(((-1.0)*cj4*r00*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x508=((57213427.3137081)*sj6);
IkReal x509=((57213427.3137081)*cj6);
if( IKabs(((((-1.0)*r20*x509))+((r21*x508))+(((752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x508))+((r00*x509))+(((-752808254.127739)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x509))+((r21*x508))+(((752808254.127739)*pz))))+IKsqr(((((-1.0)*r01*x508))+((r00*x509))+(((-752808254.127739)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x509))+((r21*x508))+(((752808254.127739)*pz))), ((((-1.0)*r01*x508))+((r00*x509))+(((-752808254.127739)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x510=IKsin(j2);
IkReal x511=IKcos(j2);
IkReal x512=(sj4*sj6);
IkReal x513=(sj4*sj5);
IkReal x514=(cj5*r21);
IkReal x515=((1.0)*cj5);
IkReal x516=(cj4*r20);
IkReal x517=((0.076)*sj6);
IkReal x518=(cj5*r01);
IkReal x519=((1.0)*sj6);
IkReal x520=(cj6*r20);
IkReal x521=((1.0)*sj5);
IkReal x522=(sj5*sj6);
IkReal x523=(cj6*r00);
IkReal x524=(cj6*sj4);
IkReal x525=(cj4*sj6);
IkReal x526=(cj4*sj5);
IkReal x527=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*pz))+(((-1.0)*r21*x517))+(((0.076)*x520))+(((1.32835950524835e-9)*x510)));
evalcond[1]=((((-1.0)*r01*x517))+(((-1.0)*px))+(((-1.32835950524835e-9)*x511))+(((0.076)*x523)));
evalcond[2]=(((r21*x522))+(((-1.0)*r22*x515))+(((-1.0)*x520*x521))+(((-0.36403599)*x510)));
evalcond[3]=((((0.36403599)*x511))+(((-1.0)*x521*x523))+(((-1.0)*r02*x515))+((r01*x522)));
evalcond[4]=(((r21*x524))+(((0.931384876172381)*x510))+((r20*x512))+((r22*x526))+(((-1.0)*cj6*x515*x516))+((x514*x525)));
evalcond[5]=((((-1.0)*cj4*x515*x523))+((r02*x526))+(((-0.931384876172381)*x511))+((x518*x525))+((r01*x524))+((r00*x512)));
evalcond[6]=((((-1.0)*x511))+(((-1.0)*r21*x527))+((x512*x514))+(((-1.0)*sj4*x515*x520))+(((-1.0)*x516*x519))+((r22*x513)));
evalcond[7]=((((-1.0)*x510))+(((-1.0)*r01*x527))+(((-1.0)*cj4*r00*x519))+((x512*x518))+(((-1.0)*sj4*x515*x523))+((r02*x513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x528=(cj4*cj5);
CheckValue<IkReal> x529=IKPowWithIntegerCheck(sj3,-1);
if(!x529.valid){
continue;
}
CheckValue<IkReal> x530=IKPowWithIntegerCheck(cj3,-1);
if(!x530.valid){
continue;
}
if( IKabs(((x529.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x530.value)*((((r00*sj4*sj6))+((cj6*r01*sj4))+((r01*sj6*x528))+((cj4*r02*sj5))+(((-1.0)*cj6*r00*x528)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x529.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))+IKsqr(((x530.value)*((((r00*sj4*sj6))+((cj6*r01*sj4))+((r01*sj6*x528))+((cj4*r02*sj5))+(((-1.0)*cj6*r00*x528))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x529.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))), ((x530.value)*((((r00*sj4*sj6))+((cj6*r01*sj4))+((r01*sj6*x528))+((cj4*r02*sj5))+(((-1.0)*cj6*r00*x528))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x531=IKsin(j2);
IkReal x532=IKcos(j2);
IkReal x533=(r21*sj6);
IkReal x534=(sj4*sj5);
IkReal x535=(cj5*sj4);
IkReal x536=((1.0)*cj5);
IkReal x537=(cj4*r20);
IkReal x538=(r01*sj6);
IkReal x539=((0.3425)*sj3);
IkReal x540=((1.0)*sj6);
IkReal x541=(sj4*sj6);
IkReal x542=(cj6*r00);
IkReal x543=(cj6*sj4);
IkReal x544=(cj4*cj5);
IkReal x545=(cj4*sj5);
IkReal x546=((1.0)*x532);
IkReal x547=(cj3*x531);
IkReal x548=((1.0)*cj6*r20);
IkReal x549=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*r22*x536))+((sj3*x531))+(((-1.0)*sj5*x548))+((sj5*x533)));
evalcond[1]=((((-1.0)*sj3*x546))+(((-1.0)*sj5*x542))+((sj5*x538))+(((-1.0)*r02*x536)));
evalcond[2]=((((0.076)*cj6*r20))+((x531*x539))+(((-0.076)*x533))+(((-1.0)*pz))+(((0.0775)*x547))+(((0.0525)*x531)));
evalcond[3]=(((r21*x543))+((r20*x541))+((r22*x545))+(((-1.0)*cj6*x536*x537))+x547+((x533*x544)));
evalcond[4]=((((-1.0)*x532*x539))+(((-0.0525)*x532))+(((-0.0775)*cj3*x532))+(((-0.076)*x538))+(((-1.0)*px))+(((0.076)*x542)));
evalcond[5]=(((r02*x545))+(((-1.0)*cj3*x546))+(((-1.0)*cj4*x536*x542))+((x538*x544))+((r00*x541))+((r01*x543)));
evalcond[6]=((((-1.0)*x537*x540))+(((-1.0)*x546))+(((-1.0)*r21*x549))+((r22*x534))+(((-1.0)*x535*x548))+((x533*x535)));
evalcond[7]=((((-1.0)*x535*x542))+((r02*x534))+(((-1.0)*x531))+(((-1.0)*r01*x549))+(((-1.0)*cj4*r00*x540))+((x535*x538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x550=IKPowWithIntegerCheck(sj3,-1);
if(!x550.valid){
continue;
}
CheckValue<IkReal> x551=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x551.valid){
continue;
}
if( IKabs(((x550.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x551.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x550.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))+IKsqr(((x551.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x550.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))), ((x551.value)*(((((0.076)*r01*sj6))+px+(((-0.076)*cj6*r00))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x552=IKsin(j2);
IkReal x553=IKcos(j2);
IkReal x554=(r21*sj6);
IkReal x555=(sj4*sj5);
IkReal x556=(cj5*sj4);
IkReal x557=((1.0)*cj5);
IkReal x558=(cj4*r20);
IkReal x559=(r01*sj6);
IkReal x560=((0.3425)*sj3);
IkReal x561=((1.0)*sj6);
IkReal x562=(sj4*sj6);
IkReal x563=(cj6*r00);
IkReal x564=(cj6*sj4);
IkReal x565=(cj4*cj5);
IkReal x566=(cj4*sj5);
IkReal x567=((1.0)*x553);
IkReal x568=(cj3*x552);
IkReal x569=((1.0)*cj6*r20);
IkReal x570=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*r22*x557))+((sj5*x554))+((sj3*x552))+(((-1.0)*sj5*x569)));
evalcond[1]=(((sj5*x559))+(((-1.0)*r02*x557))+(((-1.0)*sj5*x563))+(((-1.0)*sj3*x567)));
evalcond[2]=((((0.076)*cj6*r20))+((x552*x560))+(((-1.0)*pz))+(((0.0525)*x552))+(((-0.076)*x554))+(((0.0775)*x568)));
evalcond[3]=(((r22*x566))+(((-1.0)*cj6*x557*x558))+((r21*x564))+x568+((r20*x562))+((x554*x565)));
evalcond[4]=((((-0.0525)*x553))+(((0.076)*x563))+(((-0.0775)*cj3*x553))+(((-1.0)*px))+(((-0.076)*x559))+(((-1.0)*x553*x560)));
evalcond[5]=((((-1.0)*cj3*x567))+(((-1.0)*cj4*x557*x563))+((r01*x564))+((r00*x562))+((r02*x566))+((x559*x565)));
evalcond[6]=((((-1.0)*x558*x561))+((x554*x556))+(((-1.0)*x556*x569))+((r22*x555))+(((-1.0)*r21*x570))+(((-1.0)*x567)));
evalcond[7]=((((-1.0)*x552))+(((-1.0)*r01*x570))+((r02*x555))+(((-1.0)*cj4*r00*x561))+(((-1.0)*x556*x563))+((x556*x559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x571=(cj6*sj5);
IkReal x572=(sj5*sj6);
CheckValue<IkReal> x573 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*x571))+(((-1.0)*r21*x572)))),IkReal(((((-1.0)*r00*x571))+((r01*x572))+(((-1.0)*cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x574.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x573.value)+(((1.5707963267949)*(x574.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x575=IKsin(j2);
IkReal x576=IKcos(j2);
IkReal x577=(r21*sj6);
IkReal x578=(sj4*sj5);
IkReal x579=(cj5*sj4);
IkReal x580=((1.0)*cj5);
IkReal x581=(cj4*r20);
IkReal x582=(r01*sj6);
IkReal x583=((0.3425)*sj3);
IkReal x584=((1.0)*sj6);
IkReal x585=(sj4*sj6);
IkReal x586=(cj6*r00);
IkReal x587=(cj6*sj4);
IkReal x588=(cj4*cj5);
IkReal x589=(cj4*sj5);
IkReal x590=((1.0)*x576);
IkReal x591=(cj3*x575);
IkReal x592=((1.0)*cj6*r20);
IkReal x593=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*r22*x580))+(((-1.0)*sj5*x592))+((sj3*x575))+((sj5*x577)));
evalcond[1]=((((-1.0)*r02*x580))+((sj5*x582))+(((-1.0)*sj3*x590))+(((-1.0)*sj5*x586)));
evalcond[2]=((((0.076)*cj6*r20))+(((0.0525)*x575))+(((-1.0)*pz))+((x575*x583))+(((-0.076)*x577))+(((0.0775)*x591)));
evalcond[3]=(((r20*x585))+((x577*x588))+(((-1.0)*cj6*x580*x581))+x591+((r22*x589))+((r21*x587)));
evalcond[4]=((((-0.076)*x582))+(((-1.0)*px))+(((-0.0775)*cj3*x576))+(((-1.0)*x576*x583))+(((0.076)*x586))+(((-0.0525)*x576)));
evalcond[5]=((((-1.0)*cj4*x580*x586))+((x582*x588))+((r02*x589))+(((-1.0)*cj3*x590))+((r01*x587))+((r00*x585)));
evalcond[6]=((((-1.0)*r21*x593))+(((-1.0)*x590))+((x577*x579))+((r22*x578))+(((-1.0)*x579*x592))+(((-1.0)*x581*x584)));
evalcond[7]=((((-1.0)*r01*x593))+((x579*x582))+((r02*x578))+(((-1.0)*x575))+(((-1.0)*x579*x586))+(((-1.0)*cj4*r00*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x594=(cj6*r00);
IkReal x595=(cj5*r02);
IkReal x596=((4.41935483870968)*sj5);
IkReal x597=(r01*sj6);
if( IKabs(((-3.78064516129032)+(((12.9032258064516)*px))+(((0.980645161290323)*x597))+(((-1.0)*x594*x596))+(((-4.41935483870968)*x595))+(((-0.980645161290323)*x594))+((x596*x597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x594))+(((-1.0)*x595))+((sj5*x597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((12.9032258064516)*px))+(((0.980645161290323)*x597))+(((-1.0)*x594*x596))+(((-4.41935483870968)*x595))+(((-0.980645161290323)*x594))+((x596*x597))))+IKsqr(((((-1.0)*sj5*x594))+(((-1.0)*x595))+((sj5*x597))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((12.9032258064516)*px))+(((0.980645161290323)*x597))+(((-1.0)*x594*x596))+(((-4.41935483870968)*x595))+(((-0.980645161290323)*x594))+((x596*x597))), ((((-1.0)*sj5*x594))+(((-1.0)*x595))+((sj5*x597))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x598=IKcos(j3);
IkReal x599=IKsin(j3);
IkReal x600=(r01*sj6);
IkReal x601=(cj4*cj5);
IkReal x602=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*sj5*x602))+(((-1.0)*x598))+((sj5*x600))+(((-1.0)*cj5*r02)));
evalcond[1]=((0.293)+(((0.076)*cj6*r00))+(((-1.0)*px))+(((-0.076)*x600))+(((-0.3425)*x598))+(((0.0775)*x599)));
evalcond[2]=(((r00*sj4*sj6))+((cj6*r01*sj4))+((x600*x601))+x599+((cj4*r02*sj5))+(((-1.0)*x601*x602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x603=(cj6*sj5);
IkReal x604=((1.0)*sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj5*r22))+((r20*x603))+(((-1.0)*r21*x604)))))+(IKabs((((cj5*r12))+(((-1.0)*r11*x604))+((r10*x603))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=((1.0)+(((6.52380952380952)*sj3))+(((1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x605=((0.584615384615385)*cj6);
IkReal x606=((0.584615384615385)*sj6);
if( IKabs(((((-1.0)*r20*x605))+((r21*x606))+(((7.69230769230769)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x605))+((r11*x606))+(((7.69230769230769)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x605))+((r21*x606))+(((7.69230769230769)*pz))))+IKsqr(((((-1.0)*r10*x605))+((r11*x606))+(((7.69230769230769)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x605))+((r21*x606))+(((7.69230769230769)*pz))), ((((-1.0)*r10*x605))+((r11*x606))+(((7.69230769230769)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x607=IKsin(j2);
IkReal x608=IKcos(j2);
IkReal x609=(sj4*sj5);
IkReal x610=(cj5*sj4);
IkReal x611=(r21*sj6);
IkReal x612=(r11*sj6);
IkReal x613=((1.0)*r20);
IkReal x614=(cj4*sj6);
IkReal x615=(sj4*sj6);
IkReal x616=((1.0)*cj6);
IkReal x617=(cj4*sj5);
IkReal x618=(cj4*cj5);
IkReal x619=((0.076)*cj6);
IkReal x620=(cj6*sj4);
IkReal x621=(x616*x618);
evalcond[0]=(((r20*x619))+(((-1.0)*pz))+(((-0.076)*x611))+(((0.13)*x607)));
evalcond[1]=((((-1.0)*py))+(((-0.076)*x612))+(((0.13)*x608))+((r10*x619)));
evalcond[2]=(((r21*x620))+((r20*x615))+((x611*x618))+x607+((r22*x617))+(((-1.0)*cj6*x613*x618)));
evalcond[3]=(((x612*x618))+((r12*x617))+x608+((r10*x615))+(((-1.0)*r10*x621))+((r11*x620)));
evalcond[4]=((((-1.0)*r10*x614))+((r12*x609))+(((-1.0)*r10*x610*x616))+(((-1.0)*cj4*r11*x616))+x607+((x610*x612)));
evalcond[5]=((((-1.0)*cj4*r21*x616))+(((-1.0)*cj6*x610*x613))+(((-1.0)*x608))+(((-1.0)*x613*x614))+((x610*x611))+((r22*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x622=((3.04)*cj6);
IkReal x623=((3.04)*sj6);
if( IKabs(((((-1.0)*r21*x623))+(((-40.0)*pz))+((r20*x622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x623))+((r10*x622))+(((-40.0)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x623))+(((-40.0)*pz))+((r20*x622))))+IKsqr(((((-1.0)*r11*x623))+((r10*x622))+(((-40.0)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x623))+(((-40.0)*pz))+((r20*x622))), ((((-1.0)*r11*x623))+((r10*x622))+(((-40.0)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x624=IKsin(j2);
IkReal x625=IKcos(j2);
IkReal x626=(sj4*sj5);
IkReal x627=(cj5*sj4);
IkReal x628=(r21*sj6);
IkReal x629=(r11*sj6);
IkReal x630=((1.0)*r20);
IkReal x631=(cj4*sj6);
IkReal x632=(sj4*sj6);
IkReal x633=((1.0)*cj6);
IkReal x634=(cj4*sj5);
IkReal x635=(cj4*cj5);
IkReal x636=((0.076)*cj6);
IkReal x637=(cj6*sj4);
IkReal x638=((1.0)*x625);
IkReal x639=(x633*x635);
evalcond[0]=((((-0.025)*x624))+(((-0.076)*x628))+(((-1.0)*pz))+((r20*x636)));
evalcond[1]=((((-0.025)*x625))+(((-0.076)*x629))+((r10*x636))+(((-1.0)*py)));
evalcond[2]=(((r21*x637))+(((-1.0)*cj6*x630*x635))+((x628*x635))+((r22*x634))+(((-1.0)*x624))+((r20*x632)));
evalcond[3]=((((-1.0)*r10*x631))+(((-1.0)*r10*x627*x633))+(((-1.0)*cj4*r11*x633))+x624+((r12*x626))+((x627*x629)));
evalcond[4]=(((x629*x635))+(((-1.0)*x638))+((r10*x632))+((r12*x634))+(((-1.0)*r10*x639))+((r11*x637)));
evalcond[5]=((((-1.0)*x630*x631))+(((-1.0)*cj4*r21*x633))+((r22*x626))+(((-1.0)*cj6*x627*x630))+(((-1.0)*x638))+((x627*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.192405063291139)*r11*sj6))+(((-0.192405063291139)*cj6*r10))+(((2.53164556962025)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))+IKsqr(((((0.192405063291139)*r11*sj6))+(((-0.192405063291139)*cj6*r10))+(((2.53164556962025)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))), ((((0.192405063291139)*r11*sj6))+(((-0.192405063291139)*cj6*r10))+(((2.53164556962025)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x640=IKsin(j2);
IkReal x641=IKcos(j2);
IkReal x642=(sj4*sj5);
IkReal x643=(cj5*sj4);
IkReal x644=(r21*sj6);
IkReal x645=(r11*sj6);
IkReal x646=((1.0)*r20);
IkReal x647=(cj4*sj6);
IkReal x648=((1.0)*cj5);
IkReal x649=((0.076)*cj6);
IkReal x650=((1.0)*cj6*r10);
IkReal x651=((1.0)*cj4*cj6);
evalcond[0]=(((sj5*x644))+(((-1.0)*r22*x648))+x640+(((-1.0)*cj6*sj5*x646)));
evalcond[1]=(((r20*x649))+(((-0.076)*x644))+(((-1.0)*pz))+(((0.395)*x640)));
evalcond[2]=((((-1.0)*r12*x648))+(((-1.0)*sj5*x650))+((sj5*x645))+x641);
evalcond[3]=((((-0.076)*x645))+(((-1.0)*py))+((r10*x649))+(((0.395)*x641)));
evalcond[4]=((((-1.0)*r11*x651))+((x643*x645))+(((-1.0)*r10*x647))+(((-1.0)*x643*x650))+((r12*x642))+x640);
evalcond[5]=((((-1.0)*x641))+((x643*x644))+(((-1.0)*cj6*x643*x646))+(((-1.0)*x646*x647))+((r22*x642))+(((-1.0)*r21*x651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x652=((0.262068965517241)*cj6);
IkReal x653=((0.262068965517241)*sj6);
if( IKabs(((((-3.44827586206897)*pz))+(((-1.0)*r21*x653))+((r20*x652)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x653))+(((-3.44827586206897)*py))+((r10*x652)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.44827586206897)*pz))+(((-1.0)*r21*x653))+((r20*x652))))+IKsqr(((((-1.0)*r11*x653))+(((-3.44827586206897)*py))+((r10*x652))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-3.44827586206897)*pz))+(((-1.0)*r21*x653))+((r20*x652))), ((((-1.0)*r11*x653))+(((-3.44827586206897)*py))+((r10*x652))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x654=IKsin(j2);
IkReal x655=IKcos(j2);
IkReal x656=(sj4*sj5);
IkReal x657=(r21*sj6);
IkReal x658=(cj5*sj4);
IkReal x659=(r11*sj6);
IkReal x660=((1.0)*r20);
IkReal x661=(cj4*sj6);
IkReal x662=((1.0)*cj5);
IkReal x663=((0.076)*cj6);
IkReal x664=((1.0)*x655);
IkReal x665=((1.0)*cj6*r10);
IkReal x666=((1.0)*cj4*cj6);
evalcond[0]=(((r20*x663))+(((-0.076)*x657))+(((-1.0)*pz))+(((-0.29)*x654)));
evalcond[1]=((((-0.076)*x659))+(((-1.0)*py))+(((-0.29)*x655))+((r10*x663)));
evalcond[2]=((((-1.0)*cj6*sj5*x660))+(((-1.0)*r22*x662))+(((-1.0)*x654))+((sj5*x657)));
evalcond[3]=((((-1.0)*sj5*x665))+(((-1.0)*r12*x662))+(((-1.0)*x664))+((sj5*x659)));
evalcond[4]=((((-1.0)*r11*x666))+(((-1.0)*r10*x661))+(((-1.0)*x658*x665))+x654+((r12*x656))+((x658*x659)));
evalcond[5]=((((-1.0)*r21*x666))+(((-1.0)*x660*x661))+((r22*x656))+(((-1.0)*x664))+((x657*x658))+(((-1.0)*cj6*x658*x660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.372597569911564)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x667=((57213427.3137081)*sj6);
IkReal x668=((57213427.3137081)*cj6);
if( IKabs(((((-1.0)*r20*x668))+((r21*x667))+(((752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x668))+((r11*x667))+(((752808254.127739)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x668))+((r21*x667))+(((752808254.127739)*pz))))+IKsqr(((((-1.0)*r10*x668))+((r11*x667))+(((752808254.127739)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x668))+((r21*x667))+(((752808254.127739)*pz))), ((((-1.0)*r10*x668))+((r11*x667))+(((752808254.127739)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x669=IKsin(j2);
IkReal x670=IKcos(j2);
IkReal x671=(r20*sj4);
IkReal x672=(sj4*sj5);
IkReal x673=(cj4*r20);
IkReal x674=(cj4*r10);
IkReal x675=(r11*sj6);
IkReal x676=(r21*sj6);
IkReal x677=(cj5*sj4);
IkReal x678=((1.0)*sj6);
IkReal x679=(r10*sj4);
IkReal x680=((1.0)*cj5);
IkReal x681=(cj4*sj5);
IkReal x682=(cj4*cj5);
IkReal x683=((0.076)*cj6);
IkReal x684=(cj6*sj4);
IkReal x685=(cj6*x680);
IkReal x686=((1.0)*cj6*sj5);
IkReal x687=((1.0)*cj4*cj6);
evalcond[0]=((((1.32835950524835e-9)*x669))+(((-1.0)*pz))+((r20*x683))+(((-0.076)*x676)));
evalcond[1]=((((-1.0)*py))+((r10*x683))+(((1.32835950524835e-9)*x670))+(((-0.076)*x675)));
evalcond[2]=(((sj5*x676))+(((-0.36403599)*x669))+(((-1.0)*r20*x686))+(((-1.0)*r22*x680)));
evalcond[3]=(((sj5*x675))+(((-1.0)*r12*x680))+(((-1.0)*r10*x686))+(((-0.36403599)*x670)));
evalcond[4]=(((r21*x684))+((r22*x681))+((x676*x682))+(((-1.0)*x673*x685))+((sj6*x671))+(((0.931384876172381)*x669)));
evalcond[5]=(((r12*x672))+(((-1.0)*cj6*r10*x677))+x669+(((-1.0)*x674*x678))+((x675*x677))+(((-1.0)*r11*x687)));
evalcond[6]=((((0.931384876172381)*x670))+(((-1.0)*x674*x685))+((sj6*x679))+((x675*x682))+((r11*x684))+((r12*x681)));
evalcond[7]=(((r22*x672))+((x676*x677))+(((-1.0)*r21*x687))+(((-1.0)*x670))+(((-1.0)*x673*x678))+(((-1.0)*x671*x685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x688=((64920240.9929408)*cj6);
IkReal x689=((64920240.9929408)*sj6);
if( IKabs(((((-854213697.275536)*pz))+(((-1.0)*r21*x689))+((r20*x688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-854213697.275536)*py))+((r10*x688))+(((-1.0)*r11*x689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-854213697.275536)*pz))+(((-1.0)*r21*x689))+((r20*x688))))+IKsqr(((((-854213697.275536)*py))+((r10*x688))+(((-1.0)*r11*x689))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-854213697.275536)*pz))+(((-1.0)*r21*x689))+((r20*x688))), ((((-854213697.275536)*py))+((r10*x688))+(((-1.0)*r11*x689))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x690=IKsin(j2);
IkReal x691=IKcos(j2);
IkReal x692=(r20*sj4);
IkReal x693=(sj4*sj5);
IkReal x694=(cj4*r20);
IkReal x695=((1.0)*cj6);
IkReal x696=(cj4*r10);
IkReal x697=(cj4*r21);
IkReal x698=(r11*sj6);
IkReal x699=(r21*sj6);
IkReal x700=(cj5*sj4);
IkReal x701=((1.0)*sj6);
IkReal x702=(r10*sj4);
IkReal x703=((1.0)*cj5);
IkReal x704=(cj4*sj5);
IkReal x705=((0.076)*cj6);
IkReal x706=(cj6*sj4);
IkReal x707=(cj5*x695);
evalcond[0]=((((-1.17066725011486e-9)*x690))+((r20*x705))+(((-1.0)*pz))+(((-0.076)*x699)));
evalcond[1]=((((-1.17066725011486e-9)*x691))+(((-1.0)*py))+(((-0.076)*x698))+((r10*x705)));
evalcond[2]=((((-1.0)*r20*sj5*x695))+((sj5*x699))+(((0.07239889)*x690))+(((-1.0)*r22*x703)));
evalcond[3]=((((-1.0)*r10*sj5*x695))+(((-1.0)*r12*x703))+((sj5*x698))+(((0.07239889)*x691)));
evalcond[4]=(((cj5*sj6*x697))+((r22*x704))+((sj6*x692))+(((-1.0)*x694*x707))+((r21*x706))+(((-0.997375754782803)*x690)));
evalcond[5]=((((-1.0)*cj4*r11*x695))+(((-1.0)*r10*x695*x700))+((r12*x693))+(((-1.0)*x696*x701))+x690+((x698*x700)));
evalcond[6]=(((cj4*cj5*x698))+(((-1.0)*x696*x707))+(((-0.997375754782803)*x691))+((r12*x704))+((sj6*x702))+((r11*x706)));
evalcond[7]=((((-1.0)*x694*x701))+(((-1.0)*x692*x707))+((r22*x693))+(((-1.0)*x695*x697))+((x699*x700))+(((-1.0)*x691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x708=((1.0)*sj5);
IkReal x709=(cj4*cj5);
IkReal x710=((1.0)*sj6);
CheckValue<IkReal> x711=IKPowWithIntegerCheck(sj3,-1);
if(!x711.valid){
continue;
}
CheckValue<IkReal> x712=IKPowWithIntegerCheck(cj3,-1);
if(!x712.valid){
continue;
}
if( IKabs(((x711.value)*((((cj5*r22))+((cj6*r20*sj5))+(((-1.0)*r21*sj6*x708)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x712.value)*(((((-1.0)*cj6*r11*sj4))+(((-1.0)*cj4*r12*x708))+(((-1.0)*r11*x709*x710))+(((-1.0)*r10*sj4*x710))+((cj6*r10*x709)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x711.value)*((((cj5*r22))+((cj6*r20*sj5))+(((-1.0)*r21*sj6*x708))))))+IKsqr(((x712.value)*(((((-1.0)*cj6*r11*sj4))+(((-1.0)*cj4*r12*x708))+(((-1.0)*r11*x709*x710))+(((-1.0)*r10*sj4*x710))+((cj6*r10*x709))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x711.value)*((((cj5*r22))+((cj6*r20*sj5))+(((-1.0)*r21*sj6*x708))))), ((x712.value)*(((((-1.0)*cj6*r11*sj4))+(((-1.0)*cj4*r12*x708))+(((-1.0)*r11*x709*x710))+(((-1.0)*r10*sj4*x710))+((cj6*r10*x709))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x713=IKsin(j2);
IkReal x714=IKcos(j2);
IkReal x715=(r21*sj6);
IkReal x716=(sj4*sj5);
IkReal x717=((1.0)*cj6);
IkReal x718=(cj4*cj5);
IkReal x719=((0.3425)*sj3);
IkReal x720=((1.0)*cj5);
IkReal x721=(cj5*sj4);
IkReal x722=(r11*sj6);
IkReal x723=(r20*sj6);
IkReal x724=((1.0)*cj4);
IkReal x725=(cj4*sj5);
IkReal x726=(r10*sj6);
IkReal x727=((0.076)*cj6);
IkReal x728=(cj6*sj4);
IkReal x729=(cj3*x714);
IkReal x730=(cj3*x713);
evalcond[0]=(((sj5*x715))+((sj3*x713))+(((-1.0)*r22*x720))+(((-1.0)*r20*sj5*x717)));
evalcond[1]=((((-1.0)*r12*x720))+((sj5*x722))+((sj3*x714))+(((-1.0)*r10*sj5*x717)));
evalcond[2]=((((0.0775)*x730))+(((-0.076)*x715))+((r20*x727))+(((0.0525)*x713))+(((-1.0)*pz))+((x713*x719)));
evalcond[3]=(((x715*x718))+(((-1.0)*r20*x717*x718))+x730+((r21*x728))+((sj4*x723))+((r22*x725)));
evalcond[4]=(((x721*x722))+(((-1.0)*x724*x726))+(((-1.0)*cj4*r11*x717))+(((-1.0)*r10*x717*x721))+x713+((r12*x716)));
evalcond[5]=((((-1.0)*r10*x717*x718))+((x718*x722))+x729+((sj4*x726))+((r11*x728))+((r12*x725)));
evalcond[6]=(((x714*x719))+((r10*x727))+(((-0.076)*x722))+(((0.0775)*x729))+(((0.0525)*x714))+(((-1.0)*py)));
evalcond[7]=(((r22*x716))+(((-1.0)*x723*x724))+(((-1.0)*x714))+(((-1.0)*r20*x717*x721))+(((-1.0)*cj4*r21*x717))+((x715*x721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x731=IKPowWithIntegerCheck(sj3,-1);
if(!x731.valid){
continue;
}
CheckValue<IkReal> x732=IKPowWithIntegerCheck(((0.0525)+(((0.3425)*sj3))+(((0.0775)*cj3))),-1);
if(!x732.valid){
continue;
}
if( IKabs(((x731.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x732.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x731.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))+IKsqr(((x732.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x731.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))), ((x732.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x733=IKsin(j2);
IkReal x734=IKcos(j2);
IkReal x735=(r21*sj6);
IkReal x736=(sj4*sj5);
IkReal x737=((1.0)*cj6);
IkReal x738=(cj4*cj5);
IkReal x739=((0.3425)*sj3);
IkReal x740=((1.0)*cj5);
IkReal x741=(cj5*sj4);
IkReal x742=(r11*sj6);
IkReal x743=(r20*sj6);
IkReal x744=((1.0)*cj4);
IkReal x745=(cj4*sj5);
IkReal x746=(r10*sj6);
IkReal x747=((0.076)*cj6);
IkReal x748=(cj6*sj4);
IkReal x749=(cj3*x734);
IkReal x750=(cj3*x733);
evalcond[0]=((((-1.0)*r20*sj5*x737))+((sj3*x733))+((sj5*x735))+(((-1.0)*r22*x740)));
evalcond[1]=((((-1.0)*r12*x740))+(((-1.0)*r10*sj5*x737))+((sj3*x734))+((sj5*x742)));
evalcond[2]=((((-0.076)*x735))+(((0.0775)*x750))+(((0.0525)*x733))+(((-1.0)*pz))+((x733*x739))+((r20*x747)));
evalcond[3]=(((sj4*x743))+((r22*x745))+(((-1.0)*r20*x737*x738))+((x735*x738))+((r21*x748))+x750);
evalcond[4]=(((r12*x736))+(((-1.0)*cj4*r11*x737))+(((-1.0)*r10*x737*x741))+(((-1.0)*x744*x746))+((x741*x742))+x733);
evalcond[5]=(((sj4*x746))+((x738*x742))+((r11*x748))+(((-1.0)*r10*x737*x738))+((r12*x745))+x749);
evalcond[6]=(((r10*x747))+((x734*x739))+(((0.0525)*x734))+(((-0.076)*x742))+(((-1.0)*py))+(((0.0775)*x749)));
evalcond[7]=((((-1.0)*x734))+(((-1.0)*r20*x737*x741))+((r22*x736))+(((-1.0)*cj4*r21*x737))+(((-1.0)*x743*x744))+((x735*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x751=(cj6*sj5);
IkReal x752=((1.0)*sj5*sj6);
CheckValue<IkReal> x753=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x753.valid){
continue;
}
CheckValue<IkReal> x754 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*x751))+(((-1.0)*r21*x752)))),IkReal((((cj5*r12))+((r10*x751))+(((-1.0)*r11*x752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x754.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x753.value)))+(x754.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x755=IKsin(j2);
IkReal x756=IKcos(j2);
IkReal x757=(r21*sj6);
IkReal x758=(sj4*sj5);
IkReal x759=((1.0)*cj6);
IkReal x760=(cj4*cj5);
IkReal x761=((0.3425)*sj3);
IkReal x762=((1.0)*cj5);
IkReal x763=(cj5*sj4);
IkReal x764=(r11*sj6);
IkReal x765=(r20*sj6);
IkReal x766=((1.0)*cj4);
IkReal x767=(cj4*sj5);
IkReal x768=(r10*sj6);
IkReal x769=((0.076)*cj6);
IkReal x770=(cj6*sj4);
IkReal x771=(cj3*x756);
IkReal x772=(cj3*x755);
evalcond[0]=(((sj5*x757))+(((-1.0)*r20*sj5*x759))+((sj3*x755))+(((-1.0)*r22*x762)));
evalcond[1]=((((-1.0)*r12*x762))+(((-1.0)*r10*sj5*x759))+((sj3*x756))+((sj5*x764)));
evalcond[2]=((((0.0525)*x755))+((r20*x769))+(((0.0775)*x772))+(((-1.0)*pz))+(((-0.076)*x757))+((x755*x761)));
evalcond[3]=(((x757*x760))+(((-1.0)*r20*x759*x760))+((r21*x770))+((sj4*x765))+((r22*x767))+x772);
evalcond[4]=((((-1.0)*x766*x768))+((x763*x764))+((r12*x758))+(((-1.0)*r10*x759*x763))+x755+(((-1.0)*cj4*r11*x759)));
evalcond[5]=(((x760*x764))+(((-1.0)*r10*x759*x760))+((sj4*x768))+((r11*x770))+((r12*x767))+x771);
evalcond[6]=(((r10*x769))+(((0.0525)*x756))+(((-0.076)*x764))+(((0.0775)*x771))+(((-1.0)*py))+((x756*x761)));
evalcond[7]=(((x757*x763))+(((-1.0)*r20*x759*x763))+(((-1.0)*x765*x766))+(((-1.0)*cj4*r21*x759))+((r22*x758))+(((-1.0)*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x773=(cj4*cj5);
IkReal x774=(r01*sj6);
IkReal x775=(cj6*r00);
if( IKabs((((r00*sj4*sj6))+((cj6*r01*sj4))+((x773*x774))+((cj4*r02*sj5))+(((-1.0)*x773*x775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x774))+((sj5*x775))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj4*sj6))+((cj6*r01*sj4))+((x773*x774))+((cj4*r02*sj5))+(((-1.0)*x773*x775))))+IKsqr(((((-1.0)*sj5*x774))+((sj5*x775))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r00*sj4*sj6))+((cj6*r01*sj4))+((x773*x774))+((cj4*r02*sj5))+(((-1.0)*x773*x775))), ((((-1.0)*sj5*x774))+((sj5*x775))+((cj5*r02))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x776=IKcos(j3);
IkReal x777=IKsin(j3);
IkReal x778=(r01*sj6);
IkReal x779=(cj4*cj5);
IkReal x780=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*sj5*x780))+x776+((sj5*x778))+(((-1.0)*cj5*r02)));
evalcond[1]=((-0.293)+(((0.3425)*x776))+(((-0.0775)*x777))+(((-0.076)*x778))+(((0.076)*cj6*r00))+(((-1.0)*px)));
evalcond[2]=(((r00*sj4*sj6))+((cj6*r01*sj4))+((x778*x779))+((cj4*r02*sj5))+(((-1.0)*x777))+(((-1.0)*x779*x780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x781=(cj6*sj5);
IkReal x782=(sj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*cj5*r12))+((r11*x782))+(((-1.0)*r10*x781)))))+(IKabs((((cj5*r22))+((r20*x781))+(((-1.0)*r21*x782))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=((-1.0)+(((-6.52380952380952)*sj3))+(((-1.47619047619048)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x783=((0.584615384615385)*cj6);
IkReal x784=((0.584615384615385)*sj6);
if( IKabs(((((-1.0)*r20*x783))+((r21*x784))+(((7.69230769230769)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x783))+(((-1.0)*r11*x784))+(((-7.69230769230769)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x783))+((r21*x784))+(((7.69230769230769)*pz))))+IKsqr((((r10*x783))+(((-1.0)*r11*x784))+(((-7.69230769230769)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x783))+((r21*x784))+(((7.69230769230769)*pz))), (((r10*x783))+(((-1.0)*r11*x784))+(((-7.69230769230769)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x785=IKsin(j2);
IkReal x786=IKcos(j2);
IkReal x787=(sj4*sj5);
IkReal x788=(cj5*sj4);
IkReal x789=(r21*sj6);
IkReal x790=(r11*sj6);
IkReal x791=((1.0)*r20);
IkReal x792=(cj4*sj6);
IkReal x793=((1.0)*cj6);
IkReal x794=(sj4*sj6);
IkReal x795=(cj4*cj5);
IkReal x796=(cj4*sj5);
IkReal x797=((0.076)*cj6);
IkReal x798=(cj6*sj4);
IkReal x799=((1.0)*x786);
IkReal x800=(x793*x795);
evalcond[0]=(((r20*x797))+(((0.13)*x785))+(((-0.076)*x789))+(((-1.0)*pz)));
evalcond[1]=(((r10*x797))+(((-0.076)*x790))+(((-1.0)*py))+(((-0.13)*x786)));
evalcond[2]=(((r20*x794))+((r21*x798))+((r22*x796))+(((-1.0)*cj6*x791*x795))+x785+((x789*x795)));
evalcond[3]=((((-1.0)*x799))+((r10*x794))+((x790*x795))+((r11*x798))+((r12*x796))+(((-1.0)*r10*x800)));
evalcond[4]=((((-1.0)*x799))+((x788*x789))+(((-1.0)*cj6*x788*x791))+(((-1.0)*x791*x792))+((r22*x787))+(((-1.0)*cj4*r21*x793)));
evalcond[5]=((((-1.0)*r10*x788*x793))+((x788*x790))+(((-1.0)*r10*x792))+(((-1.0)*x785))+(((-1.0)*cj4*r11*x793))+((r12*x787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x801=((3.04)*sj6);
IkReal x802=((3.04)*cj6);
if( IKabs(((((-1.0)*r21*x801))+((r20*x802))+(((-40.0)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((40.0)*py))+((r11*x801))+(((-1.0)*r10*x802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x801))+((r20*x802))+(((-40.0)*pz))))+IKsqr(((((40.0)*py))+((r11*x801))+(((-1.0)*r10*x802))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x801))+((r20*x802))+(((-40.0)*pz))), ((((40.0)*py))+((r11*x801))+(((-1.0)*r10*x802))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x803=IKcos(j2);
IkReal x804=IKsin(j2);
IkReal x805=(sj4*sj6);
IkReal x806=(sj4*sj5);
IkReal x807=(cj5*r21);
IkReal x808=(cj5*cj6);
IkReal x809=(r11*sj6);
IkReal x810=((1.0)*sj4);
IkReal x811=((1.0)*cj4);
IkReal x812=(cj4*sj5);
IkReal x813=(cj6*r11);
IkReal x814=((0.076)*cj6);
IkReal x815=(cj6*r21);
IkReal x816=((1.0)*x804);
IkReal x817=(r20*x811);
evalcond[0]=(((r20*x814))+(((-0.076)*r21*sj6))+(((-0.025)*x804))+(((-1.0)*pz)));
evalcond[1]=((((-0.076)*x809))+((r10*x814))+(((-1.0)*py))+(((0.025)*x803)));
evalcond[2]=(((sj4*x813))+(((-1.0)*r10*x808*x811))+x803+((r10*x805))+((cj4*cj5*x809))+((r12*x812)));
evalcond[3]=(((sj4*x815))+(((-1.0)*x808*x817))+(((-1.0)*x816))+((cj4*sj6*x807))+((r20*x805))+((r22*x812)));
evalcond[4]=((((-1.0)*sj6*x817))+(((-1.0)*x803))+(((-1.0)*r20*x808*x810))+(((-1.0)*x811*x815))+((r22*x806))+((x805*x807)));
evalcond[5]=((((-1.0)*x811*x813))+((r12*x806))+(((-1.0)*x816))+(((-1.0)*r10*x808*x810))+((cj5*r11*x805))+(((-1.0)*r10*sj6*x811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x818=((0.192405063291139)*sj6);
IkReal x819=((0.192405063291139)*cj6);
if( IKabs(((((2.53164556962025)*pz))+((r21*x818))+(((-1.0)*r20*x819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.53164556962025)*py))+(((-1.0)*r11*x818))+((r10*x819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.53164556962025)*pz))+((r21*x818))+(((-1.0)*r20*x819))))+IKsqr(((((-2.53164556962025)*py))+(((-1.0)*r11*x818))+((r10*x819))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((2.53164556962025)*pz))+((r21*x818))+(((-1.0)*r20*x819))), ((((-2.53164556962025)*py))+(((-1.0)*r11*x818))+((r10*x819))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x820=IKsin(j2);
IkReal x821=IKcos(j2);
IkReal x822=(sj4*sj5);
IkReal x823=(cj5*sj4);
IkReal x824=(r21*sj6);
IkReal x825=(r11*sj6);
IkReal x826=((1.0)*r20);
IkReal x827=(cj4*sj6);
IkReal x828=((1.0)*cj5);
IkReal x829=((0.076)*cj6);
IkReal x830=((1.0)*x821);
IkReal x831=((1.0)*cj6*r10);
IkReal x832=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*cj6*sj5*x826))+((sj5*x824))+(((-1.0)*r22*x828))+x820);
evalcond[1]=(((r20*x829))+(((-1.0)*pz))+(((-0.076)*x824))+(((0.395)*x820)));
evalcond[2]=((((-0.395)*x821))+((r10*x829))+(((-1.0)*py))+(((-0.076)*x825)));
evalcond[3]=((((-1.0)*r12*x828))+((sj5*x825))+(((-1.0)*x830))+(((-1.0)*sj5*x831)));
evalcond[4]=((((-1.0)*cj6*x823*x826))+(((-1.0)*r21*x832))+(((-1.0)*x826*x827))+(((-1.0)*x830))+((r22*x822))+((x823*x824)));
evalcond[5]=(((r12*x822))+(((-1.0)*x823*x831))+(((-1.0)*x820))+(((-1.0)*r10*x827))+((x823*x825))+(((-1.0)*r11*x832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x833=((0.262068965517241)*sj6);
IkReal x834=((0.262068965517241)*cj6);
if( IKabs(((((-3.44827586206897)*pz))+(((-1.0)*r21*x833))+((r20*x834)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x834))+(((3.44827586206897)*py))+((r11*x833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.44827586206897)*pz))+(((-1.0)*r21*x833))+((r20*x834))))+IKsqr(((((-1.0)*r10*x834))+(((3.44827586206897)*py))+((r11*x833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-3.44827586206897)*pz))+(((-1.0)*r21*x833))+((r20*x834))), ((((-1.0)*r10*x834))+(((3.44827586206897)*py))+((r11*x833))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x835=IKcos(j2);
IkReal x836=IKsin(j2);
IkReal x837=(sj4*sj5);
IkReal x838=(cj5*sj4);
IkReal x839=(r21*sj6);
IkReal x840=((1.0)*cj5);
IkReal x841=(r11*sj6);
IkReal x842=((1.0)*r20);
IkReal x843=(cj4*sj6);
IkReal x844=((0.076)*cj6);
IkReal x845=((1.0)*x836);
IkReal x846=((1.0)*cj6*r10);
IkReal x847=((1.0)*cj4*cj6);
evalcond[0]=((((-0.076)*x839))+((r20*x844))+(((-1.0)*pz))+(((-0.29)*x836)));
evalcond[1]=(((sj5*x841))+(((-1.0)*r12*x840))+(((-1.0)*sj5*x846))+x835);
evalcond[2]=((((-0.076)*x841))+(((-1.0)*py))+((r10*x844))+(((0.29)*x835)));
evalcond[3]=((((-1.0)*cj6*sj5*x842))+(((-1.0)*x845))+(((-1.0)*r22*x840))+((sj5*x839)));
evalcond[4]=(((r22*x837))+((x838*x839))+(((-1.0)*r21*x847))+(((-1.0)*cj6*x838*x842))+(((-1.0)*x842*x843))+(((-1.0)*x835)));
evalcond[5]=(((x838*x841))+(((-1.0)*r10*x843))+(((-1.0)*x845))+(((-1.0)*r11*x847))+((r12*x837))+(((-1.0)*x838*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.06913036240268)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x848=((64920240.9929408)*cj6);
IkReal x849=((64920240.9929408)*sj6);
if( IKabs(((((-1.0)*r21*x849))+(((-854213697.275536)*pz))+((r20*x848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((854213697.275536)*py))+(((-1.0)*r10*x848))+((r11*x849)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x849))+(((-854213697.275536)*pz))+((r20*x848))))+IKsqr(((((854213697.275536)*py))+(((-1.0)*r10*x848))+((r11*x849))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x849))+(((-854213697.275536)*pz))+((r20*x848))), ((((854213697.275536)*py))+(((-1.0)*r10*x848))+((r11*x849))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x850=IKsin(j2);
IkReal x851=IKcos(j2);
IkReal x852=(r20*sj4);
IkReal x853=(sj4*sj5);
IkReal x854=(cj4*r20);
IkReal x855=((1.0)*r10);
IkReal x856=(cj6*sj5);
IkReal x857=(r11*sj6);
IkReal x858=(r21*sj6);
IkReal x859=(cj5*sj4);
IkReal x860=(r10*sj4);
IkReal x861=((1.0)*cj5);
IkReal x862=(cj4*sj5);
IkReal x863=(cj4*cj5);
IkReal x864=((0.076)*cj6);
IkReal x865=(cj6*sj4);
IkReal x866=(cj6*x861);
IkReal x867=((1.0)*cj4*cj6);
evalcond[0]=((((-1.17066725011486e-9)*x850))+(((-0.076)*x858))+(((-1.0)*pz))+((r20*x864)));
evalcond[1]=((((1.17066725011486e-9)*x851))+((r10*x864))+(((-0.076)*x857))+(((-1.0)*py)));
evalcond[2]=(((sj5*x858))+(((0.07239889)*x850))+(((-1.0)*r20*x856))+(((-1.0)*r22*x861)));
evalcond[3]=(((sj5*x857))+(((-0.07239889)*x851))+(((-1.0)*x855*x856))+(((-1.0)*r12*x861)));
evalcond[4]=((((-1.0)*x854*x866))+((r21*x865))+((r22*x862))+((x858*x863))+((sj6*x852))+(((-0.997375754782803)*x850)));
evalcond[5]=(((r11*x865))+((r12*x862))+(((-1.0)*cj6*x855*x863))+((sj6*x860))+((x857*x863))+(((0.997375754782803)*x851)));
evalcond[6]=((((-1.0)*x851))+(((-1.0)*x852*x866))+((x858*x859))+((r22*x853))+(((-1.0)*sj6*x854))+(((-1.0)*r21*x867)));
evalcond[7]=(((r12*x853))+(((-1.0)*x850))+(((-1.0)*cj4*sj6*x855))+(((-1.0)*cj6*x855*x859))+((x857*x859))+(((-1.0)*r11*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.91058773726802)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x868=((57213427.3137081)*sj6);
IkReal x869=((57213427.3137081)*cj6);
if( IKabs((((r21*x868))+(((-1.0)*r20*x869))+(((752808254.127739)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x869))+(((-752808254.127739)*py))+(((-1.0)*r11*x868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x868))+(((-1.0)*r20*x869))+(((752808254.127739)*pz))))+IKsqr((((r10*x869))+(((-752808254.127739)*py))+(((-1.0)*r11*x868))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x868))+(((-1.0)*r20*x869))+(((752808254.127739)*pz))), (((r10*x869))+(((-752808254.127739)*py))+(((-1.0)*r11*x868))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x870=IKsin(j2);
IkReal x871=IKcos(j2);
IkReal x872=(r20*sj4);
IkReal x873=(sj4*sj5);
IkReal x874=(cj4*r20);
IkReal x875=(cj4*r10);
IkReal x876=(r11*sj6);
IkReal x877=(r21*sj6);
IkReal x878=(cj5*sj4);
IkReal x879=((1.0)*sj6);
IkReal x880=(r10*sj4);
IkReal x881=((1.0)*cj5);
IkReal x882=(cj4*cj5);
IkReal x883=(cj4*sj5);
IkReal x884=((0.076)*cj6);
IkReal x885=(cj6*sj4);
IkReal x886=(cj6*x881);
IkReal x887=((1.0)*cj6*sj5);
IkReal x888=((1.0)*cj4*cj6);
evalcond[0]=((((-0.076)*x877))+((r20*x884))+(((1.32835950524835e-9)*x870))+(((-1.0)*pz)));
evalcond[1]=((((-1.32835950524835e-9)*x871))+((r10*x884))+(((-0.076)*x876))+(((-1.0)*py)));
evalcond[2]=(((sj5*x877))+(((-1.0)*r22*x881))+(((-1.0)*r20*x887))+(((-0.36403599)*x870)));
evalcond[3]=(((sj5*x876))+(((0.36403599)*x871))+(((-1.0)*r12*x881))+(((-1.0)*r10*x887)));
evalcond[4]=((((0.931384876172381)*x870))+((x877*x882))+((sj6*x872))+((r22*x883))+((r21*x885))+(((-1.0)*x874*x886)));
evalcond[5]=(((r11*x885))+((x876*x882))+(((-0.931384876172381)*x871))+((sj6*x880))+(((-1.0)*x875*x886))+((r12*x883)));
evalcond[6]=((((-1.0)*x871))+((r22*x873))+(((-1.0)*x874*x879))+(((-1.0)*x872*x886))+(((-1.0)*r21*x888))+((x877*x878)));
evalcond[7]=(((x876*x878))+(((-1.0)*cj6*r10*x878))+((r12*x873))+(((-1.0)*x870))+(((-1.0)*r11*x888))+(((-1.0)*x875*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x889=(cj4*cj5);
CheckValue<IkReal> x890=IKPowWithIntegerCheck(sj3,-1);
if(!x890.valid){
continue;
}
CheckValue<IkReal> x891=IKPowWithIntegerCheck(cj3,-1);
if(!x891.valid){
continue;
}
if( IKabs(((x890.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x891.value)*((((r11*sj6*x889))+((r10*sj4*sj6))+(((-1.0)*cj6*r10*x889))+((cj6*r11*sj4))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x890.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))+IKsqr(((x891.value)*((((r11*sj6*x889))+((r10*sj4*sj6))+(((-1.0)*cj6*r10*x889))+((cj6*r11*sj4))+((cj4*r12*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x890.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))), ((x891.value)*((((r11*sj6*x889))+((r10*sj4*sj6))+(((-1.0)*cj6*r10*x889))+((cj6*r11*sj4))+((cj4*r12*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x892=IKsin(j2);
IkReal x893=IKcos(j2);
IkReal x894=(r21*sj6);
IkReal x895=(sj4*sj5);
IkReal x896=((1.0)*cj6);
IkReal x897=(cj4*cj5);
IkReal x898=((0.3425)*sj3);
IkReal x899=((1.0)*cj5);
IkReal x900=(cj5*sj4);
IkReal x901=(r11*sj6);
IkReal x902=(r20*sj6);
IkReal x903=((1.0)*cj4);
IkReal x904=((0.0775)*cj3);
IkReal x905=(cj4*sj5);
IkReal x906=(r10*sj6);
IkReal x907=((0.076)*cj6);
IkReal x908=(cj6*sj4);
IkReal x909=((1.0)*x893);
evalcond[0]=(((sj5*x894))+(((-1.0)*r20*sj5*x896))+((sj3*x892))+(((-1.0)*r22*x899)));
evalcond[1]=((((-1.0)*r10*sj5*x896))+(((-1.0)*sj3*x909))+((sj5*x901))+(((-1.0)*r12*x899)));
evalcond[2]=(((r20*x907))+(((0.0525)*x892))+((x892*x904))+(((-1.0)*pz))+((x892*x898))+(((-0.076)*x894)));
evalcond[3]=(((r21*x908))+((cj3*x892))+((x894*x897))+(((-1.0)*r20*x896*x897))+((r22*x905))+((sj4*x902)));
evalcond[4]=((((-1.0)*x893*x904))+(((-1.0)*py))+((r10*x907))+(((-0.076)*x901))+(((-0.0525)*x893))+(((-1.0)*x893*x898)));
evalcond[5]=(((r11*x908))+((x897*x901))+((r12*x905))+((sj4*x906))+(((-1.0)*r10*x896*x897))+(((-1.0)*cj3*x909)));
evalcond[6]=(((x894*x900))+(((-1.0)*x902*x903))+(((-1.0)*cj4*r21*x896))+(((-1.0)*x909))+(((-1.0)*r20*x896*x900))+((r22*x895)));
evalcond[7]=((((-1.0)*x903*x906))+((x900*x901))+(((-1.0)*x892))+(((-1.0)*r10*x896*x900))+(((-1.0)*cj4*r11*x896))+((r12*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(sj3,-1);
if(!x910.valid){
continue;
}
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((-0.0525)+(((-0.3425)*sj3))+(((-0.0775)*cj3))),-1);
if(!x911.valid){
continue;
}
if( IKabs(((x910.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x911.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x910.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))))+IKsqr(((x911.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x910.value)*((((cj5*r22))+(((-1.0)*r21*sj5*sj6))+((cj6*r20*sj5))))), ((x911.value)*((py+(((-0.076)*cj6*r10))+(((0.076)*r11*sj6))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x912=IKsin(j2);
IkReal x913=IKcos(j2);
IkReal x914=(r21*sj6);
IkReal x915=(sj4*sj5);
IkReal x916=((1.0)*cj6);
IkReal x917=(cj4*cj5);
IkReal x918=((0.3425)*sj3);
IkReal x919=((1.0)*cj5);
IkReal x920=(cj5*sj4);
IkReal x921=(r11*sj6);
IkReal x922=(r20*sj6);
IkReal x923=((1.0)*cj4);
IkReal x924=((0.0775)*cj3);
IkReal x925=(cj4*sj5);
IkReal x926=(r10*sj6);
IkReal x927=((0.076)*cj6);
IkReal x928=(cj6*sj4);
IkReal x929=((1.0)*x913);
evalcond[0]=((((-1.0)*r22*x919))+(((-1.0)*r20*sj5*x916))+((sj5*x914))+((sj3*x912)));
evalcond[1]=(((sj5*x921))+(((-1.0)*sj3*x929))+(((-1.0)*r12*x919))+(((-1.0)*r10*sj5*x916)));
evalcond[2]=((((-1.0)*pz))+(((-0.076)*x914))+((x912*x918))+((r20*x927))+((x912*x924))+(((0.0525)*x912)));
evalcond[3]=((((-1.0)*r20*x916*x917))+((r22*x925))+((r21*x928))+((x914*x917))+((cj3*x912))+((sj4*x922)));
evalcond[4]=((((-1.0)*x913*x918))+(((-0.0525)*x913))+(((-0.076)*x921))+((r10*x927))+(((-1.0)*py))+(((-1.0)*x913*x924)));
evalcond[5]=((((-1.0)*cj3*x929))+(((-1.0)*r10*x916*x917))+((sj4*x926))+((r11*x928))+((x917*x921))+((r12*x925)));
evalcond[6]=((((-1.0)*x929))+(((-1.0)*cj4*r21*x916))+(((-1.0)*r20*x916*x920))+((x914*x920))+((r22*x915))+(((-1.0)*x922*x923)));
evalcond[7]=((((-1.0)*cj4*r11*x916))+((x920*x921))+((r12*x915))+(((-1.0)*x912))+(((-1.0)*x923*x926))+(((-1.0)*r10*x916*x920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x930=(cj6*sj5);
IkReal x931=(sj5*sj6);
CheckValue<IkReal> x932=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x932.valid){
continue;
}
CheckValue<IkReal> x933 = IKatan2WithCheck(IkReal((((cj5*r22))+(((-1.0)*r21*x931))+((r20*x930)))),IkReal(((((-1.0)*cj5*r12))+((r11*x931))+(((-1.0)*r10*x930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x933.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x932.value)))+(x933.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x934=IKsin(j2);
IkReal x935=IKcos(j2);
IkReal x936=(r21*sj6);
IkReal x937=(sj4*sj5);
IkReal x938=((1.0)*cj6);
IkReal x939=(cj4*cj5);
IkReal x940=((0.3425)*sj3);
IkReal x941=((1.0)*cj5);
IkReal x942=(cj5*sj4);
IkReal x943=(r11*sj6);
IkReal x944=(r20*sj6);
IkReal x945=((1.0)*cj4);
IkReal x946=((0.0775)*cj3);
IkReal x947=(cj4*sj5);
IkReal x948=(r10*sj6);
IkReal x949=((0.076)*cj6);
IkReal x950=(cj6*sj4);
IkReal x951=((1.0)*x935);
evalcond[0]=((((-1.0)*r20*sj5*x938))+(((-1.0)*r22*x941))+((sj3*x934))+((sj5*x936)));
evalcond[1]=((((-1.0)*r12*x941))+(((-1.0)*r10*sj5*x938))+(((-1.0)*sj3*x951))+((sj5*x943)));
evalcond[2]=((((-0.076)*x936))+(((0.0525)*x934))+(((-1.0)*pz))+((x934*x946))+((x934*x940))+((r20*x949)));
evalcond[3]=(((x936*x939))+((r22*x947))+((r21*x950))+((cj3*x934))+((sj4*x944))+(((-1.0)*r20*x938*x939)));
evalcond[4]=((((-0.076)*x943))+(((-0.0525)*x935))+(((-1.0)*py))+(((-1.0)*x935*x940))+(((-1.0)*x935*x946))+((r10*x949)));
evalcond[5]=((((-1.0)*cj3*x951))+((r12*x947))+((x939*x943))+((r11*x950))+((sj4*x948))+(((-1.0)*r10*x938*x939)));
evalcond[6]=(((r22*x937))+((x936*x942))+(((-1.0)*r20*x938*x942))+(((-1.0)*x944*x945))+(((-1.0)*cj4*r21*x938))+(((-1.0)*x951)));
evalcond[7]=((((-1.0)*r10*x938*x942))+(((-1.0)*cj4*r11*x938))+(((-1.0)*x945*x948))+((x942*x943))+(((-1.0)*x934))+((r12*x937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x952=(cj5*sj4);
IkReal x953=((1.0)*sj6);
IkReal x954=(sj4*sj5);
IkReal x955=(cj4*cj6);
CheckValue<IkReal> x956=IKPowWithIntegerCheck(sj1,-1);
if(!x956.valid){
continue;
}
if( IKabs(((x956.value)*((((cj6*r10*x952))+(((-1.0)*r12*x954))+((r11*x955))+((cj4*r10*sj6))+(((-1.0)*r11*x952*x953)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x954))+(((-1.0)*cj4*r20*x953))+(((-1.0)*cj6*r20*x952))+(((-1.0)*r21*x955))+((r21*sj6*x952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x956.value)*((((cj6*r10*x952))+(((-1.0)*r12*x954))+((r11*x955))+((cj4*r10*sj6))+(((-1.0)*r11*x952*x953))))))+IKsqr((((r22*x954))+(((-1.0)*cj4*r20*x953))+(((-1.0)*cj6*r20*x952))+(((-1.0)*r21*x955))+((r21*sj6*x952))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x956.value)*((((cj6*r10*x952))+(((-1.0)*r12*x954))+((r11*x955))+((cj4*r10*sj6))+(((-1.0)*r11*x952*x953))))), (((r22*x954))+(((-1.0)*cj4*r20*x953))+(((-1.0)*cj6*r20*x952))+(((-1.0)*r21*x955))+((r21*sj6*x952))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x957=IKsin(j2);
IkReal x958=(sj4*sj5);
IkReal x959=((1.0)*cj6);
IkReal x960=(cj5*sj4);
IkReal x961=(sj6*x960);
IkReal x962=((1.0)*cj4*sj6);
evalcond[0]=(((r22*x958))+(((-1.0)*r20*x959*x960))+(((-1.0)*r20*x962))+(((-1.0)*cj4*r21*x959))+((r21*x961))+(((-1.0)*(IKcos(j2)))));
evalcond[1]=((((-1.0)*cj4*r01*x959))+(((-1.0)*r00*x962))+((cj1*x957))+(((-1.0)*r00*x959*x960))+((r01*x961))+((r02*x958)));
evalcond[2]=((((-1.0)*cj4*r11*x959))+(((-1.0)*r10*x962))+((r11*x961))+(((-1.0)*r10*x959*x960))+((sj1*x957))+((r12*x958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj2;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x963=(cj5*r12);
IkReal x964=(cj6*sj5);
IkReal x965=((1.0)*sj1);
IkReal x966=(cj5*r02);
IkReal x967=((1.0)*cj1);
IkReal x968=(r01*sj5*sj6);
IkReal x969=(r11*sj5*sj6);
if( IKabs(((((-1.0)*x965*x969))+((cj1*x966))+(((-1.0)*x967*x968))+((r10*sj1*x964))+((sj1*x963))+((cj1*r00*x964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x965*x966))+((cj1*x963))+(((-1.0)*x967*x969))+(((-1.0)*r00*x964*x965))+((sj1*x968))+((cj1*r10*x964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x965*x969))+((cj1*x966))+(((-1.0)*x967*x968))+((r10*sj1*x964))+((sj1*x963))+((cj1*r00*x964))))+IKsqr(((((-1.0)*x965*x966))+((cj1*x963))+(((-1.0)*x967*x969))+(((-1.0)*r00*x964*x965))+((sj1*x968))+((cj1*r10*x964))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x965*x969))+((cj1*x966))+(((-1.0)*x967*x968))+((r10*sj1*x964))+((sj1*x963))+((cj1*r00*x964))), ((((-1.0)*x965*x966))+((cj1*x963))+(((-1.0)*x967*x969))+(((-1.0)*r00*x964*x965))+((sj1*x968))+((cj1*r10*x964))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x970=IKsin(j3);
IkReal x971=IKcos(j3);
IkReal x972=((0.076)*sj6);
IkReal x973=(sj5*sj6);
IkReal x974=(cj4*cj5);
IkReal x975=(sj4*sj6);
IkReal x976=(cj4*sj5);
IkReal x977=(cj6*sj4);
IkReal x978=((1.0)*cj5);
IkReal x979=((0.076)*cj6);
IkReal x980=(cj1*x971);
IkReal x981=(sj1*x970);
IkReal x982=(cj1*x970);
IkReal x983=(sj1*x971);
IkReal x984=((1.0)*cj6*r10);
IkReal x985=((1.0)*cj6*r00);
IkReal x986=(x980+x981);
evalcond[0]=((((-1.0)*sj5*x984))+((r11*x973))+(((-1.0)*r12*x978))+x986);
evalcond[1]=((((-1.0)*x983))+((r01*x973))+(((-1.0)*sj5*x985))+(((-1.0)*r02*x978))+x982);
evalcond[2]=(((r01*sj6*x974))+((r01*x977))+(((-1.0)*x974*x985))+((r00*x975))+((r02*x976))+x986);
evalcond[3]=((((-1.0)*x982))+(((-1.0)*x974*x984))+((r12*x976))+((r11*sj6*x974))+((r10*x975))+((r11*x977))+x983);
evalcond[4]=((((0.0525)*cj1))+(((-1.0)*r01*x972))+((r00*x979))+(((-1.0)*px))+(((0.293)*sj1))+(((-0.3425)*x983))+(((0.0775)*x980))+(((0.0775)*x981))+(((0.3425)*x982)));
evalcond[5]=((((-0.0775)*x982))+(((-1.0)*py))+(((-0.293)*cj1))+(((-1.0)*r11*x972))+((r10*x979))+(((0.0525)*sj1))+(((0.0775)*x983))+(((0.3425)*x981))+(((0.3425)*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x987=(cj1*sj5);
IkReal x988=(r01*sj6);
IkReal x989=(cj5*r12);
IkReal x990=(cj6*r10);
IkReal x991=((1.0)*sj1);
IkReal x992=(cj6*r00);
IkReal x993=(cj5*r02);
IkReal x994=(sj1*sj5);
IkReal x995=(r11*sj6);
if( IKabs((((x994*x995))+(((-1.0)*sj5*x990*x991))+(((-1.0)*x989*x991))+((x987*x988))+(((-1.0)*cj1*x993))+(((-1.0)*x987*x992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x989))+((x988*x994))+(((-1.0)*x991*x993))+(((-1.0)*sj5*x991*x992))+((x987*x990))+(((-1.0)*x987*x995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x994*x995))+(((-1.0)*sj5*x990*x991))+(((-1.0)*x989*x991))+((x987*x988))+(((-1.0)*cj1*x993))+(((-1.0)*x987*x992))))+IKsqr((((cj1*x989))+((x988*x994))+(((-1.0)*x991*x993))+(((-1.0)*sj5*x991*x992))+((x987*x990))+(((-1.0)*x987*x995))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x994*x995))+(((-1.0)*sj5*x990*x991))+(((-1.0)*x989*x991))+((x987*x988))+(((-1.0)*cj1*x993))+(((-1.0)*x987*x992))), (((cj1*x989))+((x988*x994))+(((-1.0)*x991*x993))+(((-1.0)*sj5*x991*x992))+((x987*x990))+(((-1.0)*x987*x995))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x996=IKsin(j3);
IkReal x997=IKcos(j3);
IkReal x998=((0.076)*sj6);
IkReal x999=(sj5*sj6);
IkReal x1000=(sj4*sj6);
IkReal x1001=(cj4*cj5);
IkReal x1002=(cj4*sj5);
IkReal x1003=(cj6*sj4);
IkReal x1004=((1.0)*cj5);
IkReal x1005=((0.076)*cj6);
IkReal x1006=(sj1*x996);
IkReal x1007=(sj1*x997);
IkReal x1008=(cj1*x997);
IkReal x1009=((1.0)*cj6*r10);
IkReal x1010=((1.0)*cj6*r00);
IkReal x1011=(cj1*x996);
IkReal x1012=((1.0)*x1011);
IkReal x1013=((1.0)*x1007);
IkReal x1014=(x1012+x1013);
evalcond[0]=((((-1.0)*x1006))+x1008+(((-1.0)*r12*x1004))+(((-1.0)*sj5*x1009))+((r11*x999)));
evalcond[1]=((((-1.0)*x1014))+((r01*x999))+(((-1.0)*r02*x1004))+(((-1.0)*sj5*x1010)));
evalcond[2]=(((r01*sj6*x1001))+((r01*x1003))+(((-1.0)*x1008))+x1006+((r02*x1002))+(((-1.0)*x1001*x1010))+((r00*x1000)));
evalcond[3]=((((-1.0)*x1014))+((r11*x1003))+(((-1.0)*x1001*x1009))+((r11*sj6*x1001))+((r12*x1002))+((r10*x1000)));
evalcond[4]=((((0.0775)*x1006))+(((-0.0525)*cj1))+(((-0.3425)*x1011))+(((-0.0775)*x1008))+(((-1.0)*px))+(((-1.0)*r01*x998))+(((0.293)*sj1))+((r00*x1005))+(((-0.3425)*x1007)));
evalcond[5]=((((-0.0775)*x1011))+(((-0.0775)*x1007))+(((-1.0)*r11*x998))+(((-1.0)*py))+(((0.3425)*x1008))+(((-0.293)*cj1))+(((-0.0525)*sj1))+((r10*x1005))+(((-0.3425)*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1015=(cj6*sj5);
IkReal x1016=(sj5*sj6);
if( IKabs(((((-1.0)*r21*x1016))+((cj5*r22))+((r20*x1015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1015))+((r01*x1016))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1016))+((cj5*r22))+((r20*x1015))))+IKsqr(((((-1.0)*r00*x1015))+((r01*x1016))+(((-1.0)*cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r21*x1016))+((cj5*r22))+((r20*x1015))), ((((-1.0)*r00*x1015))+((r01*x1016))+(((-1.0)*cj5*r02))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1017=IKsin(j3);
IkReal x1018=IKcos(j3);
IkReal x1019=(sj5*sj6);
IkReal x1020=((1.0)*cj5);
IkReal x1021=(cj6*r20);
IkReal x1022=(r01*sj6);
IkReal x1023=((1.0)*sj5);
IkReal x1024=(sj4*sj6);
IkReal x1025=(cj6*r00);
IkReal x1026=(cj6*sj4);
IkReal x1027=(cj4*cj5);
IkReal x1028=(r21*sj6);
IkReal x1029=(cj4*sj5);
evalcond[0]=((((-1.0)*r22*x1020))+x1017+((r21*x1019))+(((-1.0)*x1021*x1023)));
evalcond[1]=((((-1.0)*x1023*x1025))+(((-1.0)*r02*x1020))+((r01*x1019))+(((-1.0)*x1018)));
evalcond[2]=((0.0525)+(((0.076)*x1021))+(((-0.076)*x1028))+(((0.3425)*x1017))+(((-1.0)*pz))+(((0.0775)*x1018)));
evalcond[3]=((0.293)+(((0.076)*x1025))+(((-0.3425)*x1018))+(((-0.076)*x1022))+(((-1.0)*px))+(((0.0775)*x1017)));
evalcond[4]=(((r20*x1024))+((r21*x1026))+x1018+((r22*x1029))+(((-1.0)*cj4*x1020*x1021))+((x1027*x1028)));
evalcond[5]=(((r01*x1026))+x1017+((x1022*x1027))+((r02*x1029))+(((-1.0)*cj4*x1020*x1025))+((r00*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1030=(sj5*sj6);
IkReal x1031=((1.0)*cj5);
IkReal x1032=((1.0)*cj6*sj5);
if( IKabs(((((-1.0)*r20*x1032))+((r21*x1030))+(((-1.0)*r22*x1031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1031))+(((-1.0)*r00*x1032))+((r01*x1030)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1032))+((r21*x1030))+(((-1.0)*r22*x1031))))+IKsqr(((((-1.0)*r02*x1031))+(((-1.0)*r00*x1032))+((r01*x1030))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r20*x1032))+((r21*x1030))+(((-1.0)*r22*x1031))), ((((-1.0)*r02*x1031))+(((-1.0)*r00*x1032))+((r01*x1030))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1033=IKsin(j3);
IkReal x1034=IKcos(j3);
IkReal x1035=(sj4*sj6);
IkReal x1036=((1.0)*cj5);
IkReal x1037=(cj6*r20);
IkReal x1038=(r01*sj6);
IkReal x1039=((1.0)*sj5);
IkReal x1040=(cj6*sj4);
IkReal x1041=(r21*sj6);
IkReal x1042=(cj6*r00);
IkReal x1043=(cj4*cj5);
IkReal x1044=(cj4*sj5);
IkReal x1045=((1.0)*x1034);
evalcond[0]=((((-1.0)*x1037*x1039))+(((-1.0)*x1033))+((sj5*x1041))+(((-1.0)*r22*x1036)));
evalcond[1]=((((-1.0)*x1039*x1042))+(((-1.0)*r02*x1036))+((sj5*x1038))+(((-1.0)*x1045)));
evalcond[2]=((-0.0525)+(((-0.3425)*x1033))+(((-0.0775)*x1034))+(((-1.0)*pz))+(((-0.076)*x1041))+(((0.076)*x1037)));
evalcond[3]=((0.293)+(((-0.3425)*x1034))+(((-1.0)*px))+(((0.076)*x1042))+(((-0.076)*x1038))+(((0.0775)*x1033)));
evalcond[4]=(((r02*x1044))+((r00*x1035))+((x1038*x1043))+x1033+((r01*x1040))+(((-1.0)*cj4*x1036*x1042)));
evalcond[5]=(((x1041*x1043))+(((-1.0)*cj4*x1036*x1037))+((r20*x1035))+((r21*x1040))+((r22*x1044))+(((-1.0)*x1045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1046=((1.0)*sj5);
if( IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1046)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x1046))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1046))))+IKsqr((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x1046))+(((-1.0)*cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1046))), (((r01*sj5*sj6))+(((-1.0)*cj6*r00*x1046))+(((-1.0)*cj5*r02))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1047=IKsin(j3);
IkReal x1048=IKcos(j3);
IkReal x1049=((0.076)*sj6);
IkReal x1050=(r11*sj6);
IkReal x1051=(cj4*cj5);
IkReal x1052=(sj4*sj6);
IkReal x1053=(cj4*sj5);
IkReal x1054=(r01*sj6);
IkReal x1055=(cj6*sj4);
IkReal x1056=((1.0)*cj5);
IkReal x1057=((0.076)*cj6);
IkReal x1058=((1.0)*cj6*r10);
IkReal x1059=((1.0)*cj6*r00);
evalcond[0]=(x1047+((sj5*x1050))+(((-1.0)*r12*x1056))+(((-1.0)*sj5*x1058)));
evalcond[1]=((((-1.0)*r02*x1056))+((sj5*x1054))+(((-1.0)*sj5*x1059))+(((-1.0)*x1048)));
evalcond[2]=((0.293)+(((-1.0)*r01*x1049))+(((-1.0)*px))+((r00*x1057))+(((0.0775)*x1047))+(((-0.3425)*x1048)));
evalcond[3]=((0.0525)+(((-1.0)*r11*x1049))+(((-1.0)*py))+(((0.0775)*x1048))+((r10*x1057))+(((0.3425)*x1047)));
evalcond[4]=(((r02*x1053))+x1047+((r00*x1052))+((x1051*x1054))+((r01*x1055))+(((-1.0)*x1051*x1059)));
evalcond[5]=(((r12*x1053))+((r11*x1055))+x1048+((x1050*x1051))+((r10*x1052))+(((-1.0)*x1051*x1058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1060=((1.0)*cj5);
IkReal x1061=(sj5*sj6);
IkReal x1062=((1.0)*cj6*sj5);
if( IKabs(((((-1.0)*r10*x1062))+(((-1.0)*r12*x1060))+((r11*x1061)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1060))+(((-1.0)*r00*x1062))+((r01*x1061)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1062))+(((-1.0)*r12*x1060))+((r11*x1061))))+IKsqr(((((-1.0)*r02*x1060))+(((-1.0)*r00*x1062))+((r01*x1061))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x1062))+(((-1.0)*r12*x1060))+((r11*x1061))), ((((-1.0)*r02*x1060))+(((-1.0)*r00*x1062))+((r01*x1061))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1063=IKsin(j3);
IkReal x1064=IKcos(j3);
IkReal x1065=((0.076)*sj6);
IkReal x1066=(r11*sj6);
IkReal x1067=(cj4*cj5);
IkReal x1068=(sj4*sj6);
IkReal x1069=(cj4*sj5);
IkReal x1070=(r01*sj6);
IkReal x1071=(cj6*sj4);
IkReal x1072=((1.0)*cj5);
IkReal x1073=((0.076)*cj6);
IkReal x1074=((1.0)*x1064);
IkReal x1075=((1.0)*cj6*r10);
IkReal x1076=((1.0)*cj6*r00);
evalcond[0]=((((-1.0)*r12*x1072))+((sj5*x1066))+(((-1.0)*sj5*x1075))+(((-1.0)*x1063)));
evalcond[1]=((((-1.0)*r02*x1072))+((sj5*x1070))+(((-1.0)*sj5*x1076))+(((-1.0)*x1074)));
evalcond[2]=((0.293)+(((-1.0)*r01*x1065))+(((-1.0)*px))+((r00*x1073))+(((0.0775)*x1063))+(((-0.3425)*x1064)));
evalcond[3]=((-0.0525)+(((-0.0775)*x1064))+(((-1.0)*r11*x1065))+(((-1.0)*py))+((r10*x1073))+(((-0.3425)*x1063)));
evalcond[4]=(x1063+((x1067*x1070))+(((-1.0)*x1067*x1076))+((r00*x1068))+((r01*x1071))+((r02*x1069)));
evalcond[5]=(((r12*x1069))+((x1066*x1067))+(((-1.0)*x1067*x1075))+((r10*x1068))+(((-1.0)*x1074))+((r11*x1071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1077=((1.0)*sj5);
CheckValue<IkReal> x1078=IKPowWithIntegerCheck(cj2,-1);
if(!x1078.valid){
continue;
}
if( IKabs(((x1078.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1077)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x1077))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1078.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1077))))))+IKsqr((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x1077))+(((-1.0)*cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1078.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1077))))), (((r01*sj5*sj6))+(((-1.0)*cj6*r00*x1077))+(((-1.0)*cj5*r02))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1079=IKsin(j3);
IkReal x1080=IKcos(j3);
IkReal x1081=(sj4*sj6);
IkReal x1082=((1.0)*cj6);
IkReal x1083=(cj4*cj5);
IkReal x1084=((0.076)*sj6);
IkReal x1085=(r11*sj6);
IkReal x1086=((1.0)*cj5);
IkReal x1087=(r21*sj6);
IkReal x1088=(cj4*sj5);
IkReal x1089=(r01*sj6);
IkReal x1090=(cj6*sj4);
IkReal x1091=((0.076)*cj6);
IkReal x1092=((0.0775)*x1080);
IkReal x1093=(cj2*x1079);
IkReal x1094=(sj2*x1079);
evalcond[0]=(((sj5*x1087))+x1094+(((-1.0)*r22*x1086))+(((-1.0)*r20*sj5*x1082)));
evalcond[1]=(((sj5*x1085))+x1093+(((-1.0)*r10*sj5*x1082))+(((-1.0)*r12*x1086)));
evalcond[2]=(((sj5*x1089))+(((-1.0)*r00*sj5*x1082))+(((-1.0)*x1080))+(((-1.0)*r02*x1086)));
evalcond[3]=((0.293)+((r00*x1091))+(((-1.0)*px))+(((-1.0)*r01*x1084))+(((-0.3425)*x1080))+(((0.0775)*x1079)));
evalcond[4]=((((-1.0)*r21*x1084))+(((0.3425)*x1094))+(((-1.0)*pz))+((sj2*x1092))+(((0.0525)*sj2))+((r20*x1091)));
evalcond[5]=(x1079+((r01*x1090))+((r00*x1081))+(((-1.0)*r00*x1082*x1083))+((r02*x1088))+((x1083*x1089)));
evalcond[6]=((((-1.0)*r11*x1084))+(((0.0525)*cj2))+((r10*x1091))+(((0.3425)*x1093))+(((-1.0)*py))+((cj2*x1092)));
evalcond[7]=(((sj2*x1080))+((r21*x1090))+(((-1.0)*r20*x1082*x1083))+((r20*x1081))+((r22*x1088))+((x1083*x1087)));
evalcond[8]=(((r12*x1088))+(((-1.0)*r10*x1082*x1083))+((r10*x1081))+((r11*x1090))+((cj2*x1080))+((x1083*x1085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1095=(cj6*sj5);
IkReal x1096=(sj5*sj6);
CheckValue<IkReal> x1097=IKPowWithIntegerCheck(sj2,-1);
if(!x1097.valid){
continue;
}
if( IKabs(((x1097.value)*((((cj5*r22))+(((-1.0)*r21*x1096))+((r20*x1095)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1096))+(((-1.0)*r00*x1095))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1097.value)*((((cj5*r22))+(((-1.0)*r21*x1096))+((r20*x1095))))))+IKsqr((((r01*x1096))+(((-1.0)*r00*x1095))+(((-1.0)*cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1097.value)*((((cj5*r22))+(((-1.0)*r21*x1096))+((r20*x1095))))), (((r01*x1096))+(((-1.0)*r00*x1095))+(((-1.0)*cj5*r02))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1098=IKsin(j3);
IkReal x1099=IKcos(j3);
IkReal x1100=(sj4*sj6);
IkReal x1101=((1.0)*cj6);
IkReal x1102=(cj4*cj5);
IkReal x1103=((0.076)*sj6);
IkReal x1104=(r11*sj6);
IkReal x1105=((1.0)*cj5);
IkReal x1106=(r21*sj6);
IkReal x1107=(cj4*sj5);
IkReal x1108=(r01*sj6);
IkReal x1109=(cj6*sj4);
IkReal x1110=((0.076)*cj6);
IkReal x1111=((0.0775)*x1099);
IkReal x1112=(cj2*x1098);
IkReal x1113=(sj2*x1098);
evalcond[0]=(x1113+(((-1.0)*r22*x1105))+(((-1.0)*r20*sj5*x1101))+((sj5*x1106)));
evalcond[1]=((((-1.0)*r12*x1105))+x1112+(((-1.0)*r10*sj5*x1101))+((sj5*x1104)));
evalcond[2]=((((-1.0)*x1099))+(((-1.0)*r02*x1105))+(((-1.0)*r00*sj5*x1101))+((sj5*x1108)));
evalcond[3]=((0.293)+(((-1.0)*r01*x1103))+(((0.0775)*x1098))+(((-0.3425)*x1099))+((r00*x1110))+(((-1.0)*px)));
evalcond[4]=(((sj2*x1111))+((r20*x1110))+(((-1.0)*r21*x1103))+(((-1.0)*pz))+(((0.3425)*x1113))+(((0.0525)*sj2)));
evalcond[5]=(((r02*x1107))+((x1102*x1108))+x1098+(((-1.0)*r00*x1101*x1102))+((r01*x1109))+((r00*x1100)));
evalcond[6]=((((-1.0)*r11*x1103))+(((0.0525)*cj2))+(((-1.0)*py))+(((0.3425)*x1112))+((cj2*x1111))+((r10*x1110)));
evalcond[7]=(((r20*x1100))+((x1102*x1106))+(((-1.0)*r20*x1101*x1102))+((r22*x1107))+((r21*x1109))+((sj2*x1099)));
evalcond[8]=(((x1102*x1104))+((r12*x1107))+((cj2*x1099))+(((-1.0)*r10*x1101*x1102))+((r10*x1100))+((r11*x1109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1114=(cj6*r00);
IkReal x1115=(cj5*r02);
IkReal x1116=(r01*sj6);
IkReal x1117=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((0.980645161290323)*x1114))+((x1114*x1117))+(((-0.980645161290323)*x1116))+(((-12.9032258064516)*px))+(((-1.0)*x1116*x1117))+(((4.41935483870968)*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1115+(((-1.0)*sj5*x1116))+((sj5*x1114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((0.980645161290323)*x1114))+((x1114*x1117))+(((-0.980645161290323)*x1116))+(((-12.9032258064516)*px))+(((-1.0)*x1116*x1117))+(((4.41935483870968)*x1115))))+IKsqr((x1115+(((-1.0)*sj5*x1116))+((sj5*x1114))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((0.980645161290323)*x1114))+((x1114*x1117))+(((-0.980645161290323)*x1116))+(((-12.9032258064516)*px))+(((-1.0)*x1116*x1117))+(((4.41935483870968)*x1115))), (x1115+(((-1.0)*sj5*x1116))+((sj5*x1114))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1118=IKsin(j3);
IkReal x1119=IKcos(j3);
IkReal x1120=(sj4*sj6);
IkReal x1121=((1.0)*cj6);
IkReal x1122=(cj4*cj5);
IkReal x1123=((0.076)*sj6);
IkReal x1124=(r11*sj6);
IkReal x1125=((1.0)*cj5);
IkReal x1126=(r21*sj6);
IkReal x1127=(cj4*sj5);
IkReal x1128=(r01*sj6);
IkReal x1129=(cj6*sj4);
IkReal x1130=((0.076)*cj6);
IkReal x1131=((0.0775)*x1119);
IkReal x1132=((1.0)*x1118);
IkReal x1133=((0.3425)*x1118);
evalcond[0]=(x1119+(((-1.0)*r00*sj5*x1121))+((sj5*x1128))+(((-1.0)*r02*x1125)));
evalcond[1]=(((sj2*x1118))+(((-1.0)*r20*sj5*x1121))+((sj5*x1126))+(((-1.0)*r22*x1125)));
evalcond[2]=((((-1.0)*r12*x1125))+(((-1.0)*r10*sj5*x1121))+(((-1.0)*cj2*x1132))+((sj5*x1124)));
evalcond[3]=((-0.293)+(((-0.0775)*x1118))+((r00*x1130))+(((-1.0)*px))+(((0.3425)*x1119))+(((-1.0)*r01*x1123)));
evalcond[4]=((((-1.0)*pz))+((sj2*x1133))+((sj2*x1131))+(((-1.0)*r21*x1123))+(((0.0525)*sj2))+((r20*x1130)));
evalcond[5]=((((-0.0525)*cj2))+((r10*x1130))+(((-1.0)*r11*x1123))+(((-1.0)*py))+(((-1.0)*cj2*x1133))+(((-1.0)*cj2*x1131)));
evalcond[6]=(((sj2*x1119))+((r22*x1127))+((r21*x1129))+((x1122*x1126))+(((-1.0)*r20*x1121*x1122))+((r20*x1120)));
evalcond[7]=(((r00*x1120))+((r01*x1129))+(((-1.0)*x1132))+(((-1.0)*r00*x1121*x1122))+((x1122*x1128))+((r02*x1127)));
evalcond[8]=((((-1.0)*cj2*x1119))+((r10*x1120))+((x1122*x1124))+((r12*x1127))+((r11*x1129))+(((-1.0)*r10*x1121*x1122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1134=(cj6*r20);
IkReal x1135=(cj5*r22);
IkReal x1136=(r21*sj6);
IkReal x1137=((4.41935483870968)*sj5);
if( IKabs((x1135+(((-1.0)*sj5*x1136))+((sj5*x1134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((12.9032258064516)*pz))+(((0.980645161290323)*x1136))+((x1136*x1137))+(((-1.0)*x1134*x1137))+(((-0.980645161290323)*x1134))+(((-4.41935483870968)*x1135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1135+(((-1.0)*sj5*x1136))+((sj5*x1134))))+IKsqr(((-0.67741935483871)+(((12.9032258064516)*pz))+(((0.980645161290323)*x1136))+((x1136*x1137))+(((-1.0)*x1134*x1137))+(((-0.980645161290323)*x1134))+(((-4.41935483870968)*x1135))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1135+(((-1.0)*sj5*x1136))+((sj5*x1134))), ((-0.67741935483871)+(((12.9032258064516)*pz))+(((0.980645161290323)*x1136))+((x1136*x1137))+(((-1.0)*x1134*x1137))+(((-0.980645161290323)*x1134))+(((-4.41935483870968)*x1135))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1138=IKcos(j3);
IkReal x1139=IKsin(j3);
IkReal x1140=(sj5*sj6);
IkReal x1141=((1.0)*cj6);
IkReal x1142=(cj4*cj5);
IkReal x1143=((0.076)*sj6);
IkReal x1144=((1.0)*cj5);
IkReal x1145=(sj4*sj6);
IkReal x1146=(cj4*sj5);
IkReal x1147=(cj6*sj4);
IkReal x1148=((0.076)*cj6);
IkReal x1149=(cj1*x1138);
IkReal x1150=(sj1*x1138);
IkReal x1151=((0.0775)*x1139);
evalcond[0]=(x1139+(((-1.0)*r20*sj5*x1141))+((r21*x1140))+(((-1.0)*r22*x1144)));
evalcond[1]=(x1149+((r11*x1140))+(((-1.0)*r10*sj5*x1141))+(((-1.0)*r12*x1144)));
evalcond[2]=((((-1.0)*r00*sj5*x1141))+(((-1.0)*r02*x1144))+(((-1.0)*x1150))+((r01*x1140)));
evalcond[3]=((0.0525)+(((-1.0)*r21*x1143))+(((-1.0)*pz))+((r20*x1148))+(((0.3425)*x1139))+(((0.0775)*x1138)));
evalcond[4]=(x1138+((r22*x1146))+(((-1.0)*r20*x1141*x1142))+((r21*sj6*x1142))+((r20*x1145))+((r21*x1147)));
evalcond[5]=((((-1.0)*r01*x1143))+(((-0.3425)*x1150))+(((-1.0)*px))+(((0.293)*sj1))+((sj1*x1151))+((r00*x1148)));
evalcond[6]=((((-1.0)*cj1*x1151))+(((-1.0)*py))+(((-0.293)*cj1))+(((-1.0)*r11*x1143))+((r10*x1148))+(((0.3425)*x1149)));
evalcond[7]=(((r01*sj6*x1142))+((sj1*x1139))+(((-1.0)*r00*x1141*x1142))+((r02*x1146))+((r01*x1147))+((r00*x1145)));
evalcond[8]=(((r11*x1147))+((r11*sj6*x1142))+(((-1.0)*cj1*x1139))+(((-1.0)*r10*x1141*x1142))+((r10*x1145))+((r12*x1146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1152=(r21*sj6);
IkReal x1153=(cj6*r20);
IkReal x1154=(cj5*r22);
IkReal x1155=((4.41935483870968)*sj5);
if( IKabs(((((-1.0)*sj5*x1153))+((sj5*x1152))+(((-1.0)*x1154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((-12.9032258064516)*pz))+(((-0.980645161290323)*x1152))+((x1153*x1155))+(((-1.0)*x1152*x1155))+(((4.41935483870968)*x1154))+(((0.980645161290323)*x1153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x1153))+((sj5*x1152))+(((-1.0)*x1154))))+IKsqr(((-0.67741935483871)+(((-12.9032258064516)*pz))+(((-0.980645161290323)*x1152))+((x1153*x1155))+(((-1.0)*x1152*x1155))+(((4.41935483870968)*x1154))+(((0.980645161290323)*x1153))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x1153))+((sj5*x1152))+(((-1.0)*x1154))), ((-0.67741935483871)+(((-12.9032258064516)*pz))+(((-0.980645161290323)*x1152))+((x1153*x1155))+(((-1.0)*x1152*x1155))+(((4.41935483870968)*x1154))+(((0.980645161290323)*x1153))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1156=IKcos(j3);
IkReal x1157=IKsin(j3);
IkReal x1158=(sj4*sj6);
IkReal x1159=(cj4*sj5);
IkReal x1160=((1.0)*cj6);
IkReal x1161=(cj4*cj5);
IkReal x1162=((0.076)*sj6);
IkReal x1163=(r11*sj6);
IkReal x1164=((1.0)*cj5);
IkReal x1165=(r21*sj6);
IkReal x1166=(r01*sj6);
IkReal x1167=(cj6*sj4);
IkReal x1168=((0.076)*cj6);
IkReal x1169=(cj1*x1156);
IkReal x1170=(sj1*x1156);
IkReal x1171=((0.0775)*x1157);
IkReal x1172=((1.0)*x1157);
evalcond[0]=((((-1.0)*r20*sj5*x1160))+(((-1.0)*r22*x1164))+(((-1.0)*x1172))+((sj5*x1165)));
evalcond[1]=(x1169+(((-1.0)*r10*sj5*x1160))+(((-1.0)*r12*x1164))+((sj5*x1163)));
evalcond[2]=((((-1.0)*r02*x1164))+((sj5*x1166))+(((-1.0)*r00*sj5*x1160))+(((-1.0)*x1170)));
evalcond[3]=((-0.0525)+(((-1.0)*r21*x1162))+((r20*x1168))+(((-0.3425)*x1157))+(((-1.0)*pz))+(((-0.0775)*x1156)));
evalcond[4]=((((-0.3425)*x1170))+((sj1*x1171))+((r00*x1168))+(((-1.0)*px))+(((0.293)*sj1))+(((-1.0)*r01*x1162)));
evalcond[5]=(((r10*x1168))+(((-1.0)*r11*x1162))+(((-1.0)*py))+(((-0.293)*cj1))+(((0.3425)*x1169))+(((-1.0)*cj1*x1171)));
evalcond[6]=((((-1.0)*r20*x1160*x1161))+((r22*x1159))+((r21*x1167))+((r20*x1158))+(((-1.0)*x1156))+((x1161*x1165)));
evalcond[7]=(((r00*x1158))+(((-1.0)*r00*x1160*x1161))+((r01*x1167))+((r02*x1159))+((sj1*x1157))+((x1161*x1166)));
evalcond[8]=(((r12*x1159))+((r11*x1167))+(((-1.0)*cj1*x1172))+(((-1.0)*r10*x1160*x1161))+((x1161*x1163))+((r10*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1179=IKPowWithIntegerCheck(sj2,-1);
if(!x1179.valid){
continue;
}
IkReal x1173=x1179.value;
IkReal x1174=(cj5*r22);
IkReal x1175=(sj2*sj5);
IkReal x1176=((1.0)*cj2*sj1);
IkReal x1177=(cj6*r20*sj5);
IkReal x1178=(r21*sj5*sj6);
CheckValue<IkReal> x1180=IKPowWithIntegerCheck(cj1,-1);
if(!x1180.valid){
continue;
}
if( IKabs((x1173*((x1177+x1174+(((-1.0)*x1178)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1173*(x1180.value)*((((cj5*r12*sj2))+((cj6*r10*x1175))+(((-1.0)*r11*sj6*x1175))+(((-1.0)*x1176*x1177))+((cj2*sj1*x1178))+(((-1.0)*x1174*x1176)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1173*((x1177+x1174+(((-1.0)*x1178))))))+IKsqr((x1173*(x1180.value)*((((cj5*r12*sj2))+((cj6*r10*x1175))+(((-1.0)*r11*sj6*x1175))+(((-1.0)*x1176*x1177))+((cj2*sj1*x1178))+(((-1.0)*x1174*x1176))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1173*((x1177+x1174+(((-1.0)*x1178))))), (x1173*(x1180.value)*((((cj5*r12*sj2))+((cj6*r10*x1175))+(((-1.0)*r11*sj6*x1175))+(((-1.0)*x1176*x1177))+((cj2*sj1*x1178))+(((-1.0)*x1174*x1176))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1181=IKsin(j3);
IkReal x1182=IKcos(j3);
IkReal x1183=(sj4*sj6);
IkReal x1184=((1.0)*cj6);
IkReal x1185=(cj4*cj5);
IkReal x1186=((0.076)*sj6);
IkReal x1187=((0.3425)*cj1);
IkReal x1188=(sj5*sj6);
IkReal x1189=((1.0)*cj5);
IkReal x1190=(cj4*sj5);
IkReal x1191=((0.0775)*cj2);
IkReal x1192=(cj6*sj4);
IkReal x1193=((0.0525)*cj2);
IkReal x1194=((0.076)*cj6);
IkReal x1195=(sj1*x1181);
IkReal x1196=(cj2*x1181);
IkReal x1197=(sj2*x1182);
IkReal x1198=(cj1*x1182);
IkReal x1199=(sj1*x1182);
IkReal x1200=(sj2*x1181);
IkReal x1201=(cj1*x1181);
evalcond[0]=(x1200+(((-1.0)*r22*x1189))+(((-1.0)*r20*sj5*x1184))+((r21*x1188)));
evalcond[1]=(x1198+(((-1.0)*r10*sj5*x1184))+((r11*x1188))+((cj2*x1195))+(((-1.0)*r12*x1189)));
evalcond[2]=(((r01*x1188))+(((-1.0)*r00*sj5*x1184))+(((-1.0)*x1199))+((cj1*x1196))+(((-1.0)*r02*x1189)));
evalcond[3]=((((0.3425)*x1200))+(((-1.0)*pz))+((r20*x1194))+(((0.0525)*sj2))+(((0.0775)*x1197))+(((-1.0)*r21*x1186)));
evalcond[4]=(x1197+(((-1.0)*r20*x1184*x1185))+((r22*x1190))+((r21*sj6*x1185))+((r21*x1192))+((r20*x1183)));
evalcond[5]=(x1195+((r00*x1183))+((r01*x1192))+((r02*x1190))+((r01*sj6*x1185))+((cj2*x1198))+(((-1.0)*r00*x1184*x1185)));
evalcond[6]=(((r10*x1183))+((r11*sj6*x1185))+(((-1.0)*x1201))+((r11*x1192))+((r12*x1190))+(((-1.0)*r10*x1184*x1185))+((cj2*x1199)));
evalcond[7]=((((-1.0)*r01*x1186))+((x1187*x1196))+((r00*x1194))+(((-1.0)*px))+(((0.293)*sj1))+(((-0.3425)*x1199))+((x1191*x1198))+((cj1*x1193))+(((0.0775)*x1195)));
evalcond[8]=((((-1.0)*r11*x1186))+(((-0.0775)*x1201))+((x1182*x1187))+((r10*x1194))+((sj1*x1193))+(((-1.0)*py))+(((-0.293)*cj1))+(((0.3425)*cj2*x1195))+((x1191*x1199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1207=IKPowWithIntegerCheck(sj2,-1);
if(!x1207.valid){
continue;
}
IkReal x1202=x1207.value;
IkReal x1203=(r21*sj6);
IkReal x1204=((137.0)*sj5);
IkReal x1205=(cj5*r22);
IkReal x1206=(cj6*r20);
if( IKabs((x1202*((x1205+((sj5*x1206))+(((-1.0)*sj5*x1203)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x1202*(((((-1.0)*x1204*x1206))+(((-137.0)*x1205))+(((30.4)*x1203))+(((-30.4)*x1206))+(((400.0)*pz))+(((-21.0)*sj2))+((x1203*x1204)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1202*((x1205+((sj5*x1206))+(((-1.0)*sj5*x1203))))))+IKsqr(((0.032258064516129)*x1202*(((((-1.0)*x1204*x1206))+(((-137.0)*x1205))+(((30.4)*x1203))+(((-30.4)*x1206))+(((400.0)*pz))+(((-21.0)*sj2))+((x1203*x1204))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1202*((x1205+((sj5*x1206))+(((-1.0)*sj5*x1203))))), ((0.032258064516129)*x1202*(((((-1.0)*x1204*x1206))+(((-137.0)*x1205))+(((30.4)*x1203))+(((-30.4)*x1206))+(((400.0)*pz))+(((-21.0)*sj2))+((x1203*x1204))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1208=IKsin(j3);
IkReal x1209=IKcos(j3);
IkReal x1210=(sj4*sj6);
IkReal x1211=((1.0)*cj6);
IkReal x1212=(cj4*cj5);
IkReal x1213=((0.076)*sj6);
IkReal x1214=((0.3425)*cj1);
IkReal x1215=(sj5*sj6);
IkReal x1216=((1.0)*cj5);
IkReal x1217=(cj4*sj5);
IkReal x1218=((0.0775)*cj2);
IkReal x1219=(cj6*sj4);
IkReal x1220=((0.0525)*cj2);
IkReal x1221=((0.076)*cj6);
IkReal x1222=(sj1*x1208);
IkReal x1223=(cj2*x1208);
IkReal x1224=(sj2*x1209);
IkReal x1225=(cj1*x1209);
IkReal x1226=(sj1*x1209);
IkReal x1227=(sj2*x1208);
IkReal x1228=(cj1*x1208);
evalcond[0]=(x1227+(((-1.0)*r22*x1216))+(((-1.0)*r20*sj5*x1211))+((r21*x1215)));
evalcond[1]=(((cj2*x1222))+x1225+((r11*x1215))+(((-1.0)*r10*sj5*x1211))+(((-1.0)*r12*x1216)));
evalcond[2]=((((-1.0)*r02*x1216))+(((-1.0)*x1226))+(((-1.0)*r00*sj5*x1211))+((r01*x1215))+((cj1*x1223)));
evalcond[3]=((((0.3425)*x1227))+((r20*x1221))+(((-1.0)*pz))+(((0.0775)*x1224))+(((-1.0)*r21*x1213))+(((0.0525)*sj2)));
evalcond[4]=(((r21*sj6*x1212))+x1224+((r22*x1217))+(((-1.0)*r20*x1211*x1212))+((r20*x1210))+((r21*x1219)));
evalcond[5]=(((cj2*x1225))+x1222+((r02*x1217))+((r00*x1210))+((r01*x1219))+(((-1.0)*r00*x1211*x1212))+((r01*sj6*x1212)));
evalcond[6]=(((r12*x1217))+((cj2*x1226))+((r11*x1219))+(((-1.0)*x1228))+(((-1.0)*r10*x1211*x1212))+((r10*x1210))+((r11*sj6*x1212)));
evalcond[7]=(((x1214*x1223))+((r00*x1221))+(((-0.3425)*x1226))+(((-1.0)*r01*x1213))+(((-1.0)*px))+(((0.0775)*x1222))+(((0.293)*sj1))+((x1218*x1225))+((cj1*x1220)));
evalcond[8]=(((sj1*x1220))+(((-1.0)*py))+(((-0.293)*cj1))+((r10*x1221))+(((-0.0775)*x1228))+((x1218*x1226))+((x1209*x1214))+(((0.3425)*cj2*x1222))+(((-1.0)*r11*x1213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1229=(cj5*r12);
IkReal x1230=(cj6*sj5);
IkReal x1231=((1.0)*sj1);
IkReal x1232=(cj5*r02);
IkReal x1233=((1.0)*cj1);
IkReal x1234=(r01*sj5*sj6);
IkReal x1235=(r11*sj5*sj6);
CheckValue<IkReal> x1236=IKPowWithIntegerCheck(cj2,-1);
if(!x1236.valid){
continue;
}
if( IKabs(((x1236.value)*((((sj1*x1229))+((cj1*r00*x1230))+((r10*sj1*x1230))+(((-1.0)*x1233*x1234))+(((-1.0)*x1231*x1235))+((cj1*x1232)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1234))+((cj1*r10*x1230))+(((-1.0)*x1233*x1235))+(((-1.0)*x1231*x1232))+(((-1.0)*r00*x1230*x1231))+((cj1*x1229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1236.value)*((((sj1*x1229))+((cj1*r00*x1230))+((r10*sj1*x1230))+(((-1.0)*x1233*x1234))+(((-1.0)*x1231*x1235))+((cj1*x1232))))))+IKsqr((((sj1*x1234))+((cj1*r10*x1230))+(((-1.0)*x1233*x1235))+(((-1.0)*x1231*x1232))+(((-1.0)*r00*x1230*x1231))+((cj1*x1229))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1236.value)*((((sj1*x1229))+((cj1*r00*x1230))+((r10*sj1*x1230))+(((-1.0)*x1233*x1234))+(((-1.0)*x1231*x1235))+((cj1*x1232))))), (((sj1*x1234))+((cj1*r10*x1230))+(((-1.0)*x1233*x1235))+(((-1.0)*x1231*x1232))+(((-1.0)*r00*x1230*x1231))+((cj1*x1229))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1237=IKsin(j3);
IkReal x1238=IKcos(j3);
IkReal x1239=(sj4*sj6);
IkReal x1240=((1.0)*cj6);
IkReal x1241=(cj4*cj5);
IkReal x1242=((0.076)*sj6);
IkReal x1243=((0.3425)*cj1);
IkReal x1244=(sj5*sj6);
IkReal x1245=((1.0)*cj5);
IkReal x1246=(cj4*sj5);
IkReal x1247=((0.0775)*cj2);
IkReal x1248=(cj6*sj4);
IkReal x1249=((0.0525)*cj2);
IkReal x1250=((0.076)*cj6);
IkReal x1251=(sj1*x1237);
IkReal x1252=(cj2*x1237);
IkReal x1253=(sj2*x1238);
IkReal x1254=(cj1*x1238);
IkReal x1255=(sj1*x1238);
IkReal x1256=(sj2*x1237);
IkReal x1257=(cj1*x1237);
evalcond[0]=((((-1.0)*r20*sj5*x1240))+x1256+(((-1.0)*r22*x1245))+((r21*x1244)));
evalcond[1]=(x1254+((cj2*x1251))+(((-1.0)*r12*x1245))+(((-1.0)*r10*sj5*x1240))+((r11*x1244)));
evalcond[2]=((((-1.0)*r02*x1245))+((r01*x1244))+(((-1.0)*r00*sj5*x1240))+((cj1*x1252))+(((-1.0)*x1255)));
evalcond[3]=((((0.0775)*x1253))+(((-1.0)*r21*x1242))+(((0.3425)*x1256))+(((-1.0)*pz))+((r20*x1250))+(((0.0525)*sj2)));
evalcond[4]=(x1253+((r20*x1239))+(((-1.0)*r20*x1240*x1241))+((r21*x1248))+((r22*x1246))+((r21*sj6*x1241)));
evalcond[5]=(x1251+((r00*x1239))+(((-1.0)*r00*x1240*x1241))+((cj2*x1254))+((r01*x1248))+((r02*x1246))+((r01*sj6*x1241)));
evalcond[6]=(((r11*sj6*x1241))+(((-1.0)*r10*x1240*x1241))+((cj2*x1255))+((r10*x1239))+((r11*x1248))+((r12*x1246))+(((-1.0)*x1257)));
evalcond[7]=(((x1247*x1254))+((cj1*x1249))+((x1243*x1252))+(((0.0775)*x1251))+(((-1.0)*px))+(((0.293)*sj1))+(((-1.0)*r01*x1242))+((r00*x1250))+(((-0.3425)*x1255)));
evalcond[8]=(((x1247*x1255))+((r10*x1250))+(((0.3425)*cj2*x1251))+(((-0.0775)*x1257))+(((-1.0)*r11*x1242))+(((-1.0)*py))+(((-0.293)*cj1))+((x1238*x1243))+((sj1*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1258=(cj4*sj6);
IkReal x1259=(cj4*cj6);
IkReal x1260=((1.0)*r20);
IkReal x1261=(sj4*sj5);
IkReal x1262=(cj5*sj4);
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(cj1,-1);
if(!x1263.valid){
continue;
}
if( IKabs(((x1263.value)*((((cj6*r00*x1262))+(((-1.0)*r02*x1261))+(((-1.0)*r01*sj6*x1262))+((r00*x1258))+((r01*x1259)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1258*x1260))+((r22*x1261))+(((-1.0)*r21*x1259))+(((-1.0)*cj6*x1260*x1262))+((r21*sj6*x1262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1263.value)*((((cj6*r00*x1262))+(((-1.0)*r02*x1261))+(((-1.0)*r01*sj6*x1262))+((r00*x1258))+((r01*x1259))))))+IKsqr(((((-1.0)*x1258*x1260))+((r22*x1261))+(((-1.0)*r21*x1259))+(((-1.0)*cj6*x1260*x1262))+((r21*sj6*x1262))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1263.value)*((((cj6*r00*x1262))+(((-1.0)*r02*x1261))+(((-1.0)*r01*sj6*x1262))+((r00*x1258))+((r01*x1259))))), ((((-1.0)*x1258*x1260))+((r22*x1261))+(((-1.0)*r21*x1259))+(((-1.0)*cj6*x1260*x1262))+((r21*sj6*x1262))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x1264=IKsin(j2);
IkReal x1265=(sj4*sj5);
IkReal x1266=((1.0)*cj6);
IkReal x1267=(cj5*sj4);
IkReal x1268=(sj6*x1267);
IkReal x1269=((1.0)*cj4*sj6);
evalcond[0]=(((r21*x1268))+((r22*x1265))+(((-1.0)*cj4*r21*x1266))+(((-1.0)*(IKcos(j2))))+(((-1.0)*r20*x1266*x1267))+(((-1.0)*r20*x1269)));
evalcond[1]=(((r02*x1265))+(((-1.0)*r00*x1269))+((cj1*x1264))+(((-1.0)*r00*x1266*x1267))+(((-1.0)*cj4*r01*x1266))+((r01*x1268)));
evalcond[2]=((((-1.0)*r10*x1269))+(((-1.0)*r10*x1266*x1267))+((r11*x1268))+(((-1.0)*cj4*r11*x1266))+((r12*x1265))+((sj1*x1264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj2;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1270=(cj5*r12);
IkReal x1271=(cj6*sj5);
IkReal x1272=((1.0)*sj1);
IkReal x1273=(cj5*r02);
IkReal x1274=((1.0)*cj1);
IkReal x1275=(r01*sj5*sj6);
IkReal x1276=(r11*sj5*sj6);
if( IKabs((((sj1*x1270))+(((-1.0)*x1272*x1276))+((cj1*x1273))+(((-1.0)*x1274*x1275))+((r10*sj1*x1271))+((cj1*r00*x1271)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1275))+(((-1.0)*r00*x1271*x1272))+(((-1.0)*x1272*x1273))+((cj1*x1270))+(((-1.0)*x1274*x1276))+((cj1*r10*x1271)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1270))+(((-1.0)*x1272*x1276))+((cj1*x1273))+(((-1.0)*x1274*x1275))+((r10*sj1*x1271))+((cj1*r00*x1271))))+IKsqr((((sj1*x1275))+(((-1.0)*r00*x1271*x1272))+(((-1.0)*x1272*x1273))+((cj1*x1270))+(((-1.0)*x1274*x1276))+((cj1*r10*x1271))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj1*x1270))+(((-1.0)*x1272*x1276))+((cj1*x1273))+(((-1.0)*x1274*x1275))+((r10*sj1*x1271))+((cj1*r00*x1271))), (((sj1*x1275))+(((-1.0)*r00*x1271*x1272))+(((-1.0)*x1272*x1273))+((cj1*x1270))+(((-1.0)*x1274*x1276))+((cj1*r10*x1271))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1277=IKsin(j3);
IkReal x1278=IKcos(j3);
IkReal x1279=((0.076)*sj6);
IkReal x1280=(sj5*sj6);
IkReal x1281=(cj4*cj5);
IkReal x1282=(sj4*sj6);
IkReal x1283=(cj4*sj5);
IkReal x1284=(cj6*sj4);
IkReal x1285=((1.0)*cj5);
IkReal x1286=((0.076)*cj6);
IkReal x1287=(cj1*x1278);
IkReal x1288=(sj1*x1277);
IkReal x1289=(cj1*x1277);
IkReal x1290=(sj1*x1278);
IkReal x1291=((1.0)*cj6*r10);
IkReal x1292=((1.0)*cj6*r00);
IkReal x1293=(x1287+x1288);
evalcond[0]=(x1293+((r11*x1280))+(((-1.0)*r12*x1285))+(((-1.0)*sj5*x1291)));
evalcond[1]=((((-1.0)*r02*x1285))+x1289+((r01*x1280))+(((-1.0)*x1290))+(((-1.0)*sj5*x1292)));
evalcond[2]=(x1293+((r02*x1283))+(((-1.0)*x1281*x1292))+((r01*x1284))+((r00*x1282))+((r01*sj6*x1281)));
evalcond[3]=((((-1.0)*x1289))+x1290+((r11*x1284))+(((-1.0)*x1281*x1291))+((r10*x1282))+((r11*sj6*x1281))+((r12*x1283)));
evalcond[4]=((((0.0525)*cj1))+(((-1.0)*r01*x1279))+(((0.3425)*x1289))+((r00*x1286))+(((-1.0)*px))+(((-0.3425)*x1290))+(((0.293)*sj1))+(((0.0775)*x1287))+(((0.0775)*x1288)));
evalcond[5]=((((-1.0)*r11*x1279))+(((0.3425)*x1288))+(((0.3425)*x1287))+((r10*x1286))+(((0.0775)*x1290))+(((-1.0)*py))+(((-0.293)*cj1))+(((-0.0775)*x1289))+(((0.0525)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1294=(cj1*sj5);
IkReal x1295=(r01*sj6);
IkReal x1296=(cj5*r12);
IkReal x1297=(cj6*r10);
IkReal x1298=((1.0)*sj1);
IkReal x1299=(cj6*r00);
IkReal x1300=(cj5*r02);
IkReal x1301=(sj1*sj5);
IkReal x1302=(r11*sj6);
if( IKabs((((x1294*x1295))+(((-1.0)*sj5*x1297*x1298))+(((-1.0)*x1294*x1299))+(((-1.0)*x1296*x1298))+((x1301*x1302))+(((-1.0)*cj1*x1300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1294*x1302))+((x1294*x1297))+((x1295*x1301))+((cj1*x1296))+(((-1.0)*x1298*x1300))+(((-1.0)*sj5*x1298*x1299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1294*x1295))+(((-1.0)*sj5*x1297*x1298))+(((-1.0)*x1294*x1299))+(((-1.0)*x1296*x1298))+((x1301*x1302))+(((-1.0)*cj1*x1300))))+IKsqr(((((-1.0)*x1294*x1302))+((x1294*x1297))+((x1295*x1301))+((cj1*x1296))+(((-1.0)*x1298*x1300))+(((-1.0)*sj5*x1298*x1299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x1294*x1295))+(((-1.0)*sj5*x1297*x1298))+(((-1.0)*x1294*x1299))+(((-1.0)*x1296*x1298))+((x1301*x1302))+(((-1.0)*cj1*x1300))), ((((-1.0)*x1294*x1302))+((x1294*x1297))+((x1295*x1301))+((cj1*x1296))+(((-1.0)*x1298*x1300))+(((-1.0)*sj5*x1298*x1299))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1303=IKsin(j3);
IkReal x1304=IKcos(j3);
IkReal x1305=((0.076)*sj6);
IkReal x1306=(sj5*sj6);
IkReal x1307=(sj4*sj6);
IkReal x1308=(cj4*cj5);
IkReal x1309=(cj4*sj5);
IkReal x1310=(cj6*sj4);
IkReal x1311=((1.0)*cj5);
IkReal x1312=((0.076)*cj6);
IkReal x1313=(sj1*x1303);
IkReal x1314=(sj1*x1304);
IkReal x1315=(cj1*x1304);
IkReal x1316=((1.0)*cj6*r10);
IkReal x1317=((1.0)*cj6*r00);
IkReal x1318=(cj1*x1303);
IkReal x1319=((1.0)*x1318);
IkReal x1320=((1.0)*x1314);
IkReal x1321=(x1319+x1320);
evalcond[0]=(x1315+(((-1.0)*x1313))+(((-1.0)*r12*x1311))+((r11*x1306))+(((-1.0)*sj5*x1316)));
evalcond[1]=((((-1.0)*x1321))+(((-1.0)*r02*x1311))+(((-1.0)*sj5*x1317))+((r01*x1306)));
evalcond[2]=(x1313+((r01*x1310))+(((-1.0)*x1308*x1317))+((r01*sj6*x1308))+(((-1.0)*x1315))+((r02*x1309))+((r00*x1307)));
evalcond[3]=((((-1.0)*x1308*x1316))+(((-1.0)*x1321))+((r10*x1307))+((r11*x1310))+((r12*x1309))+((r11*sj6*x1308)));
evalcond[4]=(((r00*x1312))+(((-0.0525)*cj1))+(((-1.0)*r01*x1305))+(((-0.3425)*x1314))+(((-0.3425)*x1318))+(((-0.0775)*x1315))+(((-1.0)*px))+(((0.293)*sj1))+(((0.0775)*x1313)));
evalcond[5]=((((-0.3425)*x1313))+(((-0.0775)*x1314))+(((-0.0775)*x1318))+((r10*x1312))+(((-1.0)*py))+(((-0.293)*cj1))+(((-1.0)*r11*x1305))+(((-0.0525)*sj1))+(((0.3425)*x1315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1322=(cj6*sj5);
IkReal x1323=(sj5*sj6);
if( IKabs((((cj5*r22))+(((-1.0)*r21*x1323))+((r20*x1322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1323))+(((-1.0)*r00*x1322))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+(((-1.0)*r21*x1323))+((r20*x1322))))+IKsqr((((r01*x1323))+(((-1.0)*r00*x1322))+(((-1.0)*cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r22))+(((-1.0)*r21*x1323))+((r20*x1322))), (((r01*x1323))+(((-1.0)*r00*x1322))+(((-1.0)*cj5*r02))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1324=IKsin(j3);
IkReal x1325=IKcos(j3);
IkReal x1326=(sj5*sj6);
IkReal x1327=((1.0)*cj5);
IkReal x1328=(cj6*r20);
IkReal x1329=(r01*sj6);
IkReal x1330=((1.0)*sj5);
IkReal x1331=(sj4*sj6);
IkReal x1332=(cj6*r00);
IkReal x1333=(cj6*sj4);
IkReal x1334=(cj4*cj5);
IkReal x1335=(r21*sj6);
IkReal x1336=(cj4*sj5);
evalcond[0]=(x1324+(((-1.0)*r22*x1327))+(((-1.0)*x1328*x1330))+((r21*x1326)));
evalcond[1]=(((r01*x1326))+(((-1.0)*x1325))+(((-1.0)*x1330*x1332))+(((-1.0)*r02*x1327)));
evalcond[2]=((0.0525)+(((0.076)*x1328))+(((-1.0)*pz))+(((0.3425)*x1324))+(((-0.076)*x1335))+(((0.0775)*x1325)));
evalcond[3]=((0.293)+(((-0.076)*x1329))+(((-0.3425)*x1325))+(((-1.0)*px))+(((0.076)*x1332))+(((0.0775)*x1324)));
evalcond[4]=(x1325+((r20*x1331))+((r21*x1333))+(((-1.0)*cj4*x1327*x1328))+((r22*x1336))+((x1334*x1335)));
evalcond[5]=(x1324+((x1329*x1334))+((r00*x1331))+((r01*x1333))+((r02*x1336))+(((-1.0)*cj4*x1327*x1332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1337=(sj5*sj6);
IkReal x1338=((1.0)*cj5);
IkReal x1339=((1.0)*cj6*sj5);
if( IKabs(((((-1.0)*r22*x1338))+((r21*x1337))+(((-1.0)*r20*x1339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1337))+(((-1.0)*r00*x1339))+(((-1.0)*r02*x1338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1338))+((r21*x1337))+(((-1.0)*r20*x1339))))+IKsqr((((r01*x1337))+(((-1.0)*r00*x1339))+(((-1.0)*r02*x1338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r22*x1338))+((r21*x1337))+(((-1.0)*r20*x1339))), (((r01*x1337))+(((-1.0)*r00*x1339))+(((-1.0)*r02*x1338))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1340=IKsin(j3);
IkReal x1341=IKcos(j3);
IkReal x1342=(sj4*sj6);
IkReal x1343=((1.0)*cj5);
IkReal x1344=(cj6*r20);
IkReal x1345=(r01*sj6);
IkReal x1346=((1.0)*sj5);
IkReal x1347=(cj6*sj4);
IkReal x1348=(r21*sj6);
IkReal x1349=(cj6*r00);
IkReal x1350=(cj4*cj5);
IkReal x1351=(cj4*sj5);
IkReal x1352=((1.0)*x1341);
evalcond[0]=((((-1.0)*r22*x1343))+((sj5*x1348))+(((-1.0)*x1344*x1346))+(((-1.0)*x1340)));
evalcond[1]=((((-1.0)*x1352))+(((-1.0)*x1346*x1349))+(((-1.0)*r02*x1343))+((sj5*x1345)));
evalcond[2]=((-0.0525)+(((-0.076)*x1348))+(((-0.3425)*x1340))+(((0.076)*x1344))+(((-1.0)*pz))+(((-0.0775)*x1341)));
evalcond[3]=((0.293)+(((-0.076)*x1345))+(((-0.3425)*x1341))+(((0.076)*x1349))+(((-1.0)*px))+(((0.0775)*x1340)));
evalcond[4]=(x1340+((x1345*x1350))+((r02*x1351))+(((-1.0)*cj4*x1343*x1349))+((r00*x1342))+((r01*x1347)));
evalcond[5]=((((-1.0)*x1352))+((r22*x1351))+((x1348*x1350))+(((-1.0)*cj4*x1343*x1344))+((r20*x1342))+((r21*x1347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1353=((1.0)*sj5);
if( IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*x1353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1353))))+IKsqr((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*x1353))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1353))), (((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*x1353))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1354=IKsin(j3);
IkReal x1355=IKcos(j3);
IkReal x1356=((0.076)*sj6);
IkReal x1357=(r11*sj6);
IkReal x1358=(cj4*cj5);
IkReal x1359=(sj4*sj6);
IkReal x1360=(cj4*sj5);
IkReal x1361=(r01*sj6);
IkReal x1362=(cj6*sj4);
IkReal x1363=((1.0)*cj5);
IkReal x1364=((0.076)*cj6);
IkReal x1365=((1.0)*cj6*r10);
IkReal x1366=((1.0)*cj6*r00);
evalcond[0]=(((sj5*x1357))+x1354+(((-1.0)*r12*x1363))+(((-1.0)*sj5*x1365)));
evalcond[1]=((((-1.0)*x1355))+(((-1.0)*r02*x1363))+(((-1.0)*sj5*x1366))+((sj5*x1361)));
evalcond[2]=((0.293)+(((-1.0)*px))+(((-1.0)*r01*x1356))+(((0.0775)*x1354))+((r00*x1364))+(((-0.3425)*x1355)));
evalcond[3]=((0.0525)+((r10*x1364))+(((-1.0)*r11*x1356))+(((-1.0)*py))+(((0.0775)*x1355))+(((0.3425)*x1354)));
evalcond[4]=(x1354+((r02*x1360))+((x1358*x1361))+((r00*x1359))+((r01*x1362))+(((-1.0)*x1358*x1366)));
evalcond[5]=(x1355+((r10*x1359))+((x1357*x1358))+((r11*x1362))+((r12*x1360))+(((-1.0)*x1358*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1367=((1.0)*cj5);
IkReal x1368=(sj5*sj6);
IkReal x1369=((1.0)*cj6*sj5);
if( IKabs(((((-1.0)*r12*x1367))+((r11*x1368))+(((-1.0)*r10*x1369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1367))+(((-1.0)*r00*x1369))+((r01*x1368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1367))+((r11*x1368))+(((-1.0)*r10*x1369))))+IKsqr(((((-1.0)*r02*x1367))+(((-1.0)*r00*x1369))+((r01*x1368))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r12*x1367))+((r11*x1368))+(((-1.0)*r10*x1369))), ((((-1.0)*r02*x1367))+(((-1.0)*r00*x1369))+((r01*x1368))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1370=IKsin(j3);
IkReal x1371=IKcos(j3);
IkReal x1372=((0.076)*sj6);
IkReal x1373=(r11*sj6);
IkReal x1374=(cj4*cj5);
IkReal x1375=(sj4*sj6);
IkReal x1376=(cj4*sj5);
IkReal x1377=(r01*sj6);
IkReal x1378=(cj6*sj4);
IkReal x1379=((1.0)*cj5);
IkReal x1380=((0.076)*cj6);
IkReal x1381=((1.0)*x1371);
IkReal x1382=((1.0)*cj6*r10);
IkReal x1383=((1.0)*cj6*r00);
evalcond[0]=(((sj5*x1373))+(((-1.0)*sj5*x1382))+(((-1.0)*x1370))+(((-1.0)*r12*x1379)));
evalcond[1]=((((-1.0)*x1381))+((sj5*x1377))+(((-1.0)*sj5*x1383))+(((-1.0)*r02*x1379)));
evalcond[2]=((0.293)+(((-1.0)*r01*x1372))+(((-0.3425)*x1371))+(((-1.0)*px))+((r00*x1380))+(((0.0775)*x1370)));
evalcond[3]=((-0.0525)+((r10*x1380))+(((-0.0775)*x1371))+(((-0.3425)*x1370))+(((-1.0)*py))+(((-1.0)*r11*x1372)));
evalcond[4]=(x1370+((x1374*x1377))+(((-1.0)*x1374*x1383))+((r02*x1376))+((r00*x1375))+((r01*x1378)));
evalcond[5]=((((-1.0)*x1381))+((r10*x1375))+((r12*x1376))+((r11*x1378))+(((-1.0)*x1374*x1382))+((x1373*x1374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1384=((1.0)*sj5);
CheckValue<IkReal> x1385=IKPowWithIntegerCheck(cj2,-1);
if(!x1385.valid){
continue;
}
if( IKabs(((x1385.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1384)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*x1384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1385.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1384))))))+IKsqr((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*x1384))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1385.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x1384))))), (((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*x1384))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1386=IKsin(j3);
IkReal x1387=IKcos(j3);
IkReal x1388=(sj4*sj6);
IkReal x1389=((1.0)*cj6);
IkReal x1390=(cj4*cj5);
IkReal x1391=((0.076)*sj6);
IkReal x1392=(r11*sj6);
IkReal x1393=((1.0)*cj5);
IkReal x1394=(r21*sj6);
IkReal x1395=(cj4*sj5);
IkReal x1396=(r01*sj6);
IkReal x1397=(cj6*sj4);
IkReal x1398=((0.076)*cj6);
IkReal x1399=((0.0775)*x1387);
IkReal x1400=(cj2*x1386);
IkReal x1401=(sj2*x1386);
evalcond[0]=(x1401+(((-1.0)*r20*sj5*x1389))+(((-1.0)*r22*x1393))+((sj5*x1394)));
evalcond[1]=((((-1.0)*r12*x1393))+(((-1.0)*r10*sj5*x1389))+x1400+((sj5*x1392)));
evalcond[2]=((((-1.0)*r00*sj5*x1389))+(((-1.0)*r02*x1393))+(((-1.0)*x1387))+((sj5*x1396)));
evalcond[3]=((0.293)+(((0.0775)*x1386))+(((-1.0)*r01*x1391))+(((-1.0)*px))+(((-0.3425)*x1387))+((r00*x1398)));
evalcond[4]=((((0.3425)*x1401))+(((-1.0)*r21*x1391))+((r20*x1398))+(((-1.0)*pz))+((sj2*x1399))+(((0.0525)*sj2)));
evalcond[5]=(x1386+((x1390*x1396))+(((-1.0)*r00*x1389*x1390))+((r01*x1397))+((r00*x1388))+((r02*x1395)));
evalcond[6]=((((0.3425)*x1400))+(((0.0525)*cj2))+((r10*x1398))+((cj2*x1399))+(((-1.0)*py))+(((-1.0)*r11*x1391)));
evalcond[7]=(((r21*x1397))+((x1390*x1394))+((r20*x1388))+((sj2*x1387))+(((-1.0)*r20*x1389*x1390))+((r22*x1395)));
evalcond[8]=((((-1.0)*r10*x1389*x1390))+((r10*x1388))+((cj2*x1387))+((x1390*x1392))+((r11*x1397))+((r12*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1402=(cj6*sj5);
IkReal x1403=(sj5*sj6);
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(sj2,-1);
if(!x1404.valid){
continue;
}
if( IKabs(((x1404.value)*((((cj5*r22))+(((-1.0)*r21*x1403))+((r20*x1402)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1403))+(((-1.0)*r00*x1402))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1404.value)*((((cj5*r22))+(((-1.0)*r21*x1403))+((r20*x1402))))))+IKsqr((((r01*x1403))+(((-1.0)*r00*x1402))+(((-1.0)*cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1404.value)*((((cj5*r22))+(((-1.0)*r21*x1403))+((r20*x1402))))), (((r01*x1403))+(((-1.0)*r00*x1402))+(((-1.0)*cj5*r02))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1405=IKsin(j3);
IkReal x1406=IKcos(j3);
IkReal x1407=(sj4*sj6);
IkReal x1408=((1.0)*cj6);
IkReal x1409=(cj4*cj5);
IkReal x1410=((0.076)*sj6);
IkReal x1411=(r11*sj6);
IkReal x1412=((1.0)*cj5);
IkReal x1413=(r21*sj6);
IkReal x1414=(cj4*sj5);
IkReal x1415=(r01*sj6);
IkReal x1416=(cj6*sj4);
IkReal x1417=((0.076)*cj6);
IkReal x1418=((0.0775)*x1406);
IkReal x1419=(cj2*x1405);
IkReal x1420=(sj2*x1405);
evalcond[0]=(((sj5*x1413))+(((-1.0)*r22*x1412))+x1420+(((-1.0)*r20*sj5*x1408)));
evalcond[1]=(((sj5*x1411))+(((-1.0)*r10*sj5*x1408))+(((-1.0)*r12*x1412))+x1419);
evalcond[2]=((((-1.0)*x1406))+((sj5*x1415))+(((-1.0)*r00*sj5*x1408))+(((-1.0)*r02*x1412)));
evalcond[3]=((0.293)+(((-0.3425)*x1406))+((r00*x1417))+(((-1.0)*px))+(((-1.0)*r01*x1410))+(((0.0775)*x1405)));
evalcond[4]=(((sj2*x1418))+((r20*x1417))+(((0.3425)*x1420))+(((-1.0)*pz))+(((-1.0)*r21*x1410))+(((0.0525)*sj2)));
evalcond[5]=(((r00*x1407))+((r01*x1416))+x1405+(((-1.0)*r00*x1408*x1409))+((r02*x1414))+((x1409*x1415)));
evalcond[6]=(((cj2*x1418))+(((0.0525)*cj2))+(((0.3425)*x1419))+(((-1.0)*py))+(((-1.0)*r11*x1410))+((r10*x1417)));
evalcond[7]=(((r21*x1416))+(((-1.0)*r20*x1408*x1409))+((r22*x1414))+((sj2*x1406))+((r20*x1407))+((x1409*x1413)));
evalcond[8]=((((-1.0)*r10*x1408*x1409))+((r11*x1416))+((r12*x1414))+((x1409*x1411))+((r10*x1407))+((cj2*x1406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1421=(cj6*r00);
IkReal x1422=(cj5*r02);
IkReal x1423=(r01*sj6);
IkReal x1424=((4.41935483870968)*sj5);
if( IKabs(((-3.78064516129032)+(((4.41935483870968)*x1422))+(((-12.9032258064516)*px))+(((-1.0)*x1423*x1424))+(((0.980645161290323)*x1421))+((x1421*x1424))+(((-0.980645161290323)*x1423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1422+((sj5*x1421))+(((-1.0)*sj5*x1423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.78064516129032)+(((4.41935483870968)*x1422))+(((-12.9032258064516)*px))+(((-1.0)*x1423*x1424))+(((0.980645161290323)*x1421))+((x1421*x1424))+(((-0.980645161290323)*x1423))))+IKsqr((x1422+((sj5*x1421))+(((-1.0)*sj5*x1423))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.78064516129032)+(((4.41935483870968)*x1422))+(((-12.9032258064516)*px))+(((-1.0)*x1423*x1424))+(((0.980645161290323)*x1421))+((x1421*x1424))+(((-0.980645161290323)*x1423))), (x1422+((sj5*x1421))+(((-1.0)*sj5*x1423))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1425=IKsin(j3);
IkReal x1426=IKcos(j3);
IkReal x1427=(sj4*sj6);
IkReal x1428=((1.0)*cj6);
IkReal x1429=(cj4*cj5);
IkReal x1430=((0.076)*sj6);
IkReal x1431=(r11*sj6);
IkReal x1432=((1.0)*cj5);
IkReal x1433=(r21*sj6);
IkReal x1434=(cj4*sj5);
IkReal x1435=(r01*sj6);
IkReal x1436=(cj6*sj4);
IkReal x1437=((0.076)*cj6);
IkReal x1438=((0.0775)*x1426);
IkReal x1439=((1.0)*x1425);
IkReal x1440=((0.3425)*x1425);
evalcond[0]=(((sj5*x1435))+(((-1.0)*r02*x1432))+x1426+(((-1.0)*r00*sj5*x1428)));
evalcond[1]=((((-1.0)*r20*sj5*x1428))+((sj5*x1433))+(((-1.0)*r22*x1432))+((sj2*x1425)));
evalcond[2]=((((-1.0)*r12*x1432))+(((-1.0)*cj2*x1439))+((sj5*x1431))+(((-1.0)*r10*sj5*x1428)));
evalcond[3]=((-0.293)+(((0.3425)*x1426))+(((-1.0)*r01*x1430))+(((-1.0)*px))+((r00*x1437))+(((-0.0775)*x1425)));
evalcond[4]=(((sj2*x1438))+((r20*x1437))+(((-1.0)*pz))+((sj2*x1440))+(((-1.0)*r21*x1430))+(((0.0525)*sj2)));
evalcond[5]=((((-1.0)*cj2*x1440))+(((-0.0525)*cj2))+(((-1.0)*r11*x1430))+(((-1.0)*cj2*x1438))+(((-1.0)*py))+((r10*x1437)));
evalcond[6]=(((x1429*x1433))+((r21*x1436))+(((-1.0)*r20*x1428*x1429))+((sj2*x1426))+((r22*x1434))+((r20*x1427)));
evalcond[7]=(((x1429*x1435))+((r00*x1427))+((r02*x1434))+(((-1.0)*x1439))+((r01*x1436))+(((-1.0)*r00*x1428*x1429)));
evalcond[8]=(((x1429*x1431))+((r12*x1434))+((r10*x1427))+((r11*x1436))+(((-1.0)*r10*x1428*x1429))+(((-1.0)*cj2*x1426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1441=(cj6*r20);
IkReal x1442=(cj5*r22);
IkReal x1443=(r21*sj6);
IkReal x1444=((4.41935483870968)*sj5);
if( IKabs(((((-1.0)*sj5*x1443))+((sj5*x1441))+x1442)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+((x1443*x1444))+(((12.9032258064516)*pz))+(((-1.0)*x1441*x1444))+(((0.980645161290323)*x1443))+(((-0.980645161290323)*x1441))+(((-4.41935483870968)*x1442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x1443))+((sj5*x1441))+x1442))+IKsqr(((-0.67741935483871)+((x1443*x1444))+(((12.9032258064516)*pz))+(((-1.0)*x1441*x1444))+(((0.980645161290323)*x1443))+(((-0.980645161290323)*x1441))+(((-4.41935483870968)*x1442))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x1443))+((sj5*x1441))+x1442), ((-0.67741935483871)+((x1443*x1444))+(((12.9032258064516)*pz))+(((-1.0)*x1441*x1444))+(((0.980645161290323)*x1443))+(((-0.980645161290323)*x1441))+(((-4.41935483870968)*x1442))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1445=IKcos(j3);
IkReal x1446=IKsin(j3);
IkReal x1447=(sj5*sj6);
IkReal x1448=((1.0)*cj6);
IkReal x1449=(cj4*cj5);
IkReal x1450=((0.076)*sj6);
IkReal x1451=((1.0)*cj5);
IkReal x1452=(sj4*sj6);
IkReal x1453=(cj4*sj5);
IkReal x1454=(cj6*sj4);
IkReal x1455=((0.076)*cj6);
IkReal x1456=(cj1*x1445);
IkReal x1457=(sj1*x1445);
IkReal x1458=((0.0775)*x1446);
evalcond[0]=((((-1.0)*r22*x1451))+((r21*x1447))+(((-1.0)*r20*sj5*x1448))+x1446);
evalcond[1]=(((r11*x1447))+(((-1.0)*r10*sj5*x1448))+x1456+(((-1.0)*r12*x1451)));
evalcond[2]=((((-1.0)*x1457))+(((-1.0)*r02*x1451))+((r01*x1447))+(((-1.0)*r00*sj5*x1448)));
evalcond[3]=((0.0525)+(((0.0775)*x1445))+((r20*x1455))+(((-1.0)*pz))+(((0.3425)*x1446))+(((-1.0)*r21*x1450)));
evalcond[4]=(((r20*x1452))+((r21*x1454))+x1445+(((-1.0)*r20*x1448*x1449))+((r22*x1453))+((r21*sj6*x1449)));
evalcond[5]=((((-0.3425)*x1457))+(((-1.0)*px))+(((-1.0)*r01*x1450))+(((0.293)*sj1))+((r00*x1455))+((sj1*x1458)));
evalcond[6]=(((r10*x1455))+(((0.3425)*x1456))+(((-1.0)*cj1*x1458))+(((-1.0)*py))+(((-0.293)*cj1))+(((-1.0)*r11*x1450)));
evalcond[7]=(((sj1*x1446))+((r01*x1454))+((r00*x1452))+((r01*sj6*x1449))+(((-1.0)*r00*x1448*x1449))+((r02*x1453)));
evalcond[8]=(((r10*x1452))+((r11*x1454))+((r12*x1453))+(((-1.0)*r10*x1448*x1449))+(((-1.0)*cj1*x1446))+((r11*sj6*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1459=(r21*sj6);
IkReal x1460=(cj6*r20);
IkReal x1461=(cj5*r22);
IkReal x1462=((4.41935483870968)*sj5);
if( IKabs((((sj5*x1459))+(((-1.0)*x1461))+(((-1.0)*sj5*x1460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.67741935483871)+(((0.980645161290323)*x1460))+(((-12.9032258064516)*pz))+(((-1.0)*x1459*x1462))+(((-0.980645161290323)*x1459))+(((4.41935483870968)*x1461))+((x1460*x1462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x1459))+(((-1.0)*x1461))+(((-1.0)*sj5*x1460))))+IKsqr(((-0.67741935483871)+(((0.980645161290323)*x1460))+(((-12.9032258064516)*pz))+(((-1.0)*x1459*x1462))+(((-0.980645161290323)*x1459))+(((4.41935483870968)*x1461))+((x1460*x1462))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj5*x1459))+(((-1.0)*x1461))+(((-1.0)*sj5*x1460))), ((-0.67741935483871)+(((0.980645161290323)*x1460))+(((-12.9032258064516)*pz))+(((-1.0)*x1459*x1462))+(((-0.980645161290323)*x1459))+(((4.41935483870968)*x1461))+((x1460*x1462))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1463=IKcos(j3);
IkReal x1464=IKsin(j3);
IkReal x1465=(sj4*sj6);
IkReal x1466=(cj4*sj5);
IkReal x1467=((1.0)*cj6);
IkReal x1468=(cj4*cj5);
IkReal x1469=((0.076)*sj6);
IkReal x1470=(r11*sj6);
IkReal x1471=((1.0)*cj5);
IkReal x1472=(r21*sj6);
IkReal x1473=(r01*sj6);
IkReal x1474=(cj6*sj4);
IkReal x1475=((0.076)*cj6);
IkReal x1476=(cj1*x1463);
IkReal x1477=(sj1*x1463);
IkReal x1478=((0.0775)*x1464);
IkReal x1479=((1.0)*x1464);
evalcond[0]=((((-1.0)*r22*x1471))+((sj5*x1472))+(((-1.0)*x1479))+(((-1.0)*r20*sj5*x1467)));
evalcond[1]=((((-1.0)*r12*x1471))+((sj5*x1470))+(((-1.0)*r10*sj5*x1467))+x1476);
evalcond[2]=((((-1.0)*x1477))+(((-1.0)*r00*sj5*x1467))+((sj5*x1473))+(((-1.0)*r02*x1471)));
evalcond[3]=((-0.0525)+(((-0.3425)*x1464))+(((-1.0)*pz))+(((-1.0)*r21*x1469))+((r20*x1475))+(((-0.0775)*x1463)));
evalcond[4]=(((sj1*x1478))+(((-1.0)*px))+(((-1.0)*r01*x1469))+(((-0.3425)*x1477))+(((0.293)*sj1))+((r00*x1475)));
evalcond[5]=(((r10*x1475))+(((-1.0)*py))+(((-0.293)*cj1))+(((-1.0)*cj1*x1478))+(((0.3425)*x1476))+(((-1.0)*r11*x1469)));
evalcond[6]=((((-1.0)*r20*x1467*x1468))+((r20*x1465))+((r21*x1474))+((r22*x1466))+((x1468*x1472))+(((-1.0)*x1463)));
evalcond[7]=(((r00*x1465))+((sj1*x1464))+((r01*x1474))+((r02*x1466))+(((-1.0)*r00*x1467*x1468))+((x1468*x1473)));
evalcond[8]=(((r11*x1474))+((r12*x1466))+(((-1.0)*cj1*x1479))+(((-1.0)*r10*x1467*x1468))+((r10*x1465))+((x1468*x1470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1486=IKPowWithIntegerCheck(sj2,-1);
if(!x1486.valid){
continue;
}
IkReal x1480=x1486.value;
IkReal x1481=(cj5*r22);
IkReal x1482=(sj2*sj5);
IkReal x1483=((1.0)*cj2*sj1);
IkReal x1484=(cj6*r20*sj5);
IkReal x1485=(r21*sj5*sj6);
CheckValue<IkReal> x1487=IKPowWithIntegerCheck(cj1,-1);
if(!x1487.valid){
continue;
}
if( IKabs((x1480*(((((-1.0)*x1485))+x1481+x1484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1480*(x1487.value)*((((cj5*r12*sj2))+(((-1.0)*x1481*x1483))+(((-1.0)*r11*sj6*x1482))+((cj6*r10*x1482))+(((-1.0)*x1483*x1484))+((cj2*sj1*x1485)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1480*(((((-1.0)*x1485))+x1481+x1484))))+IKsqr((x1480*(x1487.value)*((((cj5*r12*sj2))+(((-1.0)*x1481*x1483))+(((-1.0)*r11*sj6*x1482))+((cj6*r10*x1482))+(((-1.0)*x1483*x1484))+((cj2*sj1*x1485))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1480*(((((-1.0)*x1485))+x1481+x1484))), (x1480*(x1487.value)*((((cj5*r12*sj2))+(((-1.0)*x1481*x1483))+(((-1.0)*r11*sj6*x1482))+((cj6*r10*x1482))+(((-1.0)*x1483*x1484))+((cj2*sj1*x1485))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1488=IKsin(j3);
IkReal x1489=IKcos(j3);
IkReal x1490=(sj4*sj6);
IkReal x1491=((1.0)*cj6);
IkReal x1492=(cj4*cj5);
IkReal x1493=((0.076)*sj6);
IkReal x1494=((0.3425)*cj1);
IkReal x1495=(sj5*sj6);
IkReal x1496=((1.0)*cj5);
IkReal x1497=(cj4*sj5);
IkReal x1498=((0.0775)*cj2);
IkReal x1499=(cj6*sj4);
IkReal x1500=((0.0525)*cj2);
IkReal x1501=((0.076)*cj6);
IkReal x1502=(sj1*x1488);
IkReal x1503=(cj2*x1488);
IkReal x1504=(sj2*x1489);
IkReal x1505=(cj1*x1489);
IkReal x1506=(sj1*x1489);
IkReal x1507=(sj2*x1488);
IkReal x1508=(cj1*x1488);
evalcond[0]=(((r21*x1495))+x1507+(((-1.0)*r22*x1496))+(((-1.0)*r20*sj5*x1491)));
evalcond[1]=((((-1.0)*r12*x1496))+(((-1.0)*r10*sj5*x1491))+((cj2*x1502))+((r11*x1495))+x1505);
evalcond[2]=((((-1.0)*x1506))+((r01*x1495))+((cj1*x1503))+(((-1.0)*r02*x1496))+(((-1.0)*r00*sj5*x1491)));
evalcond[3]=((((0.3425)*x1507))+(((-1.0)*r21*x1493))+((r20*x1501))+(((0.0775)*x1504))+(((-1.0)*pz))+(((0.0525)*sj2)));
evalcond[4]=(((r20*x1490))+((r21*x1499))+(((-1.0)*r20*x1491*x1492))+x1504+((r22*x1497))+((r21*sj6*x1492)));
evalcond[5]=(((r00*x1490))+((cj2*x1505))+(((-1.0)*r00*x1491*x1492))+((r01*x1499))+x1502+((r01*sj6*x1492))+((r02*x1497)));
evalcond[6]=(((r10*x1490))+(((-1.0)*x1508))+((cj2*x1506))+((r12*x1497))+((r11*x1499))+((r11*sj6*x1492))+(((-1.0)*r10*x1491*x1492)));
evalcond[7]=(((x1494*x1503))+((x1498*x1505))+(((-1.0)*r01*x1493))+(((0.0775)*x1502))+((r00*x1501))+((cj1*x1500))+(((-1.0)*px))+(((0.293)*sj1))+(((-0.3425)*x1506)));
evalcond[8]=(((x1498*x1506))+((x1489*x1494))+(((-1.0)*r11*x1493))+((r10*x1501))+((sj1*x1500))+(((-1.0)*py))+(((-0.293)*cj1))+(((-0.0775)*x1508))+(((0.3425)*cj2*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(sj2,-1);
if(!x1514.valid){
continue;
}
IkReal x1509=x1514.value;
IkReal x1510=(r21*sj6);
IkReal x1511=((137.0)*sj5);
IkReal x1512=(cj5*r22);
IkReal x1513=(cj6*r20);
if( IKabs((x1509*((((sj5*x1513))+x1512+(((-1.0)*sj5*x1510)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.032258064516129)*x1509*(((((30.4)*x1510))+((x1510*x1511))+(((400.0)*pz))+(((-21.0)*sj2))+(((-30.4)*x1513))+(((-137.0)*x1512))+(((-1.0)*x1511*x1513)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1509*((((sj5*x1513))+x1512+(((-1.0)*sj5*x1510))))))+IKsqr(((0.032258064516129)*x1509*(((((30.4)*x1510))+((x1510*x1511))+(((400.0)*pz))+(((-21.0)*sj2))+(((-30.4)*x1513))+(((-137.0)*x1512))+(((-1.0)*x1511*x1513))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1509*((((sj5*x1513))+x1512+(((-1.0)*sj5*x1510))))), ((0.032258064516129)*x1509*(((((30.4)*x1510))+((x1510*x1511))+(((400.0)*pz))+(((-21.0)*sj2))+(((-30.4)*x1513))+(((-137.0)*x1512))+(((-1.0)*x1511*x1513))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1515=IKsin(j3);
IkReal x1516=IKcos(j3);
IkReal x1517=(sj4*sj6);
IkReal x1518=((1.0)*cj6);
IkReal x1519=(cj4*cj5);
IkReal x1520=((0.076)*sj6);
IkReal x1521=((0.3425)*cj1);
IkReal x1522=(sj5*sj6);
IkReal x1523=((1.0)*cj5);
IkReal x1524=(cj4*sj5);
IkReal x1525=((0.0775)*cj2);
IkReal x1526=(cj6*sj4);
IkReal x1527=((0.0525)*cj2);
IkReal x1528=((0.076)*cj6);
IkReal x1529=(sj1*x1515);
IkReal x1530=(cj2*x1515);
IkReal x1531=(sj2*x1516);
IkReal x1532=(cj1*x1516);
IkReal x1533=(sj1*x1516);
IkReal x1534=(sj2*x1515);
IkReal x1535=(cj1*x1515);
evalcond[0]=((((-1.0)*r22*x1523))+x1534+(((-1.0)*r20*sj5*x1518))+((r21*x1522)));
evalcond[1]=((((-1.0)*r12*x1523))+((r11*x1522))+((cj2*x1529))+x1532+(((-1.0)*r10*sj5*x1518)));
evalcond[2]=((((-1.0)*x1533))+((cj1*x1530))+((r01*x1522))+(((-1.0)*r02*x1523))+(((-1.0)*r00*sj5*x1518)));
evalcond[3]=((((0.3425)*x1534))+(((0.0775)*x1531))+((r20*x1528))+(((-1.0)*pz))+(((0.0525)*sj2))+(((-1.0)*r21*x1520)));
evalcond[4]=(((r20*x1517))+(((-1.0)*r20*x1518*x1519))+x1531+((r21*x1526))+((r21*sj6*x1519))+((r22*x1524)));
evalcond[5]=((((-1.0)*r00*x1518*x1519))+((r01*sj6*x1519))+((cj2*x1532))+((r01*x1526))+((r00*x1517))+x1529+((r02*x1524)));
evalcond[6]=((((-1.0)*x1535))+((r12*x1524))+((r11*x1526))+((cj2*x1533))+((r10*x1517))+((r11*sj6*x1519))+(((-1.0)*r10*x1518*x1519)));
evalcond[7]=(((x1525*x1532))+(((-1.0)*r01*x1520))+((r00*x1528))+((cj1*x1527))+(((0.0775)*x1529))+(((-1.0)*px))+(((0.293)*sj1))+((x1521*x1530))+(((-0.3425)*x1533)));
evalcond[8]=(((x1525*x1533))+((r10*x1528))+(((-1.0)*r11*x1520))+((sj1*x1527))+(((-1.0)*py))+(((-0.293)*cj1))+(((-0.0775)*x1535))+((x1516*x1521))+(((0.3425)*cj2*x1529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1536=(cj5*r12);
IkReal x1537=(cj6*sj5);
IkReal x1538=((1.0)*sj1);
IkReal x1539=(cj5*r02);
IkReal x1540=((1.0)*cj1);
IkReal x1541=(r01*sj5*sj6);
IkReal x1542=(r11*sj5*sj6);
CheckValue<IkReal> x1543=IKPowWithIntegerCheck(cj2,-1);
if(!x1543.valid){
continue;
}
if( IKabs(((x1543.value)*((((r10*sj1*x1537))+(((-1.0)*x1540*x1541))+((cj1*x1539))+((cj1*r00*x1537))+((sj1*x1536))+(((-1.0)*x1538*x1542)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r10*x1537))+(((-1.0)*x1540*x1542))+((cj1*x1536))+(((-1.0)*r00*x1537*x1538))+((sj1*x1541))+(((-1.0)*x1538*x1539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1543.value)*((((r10*sj1*x1537))+(((-1.0)*x1540*x1541))+((cj1*x1539))+((cj1*r00*x1537))+((sj1*x1536))+(((-1.0)*x1538*x1542))))))+IKsqr((((cj1*r10*x1537))+(((-1.0)*x1540*x1542))+((cj1*x1536))+(((-1.0)*r00*x1537*x1538))+((sj1*x1541))+(((-1.0)*x1538*x1539))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1543.value)*((((r10*sj1*x1537))+(((-1.0)*x1540*x1541))+((cj1*x1539))+((cj1*r00*x1537))+((sj1*x1536))+(((-1.0)*x1538*x1542))))), (((cj1*r10*x1537))+(((-1.0)*x1540*x1542))+((cj1*x1536))+(((-1.0)*r00*x1537*x1538))+((sj1*x1541))+(((-1.0)*x1538*x1539))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1544=IKsin(j3);
IkReal x1545=IKcos(j3);
IkReal x1546=(sj4*sj6);
IkReal x1547=((1.0)*cj6);
IkReal x1548=(cj4*cj5);
IkReal x1549=((0.076)*sj6);
IkReal x1550=((0.3425)*cj1);
IkReal x1551=(sj5*sj6);
IkReal x1552=((1.0)*cj5);
IkReal x1553=(cj4*sj5);
IkReal x1554=((0.0775)*cj2);
IkReal x1555=(cj6*sj4);
IkReal x1556=((0.0525)*cj2);
IkReal x1557=((0.076)*cj6);
IkReal x1558=(sj1*x1544);
IkReal x1559=(cj2*x1544);
IkReal x1560=(sj2*x1545);
IkReal x1561=(cj1*x1545);
IkReal x1562=(sj1*x1545);
IkReal x1563=(sj2*x1544);
IkReal x1564=(cj1*x1544);
evalcond[0]=((((-1.0)*r22*x1552))+x1563+((r21*x1551))+(((-1.0)*r20*sj5*x1547)));
evalcond[1]=(((cj2*x1558))+((r11*x1551))+(((-1.0)*r10*sj5*x1547))+x1561+(((-1.0)*r12*x1552)));
evalcond[2]=(((r01*x1551))+((cj1*x1559))+(((-1.0)*r02*x1552))+(((-1.0)*x1562))+(((-1.0)*r00*sj5*x1547)));
evalcond[3]=((((0.0775)*x1560))+(((0.3425)*x1563))+(((-1.0)*pz))+(((-1.0)*r21*x1549))+(((0.0525)*sj2))+((r20*x1557)));
evalcond[4]=((((-1.0)*r20*x1547*x1548))+((r22*x1553))+x1560+((r21*sj6*x1548))+((r21*x1555))+((r20*x1546)));
evalcond[5]=(((r01*x1555))+((cj2*x1561))+x1558+((r02*x1553))+(((-1.0)*r00*x1547*x1548))+((r01*sj6*x1548))+((r00*x1546)));
evalcond[6]=(((r11*sj6*x1548))+(((-1.0)*r10*x1547*x1548))+((r11*x1555))+((cj2*x1562))+((r12*x1553))+((r10*x1546))+(((-1.0)*x1564)));
evalcond[7]=(((r00*x1557))+((x1550*x1559))+((cj1*x1556))+((x1554*x1561))+(((0.0775)*x1558))+(((-1.0)*px))+(((-0.3425)*x1562))+(((-1.0)*r01*x1549))+(((0.293)*sj1)));
evalcond[8]=((((-0.0775)*x1564))+(((0.3425)*cj2*x1558))+((x1554*x1562))+(((-1.0)*py))+(((-0.293)*cj1))+((sj1*x1556))+(((-1.0)*r11*x1549))+((r10*x1557))+((x1545*x1550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - xarm7_with_gripper (b0c22985b5978e1acf2a611482b6a182)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
